/*! For license information please see Main1.js.LICENSE.txt */
!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="webpack/",n(n.s=41)}([function(e,t,n){"use strict";e.exports=n(35)},,,,,function(e,t,n){"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE){0;try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}}(),e.exports=n(36)},,,function(e,t){function n(t){return e.exports=n=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},e.exports.__esModule=!0,e.exports.default=e.exports,n(t)}e.exports=n,e.exports.__esModule=!0,e.exports.default=e.exports},,function(e,t){e.exports=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")},e.exports.__esModule=!0,e.exports.default=e.exports},function(e,t){function n(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}e.exports=function(e,t,r){return t&&n(e.prototype,t),r&&n(e,r),Object.defineProperty(e,"prototype",{writable:!1}),e},e.exports.__esModule=!0,e.exports.default=e.exports},,function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){var r=n(45);e.exports=function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&r(e,t)},e.exports.__esModule=!0,e.exports.default=e.exports},function(e,t,n){var r=n(46).default,o=n(47);e.exports=function(e,t){if(t&&("object"===r(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return o(e)},e.exports.__esModule=!0,e.exports.default=e.exports},,function(e,t,n){"use strict";n.r(t);var r=n(19),o=n.n(r),i=n(5),a=n.n(i),l=n(43),u={ReactDOM:o.a,ReactDOM2:a.a,PrimaryButton:l.a};t.default=u},,function(e,t,n){"use strict";var r=n(5);t.createRoot=r.createRoot,t.hydrateRoot=r.hydrateRoot},function(e,t,n){"use strict";(function(e){n.d(t,"a",(function(){return u}));var r=function(){return(r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},o="undefined"==typeof window?e:window,i=o&&o.CSPSettings&&o.CSPSettings.nonce,a=function(){var e=o.__themeState__||{theme:void 0,lastStyleElement:void 0,registeredStyles:[]};e.runState||(e=r(r({},e),{perf:{count:0,duration:0},runState:{flushTimer:0,mode:0,buffer:[]}}));e.registeredThemableStyles||(e=r(r({},e),{registeredThemableStyles:[]}));return o.__themeState__=e,e}();function l(e,t){a.loadStyles?a.loadStyles(c(e).styleString,e):function(e){if("undefined"==typeof document)return;var t=document.getElementsByTagName("head")[0],n=document.createElement("style"),r=c(e),o=r.styleString,l=r.themable;n.setAttribute("data-load-themed-styles","true"),i&&n.setAttribute("nonce",i);n.appendChild(document.createTextNode(o)),a.perf.count++,t.appendChild(n);var u=document.createEvent("HTMLEvents");u.initEvent("styleinsert",!0,!1),u.args={newStyle:n},document.dispatchEvent(u);var s={styleElement:n,themableStyle:e};l?a.registeredThemableStyles.push(s):a.registeredStyles.push(s)}(e)}function u(e){a.theme=e,function(){if(a.theme){for(var e=[],t=0,n=a.registeredThemableStyles;t<n.length;t++){var r=n[t];e.push(r.themableStyle)}e.length>0&&(!function(e){void 0===e&&(e=3);3!==e&&2!==e||(s(a.registeredStyles),a.registeredStyles=[]);3!==e&&1!==e||(s(a.registeredThemableStyles),a.registeredThemableStyles=[])}(1),l([].concat.apply([],e)))}}()}function s(e){e.forEach((function(e){var t=e&&e.styleElement;t&&t.parentElement&&t.parentElement.removeChild(t)}))}function c(e){var t=a.theme,n=!1;return{styleString:(e||[]).map((function(e){var r=e.theme;if(r){n=!0;var o=t?t[r]:void 0,i=e.defaultValue||"inherit";return t&&!o&&console&&!(r in t)&&"undefined"!=typeof DEBUG&&DEBUG&&console.warn('Theming value not provided for "'.concat(r,'". Falling back to "').concat(i,'".')),o||i}return e.rawString})).join(""),themable:n}}}).call(this,n(13))},function(e,t,n){"use strict";n.d(t,"a",(function(){return i}));var r={},o=void 0;try{o=window}catch(e){}function i(e,t){if(void 0!==o){var n=o.__packages__=o.__packages__||{};if(!n[e]||!r[e])r[e]=t,(n[e]=n[e]||[]).push(t)}}i("@fluentui/set-version","6.0.0")},function(e,t){var n,r,o=e.exports={};function i(){throw new Error("setTimeout has not been defined")}function a(){throw new Error("clearTimeout has not been defined")}function l(e){if(n===setTimeout)return setTimeout(e,0);if((n===i||!n)&&setTimeout)return n=setTimeout,setTimeout(e,0);try{return n(e,0)}catch(t){try{return n.call(null,e,0)}catch(t){return n.call(this,e,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:i}catch(e){n=i}try{r="function"==typeof clearTimeout?clearTimeout:a}catch(e){r=a}}();var u,s=[],c=!1,d=-1;function f(){c&&u&&(c=!1,u.length?s=u.concat(s):d=-1,s.length&&p())}function p(){if(!c){var e=l(f);c=!0;for(var t=s.length;t;){for(u=s,s=[];++d<t;)u&&u[d].run();d=-1,t=s.length}u=null,c=!1,function(e){if(r===clearTimeout)return clearTimeout(e);if((r===a||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(e);try{r(e)}catch(t){try{return r.call(null,e)}catch(t){return r.call(this,e)}}}(e)}}function m(e,t){this.fun=e,this.array=t}function h(){}o.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];s.push(new m(e,t)),1!==s.length||c||l(p)},m.prototype.run=function(){this.fun.apply(null,this.array)},o.title="browser",o.browser=!0,o.env={},o.argv=[],o.version="",o.versions={},o.on=h,o.addListener=h,o.once=h,o.off=h,o.removeListener=h,o.removeAllListeners=h,o.emit=h,o.prependListener=h,o.prependOnceListener=h,o.listeners=function(e){return[]},o.binding=function(e){throw new Error("process.binding is not supported")},o.cwd=function(){return"/"},o.chdir=function(e){throw new Error("process.chdir is not supported")},o.umask=function(){return 0}},,,,,,,,,,,,,function(e,t,n){"use strict";var r=Symbol.for("react.element"),o=Symbol.for("react.portal"),i=Symbol.for("react.fragment"),a=Symbol.for("react.strict_mode"),l=Symbol.for("react.profiler"),u=Symbol.for("react.provider"),s=Symbol.for("react.context"),c=Symbol.for("react.forward_ref"),d=Symbol.for("react.suspense"),f=Symbol.for("react.memo"),p=Symbol.for("react.lazy"),m=Symbol.iterator;var h={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},v=Object.assign,g={};function y(e,t,n){this.props=e,this.context=t,this.refs=g,this.updater=n||h}function b(){}function _(e,t,n){this.props=e,this.context=t,this.refs=g,this.updater=n||h}y.prototype.isReactComponent={},y.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");this.updater.enqueueSetState(this,e,t,"setState")},y.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},b.prototype=y.prototype;var k=_.prototype=new b;k.constructor=_,v(k,y.prototype),k.isPureReactComponent=!0;var C=Array.isArray,w=Object.prototype.hasOwnProperty,x={current:null},E={key:!0,ref:!0,__self:!0,__source:!0};function S(e,t,n){var o,i={},a=null,l=null;if(null!=t)for(o in void 0!==t.ref&&(l=t.ref),void 0!==t.key&&(a=""+t.key),t)w.call(t,o)&&!E.hasOwnProperty(o)&&(i[o]=t[o]);var u=arguments.length-2;if(1===u)i.children=n;else if(1<u){for(var s=Array(u),c=0;c<u;c++)s[c]=arguments[c+2];i.children=s}if(e&&e.defaultProps)for(o in u=e.defaultProps)void 0===i[o]&&(i[o]=u[o]);return{$$typeof:r,type:e,key:a,ref:l,props:i,_owner:x.current}}function I(e){return"object"==typeof e&&null!==e&&e.$$typeof===r}var T=/\/+/g;function P(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,(function(e){return t[e]}))}(""+e.key):t.toString(36)}function M(e,t,n,i,a){var l=typeof e;"undefined"!==l&&"boolean"!==l||(e=null);var u=!1;if(null===e)u=!0;else switch(l){case"string":case"number":u=!0;break;case"object":switch(e.$$typeof){case r:case o:u=!0}}if(u)return a=a(u=e),e=""===i?"."+P(u,0):i,C(a)?(n="",null!=e&&(n=e.replace(T,"$&/")+"/"),M(a,t,n,"",(function(e){return e}))):null!=a&&(I(a)&&(a=function(e,t){return{$$typeof:r,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(a,n+(!a.key||u&&u.key===a.key?"":(""+a.key).replace(T,"$&/")+"/")+e)),t.push(a)),1;if(u=0,i=""===i?".":i+":",C(e))for(var s=0;s<e.length;s++){var c=i+P(l=e[s],s);u+=M(l,t,n,c,a)}else if("function"==typeof(c=function(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=m&&e[m]||e["@@iterator"])?e:null}(e)))for(e=c.call(e),s=0;!(l=e.next()).done;)u+=M(l=l.value,t,n,c=i+P(l,s++),a);else if("object"===l)throw t=String(e),Error("Objects are not valid as a React child (found: "+("[object Object]"===t?"object with keys {"+Object.keys(e).join(", ")+"}":t)+"). If you meant to render a collection of children, use an array instead.");return u}function D(e,t,n){if(null==e)return e;var r=[],o=0;return M(e,r,"","",(function(e){return t.call(n,e,o++)})),r}function N(e){if(-1===e._status){var t=e._result;(t=t()).then((function(t){0!==e._status&&-1!==e._status||(e._status=1,e._result=t)}),(function(t){0!==e._status&&-1!==e._status||(e._status=2,e._result=t)})),-1===e._status&&(e._status=0,e._result=t)}if(1===e._status)return e._result.default;throw e._result}var R={current:null},F={transition:null},B={ReactCurrentDispatcher:R,ReactCurrentBatchConfig:F,ReactCurrentOwner:x};t.Children={map:D,forEach:function(e,t,n){D(e,(function(){t.apply(this,arguments)}),n)},count:function(e){var t=0;return D(e,(function(){t++})),t},toArray:function(e){return D(e,(function(e){return e}))||[]},only:function(e){if(!I(e))throw Error("React.Children.only expected to receive a single React element child.");return e}},t.Component=y,t.Fragment=i,t.Profiler=l,t.PureComponent=_,t.StrictMode=a,t.Suspense=d,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=B,t.cloneElement=function(e,t,n){if(null==e)throw Error("React.cloneElement(...): The argument must be a React element, but you passed "+e+".");var o=v({},e.props),i=e.key,a=e.ref,l=e._owner;if(null!=t){if(void 0!==t.ref&&(a=t.ref,l=x.current),void 0!==t.key&&(i=""+t.key),e.type&&e.type.defaultProps)var u=e.type.defaultProps;for(s in t)w.call(t,s)&&!E.hasOwnProperty(s)&&(o[s]=void 0===t[s]&&void 0!==u?u[s]:t[s])}var s=arguments.length-2;if(1===s)o.children=n;else if(1<s){u=Array(s);for(var c=0;c<s;c++)u[c]=arguments[c+2];o.children=u}return{$$typeof:r,type:e.type,key:i,ref:a,props:o,_owner:l}},t.createContext=function(e){return(e={$$typeof:s,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null,_defaultValue:null,_globalName:null}).Provider={$$typeof:u,_context:e},e.Consumer=e},t.createElement=S,t.createFactory=function(e){var t=S.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:c,render:e}},t.isValidElement=I,t.lazy=function(e){return{$$typeof:p,_payload:{_status:-1,_result:e},_init:N}},t.memo=function(e,t){return{$$typeof:f,type:e,compare:void 0===t?null:t}},t.startTransition=function(e){var t=F.transition;F.transition={};try{e()}finally{F.transition=t}},t.unstable_act=function(){throw Error("act(...) is not supported in production builds of React.")},t.useCallback=function(e,t){return R.current.useCallback(e,t)},t.useContext=function(e){return R.current.useContext(e)},t.useDebugValue=function(){},t.useDeferredValue=function(e){return R.current.useDeferredValue(e)},t.useEffect=function(e,t){return R.current.useEffect(e,t)},t.useId=function(){return R.current.useId()},t.useImperativeHandle=function(e,t,n){return R.current.useImperativeHandle(e,t,n)},t.useInsertionEffect=function(e,t){return R.current.useInsertionEffect(e,t)},t.useLayoutEffect=function(e,t){return R.current.useLayoutEffect(e,t)},t.useMemo=function(e,t){return R.current.useMemo(e,t)},t.useReducer=function(e,t,n){return R.current.useReducer(e,t,n)},t.useRef=function(e){return R.current.useRef(e)},t.useState=function(e){return R.current.useState(e)},t.useSyncExternalStore=function(e,t,n){return R.current.useSyncExternalStore(e,t,n)},t.useTransition=function(){return R.current.useTransition()},t.version="18.0.0-fc46dba67-20220329"},function(e,t,n){"use strict";var r=n(0),o=n(37);function i(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var a=new Set,l={};function u(e,t){s(e,t),s(e+"Capture",t)}function s(e,t){for(l[e]=t,e=0;e<t.length;e++)a.add(t[e])}var c=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),d=Object.prototype.hasOwnProperty,f=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,p={},m={};function h(e,t,n,r,o,i,a){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=o,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=i,this.removeEmptyString=a}var v={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){v[e]=new h(e,0,!1,e,null,!1,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];v[t]=new h(t,1,!1,e[1],null,!1,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){v[e]=new h(e,2,!1,e.toLowerCase(),null,!1,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){v[e]=new h(e,2,!1,e,null,!1,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){v[e]=new h(e,3,!1,e.toLowerCase(),null,!1,!1)})),["checked","multiple","muted","selected"].forEach((function(e){v[e]=new h(e,3,!0,e,null,!1,!1)})),["capture","download"].forEach((function(e){v[e]=new h(e,4,!1,e,null,!1,!1)})),["cols","rows","size","span"].forEach((function(e){v[e]=new h(e,6,!1,e,null,!1,!1)})),["rowSpan","start"].forEach((function(e){v[e]=new h(e,5,!1,e.toLowerCase(),null,!1,!1)}));var g=/[\-:]([a-z])/g;function y(e){return e[1].toUpperCase()}function b(e,t,n,r){var o=v.hasOwnProperty(t)?v[t]:null;(null!==o?0!==o.type:r||!(2<t.length)||"o"!==t[0]&&"O"!==t[0]||"n"!==t[1]&&"N"!==t[1])&&(function(e,t,n,r){if(null==t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,o,r)&&(n=null),r||null===o?function(e){return!!d.call(m,e)||!d.call(p,e)&&(f.test(e)?m[e]=!0:(p[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):o.mustUseProperty?e[o.propertyName]=null===n?3!==o.type&&"":n:(t=o.attributeName,r=o.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(o=o.type)||4===o&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(g,y);v[t]=new h(t,1,!1,e,null,!1,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(g,y);v[t]=new h(t,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(g,y);v[t]=new h(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)})),["tabIndex","crossOrigin"].forEach((function(e){v[e]=new h(e,1,!1,e.toLowerCase(),null,!1,!1)})),v.xlinkHref=new h("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1),["src","href","action","formAction"].forEach((function(e){v[e]=new h(e,1,!1,e.toLowerCase(),null,!0,!0)}));var _=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,k=Symbol.for("react.element"),C=Symbol.for("react.portal"),w=Symbol.for("react.fragment"),x=Symbol.for("react.strict_mode"),E=Symbol.for("react.profiler"),S=Symbol.for("react.provider"),I=Symbol.for("react.context"),T=Symbol.for("react.forward_ref"),P=Symbol.for("react.suspense"),M=Symbol.for("react.suspense_list"),D=Symbol.for("react.memo"),N=Symbol.for("react.lazy");Symbol.for("react.scope"),Symbol.for("react.debug_trace_mode");var R=Symbol.for("react.offscreen");Symbol.for("react.legacy_hidden"),Symbol.for("react.cache"),Symbol.for("react.tracing_marker");var F=Symbol.iterator;function B(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=F&&e[F]||e["@@iterator"])?e:null}var L,O=Object.assign;function A(e){if(void 0===L)try{throw Error()}catch(e){var t=e.stack.trim().match(/\n( *(at )?)/);L=t&&t[1]||""}return"\n"+L+e}var z=!1;function H(e,t){if(!e||z)return"";z=!0;var n=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(t)if(t=function(){throw Error()},Object.defineProperty(t.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(t,[])}catch(e){var r=e}Reflect.construct(e,[],t)}else{try{t.call()}catch(e){r=e}e.call(t.prototype)}else{try{throw Error()}catch(e){r=e}e()}}catch(t){if(t&&r&&"string"==typeof t.stack){for(var o=t.stack.split("\n"),i=r.stack.split("\n"),a=o.length-1,l=i.length-1;1<=a&&0<=l&&o[a]!==i[l];)l--;for(;1<=a&&0<=l;a--,l--)if(o[a]!==i[l]){if(1!==a||1!==l)do{if(a--,0>--l||o[a]!==i[l]){var u="\n"+o[a].replace(" at new "," at ");return e.displayName&&u.includes("<anonymous>")&&(u=u.replace("<anonymous>",e.displayName)),u}}while(1<=a&&0<=l);break}}}finally{z=!1,Error.prepareStackTrace=n}return(e=e?e.displayName||e.name:"")?A(e):""}function U(e){switch(e.tag){case 5:return A(e.type);case 16:return A("Lazy");case 13:return A("Suspense");case 19:return A("SuspenseList");case 0:case 2:case 15:return e=H(e.type,!1);case 11:return e=H(e.type.render,!1);case 1:return e=H(e.type,!0);default:return""}}function W(e){var t=e.type;switch(e.tag){case 24:return"Cache";case 9:return(t.displayName||"Context")+".Consumer";case 10:return(t._context.displayName||"Context")+".Provider";case 18:return"DehydratedFragment";case 11:return e=(e=t.render).displayName||e.name||"",t.displayName||(""!==e?"ForwardRef("+e+")":"ForwardRef");case 7:return"Fragment";case 5:return t;case 4:return"Portal";case 3:return"Root";case 6:return"Text";case 16:return function e(t){if(null==t)return null;if("function"==typeof t)return t.displayName||t.name||null;if("string"==typeof t)return t;switch(t){case w:return"Fragment";case C:return"Portal";case E:return"Profiler";case x:return"StrictMode";case P:return"Suspense";case M:return"SuspenseList"}if("object"==typeof t)switch(t.$$typeof){case I:return(t.displayName||"Context")+".Consumer";case S:return(t._context.displayName||"Context")+".Provider";case T:var n=t.render;return(t=t.displayName)||(t=""!==(t=n.displayName||n.name||"")?"ForwardRef("+t+")":"ForwardRef"),t;case D:return null!==(n=t.displayName||null)?n:e(t.type)||"Memo";case N:n=t._payload,t=t._init;try{return e(t(n))}catch(e){}}return null}(t);case 8:return t===x?"StrictMode":"Mode";case 22:return"Offscreen";case 12:return"Profiler";case 21:return"Scope";case 13:return"Suspense";case 19:return"SuspenseList";case 25:return"TracingMarker";case 1:case 0:case 17:case 2:case 14:case 15:if("function"==typeof t)return t.displayName||t.name||null;if("string"==typeof t)return t}return null}function j(e){switch(typeof e){case"boolean":case"number":case"string":case"undefined":case"object":return e;default:return""}}function K(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function V(e){e._valueTracker||(e._valueTracker=function(e){var t=K(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var o=n.get,i=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return o.call(this)},set:function(e){r=""+e,i.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function q(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=K(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function $(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function Q(e,t){var n=t.checked;return O({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function G(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=j(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function Y(e,t){null!=(t=t.checked)&&b(e,"checked",t,!1)}function Z(e,t){Y(e,t);var n=j(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?J(e,t.type,n):t.hasOwnProperty("defaultValue")&&J(e,t.type,j(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function X(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function J(e,t,n){"number"===t&&$(e.ownerDocument)===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}var ee=Array.isArray;function te(e,t,n,r){if(e=e.options,t){t={};for(var o=0;o<n.length;o++)t["$"+n[o]]=!0;for(n=0;n<e.length;n++)o=t.hasOwnProperty("$"+e[n].value),e[n].selected!==o&&(e[n].selected=o),o&&r&&(e[n].defaultSelected=!0)}else{for(n=""+j(n),t=null,o=0;o<e.length;o++){if(e[o].value===n)return e[o].selected=!0,void(r&&(e[o].defaultSelected=!0));null!==t||e[o].disabled||(t=e[o])}null!==t&&(t.selected=!0)}}function ne(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(i(91));return O({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function re(e,t){var n=t.value;if(null==n){if(n=t.children,t=t.defaultValue,null!=n){if(null!=t)throw Error(i(92));if(ee(n)){if(1<n.length)throw Error(i(93));n=n[0]}t=n}null==t&&(t=""),n=t}e._wrapperState={initialValue:j(n)}}function oe(e,t){var n=j(t.value),r=j(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function ie(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}function ae(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function le(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?ae(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var ue,se=function(e){return"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(t,n,r,o){MSApp.execUnsafeLocalFunction((function(){return e(t,n)}))}:e}((function(e,t){if("http://www.w3.org/2000/svg"!==e.namespaceURI||"innerHTML"in e)e.innerHTML=t;else{for((ue=ue||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=ue.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}}));function ce(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var de={animationIterationCount:!0,aspectRatio:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},fe=["Webkit","ms","Moz","O"];function pe(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||de.hasOwnProperty(e)&&de[e]?(""+t).trim():t+"px"}function me(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),o=pe(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,o):e[n]=o}}Object.keys(de).forEach((function(e){fe.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),de[t]=de[e]}))}));var he=O({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function ve(e,t){if(t){if(he[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(i(137,e));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(i(60));if("object"!=typeof t.dangerouslySetInnerHTML||!("__html"in t.dangerouslySetInnerHTML))throw Error(i(61))}if(null!=t.style&&"object"!=typeof t.style)throw Error(i(62))}}function ge(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var ye=null;function be(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}var _e=null,ke=null,Ce=null;function we(e){if(e=so(e)){if("function"!=typeof _e)throw Error(i(280));var t=e.stateNode;t&&(t=fo(t),_e(e.stateNode,e.type,t))}}function xe(e){ke?Ce?Ce.push(e):Ce=[e]:ke=e}function Ee(){if(ke){var e=ke,t=Ce;if(Ce=ke=null,we(e),t)for(e=0;e<t.length;e++)we(t[e])}}function Se(e,t){return e(t)}function Ie(){}var Te=!1;function Pe(e,t,n){if(Te)return e(t,n);Te=!0;try{return Se(e,t,n)}finally{Te=!1,(null!==ke||null!==Ce)&&(Ie(),Ee())}}function Me(e,t){var n=e.stateNode;if(null===n)return null;var r=fo(n);if(null===r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(i(231,t,typeof n));return n}var De=!1;if(c)try{var Ne={};Object.defineProperty(Ne,"passive",{get:function(){De=!0}}),window.addEventListener("test",Ne,Ne),window.removeEventListener("test",Ne,Ne)}catch(e){De=!1}function Re(e,t,n,r,o,i,a,l,u){var s=Array.prototype.slice.call(arguments,3);try{t.apply(n,s)}catch(e){this.onError(e)}}var Fe=!1,Be=null,Le=!1,Oe=null,Ae={onError:function(e){Fe=!0,Be=e}};function ze(e,t,n,r,o,i,a,l,u){Fe=!1,Be=null,Re.apply(Ae,arguments)}function He(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{0!=(4098&(t=e).flags)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function Ue(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&(null!==(e=e.alternate)&&(t=e.memoizedState)),null!==t)return t.dehydrated}return null}function We(e){if(He(e)!==e)throw Error(i(188))}function je(e){return null!==(e=function(e){var t=e.alternate;if(!t){if(null===(t=He(e)))throw Error(i(188));return t!==e?null:e}for(var n=e,r=t;;){var o=n.return;if(null===o)break;var a=o.alternate;if(null===a){if(null!==(r=o.return)){n=r;continue}break}if(o.child===a.child){for(a=o.child;a;){if(a===n)return We(o),e;if(a===r)return We(o),t;a=a.sibling}throw Error(i(188))}if(n.return!==r.return)n=o,r=a;else{for(var l=!1,u=o.child;u;){if(u===n){l=!0,n=o,r=a;break}if(u===r){l=!0,r=o,n=a;break}u=u.sibling}if(!l){for(u=a.child;u;){if(u===n){l=!0,n=a,r=o;break}if(u===r){l=!0,r=a,n=o;break}u=u.sibling}if(!l)throw Error(i(189))}}if(n.alternate!==r)throw Error(i(190))}if(3!==n.tag)throw Error(i(188));return n.stateNode.current===n?e:t}(e))?function e(t){if(5===t.tag||6===t.tag)return t;for(t=t.child;null!==t;){var n=e(t);if(null!==n)return n;t=t.sibling}return null}(e):null}var Ke=o.unstable_scheduleCallback,Ve=o.unstable_cancelCallback,qe=o.unstable_shouldYield,$e=o.unstable_requestPaint,Qe=o.unstable_now,Ge=o.unstable_getCurrentPriorityLevel,Ye=o.unstable_ImmediatePriority,Ze=o.unstable_UserBlockingPriority,Xe=o.unstable_NormalPriority,Je=o.unstable_LowPriority,et=o.unstable_IdlePriority,tt=null,nt=null;var rt=Math.clz32?Math.clz32:function(e){return 0===(e>>>=0)?32:31-(ot(e)/it|0)|0},ot=Math.log,it=Math.LN2;var at=64,lt=4194304;function ut(e){switch(e&-e){case 1:return 1;case 2:return 2;case 4:return 4;case 8:return 8;case 16:return 16;case 32:return 32;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return 4194240&e;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return 130023424&e;case 134217728:return 134217728;case 268435456:return 268435456;case 536870912:return 536870912;case 1073741824:return 1073741824;default:return e}}function st(e,t){var n=e.pendingLanes;if(0===n)return 0;var r=0,o=e.suspendedLanes,i=e.pingedLanes,a=268435455&n;if(0!==a){var l=a&~o;0!==l?r=ut(l):0!==(i&=a)&&(r=ut(i))}else 0!==(a=n&~o)?r=ut(a):0!==i&&(r=ut(i));if(0===r)return 0;if(0!==t&&t!==r&&0==(t&o)&&((o=r&-r)>=(i=t&-t)||16===o&&0!=(4194240&i)))return t;if(0!=(4&r)&&(r|=16&n),0!==(t=e.entangledLanes))for(e=e.entanglements,t&=r;0<t;)o=1<<(n=31-rt(t)),r|=e[n],t&=~o;return r}function ct(e,t){switch(e){case 1:case 2:case 4:return t+250;case 8:case 16:case 32:case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return t+5e3;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return-1;case 134217728:case 268435456:case 536870912:case 1073741824:default:return-1}}function dt(e){return 0!==(e=-1073741825&e.pendingLanes)?e:1073741824&e?1073741824:0}function ft(e){for(var t=[],n=0;31>n;n++)t.push(e);return t}function pt(e,t,n){e.pendingLanes|=t,536870912!==t&&(e.suspendedLanes=0,e.pingedLanes=0),(e=e.eventTimes)[t=31-rt(t)]=n}function mt(e,t){var n=e.entangledLanes|=t;for(e=e.entanglements;n;){var r=31-rt(n),o=1<<r;o&t|e[r]&t&&(e[r]|=t),n&=~o}}var ht=0;function vt(e){return 1<(e&=-e)?4<e?0!=(268435455&e)?16:536870912:4:1}var gt,yt,bt,_t,kt,Ct=!1,wt=[],xt=null,Et=null,St=null,It=new Map,Tt=new Map,Pt=[],Mt="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function Dt(e,t){switch(e){case"focusin":case"focusout":xt=null;break;case"dragenter":case"dragleave":Et=null;break;case"mouseover":case"mouseout":St=null;break;case"pointerover":case"pointerout":It.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":Tt.delete(t.pointerId)}}function Nt(e,t,n,r,o,i){return null===e||e.nativeEvent!==i?(e={blockedOn:t,domEventName:n,eventSystemFlags:r,nativeEvent:i,targetContainers:[o]},null!==t&&(null!==(t=so(t))&&yt(t)),e):(e.eventSystemFlags|=r,t=e.targetContainers,null!==o&&-1===t.indexOf(o)&&t.push(o),e)}function Rt(e){var t=uo(e.target);if(null!==t){var n=He(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=Ue(n)))return e.blockedOn=t,void kt(e.priority,(function(){bt(n)}))}else if(3===t&&n.stateNode.current.memoizedState.isDehydrated)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function Ft(e){if(null!==e.blockedOn)return!1;for(var t=e.targetContainers;0<t.length;){var n=Kt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n)return null!==(t=so(n))&&yt(t),e.blockedOn=n,!1;var r=new(n=e.nativeEvent).constructor(n.type,n);ye=r,n.target.dispatchEvent(r),ye=null,t.shift()}return!0}function Bt(e,t,n){Ft(e)&&n.delete(t)}function Lt(){Ct=!1,null!==xt&&Ft(xt)&&(xt=null),null!==Et&&Ft(Et)&&(Et=null),null!==St&&Ft(St)&&(St=null),It.forEach(Bt),Tt.forEach(Bt)}function Ot(e,t){e.blockedOn===t&&(e.blockedOn=null,Ct||(Ct=!0,o.unstable_scheduleCallback(o.unstable_NormalPriority,Lt)))}function At(e){function t(t){return Ot(t,e)}if(0<wt.length){Ot(wt[0],e);for(var n=1;n<wt.length;n++){var r=wt[n];r.blockedOn===e&&(r.blockedOn=null)}}for(null!==xt&&Ot(xt,e),null!==Et&&Ot(Et,e),null!==St&&Ot(St,e),It.forEach(t),Tt.forEach(t),n=0;n<Pt.length;n++)(r=Pt[n]).blockedOn===e&&(r.blockedOn=null);for(;0<Pt.length&&null===(n=Pt[0]).blockedOn;)Rt(n),null===n.blockedOn&&Pt.shift()}var zt=_.ReactCurrentBatchConfig;function Ht(e,t,n,r){var o=ht,i=zt.transition;zt.transition=null;try{ht=1,Wt(e,t,n,r)}finally{ht=o,zt.transition=i}}function Ut(e,t,n,r){var o=ht,i=zt.transition;zt.transition=null;try{ht=4,Wt(e,t,n,r)}finally{ht=o,zt.transition=i}}function Wt(e,t,n,r){var o=Kt(e,t,n,r);if(null===o)Br(e,t,r,jt,n),Dt(e,r);else if(function(e,t,n,r,o){switch(t){case"focusin":return xt=Nt(xt,e,t,n,r,o),!0;case"dragenter":return Et=Nt(Et,e,t,n,r,o),!0;case"mouseover":return St=Nt(St,e,t,n,r,o),!0;case"pointerover":var i=o.pointerId;return It.set(i,Nt(It.get(i)||null,e,t,n,r,o)),!0;case"gotpointercapture":return i=o.pointerId,Tt.set(i,Nt(Tt.get(i)||null,e,t,n,r,o)),!0}return!1}(o,e,t,n,r))r.stopPropagation();else if(Dt(e,r),4&t&&-1<Mt.indexOf(e)){for(;null!==o;){var i=so(o);if(null!==i&&gt(i),null===(i=Kt(e,t,n,r))&&Br(e,t,r,jt,n),i===o)break;o=i}null!==o&&r.stopPropagation()}else Br(e,t,r,null,n)}var jt=null;function Kt(e,t,n,r){if(jt=null,null!==(e=uo(e=be(r))))if(null===(t=He(e)))e=null;else if(13===(n=t.tag)){if(null!==(e=Ue(t)))return e;e=null}else if(3===n){if(t.stateNode.current.memoizedState.isDehydrated)return 3===t.tag?t.stateNode.containerInfo:null;e=null}else t!==e&&(e=null);return jt=e,null}function Vt(e){switch(e){case"cancel":case"click":case"close":case"contextmenu":case"copy":case"cut":case"auxclick":case"dblclick":case"dragend":case"dragstart":case"drop":case"focusin":case"focusout":case"input":case"invalid":case"keydown":case"keypress":case"keyup":case"mousedown":case"mouseup":case"paste":case"pause":case"play":case"pointercancel":case"pointerdown":case"pointerup":case"ratechange":case"reset":case"resize":case"seeked":case"submit":case"touchcancel":case"touchend":case"touchstart":case"volumechange":case"change":case"selectionchange":case"textInput":case"compositionstart":case"compositionend":case"compositionupdate":case"beforeblur":case"afterblur":case"beforeinput":case"blur":case"fullscreenchange":case"focus":case"hashchange":case"popstate":case"select":case"selectstart":return 1;case"drag":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"mousemove":case"mouseout":case"mouseover":case"pointermove":case"pointerout":case"pointerover":case"scroll":case"toggle":case"touchmove":case"wheel":case"mouseenter":case"mouseleave":case"pointerenter":case"pointerleave":return 4;case"message":switch(Ge()){case Ye:return 1;case Ze:return 4;case Xe:case Je:return 16;case et:return 536870912;default:return 16}default:return 16}}var qt=null,$t=null,Qt=null;function Gt(){if(Qt)return Qt;var e,t,n=$t,r=n.length,o="value"in qt?qt.value:qt.textContent,i=o.length;for(e=0;e<r&&n[e]===o[e];e++);var a=r-e;for(t=1;t<=a&&n[r-t]===o[i-t];t++);return Qt=o.slice(e,1<t?1-t:void 0)}function Yt(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}function Zt(){return!0}function Xt(){return!1}function Jt(e){function t(t,n,r,o,i){for(var a in this._reactName=t,this._targetInst=r,this.type=n,this.nativeEvent=o,this.target=i,this.currentTarget=null,e)e.hasOwnProperty(a)&&(t=e[a],this[a]=t?t(o):o[a]);return this.isDefaultPrevented=(null!=o.defaultPrevented?o.defaultPrevented:!1===o.returnValue)?Zt:Xt,this.isPropagationStopped=Xt,this}return O(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=Zt)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=Zt)},persist:function(){},isPersistent:Zt}),t}var en,tn,nn,rn={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},on=Jt(rn),an=O({},rn,{view:0,detail:0}),ln=Jt(an),un=O({},an,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:bn,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==nn&&(nn&&"mousemove"===e.type?(en=e.screenX-nn.screenX,tn=e.screenY-nn.screenY):tn=en=0,nn=e),en)},movementY:function(e){return"movementY"in e?e.movementY:tn}}),sn=Jt(un),cn=Jt(O({},un,{dataTransfer:0})),dn=Jt(O({},an,{relatedTarget:0})),fn=Jt(O({},rn,{animationName:0,elapsedTime:0,pseudoElement:0})),pn=Jt(O({},rn,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}})),mn=Jt(O({},rn,{data:0})),hn={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},vn={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},gn={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function yn(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=gn[e])&&!!t[e]}function bn(){return yn}var _n=Jt(O({},an,{key:function(e){if(e.key){var t=hn[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=Yt(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?vn[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:bn,charCode:function(e){return"keypress"===e.type?Yt(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?Yt(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}})),kn=Jt(O({},un,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),Cn=Jt(O({},an,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:bn})),wn=Jt(O({},rn,{propertyName:0,elapsedTime:0,pseudoElement:0})),xn=Jt(O({},un,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0})),En=[9,13,27,32],Sn=c&&"CompositionEvent"in window,In=null;c&&"documentMode"in document&&(In=document.documentMode);var Tn=c&&"TextEvent"in window&&!In,Pn=c&&(!Sn||In&&8<In&&11>=In),Mn=String.fromCharCode(32),Dn=!1;function Nn(e,t){switch(e){case"keyup":return-1!==En.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function Rn(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var Fn=!1;var Bn={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Ln(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!Bn[e.type]:"textarea"===t}function On(e,t,n,r){xe(r),0<(t=Or(t,"onChange")).length&&(n=new on("onChange","change",null,n,r),e.push({event:n,listeners:t}))}var An=null,zn=null;function Hn(e){Pr(e,0)}function Un(e){if(q(co(e)))return e}function Wn(e,t){if("change"===e)return t}var jn=!1;if(c){var Kn;if(c){var Vn="oninput"in document;if(!Vn){var qn=document.createElement("div");qn.setAttribute("oninput","return;"),Vn="function"==typeof qn.oninput}Kn=Vn}else Kn=!1;jn=Kn&&(!document.documentMode||9<document.documentMode)}function $n(){An&&(An.detachEvent("onpropertychange",Qn),zn=An=null)}function Qn(e){if("value"===e.propertyName&&Un(zn)){var t=[];On(t,zn,e,be(e)),Pe(Hn,t)}}function Gn(e,t,n){"focusin"===e?($n(),zn=n,(An=t).attachEvent("onpropertychange",Qn)):"focusout"===e&&$n()}function Yn(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Un(zn)}function Zn(e,t){if("click"===e)return Un(t)}function Xn(e,t){if("input"===e||"change"===e)return Un(t)}var Jn="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t};function er(e,t){if(Jn(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++){var o=n[r];if(!d.call(t,o)||!Jn(e[o],t[o]))return!1}return!0}function tr(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function nr(e,t){var n,r=tr(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=tr(r)}}function rr(){for(var e=window,t=$();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=$((e=t.contentWindow).document)}return t}function or(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}function ir(e){var t=rr(),n=e.focusedElem,r=e.selectionRange;if(t!==n&&n&&n.ownerDocument&&function e(t,n){return!(!t||!n)&&(t===n||(!t||3!==t.nodeType)&&(n&&3===n.nodeType?e(t,n.parentNode):"contains"in t?t.contains(n):!!t.compareDocumentPosition&&!!(16&t.compareDocumentPosition(n))))}(n.ownerDocument.documentElement,n)){if(null!==r&&or(n))if(t=r.start,void 0===(e=r.end)&&(e=t),"selectionStart"in n)n.selectionStart=t,n.selectionEnd=Math.min(e,n.value.length);else if((e=(t=n.ownerDocument||document)&&t.defaultView||window).getSelection){e=e.getSelection();var o=n.textContent.length,i=Math.min(r.start,o);r=void 0===r.end?i:Math.min(r.end,o),!e.extend&&i>r&&(o=r,r=i,i=o),o=nr(n,i);var a=nr(n,r);o&&a&&(1!==e.rangeCount||e.anchorNode!==o.node||e.anchorOffset!==o.offset||e.focusNode!==a.node||e.focusOffset!==a.offset)&&((t=t.createRange()).setStart(o.node,o.offset),e.removeAllRanges(),i>r?(e.addRange(t),e.extend(a.node,a.offset)):(t.setEnd(a.node,a.offset),e.addRange(t)))}for(t=[],e=n;e=e.parentNode;)1===e.nodeType&&t.push({element:e,left:e.scrollLeft,top:e.scrollTop});for("function"==typeof n.focus&&n.focus(),n=0;n<t.length;n++)(e=t[n]).element.scrollLeft=e.left,e.element.scrollTop=e.top}}var ar=c&&"documentMode"in document&&11>=document.documentMode,lr=null,ur=null,sr=null,cr=!1;function dr(e,t,n){var r=n.window===n?n.document:9===n.nodeType?n:n.ownerDocument;cr||null==lr||lr!==$(r)||("selectionStart"in(r=lr)&&or(r)?r={start:r.selectionStart,end:r.selectionEnd}:r={anchorNode:(r=(r.ownerDocument&&r.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset},sr&&er(sr,r)||(sr=r,0<(r=Or(ur,"onSelect")).length&&(t=new on("onSelect","select",null,t,n),e.push({event:t,listeners:r}),t.target=lr)))}function fr(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var pr={animationend:fr("Animation","AnimationEnd"),animationiteration:fr("Animation","AnimationIteration"),animationstart:fr("Animation","AnimationStart"),transitionend:fr("Transition","TransitionEnd")},mr={},hr={};function vr(e){if(mr[e])return mr[e];if(!pr[e])return e;var t,n=pr[e];for(t in n)if(n.hasOwnProperty(t)&&t in hr)return mr[e]=n[t];return e}c&&(hr=document.createElement("div").style,"AnimationEvent"in window||(delete pr.animationend.animation,delete pr.animationiteration.animation,delete pr.animationstart.animation),"TransitionEvent"in window||delete pr.transitionend.transition);var gr=vr("animationend"),yr=vr("animationiteration"),br=vr("animationstart"),_r=vr("transitionend"),kr=new Map,Cr="abort auxClick cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");function wr(e,t){kr.set(e,t),u(t,[e])}for(var xr=0;xr<Cr.length;xr++){var Er=Cr[xr];wr(Er.toLowerCase(),"on"+(Er[0].toUpperCase()+Er.slice(1)))}wr(gr,"onAnimationEnd"),wr(yr,"onAnimationIteration"),wr(br,"onAnimationStart"),wr("dblclick","onDoubleClick"),wr("focusin","onFocus"),wr("focusout","onBlur"),wr(_r,"onTransitionEnd"),s("onMouseEnter",["mouseout","mouseover"]),s("onMouseLeave",["mouseout","mouseover"]),s("onPointerEnter",["pointerout","pointerover"]),s("onPointerLeave",["pointerout","pointerover"]),u("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),u("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),u("onBeforeInput",["compositionend","keypress","textInput","paste"]),u("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),u("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),u("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var Sr="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Ir=new Set("cancel close invalid load scroll toggle".split(" ").concat(Sr));function Tr(e,t,n){var r=e.type||"unknown-event";e.currentTarget=n,function(e,t,n,r,o,a,l,u,s){if(ze.apply(this,arguments),Fe){if(!Fe)throw Error(i(198));var c=Be;Fe=!1,Be=null,Le||(Le=!0,Oe=c)}}(r,t,void 0,e),e.currentTarget=null}function Pr(e,t){t=0!=(4&t);for(var n=0;n<e.length;n++){var r=e[n],o=r.event;r=r.listeners;e:{var i=void 0;if(t)for(var a=r.length-1;0<=a;a--){var l=r[a],u=l.instance,s=l.currentTarget;if(l=l.listener,u!==i&&o.isPropagationStopped())break e;Tr(o,l,s),i=u}else for(a=0;a<r.length;a++){if(u=(l=r[a]).instance,s=l.currentTarget,l=l.listener,u!==i&&o.isPropagationStopped())break e;Tr(o,l,s),i=u}}}if(Le)throw e=Oe,Le=!1,Oe=null,e}function Mr(e,t){var n=t[io];void 0===n&&(n=t[io]=new Set);var r=e+"__bubble";n.has(r)||(Fr(t,e,2,!1),n.add(r))}function Dr(e,t,n){var r=0;t&&(r|=4),Fr(n,e,r,t)}var Nr="_reactListening"+Math.random().toString(36).slice(2);function Rr(e){if(!e[Nr]){e[Nr]=!0,a.forEach((function(t){"selectionchange"!==t&&(Ir.has(t)||Dr(t,!1,e),Dr(t,!0,e))}));var t=9===e.nodeType?e:e.ownerDocument;null===t||t[Nr]||(t[Nr]=!0,Dr("selectionchange",!1,t))}}function Fr(e,t,n,r){switch(Vt(t)){case 1:var o=Ht;break;case 4:o=Ut;break;default:o=Wt}n=o.bind(null,t,n,e),o=void 0,!De||"touchstart"!==t&&"touchmove"!==t&&"wheel"!==t||(o=!0),r?void 0!==o?e.addEventListener(t,n,{capture:!0,passive:o}):e.addEventListener(t,n,!0):void 0!==o?e.addEventListener(t,n,{passive:o}):e.addEventListener(t,n,!1)}function Br(e,t,n,r,o){var i=r;if(0==(1&t)&&0==(2&t)&&null!==r)e:for(;;){if(null===r)return;var a=r.tag;if(3===a||4===a){var l=r.stateNode.containerInfo;if(l===o||8===l.nodeType&&l.parentNode===o)break;if(4===a)for(a=r.return;null!==a;){var u=a.tag;if((3===u||4===u)&&((u=a.stateNode.containerInfo)===o||8===u.nodeType&&u.parentNode===o))return;a=a.return}for(;null!==l;){if(null===(a=uo(l)))return;if(5===(u=a.tag)||6===u){r=i=a;continue e}l=l.parentNode}}r=r.return}Pe((function(){var r=i,o=be(n),a=[];e:{var l=kr.get(e);if(void 0!==l){var u=on,s=e;switch(e){case"keypress":if(0===Yt(n))break e;case"keydown":case"keyup":u=_n;break;case"focusin":s="focus",u=dn;break;case"focusout":s="blur",u=dn;break;case"beforeblur":case"afterblur":u=dn;break;case"click":if(2===n.button)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":u=sn;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":u=cn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":u=Cn;break;case gr:case yr:case br:u=fn;break;case _r:u=wn;break;case"scroll":u=ln;break;case"wheel":u=xn;break;case"copy":case"cut":case"paste":u=pn;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":u=kn}var c=0!=(4&t),d=!c&&"scroll"===e,f=c?null!==l?l+"Capture":null:l;c=[];for(var p,m=r;null!==m;){var h=(p=m).stateNode;if(5===p.tag&&null!==h&&(p=h,null!==f&&(null!=(h=Me(m,f))&&c.push(Lr(m,h,p)))),d)break;m=m.return}0<c.length&&(l=new u(l,s,null,n,o),a.push({event:l,listeners:c}))}}if(0==(7&t)){if(u="mouseout"===e||"pointerout"===e,(!(l="mouseover"===e||"pointerover"===e)||n===ye||!(s=n.relatedTarget||n.fromElement)||!uo(s)&&!s[oo])&&(u||l)&&(l=o.window===o?o:(l=o.ownerDocument)?l.defaultView||l.parentWindow:window,u?(u=r,null!==(s=(s=n.relatedTarget||n.toElement)?uo(s):null)&&(s!==(d=He(s))||5!==s.tag&&6!==s.tag)&&(s=null)):(u=null,s=r),u!==s)){if(c=sn,h="onMouseLeave",f="onMouseEnter",m="mouse","pointerout"!==e&&"pointerover"!==e||(c=kn,h="onPointerLeave",f="onPointerEnter",m="pointer"),d=null==u?l:co(u),p=null==s?l:co(s),(l=new c(h,m+"leave",u,n,o)).target=d,l.relatedTarget=p,h=null,uo(o)===r&&((c=new c(f,m+"enter",s,n,o)).target=p,c.relatedTarget=d,h=c),d=h,u&&s)e:{for(f=s,m=0,p=c=u;p;p=Ar(p))m++;for(p=0,h=f;h;h=Ar(h))p++;for(;0<m-p;)c=Ar(c),m--;for(;0<p-m;)f=Ar(f),p--;for(;m--;){if(c===f||null!==f&&c===f.alternate)break e;c=Ar(c),f=Ar(f)}c=null}else c=null;null!==u&&zr(a,l,u,c,!1),null!==s&&null!==d&&zr(a,d,s,c,!0)}if("select"===(u=(l=r?co(r):window).nodeName&&l.nodeName.toLowerCase())||"input"===u&&"file"===l.type)var v=Wn;else if(Ln(l))if(jn)v=Xn;else{v=Yn;var g=Gn}else(u=l.nodeName)&&"input"===u.toLowerCase()&&("checkbox"===l.type||"radio"===l.type)&&(v=Zn);switch(v&&(v=v(e,r))?On(a,v,n,o):(g&&g(e,l,r),"focusout"===e&&(g=l._wrapperState)&&g.controlled&&"number"===l.type&&J(l,"number",l.value)),g=r?co(r):window,e){case"focusin":(Ln(g)||"true"===g.contentEditable)&&(lr=g,ur=r,sr=null);break;case"focusout":sr=ur=lr=null;break;case"mousedown":cr=!0;break;case"contextmenu":case"mouseup":case"dragend":cr=!1,dr(a,n,o);break;case"selectionchange":if(ar)break;case"keydown":case"keyup":dr(a,n,o)}var y;if(Sn)e:{switch(e){case"compositionstart":var b="onCompositionStart";break e;case"compositionend":b="onCompositionEnd";break e;case"compositionupdate":b="onCompositionUpdate";break e}b=void 0}else Fn?Nn(e,n)&&(b="onCompositionEnd"):"keydown"===e&&229===n.keyCode&&(b="onCompositionStart");b&&(Pn&&"ko"!==n.locale&&(Fn||"onCompositionStart"!==b?"onCompositionEnd"===b&&Fn&&(y=Gt()):($t="value"in(qt=o)?qt.value:qt.textContent,Fn=!0)),0<(g=Or(r,b)).length&&(b=new mn(b,e,null,n,o),a.push({event:b,listeners:g}),y?b.data=y:null!==(y=Rn(n))&&(b.data=y))),(y=Tn?function(e,t){switch(e){case"compositionend":return Rn(t);case"keypress":return 32!==t.which?null:(Dn=!0,Mn);case"textInput":return(e=t.data)===Mn&&Dn?null:e;default:return null}}(e,n):function(e,t){if(Fn)return"compositionend"===e||!Sn&&Nn(e,t)?(e=Gt(),Qt=$t=qt=null,Fn=!1,e):null;switch(e){case"paste":return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return Pn&&"ko"!==t.locale?null:t.data;default:return null}}(e,n))&&(0<(r=Or(r,"onBeforeInput")).length&&(o=new mn("onBeforeInput","beforeinput",null,n,o),a.push({event:o,listeners:r}),o.data=y))}Pr(a,t)}))}function Lr(e,t,n){return{instance:e,listener:t,currentTarget:n}}function Or(e,t){for(var n=t+"Capture",r=[];null!==e;){var o=e,i=o.stateNode;5===o.tag&&null!==i&&(o=i,null!=(i=Me(e,n))&&r.unshift(Lr(e,i,o)),null!=(i=Me(e,t))&&r.push(Lr(e,i,o))),e=e.return}return r}function Ar(e){if(null===e)return null;do{e=e.return}while(e&&5!==e.tag);return e||null}function zr(e,t,n,r,o){for(var i=t._reactName,a=[];null!==n&&n!==r;){var l=n,u=l.alternate,s=l.stateNode;if(null!==u&&u===r)break;5===l.tag&&null!==s&&(l=s,o?null!=(u=Me(n,i))&&a.unshift(Lr(n,u,l)):o||null!=(u=Me(n,i))&&a.push(Lr(n,u,l))),n=n.return}0!==a.length&&e.push({event:t,listeners:a})}var Hr=/\r\n?/g,Ur=/\u0000|\uFFFD/g;function Wr(e){return("string"==typeof e?e:""+e).replace(Hr,"\n").replace(Ur,"")}function jr(e,t,n){if(t=Wr(t),Wr(e)!==t&&n)throw Error(i(425))}function Kr(){}var Vr=null;function qr(e,t){return"textarea"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var $r="function"==typeof setTimeout?setTimeout:void 0,Qr="function"==typeof clearTimeout?clearTimeout:void 0,Gr="function"==typeof Promise?Promise:void 0,Yr="function"==typeof queueMicrotask?queueMicrotask:void 0!==Gr?function(e){return Gr.resolve(null).then(e).catch(Zr)}:$r;function Zr(e){setTimeout((function(){throw e}))}function Xr(e,t){var n=t,r=0;do{var o=n.nextSibling;if(e.removeChild(n),o&&8===o.nodeType)if("/$"===(n=o.data)){if(0===r)return e.removeChild(o),void At(t);r--}else"$"!==n&&"$?"!==n&&"$!"!==n||r++;n=o}while(n);At(t)}function Jr(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break;if(8===t){if("$"===(t=e.data)||"$!"===t||"$?"===t)break;if("/$"===t)return null}}return e}function eo(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||"$!"===n||"$?"===n){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}var to=Math.random().toString(36).slice(2),no="__reactFiber$"+to,ro="__reactProps$"+to,oo="__reactContainer$"+to,io="__reactEvents$"+to,ao="__reactListeners$"+to,lo="__reactHandles$"+to;function uo(e){var t=e[no];if(t)return t;for(var n=e.parentNode;n;){if(t=n[oo]||n[no]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=eo(e);null!==e;){if(n=e[no])return n;e=eo(e)}return t}n=(e=n).parentNode}return null}function so(e){return!(e=e[no]||e[oo])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function co(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(i(33))}function fo(e){return e[ro]||null}var po=[],mo=-1;function ho(e){return{current:e}}function vo(e){0>mo||(e.current=po[mo],po[mo]=null,mo--)}function go(e,t){mo++,po[mo]=e.current,e.current=t}var yo={},bo=ho(yo),_o=ho(!1),ko=yo;function Co(e,t){var n=e.type.contextTypes;if(!n)return yo;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var o,i={};for(o in n)i[o]=t[o];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=i),i}function wo(e){return null!=(e=e.childContextTypes)}function xo(){vo(_o),vo(bo)}function Eo(e,t,n){if(bo.current!==yo)throw Error(i(168));go(bo,t),go(_o,n)}function So(e,t,n){var r=e.stateNode;if(t=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var o in r=r.getChildContext())if(!(o in t))throw Error(i(108,W(e)||"Unknown",o));return O({},n,r)}function Io(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||yo,ko=bo.current,go(bo,e),go(_o,_o.current),!0}function To(e,t,n){var r=e.stateNode;if(!r)throw Error(i(169));n?(e=So(e,t,ko),r.__reactInternalMemoizedMergedChildContext=e,vo(_o),vo(bo),go(bo,e)):vo(_o),go(_o,n)}var Po=null,Mo=!1,Do=!1;function No(e){null===Po?Po=[e]:Po.push(e)}function Ro(){if(!Do&&null!==Po){Do=!0;var e=0,t=ht;try{var n=Po;for(ht=1;e<n.length;e++){var r=n[e];do{r=r(!0)}while(null!==r)}Po=null,Mo=!1}catch(t){throw null!==Po&&(Po=Po.slice(e+1)),Ke(Ye,Ro),t}finally{ht=t,Do=!1}}return null}var Fo=_.ReactCurrentBatchConfig;function Bo(e,t){if(e&&e.defaultProps){for(var n in t=O({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}return t}var Lo=ho(null),Oo=null,Ao=null,zo=null;function Ho(){zo=Ao=Oo=null}function Uo(e){var t=Lo.current;vo(Lo),e._currentValue=t}function Wo(e,t,n){for(;null!==e;){var r=e.alternate;if((e.childLanes&t)!==t?(e.childLanes|=t,null!==r&&(r.childLanes|=t)):null!==r&&(r.childLanes&t)!==t&&(r.childLanes|=t),e===n)break;e=e.return}}function jo(e,t){Oo=e,zo=Ao=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(0!=(e.lanes&t)&&(cl=!0),e.firstContext=null)}function Ko(e){var t=e._currentValue;if(zo!==e)if(e={context:e,memoizedValue:t,next:null},null===Ao){if(null===Oo)throw Error(i(308));Ao=e,Oo.dependencies={lanes:0,firstContext:e}}else Ao=Ao.next=e;return t}var Vo=null,qo=!1;function $o(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null,interleaved:null,lanes:0},effects:null}}function Qo(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,effects:e.effects})}function Go(e,t){return{eventTime:e,lane:t,tag:0,payload:null,callback:null,next:null}}function Yo(e,t){var n=e.updateQueue;null!==n&&(n=n.shared,null!==uu&&0!=(1&e.mode)&&0==(2&lu)?(null===(e=n.interleaved)?(t.next=t,null===Vo?Vo=[n]:Vo.push(n)):(t.next=e.next,e.next=t),n.interleaved=t):(null===(e=n.pending)?t.next=t:(t.next=e.next,e.next=t),n.pending=t))}function Zo(e,t,n){if(null!==(t=t.updateQueue)&&(t=t.shared,0!=(4194240&n))){var r=t.lanes;n|=r&=e.pendingLanes,t.lanes=n,mt(e,n)}}function Xo(e,t){var n=e.updateQueue,r=e.alternate;if(null!==r&&n===(r=r.updateQueue)){var o=null,i=null;if(null!==(n=n.firstBaseUpdate)){do{var a={eventTime:n.eventTime,lane:n.lane,tag:n.tag,payload:n.payload,callback:n.callback,next:null};null===i?o=i=a:i=i.next=a,n=n.next}while(null!==n);null===i?o=i=t:i=i.next=t}else o=i=t;return n={baseState:r.baseState,firstBaseUpdate:o,lastBaseUpdate:i,shared:r.shared,effects:r.effects},void(e.updateQueue=n)}null===(e=n.lastBaseUpdate)?n.firstBaseUpdate=t:e.next=t,n.lastBaseUpdate=t}function Jo(e,t,n,r){var o=e.updateQueue;qo=!1;var i=o.firstBaseUpdate,a=o.lastBaseUpdate,l=o.shared.pending;if(null!==l){o.shared.pending=null;var u=l,s=u.next;u.next=null,null===a?i=s:a.next=s,a=u;var c=e.alternate;null!==c&&((l=(c=c.updateQueue).lastBaseUpdate)!==a&&(null===l?c.firstBaseUpdate=s:l.next=s,c.lastBaseUpdate=u))}if(null!==i){var d=o.baseState;for(a=0,c=s=u=null,l=i;;){var f=l.lane,p=l.eventTime;if((r&f)===f){null!==c&&(c=c.next={eventTime:p,lane:0,tag:l.tag,payload:l.payload,callback:l.callback,next:null});e:{var m=e,h=l;switch(f=t,p=n,h.tag){case 1:if("function"==typeof(m=h.payload)){d=m.call(p,d,f);break e}d=m;break e;case 3:m.flags=-65537&m.flags|128;case 0:if(null==(f="function"==typeof(m=h.payload)?m.call(p,d,f):m))break e;d=O({},d,f);break e;case 2:qo=!0}}null!==l.callback&&0!==l.lane&&(e.flags|=64,null===(f=o.effects)?o.effects=[l]:f.push(l))}else p={eventTime:p,lane:f,tag:l.tag,payload:l.payload,callback:l.callback,next:null},null===c?(s=c=p,u=d):c=c.next=p,a|=f;if(null===(l=l.next)){if(null===(l=o.shared.pending))break;l=(f=l).next,f.next=null,o.lastBaseUpdate=f,o.shared.pending=null}}if(null===c&&(u=d),o.baseState=u,o.firstBaseUpdate=s,o.lastBaseUpdate=c,null!==(t=o.shared.interleaved)){o=t;do{a|=o.lane,o=o.next}while(o!==t)}else null===i&&(o.shared.lanes=0);hu|=a,e.lanes=a,e.memoizedState=d}}function ei(e,t,n){if(e=t.effects,t.effects=null,null!==e)for(t=0;t<e.length;t++){var r=e[t],o=r.callback;if(null!==o){if(r.callback=null,r=n,"function"!=typeof o)throw Error(i(191,o));o.call(r)}}}var ti=(new r.Component).refs;function ni(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:O({},t,n),e.memoizedState=n,0===e.lanes&&(e.updateQueue.baseState=n)}var ri={isMounted:function(e){return!!(e=e._reactInternals)&&He(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternals;var r=Nu(),o=Ru(e),i=Go(r,o);i.payload=t,null!=n&&(i.callback=n),Yo(e,i),null!==(t=Fu(e,o,r))&&Zo(t,e,o)},enqueueReplaceState:function(e,t,n){e=e._reactInternals;var r=Nu(),o=Ru(e),i=Go(r,o);i.tag=1,i.payload=t,null!=n&&(i.callback=n),Yo(e,i),null!==(t=Fu(e,o,r))&&Zo(t,e,o)},enqueueForceUpdate:function(e,t){e=e._reactInternals;var n=Nu(),r=Ru(e),o=Go(n,r);o.tag=2,null!=t&&(o.callback=t),Yo(e,o),null!==(t=Fu(e,r,n))&&Zo(t,e,r)}};function oi(e,t,n,r,o,i,a){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,i,a):!t.prototype||!t.prototype.isPureReactComponent||(!er(n,r)||!er(o,i))}function ii(e,t,n){var r=!1,o=yo,i=t.contextType;return"object"==typeof i&&null!==i?i=Ko(i):(o=wo(t)?ko:bo.current,i=(r=null!=(r=t.contextTypes))?Co(e,o):yo),t=new t(n,i),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=ri,e.stateNode=t,t._reactInternals=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=o,e.__reactInternalMemoizedMaskedChildContext=i),t}function ai(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&ri.enqueueReplaceState(t,t.state,null)}function li(e,t,n,r){var o=e.stateNode;o.props=n,o.state=e.memoizedState,o.refs=ti,$o(e);var i=t.contextType;"object"==typeof i&&null!==i?o.context=Ko(i):(i=wo(t)?ko:bo.current,o.context=Co(e,i)),o.state=e.memoizedState,"function"==typeof(i=t.getDerivedStateFromProps)&&(ni(e,t,i,n),o.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof o.getSnapshotBeforeUpdate||"function"!=typeof o.UNSAFE_componentWillMount&&"function"!=typeof o.componentWillMount||(t=o.state,"function"==typeof o.componentWillMount&&o.componentWillMount(),"function"==typeof o.UNSAFE_componentWillMount&&o.UNSAFE_componentWillMount(),t!==o.state&&ri.enqueueReplaceState(o,o.state,null),Jo(e,n,o,r),o.state=e.memoizedState),"function"==typeof o.componentDidMount&&(e.flags|=4194308)}var ui=[],si=0,ci=null,di=0,fi=[],pi=0,mi=null,hi=1,vi="";function gi(e,t){ui[si++]=di,ui[si++]=ci,ci=e,di=t}function yi(e,t,n){fi[pi++]=hi,fi[pi++]=vi,fi[pi++]=mi,mi=e;var r=hi;e=vi;var o=32-rt(r)-1;r&=~(1<<o),n+=1;var i=32-rt(t)+o;if(30<i){var a=o-o%5;i=(r&(1<<a)-1).toString(32),r>>=a,o-=a,hi=1<<32-rt(t)+o|n<<o|r,vi=i+e}else hi=1<<i|n<<o|r,vi=e}function bi(e){null!==e.return&&(gi(e,1),yi(e,1,0))}function _i(e){for(;e===ci;)ci=ui[--si],ui[si]=null,di=ui[--si],ui[si]=null;for(;e===mi;)mi=fi[--pi],fi[pi]=null,vi=fi[--pi],fi[pi]=null,hi=fi[--pi],fi[pi]=null}var ki=null,Ci=null,wi=!1,xi=null;function Ei(e,t){var n=cs(5,null,null,0);n.elementType="DELETED",n.stateNode=t,n.return=e,null===(t=e.deletions)?(e.deletions=[n],e.flags|=16):t.push(n)}function Si(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,ki=e,Ci=Jr(t.firstChild),!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,ki=e,Ci=null,!0);case 13:return null!==(t=8!==t.nodeType?null:t)&&(n=null!==mi?{id:hi,overflow:vi}:null,e.memoizedState={dehydrated:t,treeContext:n,retryLane:1073741824},(n=cs(18,null,null,0)).stateNode=t,n.return=e,e.child=n,ki=e,Ci=null,!0);default:return!1}}function Ii(e){return 0!=(1&e.mode)&&0==(128&e.flags)}function Ti(e){if(wi){var t=Ci;if(t){var n=t;if(!Si(e,t)){if(Ii(e))throw Error(i(418));t=Jr(n.nextSibling);var r=ki;t&&Si(e,t)?Ei(r,n):(e.flags=-4097&e.flags|2,wi=!1,ki=e)}}else{if(Ii(e))throw Error(i(418));e.flags=-4097&e.flags|2,wi=!1,ki=e}}}function Pi(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;ki=e}function Mi(e){if(e!==ki)return!1;if(!wi)return Pi(e),wi=!0,!1;var t;if((t=3!==e.tag)&&!(t=5!==e.tag)&&(t="head"!==(t=e.type)&&"body"!==t&&!qr(e.type,e.memoizedProps)),t&&(t=Ci)){if(Ii(e)){for(e=Ci;e;)e=Jr(e.nextSibling);throw Error(i(418))}for(;t;)Ei(e,t),t=Jr(t.nextSibling)}if(Pi(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(i(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var n=e.data;if("/$"===n){if(0===t){Ci=Jr(e.nextSibling);break e}t--}else"$"!==n&&"$!"!==n&&"$?"!==n||t++}e=e.nextSibling}Ci=null}}else Ci=ki?Jr(e.stateNode.nextSibling):null;return!0}function Di(){Ci=ki=null,wi=!1}function Ni(e){null===xi?xi=[e]:xi.push(e)}function Ri(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(i(309));var r=n.stateNode}if(!r)throw Error(i(147,e));var o=r,a=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===a?t.ref:((t=function(e){var t=o.refs;t===ti&&(t=o.refs={}),null===e?delete t[a]:t[a]=e})._stringRef=a,t)}if("string"!=typeof e)throw Error(i(284));if(!n._owner)throw Error(i(290,e))}return e}function Fi(e,t){throw e=Object.prototype.toString.call(t),Error(i(31,"[object Object]"===e?"object with keys {"+Object.keys(t).join(", ")+"}":e))}function Bi(e){return(0,e._init)(e._payload)}function Li(e){function t(t,n){if(e){var r=t.deletions;null===r?(t.deletions=[n],t.flags|=16):r.push(n)}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function o(e,t){return(e=fs(e,t)).index=0,e.sibling=null,e}function a(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.flags|=2,n):r:(t.flags|=2,n):(t.flags|=1048576,n)}function l(t){return e&&null===t.alternate&&(t.flags|=2),t}function u(e,t,n,r){return null===t||6!==t.tag?((t=vs(n,e.mode,r)).return=e,t):((t=o(t,n)).return=e,t)}function s(e,t,n,r){var i=n.type;return i===w?d(e,t,n.props.children,r,n.key):null!==t&&(t.elementType===i||"object"==typeof i&&null!==i&&i.$$typeof===N&&Bi(i)===t.type)?((r=o(t,n.props)).ref=Ri(e,t,n),r.return=e,r):((r=ps(n.type,n.key,n.props,null,e.mode,r)).ref=Ri(e,t,n),r.return=e,r)}function c(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=gs(n,e.mode,r)).return=e,t):((t=o(t,n.children||[])).return=e,t)}function d(e,t,n,r,i){return null===t||7!==t.tag?((t=ms(n,e.mode,r,i)).return=e,t):((t=o(t,n)).return=e,t)}function f(e,t,n){if("string"==typeof t&&""!==t||"number"==typeof t)return(t=vs(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case k:return(n=ps(t.type,t.key,t.props,null,e.mode,n)).ref=Ri(e,null,t),n.return=e,n;case C:return(t=gs(t,e.mode,n)).return=e,t;case N:return f(e,(0,t._init)(t._payload),n)}if(ee(t)||B(t))return(t=ms(t,e.mode,n,null)).return=e,t;Fi(e,t)}return null}function p(e,t,n,r){var o=null!==t?t.key:null;if("string"==typeof n&&""!==n||"number"==typeof n)return null!==o?null:u(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case k:return n.key===o?s(e,t,n,r):null;case C:return n.key===o?c(e,t,n,r):null;case N:return p(e,t,(o=n._init)(n._payload),r)}if(ee(n)||B(n))return null!==o?null:d(e,t,n,r,null);Fi(e,n)}return null}function m(e,t,n,r,o){if("string"==typeof r&&""!==r||"number"==typeof r)return u(t,e=e.get(n)||null,""+r,o);if("object"==typeof r&&null!==r){switch(r.$$typeof){case k:return s(t,e=e.get(null===r.key?n:r.key)||null,r,o);case C:return c(t,e=e.get(null===r.key?n:r.key)||null,r,o);case N:return m(e,t,n,(0,r._init)(r._payload),o)}if(ee(r)||B(r))return d(t,e=e.get(n)||null,r,o,null);Fi(t,r)}return null}function h(o,i,l,u){for(var s=null,c=null,d=i,h=i=0,v=null;null!==d&&h<l.length;h++){d.index>h?(v=d,d=null):v=d.sibling;var g=p(o,d,l[h],u);if(null===g){null===d&&(d=v);break}e&&d&&null===g.alternate&&t(o,d),i=a(g,i,h),null===c?s=g:c.sibling=g,c=g,d=v}if(h===l.length)return n(o,d),wi&&gi(o,h),s;if(null===d){for(;h<l.length;h++)null!==(d=f(o,l[h],u))&&(i=a(d,i,h),null===c?s=d:c.sibling=d,c=d);return wi&&gi(o,h),s}for(d=r(o,d);h<l.length;h++)null!==(v=m(d,o,h,l[h],u))&&(e&&null!==v.alternate&&d.delete(null===v.key?h:v.key),i=a(v,i,h),null===c?s=v:c.sibling=v,c=v);return e&&d.forEach((function(e){return t(o,e)})),wi&&gi(o,h),s}function v(o,l,u,s){var c=B(u);if("function"!=typeof c)throw Error(i(150));if(null==(u=c.call(u)))throw Error(i(151));for(var d=c=null,h=l,v=l=0,g=null,y=u.next();null!==h&&!y.done;v++,y=u.next()){h.index>v?(g=h,h=null):g=h.sibling;var b=p(o,h,y.value,s);if(null===b){null===h&&(h=g);break}e&&h&&null===b.alternate&&t(o,h),l=a(b,l,v),null===d?c=b:d.sibling=b,d=b,h=g}if(y.done)return n(o,h),wi&&gi(o,v),c;if(null===h){for(;!y.done;v++,y=u.next())null!==(y=f(o,y.value,s))&&(l=a(y,l,v),null===d?c=y:d.sibling=y,d=y);return wi&&gi(o,v),c}for(h=r(o,h);!y.done;v++,y=u.next())null!==(y=m(h,o,v,y.value,s))&&(e&&null!==y.alternate&&h.delete(null===y.key?v:y.key),l=a(y,l,v),null===d?c=y:d.sibling=y,d=y);return e&&h.forEach((function(e){return t(o,e)})),wi&&gi(o,v),c}return function e(r,i,a,u){if("object"==typeof a&&null!==a&&a.type===w&&null===a.key&&(a=a.props.children),"object"==typeof a&&null!==a){switch(a.$$typeof){case k:e:{for(var s=a.key,c=i;null!==c;){if(c.key===s){if((s=a.type)===w){if(7===c.tag){n(r,c.sibling),(i=o(c,a.props.children)).return=r,r=i;break e}}else if(c.elementType===s||"object"==typeof s&&null!==s&&s.$$typeof===N&&Bi(s)===c.type){n(r,c.sibling),(i=o(c,a.props)).ref=Ri(r,c,a),i.return=r,r=i;break e}n(r,c);break}t(r,c),c=c.sibling}a.type===w?((i=ms(a.props.children,r.mode,u,a.key)).return=r,r=i):((u=ps(a.type,a.key,a.props,null,r.mode,u)).ref=Ri(r,i,a),u.return=r,r=u)}return l(r);case C:e:{for(c=a.key;null!==i;){if(i.key===c){if(4===i.tag&&i.stateNode.containerInfo===a.containerInfo&&i.stateNode.implementation===a.implementation){n(r,i.sibling),(i=o(i,a.children||[])).return=r,r=i;break e}n(r,i);break}t(r,i),i=i.sibling}(i=gs(a,r.mode,u)).return=r,r=i}return l(r);case N:return e(r,i,(c=a._init)(a._payload),u)}if(ee(a))return h(r,i,a,u);if(B(a))return v(r,i,a,u);Fi(r,a)}return"string"==typeof a&&""!==a||"number"==typeof a?(a=""+a,null!==i&&6===i.tag?(n(r,i.sibling),(i=o(i,a)).return=r,r=i):(n(r,i),(i=vs(a,r.mode,u)).return=r,r=i),l(r)):n(r,i)}}var Oi=Li(!0),Ai=Li(!1),zi={},Hi=ho(zi),Ui=ho(zi),Wi=ho(zi);function ji(e){if(e===zi)throw Error(i(174));return e}function Ki(e,t){switch(go(Wi,t),go(Ui,e),go(Hi,zi),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:le(null,"");break;default:t=le(t=(e=8===e?t.parentNode:t).namespaceURI||null,e=e.tagName)}vo(Hi),go(Hi,t)}function Vi(){vo(Hi),vo(Ui),vo(Wi)}function qi(e){ji(Wi.current);var t=ji(Hi.current),n=le(t,e.type);t!==n&&(go(Ui,e),go(Hi,n))}function $i(e){Ui.current===e&&(vo(Hi),vo(Ui))}var Qi=ho(0);function Gi(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||"$!"===n.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(0!=(128&t.flags))return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var Yi=[];function Zi(){for(var e=0;e<Yi.length;e++)Yi[e]._workInProgressVersionPrimary=null;Yi.length=0}var Xi=_.ReactCurrentDispatcher,Ji=_.ReactCurrentBatchConfig,ea=0,ta=null,na=null,ra=null,oa=!1,ia=!1,aa=0,la=0;function ua(){throw Error(i(321))}function sa(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!Jn(e[n],t[n]))return!1;return!0}function ca(e,t,n,r,o,a){if(ea=a,ta=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,Xi.current=null===e||null===e.memoizedState?qa:$a,e=n(r,o),ia){a=0;do{if(ia=!1,aa=0,25<=a)throw Error(i(301));a+=1,ra=na=null,t.updateQueue=null,Xi.current=Qa,e=n(r,o)}while(ia)}if(Xi.current=Va,t=null!==na&&null!==na.next,ea=0,ra=na=ta=null,oa=!1,t)throw Error(i(300));return e}function da(){var e=0!==aa;return aa=0,e}function fa(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===ra?ta.memoizedState=ra=e:ra=ra.next=e,ra}function pa(){if(null===na){var e=ta.alternate;e=null!==e?e.memoizedState:null}else e=na.next;var t=null===ra?ta.memoizedState:ra.next;if(null!==t)ra=t,na=e;else{if(null===e)throw Error(i(310));e={memoizedState:(na=e).memoizedState,baseState:na.baseState,baseQueue:na.baseQueue,queue:na.queue,next:null},null===ra?ta.memoizedState=ra=e:ra=ra.next=e}return ra}function ma(e,t){return"function"==typeof t?t(e):t}function ha(e){var t=pa(),n=t.queue;if(null===n)throw Error(i(311));n.lastRenderedReducer=e;var r=na,o=r.baseQueue,a=n.pending;if(null!==a){if(null!==o){var l=o.next;o.next=a.next,a.next=l}r.baseQueue=o=a,n.pending=null}if(null!==o){a=o.next,r=r.baseState;var u=l=null,s=null,c=a;do{var d=c.lane;if((ea&d)===d)null!==s&&(s=s.next={lane:0,action:c.action,hasEagerState:c.hasEagerState,eagerState:c.eagerState,next:null}),r=c.hasEagerState?c.eagerState:e(r,c.action);else{var f={lane:d,action:c.action,hasEagerState:c.hasEagerState,eagerState:c.eagerState,next:null};null===s?(u=s=f,l=r):s=s.next=f,ta.lanes|=d,hu|=d}c=c.next}while(null!==c&&c!==a);null===s?l=r:s.next=u,Jn(r,t.memoizedState)||(cl=!0),t.memoizedState=r,t.baseState=l,t.baseQueue=s,n.lastRenderedState=r}if(null!==(e=n.interleaved)){o=e;do{a=o.lane,ta.lanes|=a,hu|=a,o=o.next}while(o!==e)}else null===o&&(n.lanes=0);return[t.memoizedState,n.dispatch]}function va(e){var t=pa(),n=t.queue;if(null===n)throw Error(i(311));n.lastRenderedReducer=e;var r=n.dispatch,o=n.pending,a=t.memoizedState;if(null!==o){n.pending=null;var l=o=o.next;do{a=e(a,l.action),l=l.next}while(l!==o);Jn(a,t.memoizedState)||(cl=!0),t.memoizedState=a,null===t.baseQueue&&(t.baseState=a),n.lastRenderedState=a}return[a,r]}function ga(){}function ya(e,t){var n=ta,r=pa(),o=t(),a=!Jn(r.memoizedState,o);if(a&&(r.memoizedState=o,cl=!0),r=r.queue,Pa(ka.bind(null,n,r,e),[e]),r.getSnapshot!==t||a||null!==ra&&1&ra.memoizedState.tag){if(n.flags|=2048,xa(9,_a.bind(null,n,r,o,t),void 0,null),null===uu)throw Error(i(349));0!=(30&ea)||ba(n,t,o)}return o}function ba(e,t,n){e.flags|=16384,e={getSnapshot:t,value:n},null===(t=ta.updateQueue)?(t={lastEffect:null,stores:null},ta.updateQueue=t,t.stores=[e]):null===(n=t.stores)?t.stores=[e]:n.push(e)}function _a(e,t,n,r){t.value=n,t.getSnapshot=r,Ca(t)&&Fu(e,1,-1)}function ka(e,t,n){return n((function(){Ca(t)&&Fu(e,1,-1)}))}function Ca(e){var t=e.getSnapshot;e=e.value;try{var n=t();return!Jn(e,n)}catch(e){return!0}}function wa(e){var t=fa();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:ma,lastRenderedState:e},t.queue=e,e=e.dispatch=Ha.bind(null,ta,e),[t.memoizedState,e]}function xa(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===(t=ta.updateQueue)?(t={lastEffect:null,stores:null},ta.updateQueue=t,t.lastEffect=e.next=e):null===(n=t.lastEffect)?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e),e}function Ea(){return pa().memoizedState}function Sa(e,t,n,r){var o=fa();ta.flags|=e,o.memoizedState=xa(1|t,n,void 0,void 0===r?null:r)}function Ia(e,t,n,r){var o=pa();r=void 0===r?null:r;var i=void 0;if(null!==na){var a=na.memoizedState;if(i=a.destroy,null!==r&&sa(r,a.deps))return void(o.memoizedState=xa(t,n,i,r))}ta.flags|=e,o.memoizedState=xa(1|t,n,i,r)}function Ta(e,t){return Sa(8390656,8,e,t)}function Pa(e,t){return Ia(2048,8,e,t)}function Ma(e,t){return Ia(4,2,e,t)}function Da(e,t){return Ia(4,4,e,t)}function Na(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function Ra(e,t,n){return n=null!=n?n.concat([e]):null,Ia(4,4,Na.bind(null,t,e),n)}function Fa(){}function Ba(e,t){var n=pa();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&sa(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function La(e,t){var n=pa();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&sa(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)}function Oa(e,t){var n=ht;ht=0!==n&&4>n?n:4,e(!0);var r=Ji.transition;Ji.transition={};try{e(!1),t()}finally{ht=n,Ji.transition=r}}function Aa(){return pa().memoizedState}function za(e,t,n){var r=Ru(e);n={lane:r,action:n,hasEagerState:!1,eagerState:null,next:null},Ua(e)?Wa(t,n):(ja(e,t,n),null!==(e=Fu(e,r,n=Nu()))&&Ka(e,t,r))}function Ha(e,t,n){var r=Ru(e),o={lane:r,action:n,hasEagerState:!1,eagerState:null,next:null};if(Ua(e))Wa(t,o);else{ja(e,t,o);var i=e.alternate;if(0===e.lanes&&(null===i||0===i.lanes)&&null!==(i=t.lastRenderedReducer))try{var a=t.lastRenderedState,l=i(a,n);if(o.hasEagerState=!0,o.eagerState=l,Jn(l,a))return}catch(e){}null!==(e=Fu(e,r,n=Nu()))&&Ka(e,t,r)}}function Ua(e){var t=e.alternate;return e===ta||null!==t&&t===ta}function Wa(e,t){ia=oa=!0;var n=e.pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}function ja(e,t,n){null!==uu&&0!=(1&e.mode)&&0==(2&lu)?(null===(e=t.interleaved)?(n.next=n,null===Vo?Vo=[t]:Vo.push(t)):(n.next=e.next,e.next=n),t.interleaved=n):(null===(e=t.pending)?n.next=n:(n.next=e.next,e.next=n),t.pending=n)}function Ka(e,t,n){if(0!=(4194240&n)){var r=t.lanes;n|=r&=e.pendingLanes,t.lanes=n,mt(e,n)}}var Va={readContext:Ko,useCallback:ua,useContext:ua,useEffect:ua,useImperativeHandle:ua,useInsertionEffect:ua,useLayoutEffect:ua,useMemo:ua,useReducer:ua,useRef:ua,useState:ua,useDebugValue:ua,useDeferredValue:ua,useTransition:ua,useMutableSource:ua,useSyncExternalStore:ua,useId:ua,unstable_isNewReconciler:!1},qa={readContext:Ko,useCallback:function(e,t){return fa().memoizedState=[e,void 0===t?null:t],e},useContext:Ko,useEffect:Ta,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,Sa(4194308,4,Na.bind(null,t,e),n)},useLayoutEffect:function(e,t){return Sa(4194308,4,e,t)},useInsertionEffect:function(e,t){return Sa(4,2,e,t)},useMemo:function(e,t){var n=fa();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=fa();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:e,lastRenderedState:t},r.queue=e,e=e.dispatch=za.bind(null,ta,e),[r.memoizedState,e]},useRef:function(e){return e={current:e},fa().memoizedState=e},useState:wa,useDebugValue:Fa,useDeferredValue:function(e){var t=wa(e),n=t[0],r=t[1];return Ta((function(){var t=Ji.transition;Ji.transition={};try{r(e)}finally{Ji.transition=t}}),[e]),n},useTransition:function(){var e=wa(!1),t=e[0];return e=Oa.bind(null,e[1]),fa().memoizedState=e,[t,e]},useMutableSource:function(){},useSyncExternalStore:function(e,t,n){var r=ta,o=fa();if(wi){if(void 0===n)throw Error(i(407));n=n()}else{if(n=t(),null===uu)throw Error(i(349));0!=(30&ea)||ba(r,t,n)}o.memoizedState=n;var a={value:n,getSnapshot:t};return o.queue=a,Ta(ka.bind(null,r,a,e),[e]),r.flags|=2048,xa(9,_a.bind(null,r,a,n,t),void 0,null),n},useId:function(){var e=fa(),t=uu.identifierPrefix;if(wi){var n=vi;t=":"+t+"R"+(n=(hi&~(1<<32-rt(hi)-1)).toString(32)+n),0<(n=aa++)&&(t+="H"+n.toString(32)),t+=":"}else t=":"+t+"r"+(n=la++).toString(32)+":";return e.memoizedState=t},unstable_isNewReconciler:!1},$a={readContext:Ko,useCallback:Ba,useContext:Ko,useEffect:Pa,useImperativeHandle:Ra,useInsertionEffect:Ma,useLayoutEffect:Da,useMemo:La,useReducer:ha,useRef:Ea,useState:function(){return ha(ma)},useDebugValue:Fa,useDeferredValue:function(e){var t=ha(ma),n=t[0],r=t[1];return Pa((function(){var t=Ji.transition;Ji.transition={};try{r(e)}finally{Ji.transition=t}}),[e]),n},useTransition:function(){return[ha(ma)[0],pa().memoizedState]},useMutableSource:ga,useSyncExternalStore:ya,useId:Aa,unstable_isNewReconciler:!1},Qa={readContext:Ko,useCallback:Ba,useContext:Ko,useEffect:Pa,useImperativeHandle:Ra,useInsertionEffect:Ma,useLayoutEffect:Da,useMemo:La,useReducer:va,useRef:Ea,useState:function(){return va(ma)},useDebugValue:Fa,useDeferredValue:function(e){var t=va(ma),n=t[0],r=t[1];return Pa((function(){var t=Ji.transition;Ji.transition={};try{r(e)}finally{Ji.transition=t}}),[e]),n},useTransition:function(){return[va(ma)[0],pa().memoizedState]},useMutableSource:ga,useSyncExternalStore:ya,useId:Aa,unstable_isNewReconciler:!1};function Ga(e,t){try{var n="",r=t;do{n+=U(r),r=r.return}while(r);var o=n}catch(e){o="\nError generating stack: "+e.message+"\n"+e.stack}return{value:e,source:t,stack:o}}function Ya(e,t){try{console.error(t.value)}catch(e){setTimeout((function(){throw e}))}}var Za,Xa,Ja,el="function"==typeof WeakMap?WeakMap:Map;function tl(e,t,n){(n=Go(-1,n)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){Cu||(Cu=!0,wu=r),Ya(0,t)},n}function nl(e,t,n){(n=Go(-1,n)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var o=t.value;n.payload=function(){return r(o)},n.callback=function(){Ya(0,t)}}var i=e.stateNode;return null!==i&&"function"==typeof i.componentDidCatch&&(n.callback=function(){Ya(0,t),"function"!=typeof r&&(null===xu?xu=new Set([this]):xu.add(this));var e=t.stack;this.componentDidCatch(t.value,{componentStack:null!==e?e:""})}),n}function rl(e,t,n){var r=e.pingCache;if(null===r){r=e.pingCache=new el;var o=new Set;r.set(t,o)}else void 0===(o=r.get(t))&&(o=new Set,r.set(t,o));o.has(n)||(o.add(n),e=os.bind(null,e,t,n),t.then(e,e))}function ol(e){do{var t;if((t=13===e.tag)&&(t=null===(t=e.memoizedState)||null!==t.dehydrated),t)return e;e=e.return}while(null!==e);return null}function il(e,t,n,r,o){return 0==(1&e.mode)?(e===t?e.flags|=65536:(e.flags|=128,n.flags|=131072,n.flags&=-52805,1===n.tag&&(null===n.alternate?n.tag=17:((t=Go(-1,1)).tag=2,Yo(n,t))),n.lanes|=1),e):(e.flags|=65536,e.lanes=o,e)}function al(e,t){if(!wi)switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function ll(e){var t=null!==e.alternate&&e.alternate.child===e.child,n=0,r=0;if(t)for(var o=e.child;null!==o;)n|=o.lanes|o.childLanes,r|=14680064&o.subtreeFlags,r|=14680064&o.flags,o.return=e,o=o.sibling;else for(o=e.child;null!==o;)n|=o.lanes|o.childLanes,r|=o.subtreeFlags,r|=o.flags,o.return=e,o=o.sibling;return e.subtreeFlags|=r,e.childLanes=n,t}function ul(e,t,n){var r=t.pendingProps;switch(_i(t),t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return ll(t),null;case 1:return wo(t.type)&&xo(),ll(t),null;case 3:return r=t.stateNode,Vi(),vo(_o),vo(bo),Zi(),r.pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),null!==e&&null!==e.child||(Mi(t)?t.flags|=4:null===e||e.memoizedState.isDehydrated&&0==(256&t.flags)||(t.flags|=1024,null!==xi&&(zu(xi),xi=null))),ll(t),null;case 5:$i(t);var o=ji(Wi.current);if(n=t.type,null!==e&&null!=t.stateNode)Xa(e,t,n,r),e.ref!==t.ref&&(t.flags|=512,t.flags|=2097152);else{if(!r){if(null===t.stateNode)throw Error(i(166));return ll(t),null}if(e=ji(Hi.current),Mi(t)){r=t.stateNode,n=t.type;var a=t.memoizedProps;switch(r[no]=t,r[ro]=a,e=0!=(1&t.mode),n){case"dialog":Mr("cancel",r),Mr("close",r);break;case"iframe":case"object":case"embed":Mr("load",r);break;case"video":case"audio":for(o=0;o<Sr.length;o++)Mr(Sr[o],r);break;case"source":Mr("error",r);break;case"img":case"image":case"link":Mr("error",r),Mr("load",r);break;case"details":Mr("toggle",r);break;case"input":G(r,a),Mr("invalid",r);break;case"select":r._wrapperState={wasMultiple:!!a.multiple},Mr("invalid",r);break;case"textarea":re(r,a),Mr("invalid",r)}for(var u in ve(n,a),o=null,a)if(a.hasOwnProperty(u)){var s=a[u];"children"===u?"string"==typeof s?r.textContent!==s&&(jr(r.textContent,s,e),o=["children",s]):"number"==typeof s&&r.textContent!==""+s&&(jr(r.textContent,s,e),o=["children",""+s]):l.hasOwnProperty(u)&&null!=s&&"onScroll"===u&&Mr("scroll",r)}switch(n){case"input":V(r),X(r,a,!0);break;case"textarea":V(r),ie(r);break;case"select":case"option":break;default:"function"==typeof a.onClick&&(r.onclick=Kr)}r=o,t.updateQueue=r,null!==r&&(t.flags|=4)}else{u=9===o.nodeType?o:o.ownerDocument,"http://www.w3.org/1999/xhtml"===e&&(e=ae(n)),"http://www.w3.org/1999/xhtml"===e?"script"===n?((e=u.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof r.is?e=u.createElement(n,{is:r.is}):(e=u.createElement(n),"select"===n&&(u=e,r.multiple?u.multiple=!0:r.size&&(u.size=r.size))):e=u.createElementNS(e,n),e[no]=t,e[ro]=r,Za(e,t),t.stateNode=e;e:{switch(u=ge(n,r),n){case"dialog":Mr("cancel",e),Mr("close",e),o=r;break;case"iframe":case"object":case"embed":Mr("load",e),o=r;break;case"video":case"audio":for(o=0;o<Sr.length;o++)Mr(Sr[o],e);o=r;break;case"source":Mr("error",e),o=r;break;case"img":case"image":case"link":Mr("error",e),Mr("load",e),o=r;break;case"details":Mr("toggle",e),o=r;break;case"input":G(e,r),o=Q(e,r),Mr("invalid",e);break;case"option":o=r;break;case"select":e._wrapperState={wasMultiple:!!r.multiple},o=O({},r,{value:void 0}),Mr("invalid",e);break;case"textarea":re(e,r),o=ne(e,r),Mr("invalid",e);break;default:o=r}for(a in ve(n,o),s=o)if(s.hasOwnProperty(a)){var c=s[a];"style"===a?me(e,c):"dangerouslySetInnerHTML"===a?null!=(c=c?c.__html:void 0)&&se(e,c):"children"===a?"string"==typeof c?("textarea"!==n||""!==c)&&ce(e,c):"number"==typeof c&&ce(e,""+c):"suppressContentEditableWarning"!==a&&"suppressHydrationWarning"!==a&&"autoFocus"!==a&&(l.hasOwnProperty(a)?null!=c&&"onScroll"===a&&Mr("scroll",e):null!=c&&b(e,a,c,u))}switch(n){case"input":V(e),X(e,r,!1);break;case"textarea":V(e),ie(e);break;case"option":null!=r.value&&e.setAttribute("value",""+j(r.value));break;case"select":e.multiple=!!r.multiple,null!=(a=r.value)?te(e,!!r.multiple,a,!1):null!=r.defaultValue&&te(e,!!r.multiple,r.defaultValue,!0);break;default:"function"==typeof o.onClick&&(e.onclick=Kr)}switch(n){case"button":case"input":case"select":case"textarea":r=!!r.autoFocus;break e;case"img":r=!0;break e;default:r=!1}}r&&(t.flags|=4)}null!==t.ref&&(t.flags|=512,t.flags|=2097152)}return ll(t),null;case 6:if(e&&null!=t.stateNode)Ja(0,t,e.memoizedProps,r);else{if("string"!=typeof r&&null===t.stateNode)throw Error(i(166));if(n=ji(Wi.current),ji(Hi.current),Mi(t)){if(r=t.stateNode,n=t.memoizedProps,r[no]=t,(a=r.nodeValue!==n)&&null!==(e=ki))switch(u=0!=(1&e.mode),e.tag){case 3:jr(r.nodeValue,n,u);break;case 5:!0!==e.memoizedProps[void 0]&&jr(r.nodeValue,n,u)}a&&(t.flags|=4)}else(r=(9===n.nodeType?n:n.ownerDocument).createTextNode(r))[no]=t,t.stateNode=r}return ll(t),null;case 13:if(vo(Qi),r=t.memoizedState,wi&&null!==Ci&&0!=(1&t.mode)&&0==(128&t.flags)){for(r=Ci;r;)r=Jr(r.nextSibling);return Di(),t.flags|=98560,t}if(null!==r&&null!==r.dehydrated){if(r=Mi(t),null===e){if(!r)throw Error(i(318));if(!(r=null!==(r=t.memoizedState)?r.dehydrated:null))throw Error(i(317));r[no]=t}else Di(),0==(128&t.flags)&&(t.memoizedState=null),t.flags|=4;return ll(t),null}return null!==xi&&(zu(xi),xi=null),0!=(128&t.flags)?(t.lanes=n,t):(r=null!==r,n=!1,null===e?Mi(t):n=null!==e.memoizedState,r&&!n&&(t.child.flags|=8192,0!=(1&t.mode)&&(null===e||0!=(1&Qi.current)?0===pu&&(pu=3):Qu())),null!==t.updateQueue&&(t.flags|=4),ll(t),null);case 4:return Vi(),null===e&&Rr(t.stateNode.containerInfo),ll(t),null;case 10:return Uo(t.type._context),ll(t),null;case 17:return wo(t.type)&&xo(),ll(t),null;case 19:if(vo(Qi),null===(a=t.memoizedState))return ll(t),null;if(r=0!=(128&t.flags),null===(u=a.rendering))if(r)al(a,!1);else{if(0!==pu||null!==e&&0!=(128&e.flags))for(e=t.child;null!==e;){if(null!==(u=Gi(e))){for(t.flags|=128,al(a,!1),null!==(r=u.updateQueue)&&(t.updateQueue=r,t.flags|=4),t.subtreeFlags=0,r=n,n=t.child;null!==n;)e=r,(a=n).flags&=14680066,null===(u=a.alternate)?(a.childLanes=0,a.lanes=e,a.child=null,a.subtreeFlags=0,a.memoizedProps=null,a.memoizedState=null,a.updateQueue=null,a.dependencies=null,a.stateNode=null):(a.childLanes=u.childLanes,a.lanes=u.lanes,a.child=u.child,a.subtreeFlags=0,a.deletions=null,a.memoizedProps=u.memoizedProps,a.memoizedState=u.memoizedState,a.updateQueue=u.updateQueue,a.type=u.type,e=u.dependencies,a.dependencies=null===e?null:{lanes:e.lanes,firstContext:e.firstContext}),n=n.sibling;return go(Qi,1&Qi.current|2),t.child}e=e.sibling}null!==a.tail&&Qe()>ku&&(t.flags|=128,r=!0,al(a,!1),t.lanes=4194304)}else{if(!r)if(null!==(e=Gi(u))){if(t.flags|=128,r=!0,null!==(n=e.updateQueue)&&(t.updateQueue=n,t.flags|=4),al(a,!0),null===a.tail&&"hidden"===a.tailMode&&!u.alternate&&!wi)return ll(t),null}else 2*Qe()-a.renderingStartTime>ku&&1073741824!==n&&(t.flags|=128,r=!0,al(a,!1),t.lanes=4194304);a.isBackwards?(u.sibling=t.child,t.child=u):(null!==(n=a.last)?n.sibling=u:t.child=u,a.last=u)}return null!==a.tail?(t=a.tail,a.rendering=t,a.tail=t.sibling,a.renderingStartTime=Qe(),t.sibling=null,n=Qi.current,go(Qi,r?1&n|2:1&n),t):(ll(t),null);case 22:case 23:return Ku(),r=null!==t.memoizedState,null!==e&&null!==e.memoizedState!==r&&(t.flags|=8192),r&&0!=(1&t.mode)?0!=(1073741824&du)&&(ll(t),6&t.subtreeFlags&&(t.flags|=8192)):ll(t),null;case 24:case 25:return null}throw Error(i(156,t.tag))}Za=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},Xa=function(e,t,n,r){var o=e.memoizedProps;if(o!==r){e=t.stateNode,ji(Hi.current);var i,a=null;switch(n){case"input":o=Q(e,o),r=Q(e,r),a=[];break;case"select":o=O({},o,{value:void 0}),r=O({},r,{value:void 0}),a=[];break;case"textarea":o=ne(e,o),r=ne(e,r),a=[];break;default:"function"!=typeof o.onClick&&"function"==typeof r.onClick&&(e.onclick=Kr)}for(c in ve(n,r),n=null,o)if(!r.hasOwnProperty(c)&&o.hasOwnProperty(c)&&null!=o[c])if("style"===c){var u=o[c];for(i in u)u.hasOwnProperty(i)&&(n||(n={}),n[i]="")}else"dangerouslySetInnerHTML"!==c&&"children"!==c&&"suppressContentEditableWarning"!==c&&"suppressHydrationWarning"!==c&&"autoFocus"!==c&&(l.hasOwnProperty(c)?a||(a=[]):(a=a||[]).push(c,null));for(c in r){var s=r[c];if(u=null!=o?o[c]:void 0,r.hasOwnProperty(c)&&s!==u&&(null!=s||null!=u))if("style"===c)if(u){for(i in u)!u.hasOwnProperty(i)||s&&s.hasOwnProperty(i)||(n||(n={}),n[i]="");for(i in s)s.hasOwnProperty(i)&&u[i]!==s[i]&&(n||(n={}),n[i]=s[i])}else n||(a||(a=[]),a.push(c,n)),n=s;else"dangerouslySetInnerHTML"===c?(s=s?s.__html:void 0,u=u?u.__html:void 0,null!=s&&u!==s&&(a=a||[]).push(c,s)):"children"===c?"string"!=typeof s&&"number"!=typeof s||(a=a||[]).push(c,""+s):"suppressContentEditableWarning"!==c&&"suppressHydrationWarning"!==c&&(l.hasOwnProperty(c)?(null!=s&&"onScroll"===c&&Mr("scroll",e),a||u===s||(a=[])):(a=a||[]).push(c,s))}n&&(a=a||[]).push("style",n);var c=a;(t.updateQueue=c)&&(t.flags|=4)}},Ja=function(e,t,n,r){n!==r&&(t.flags|=4)};var sl=_.ReactCurrentOwner,cl=!1;function dl(e,t,n,r){t.child=null===e?Ai(t,null,n,r):Oi(t,e.child,n,r)}function fl(e,t,n,r,o){n=n.render;var i=t.ref;return jo(t,o),r=ca(e,t,n,r,i,o),n=da(),null===e||cl?(wi&&n&&bi(t),t.flags|=1,dl(e,t,r,o),t.child):(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~o,Nl(e,t,o))}function pl(e,t,n,r,o){if(null===e){var i=n.type;return"function"!=typeof i||ds(i)||void 0!==i.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=ps(n.type,null,r,t,t.mode,o)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=i,ml(e,t,i,r,o))}if(i=e.child,0==(e.lanes&o)){var a=i.memoizedProps;if((n=null!==(n=n.compare)?n:er)(a,r)&&e.ref===t.ref)return Nl(e,t,o)}return t.flags|=1,(e=fs(i,r)).ref=t.ref,e.return=t,t.child=e}function ml(e,t,n,r,o){if(null!==e&&er(e.memoizedProps,r)&&e.ref===t.ref){if(cl=!1,0==(e.lanes&o))return t.lanes=e.lanes,Nl(e,t,o);0!=(131072&e.flags)&&(cl=!0)}return gl(e,t,n,r,o)}function hl(e,t,n){var r=t.pendingProps,o=r.children,i=null!==e?e.memoizedState:null;if("hidden"===r.mode)if(0==(1&t.mode))t.memoizedState={baseLanes:0,cachePool:null},go(fu,du),du|=n;else{if(0==(1073741824&n))return e=null!==i?i.baseLanes|n:n,t.lanes=t.childLanes=1073741824,t.memoizedState={baseLanes:e,cachePool:null},t.updateQueue=null,go(fu,du),du|=e,null;t.memoizedState={baseLanes:0,cachePool:null},r=null!==i?i.baseLanes:n,go(fu,du),du|=r}else null!==i?(r=i.baseLanes|n,t.memoizedState=null):r=n,go(fu,du),du|=r;return dl(e,t,o,n),t.child}function vl(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.flags|=512,t.flags|=2097152)}function gl(e,t,n,r,o){var i=wo(n)?ko:bo.current;return i=Co(t,i),jo(t,o),n=ca(e,t,n,r,i,o),r=da(),null===e||cl?(wi&&r&&bi(t),t.flags|=1,dl(e,t,n,o),t.child):(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~o,Nl(e,t,o))}function yl(e,t,n,r,o){if(wo(n)){var i=!0;Io(t)}else i=!1;if(jo(t,o),null===t.stateNode)null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),ii(t,n,r),li(t,n,r,o),r=!0;else if(null===e){var a=t.stateNode,l=t.memoizedProps;a.props=l;var u=a.context,s=n.contextType;"object"==typeof s&&null!==s?s=Ko(s):s=Co(t,s=wo(n)?ko:bo.current);var c=n.getDerivedStateFromProps,d="function"==typeof c||"function"==typeof a.getSnapshotBeforeUpdate;d||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(l!==r||u!==s)&&ai(t,a,r,s),qo=!1;var f=t.memoizedState;a.state=f,Jo(t,r,a,o),u=t.memoizedState,l!==r||f!==u||_o.current||qo?("function"==typeof c&&(ni(t,n,c,r),u=t.memoizedState),(l=qo||oi(t,n,l,r,f,u,s))?(d||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||("function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount()),"function"==typeof a.componentDidMount&&(t.flags|=4194308)):("function"==typeof a.componentDidMount&&(t.flags|=4194308),t.memoizedProps=r,t.memoizedState=u),a.props=r,a.state=u,a.context=s,r=l):("function"==typeof a.componentDidMount&&(t.flags|=4194308),r=!1)}else{a=t.stateNode,Qo(e,t),l=t.memoizedProps,s=t.type===t.elementType?l:Bo(t.type,l),a.props=s,d=t.pendingProps,f=a.context,"object"==typeof(u=n.contextType)&&null!==u?u=Ko(u):u=Co(t,u=wo(n)?ko:bo.current);var p=n.getDerivedStateFromProps;(c="function"==typeof p||"function"==typeof a.getSnapshotBeforeUpdate)||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(l!==d||f!==u)&&ai(t,a,r,u),qo=!1,f=t.memoizedState,a.state=f,Jo(t,r,a,o);var m=t.memoizedState;l!==d||f!==m||_o.current||qo?("function"==typeof p&&(ni(t,n,p,r),m=t.memoizedState),(s=qo||oi(t,n,s,r,f,m,u)||!1)?(c||"function"!=typeof a.UNSAFE_componentWillUpdate&&"function"!=typeof a.componentWillUpdate||("function"==typeof a.componentWillUpdate&&a.componentWillUpdate(r,m,u),"function"==typeof a.UNSAFE_componentWillUpdate&&a.UNSAFE_componentWillUpdate(r,m,u)),"function"==typeof a.componentDidUpdate&&(t.flags|=4),"function"==typeof a.getSnapshotBeforeUpdate&&(t.flags|=1024)):("function"!=typeof a.componentDidUpdate||l===e.memoizedProps&&f===e.memoizedState||(t.flags|=4),"function"!=typeof a.getSnapshotBeforeUpdate||l===e.memoizedProps&&f===e.memoizedState||(t.flags|=1024),t.memoizedProps=r,t.memoizedState=m),a.props=r,a.state=m,a.context=u,r=s):("function"!=typeof a.componentDidUpdate||l===e.memoizedProps&&f===e.memoizedState||(t.flags|=4),"function"!=typeof a.getSnapshotBeforeUpdate||l===e.memoizedProps&&f===e.memoizedState||(t.flags|=1024),r=!1)}return bl(e,t,n,r,i,o)}function bl(e,t,n,r,o,i){vl(e,t);var a=0!=(128&t.flags);if(!r&&!a)return o&&To(t,n,!1),Nl(e,t,i);r=t.stateNode,sl.current=t;var l=a&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.flags|=1,null!==e&&a?(t.child=Oi(t,e.child,null,i),t.child=Oi(t,null,l,i)):dl(e,t,l,i),t.memoizedState=r.state,o&&To(t,n,!0),t.child}function _l(e){var t=e.stateNode;t.pendingContext?Eo(0,t.pendingContext,t.pendingContext!==t.context):t.context&&Eo(0,t.context,!1),Ki(e,t.containerInfo)}function kl(e,t,n,r,o){return Di(),Ni(o),t.flags|=256,dl(e,t,n,r),t.child}var Cl={dehydrated:null,treeContext:null,retryLane:0};function wl(e){return{baseLanes:e,cachePool:null}}function xl(e,t,n){var r,o=t.pendingProps,a=Qi.current,l=!1,u=0!=(128&t.flags);if((r=u)||(r=(null===e||null!==e.memoizedState)&&0!=(2&a)),r?(l=!0,t.flags&=-129):null!==e&&null===e.memoizedState||(a|=1),go(Qi,1&a),null===e)return Ti(t),null!==(e=t.memoizedState)&&null!==(e=e.dehydrated)?(0==(1&t.mode)?t.lanes=1:"$!"===e.data?t.lanes=8:t.lanes=1073741824,null):(a=o.children,e=o.fallback,l?(o=t.mode,l=t.child,a={mode:"hidden",children:a},0==(1&o)&&null!==l?(l.childLanes=0,l.pendingProps=a):l=hs(a,o,0,null),e=ms(e,o,n,null),l.return=t,e.return=t,l.sibling=e,t.child=l,t.child.memoizedState=wl(n),t.memoizedState=Cl,e):El(t,a));if(null!==(a=e.memoizedState)){if(null!==(r=a.dehydrated)){if(u)return 256&t.flags?(t.flags&=-257,Tl(e,t,n,Error(i(422)))):null!==t.memoizedState?(t.child=e.child,t.flags|=128,null):(l=o.fallback,a=t.mode,o=hs({mode:"visible",children:o.children},a,0,null),(l=ms(l,a,n,null)).flags|=2,o.return=t,l.return=t,o.sibling=l,t.child=o,0!=(1&t.mode)&&Oi(t,e.child,null,n),t.child.memoizedState=wl(n),t.memoizedState=Cl,l);if(0==(1&t.mode))t=Tl(e,t,n,null);else if("$!"===r.data)t=Tl(e,t,n,Error(i(419)));else if(o=0!=(n&e.childLanes),cl||o){if(null!==(o=uu)){switch(n&-n){case 4:l=2;break;case 16:l=8;break;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:l=32;break;case 536870912:l=268435456;break;default:l=0}0!==(o=0!=(l&(o.suspendedLanes|n))?0:l)&&o!==a.retryLane&&(a.retryLane=o,Fu(e,o,-1))}Qu(),t=Tl(e,t,n,Error(i(421)))}else"$?"===r.data?(t.flags|=128,t.child=e.child,t=as.bind(null,e),r._reactRetry=t,t=null):(n=a.treeContext,Ci=Jr(r.nextSibling),ki=t,wi=!0,xi=null,null!==n&&(fi[pi++]=hi,fi[pi++]=vi,fi[pi++]=mi,hi=n.id,vi=n.overflow,mi=t),(t=El(t,t.pendingProps.children)).flags|=4096);return t}return l?(o=Il(e,t,o.children,o.fallback,n),l=t.child,a=e.child.memoizedState,l.memoizedState=null===a?wl(n):{baseLanes:a.baseLanes|n,cachePool:null},l.childLanes=e.childLanes&~n,t.memoizedState=Cl,o):(n=Sl(e,t,o.children,n),t.memoizedState=null,n)}return l?(o=Il(e,t,o.children,o.fallback,n),l=t.child,a=e.child.memoizedState,l.memoizedState=null===a?wl(n):{baseLanes:a.baseLanes|n,cachePool:null},l.childLanes=e.childLanes&~n,t.memoizedState=Cl,o):(n=Sl(e,t,o.children,n),t.memoizedState=null,n)}function El(e,t){return(t=hs({mode:"visible",children:t},e.mode,0,null)).return=e,e.child=t}function Sl(e,t,n,r){var o=e.child;return e=o.sibling,n=fs(o,{mode:"visible",children:n}),0==(1&t.mode)&&(n.lanes=r),n.return=t,n.sibling=null,null!==e&&(null===(r=t.deletions)?(t.deletions=[e],t.flags|=16):r.push(e)),t.child=n}function Il(e,t,n,r,o){var i=t.mode,a=(e=e.child).sibling,l={mode:"hidden",children:n};return 0==(1&i)&&t.child!==e?((n=t.child).childLanes=0,n.pendingProps=l,t.deletions=null):(n=fs(e,l)).subtreeFlags=14680064&e.subtreeFlags,null!==a?r=fs(a,r):(r=ms(r,i,o,null)).flags|=2,r.return=t,n.return=t,n.sibling=r,t.child=n,r}function Tl(e,t,n,r){return null!==r&&Ni(r),Oi(t,e.child,null,n),(e=El(t,t.pendingProps.children)).flags|=2,t.memoizedState=null,e}function Pl(e,t,n){e.lanes|=t;var r=e.alternate;null!==r&&(r.lanes|=t),Wo(e.return,t,n)}function Ml(e,t,n,r,o){var i=e.memoizedState;null===i?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailMode:o}:(i.isBackwards=t,i.rendering=null,i.renderingStartTime=0,i.last=r,i.tail=n,i.tailMode=o)}function Dl(e,t,n){var r=t.pendingProps,o=r.revealOrder,i=r.tail;if(dl(e,t,r.children,n),0!=(2&(r=Qi.current)))r=1&r|2,t.flags|=128;else{if(null!==e&&0!=(128&e.flags))e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&Pl(e,n,t);else if(19===e.tag)Pl(e,n,t);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(go(Qi,r),0==(1&t.mode))t.memoizedState=null;else switch(o){case"forwards":for(n=t.child,o=null;null!==n;)null!==(e=n.alternate)&&null===Gi(e)&&(o=n),n=n.sibling;null===(n=o)?(o=t.child,t.child=null):(o=n.sibling,n.sibling=null),Ml(t,!1,o,n,i);break;case"backwards":for(n=null,o=t.child,t.child=null;null!==o;){if(null!==(e=o.alternate)&&null===Gi(e)){t.child=o;break}e=o.sibling,o.sibling=n,n=o,o=e}Ml(t,!0,n,null,i);break;case"together":Ml(t,!1,null,null,void 0);break;default:t.memoizedState=null}return t.child}function Nl(e,t,n){if(null!==e&&(t.dependencies=e.dependencies),hu|=t.lanes,0==(n&t.childLanes))return null;if(null!==e&&t.child!==e.child)throw Error(i(153));if(null!==t.child){for(n=fs(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=fs(e,e.pendingProps)).return=t;n.sibling=null}return t.child}function Rl(e,t){switch(_i(t),t.tag){case 1:return wo(t.type)&&xo(),65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 3:return Vi(),vo(_o),vo(bo),Zi(),0!=(65536&(e=t.flags))&&0==(128&e)?(t.flags=-65537&e|128,t):null;case 5:return $i(t),null;case 13:if(vo(Qi),null!==(e=t.memoizedState)&&null!==e.dehydrated){if(null===t.alternate)throw Error(i(340));Di()}return 65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 19:return vo(Qi),null;case 4:return Vi(),null;case 10:return Uo(t.type._context),null;case 22:case 23:return Ku(),null;case 24:default:return null}}var Fl=!1,Bl=!1,Ll="function"==typeof WeakSet?WeakSet:Set,Ol=null;function Al(e,t){var n=e.ref;if(null!==n)if("function"==typeof n)try{n(null)}catch(n){rs(e,t,n)}else n.current=null}function zl(e,t,n){try{n()}catch(n){rs(e,t,n)}}var Hl=!1;function Ul(e,t,n){var r=t.updateQueue;if(null!==(r=null!==r?r.lastEffect:null)){var o=r=r.next;do{if((o.tag&e)===e){var i=o.destroy;o.destroy=void 0,void 0!==i&&zl(t,n,i)}o=o.next}while(o!==r)}}function Wl(e,t){if(null!==(t=null!==(t=t.updateQueue)?t.lastEffect:null)){var n=t=t.next;do{if((n.tag&e)===e){var r=n.create;n.destroy=r()}n=n.next}while(n!==t)}}function jl(e){var t=e.ref;if(null!==t){var n=e.stateNode;switch(e.tag){case 5:e=n;break;default:e=n}"function"==typeof t?t(e):t.current=e}}function Kl(e,t,n){if(nt&&"function"==typeof nt.onCommitFiberUnmount)try{nt.onCommitFiberUnmount(tt,t)}catch(e){}switch(t.tag){case 0:case 11:case 14:case 15:if(null!==(e=t.updateQueue)&&null!==(e=e.lastEffect)){var r=e=e.next;do{var o=r,i=o.destroy;o=o.tag,void 0!==i&&(0!=(2&o)||0!=(4&o))&&zl(t,n,i),r=r.next}while(r!==e)}break;case 1:if(Al(t,n),"function"==typeof(e=t.stateNode).componentWillUnmount)try{e.props=t.memoizedProps,e.state=t.memoizedState,e.componentWillUnmount()}catch(e){rs(t,n,e)}break;case 5:Al(t,n);break;case 4:Gl(e,t,n)}}function Vl(e){var t=e.alternate;null!==t&&(e.alternate=null,Vl(t)),e.child=null,e.deletions=null,e.sibling=null,5===e.tag&&(null!==(t=e.stateNode)&&(delete t[no],delete t[ro],delete t[io],delete t[ao],delete t[lo])),e.stateNode=null,e.return=null,e.dependencies=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.stateNode=null,e.updateQueue=null}function ql(e){return 5===e.tag||3===e.tag||4===e.tag}function $l(e){e:for(;;){for(;null===e.sibling;){if(null===e.return||ql(e.return))return null;e=e.return}for(e.sibling.return=e.return,e=e.sibling;5!==e.tag&&6!==e.tag&&18!==e.tag;){if(2&e.flags)continue e;if(null===e.child||4===e.tag)continue e;e.child.return=e,e=e.child}if(!(2&e.flags))return e.stateNode}}function Ql(e){e:{for(var t=e.return;null!==t;){if(ql(t))break e;t=t.return}throw Error(i(160))}var n=t;switch(n.tag){case 5:t=n.stateNode,32&n.flags&&(ce(t,""),n.flags&=-33),function e(t,n,r){var o=t.tag;if(5===o||6===o)t=t.stateNode,n?r.insertBefore(t,n):r.appendChild(t);else if(4!==o&&null!==(t=t.child))for(e(t,n,r),t=t.sibling;null!==t;)e(t,n,r),t=t.sibling}(e,n=$l(e),t);break;case 3:case 4:t=n.stateNode.containerInfo,function e(t,n,r){var o=t.tag;if(5===o||6===o)t=t.stateNode,n?8===r.nodeType?r.parentNode.insertBefore(t,n):r.insertBefore(t,n):(8===r.nodeType?(n=r.parentNode).insertBefore(t,r):(n=r).appendChild(t),null!==(r=r._reactRootContainer)&&void 0!==r||null!==n.onclick||(n.onclick=Kr));else if(4!==o&&null!==(t=t.child))for(e(t,n,r),t=t.sibling;null!==t;)e(t,n,r),t=t.sibling}(e,n=$l(e),t);break;default:throw Error(i(161))}}function Gl(e,t,n){for(var r,o,a=t,l=!1;;){if(!l){l=a.return;e:for(;;){if(null===l)throw Error(i(160));switch(r=l.stateNode,l.tag){case 5:o=!1;break e;case 3:case 4:r=r.containerInfo,o=!0;break e}l=l.return}l=!0}if(5===a.tag||6===a.tag){e:for(var u=e,s=a,c=n,d=s;;)if(Kl(u,d,c),null!==d.child&&4!==d.tag)d.child.return=d,d=d.child;else{if(d===s)break e;for(;null===d.sibling;){if(null===d.return||d.return===s)break e;d=d.return}d.sibling.return=d.return,d=d.sibling}o?(u=r,s=a.stateNode,8===u.nodeType?u.parentNode.removeChild(s):u.removeChild(s)):r.removeChild(a.stateNode)}else if(18===a.tag)o?(u=r,s=a.stateNode,8===u.nodeType?Xr(u.parentNode,s):1===u.nodeType&&Xr(u,s),At(u)):Xr(r,a.stateNode);else if(4===a.tag){if(null!==a.child){r=a.stateNode.containerInfo,o=!0,a.child.return=a,a=a.child;continue}}else if(Kl(e,a,n),null!==a.child){a.child.return=a,a=a.child;continue}if(a===t)break;for(;null===a.sibling;){if(null===a.return||a.return===t)return;4===(a=a.return).tag&&(l=!1)}a.sibling.return=a.return,a=a.sibling}}function Yl(e,t){switch(t.tag){case 0:case 11:case 14:case 15:return Ul(3,t,t.return),Wl(3,t),void Ul(5,t,t.return);case 1:return;case 5:var n=t.stateNode;if(null!=n){var r=t.memoizedProps,o=null!==e?e.memoizedProps:r;e=t.type;var a=t.updateQueue;if(t.updateQueue=null,null!==a){for("input"===e&&"radio"===r.type&&null!=r.name&&Y(n,r),ge(e,o),t=ge(e,r),o=0;o<a.length;o+=2){var l=a[o],u=a[o+1];"style"===l?me(n,u):"dangerouslySetInnerHTML"===l?se(n,u):"children"===l?ce(n,u):b(n,l,u,t)}switch(e){case"input":Z(n,r);break;case"textarea":oe(n,r);break;case"select":e=n._wrapperState.wasMultiple,n._wrapperState.wasMultiple=!!r.multiple,null!=(a=r.value)?te(n,!!r.multiple,a,!1):e!==!!r.multiple&&(null!=r.defaultValue?te(n,!!r.multiple,r.defaultValue,!0):te(n,!!r.multiple,r.multiple?[]:"",!1))}n[ro]=r}}return;case 6:if(null===t.stateNode)throw Error(i(162));return void(t.stateNode.nodeValue=t.memoizedProps);case 3:return void(null!==e&&e.memoizedState.isDehydrated&&At(t.stateNode.containerInfo));case 12:return;case 13:case 19:return void Zl(t);case 17:return}throw Error(i(163))}function Zl(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new Ll),t.forEach((function(t){var r=ls.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))}))}}function Xl(e,t,n){Ol=e,function e(t,n,r){for(var o=0!=(1&t.mode);null!==Ol;){var i=Ol,a=i.child;if(22===i.tag&&o){var l=null!==i.memoizedState||Fl;if(!l){var u=i.alternate,s=null!==u&&null!==u.memoizedState||Bl;u=Fl;var c=Bl;if(Fl=l,(Bl=s)&&!c)for(Ol=i;null!==Ol;)s=(l=Ol).child,22===l.tag&&null!==l.memoizedState?tu(i):null!==s?(s.return=l,Ol=s):tu(i);for(;null!==a;)Ol=a,e(a,n,r),a=a.sibling;Ol=i,Fl=u,Bl=c}Jl(t)}else 0!=(8772&i.subtreeFlags)&&null!==a?(a.return=i,Ol=a):Jl(t)}}(e,t,n)}function Jl(e){for(;null!==Ol;){var t=Ol;if(0!=(8772&t.flags)){var n=t.alternate;try{if(0!=(8772&t.flags))switch(t.tag){case 0:case 11:case 15:Bl||Wl(5,t);break;case 1:var r=t.stateNode;if(4&t.flags&&!Bl)if(null===n)r.componentDidMount();else{var o=t.elementType===t.type?n.memoizedProps:Bo(t.type,n.memoizedProps);r.componentDidUpdate(o,n.memoizedState,r.__reactInternalSnapshotBeforeUpdate)}var a=t.updateQueue;null!==a&&ei(t,a,r);break;case 3:var l=t.updateQueue;if(null!==l){if(n=null,null!==t.child)switch(t.child.tag){case 5:n=t.child.stateNode;break;case 1:n=t.child.stateNode}ei(t,l,n)}break;case 5:var u=t.stateNode;if(null===n&&4&t.flags){n=u;var s=t.memoizedProps;switch(t.type){case"button":case"input":case"select":case"textarea":s.autoFocus&&n.focus();break;case"img":s.src&&(n.src=s.src)}}break;case 6:case 4:case 12:break;case 13:if(null===t.memoizedState){var c=t.alternate;if(null!==c){var d=c.memoizedState;if(null!==d){var f=d.dehydrated;null!==f&&At(f)}}}break;case 19:case 17:case 21:case 22:case 23:break;default:throw Error(i(163))}Bl||512&t.flags&&jl(t)}catch(e){rs(t,t.return,e)}}if(t===e){Ol=null;break}if(null!==(n=t.sibling)){n.return=t.return,Ol=n;break}Ol=t.return}}function eu(e){for(;null!==Ol;){var t=Ol;if(t===e){Ol=null;break}var n=t.sibling;if(null!==n){n.return=t.return,Ol=n;break}Ol=t.return}}function tu(e){for(;null!==Ol;){var t=Ol;try{switch(t.tag){case 0:case 11:case 15:var n=t.return;try{Wl(4,t)}catch(e){rs(t,n,e)}break;case 1:var r=t.stateNode;if("function"==typeof r.componentDidMount){var o=t.return;try{r.componentDidMount()}catch(e){rs(t,o,e)}}var i=t.return;try{jl(t)}catch(e){rs(t,i,e)}break;case 5:var a=t.return;try{jl(t)}catch(e){rs(t,a,e)}}}catch(e){rs(t,t.return,e)}if(t===e){Ol=null;break}var l=t.sibling;if(null!==l){l.return=t.return,Ol=l;break}Ol=t.return}}var nu,ru=Math.ceil,ou=_.ReactCurrentDispatcher,iu=_.ReactCurrentOwner,au=_.ReactCurrentBatchConfig,lu=0,uu=null,su=null,cu=0,du=0,fu=ho(0),pu=0,mu=null,hu=0,vu=0,gu=0,yu=null,bu=null,_u=0,ku=1/0,Cu=!1,wu=null,xu=null,Eu=!1,Su=null,Iu=0,Tu=0,Pu=null,Mu=-1,Du=0;function Nu(){return 0!=(6&lu)?Qe():-1!==Mu?Mu:Mu=Qe()}function Ru(e){return 0==(1&e.mode)?1:0!=(2&lu)&&0!==cu?cu&-cu:null!==Fo.transition?(0===Du&&(e=at,0==(4194240&(at<<=1))&&(at=64),Du=e),Du):0!==(e=ht)?e:e=void 0===(e=window.event)?16:Vt(e.type)}function Fu(e,t,n){if(50<Tu)throw Tu=0,Pu=null,Error(i(185));var r=Bu(e,t);return null===r?null:(pt(r,t,n),0!=(2&lu)&&r===uu||(r===uu&&(0==(2&lu)&&(vu|=t),4===pu&&Hu(r,cu)),Lu(r,n),1===t&&0===lu&&0==(1&e.mode)&&(ku=Qe()+500,Mo&&Ro())),r)}function Bu(e,t){e.lanes|=t;var n=e.alternate;for(null!==n&&(n.lanes|=t),n=e,e=e.return;null!==e;)e.childLanes|=t,null!==(n=e.alternate)&&(n.childLanes|=t),n=e,e=e.return;return 3===n.tag?n.stateNode:null}function Lu(e,t){var n=e.callbackNode;!function(e,t){for(var n=e.suspendedLanes,r=e.pingedLanes,o=e.expirationTimes,i=e.pendingLanes;0<i;){var a=31-rt(i),l=1<<a,u=o[a];-1===u?0!=(l&n)&&0==(l&r)||(o[a]=ct(l,t)):u<=t&&(e.expiredLanes|=l),i&=~l}}(e,t);var r=st(e,e===uu?cu:0);if(0===r)null!==n&&Ve(n),e.callbackNode=null,e.callbackPriority=0;else if(t=r&-r,e.callbackPriority!==t){if(null!=n&&Ve(n),1===t)0===e.tag?function(e){Mo=!0,No(e)}(Uu.bind(null,e)):No(Uu.bind(null,e)),Yr((function(){0===lu&&Ro()})),n=null;else{switch(vt(r)){case 1:n=Ye;break;case 4:n=Ze;break;case 16:n=Xe;break;case 536870912:n=et;break;default:n=Xe}n=us(n,Ou.bind(null,e))}e.callbackPriority=t,e.callbackNode=n}}function Ou(e,t){if(Mu=-1,Du=0,0!=(6&lu))throw Error(i(327));var n=e.callbackNode;if(ts()&&e.callbackNode!==n)return null;var r=st(e,e===uu?cu:0);if(0===r)return null;if(0!=(30&r)||0!=(r&e.expiredLanes)||t)t=Gu(e,r);else{t=r;var o=lu;lu|=2;var a=$u();for(uu===e&&cu===t||(ku=Qe()+500,Vu(e,t));;)try{Zu();break}catch(t){qu(e,t)}Ho(),ou.current=a,lu=o,null!==su?t=0:(uu=null,cu=0,t=pu)}if(0!==t){if(2===t&&(0!==(o=dt(e))&&(r=o,t=Au(e,o))),1===t)throw n=mu,Vu(e,0),Hu(e,r),Lu(e,Qe()),n;if(6===t)Hu(e,r);else{if(o=e.current.alternate,0==(30&r)&&!function(e){for(var t=e;;){if(16384&t.flags){var n=t.updateQueue;if(null!==n&&null!==(n=n.stores))for(var r=0;r<n.length;r++){var o=n[r],i=o.getSnapshot;o=o.value;try{if(!Jn(i(),o))return!1}catch(e){return!1}}}if(n=t.child,16384&t.subtreeFlags&&null!==n)n.return=t,t=n;else{if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return!0;t=t.return}t.sibling.return=t.return,t=t.sibling}}return!0}(o)&&(2===(t=Gu(e,r))&&(0!==(a=dt(e))&&(r=a,t=Au(e,a))),1===t))throw n=mu,Vu(e,0),Hu(e,r),Lu(e,Qe()),n;switch(e.finishedWork=o,e.finishedLanes=r,t){case 0:case 1:throw Error(i(345));case 2:es(e,bu);break;case 3:if(Hu(e,r),(130023424&r)===r&&10<(t=_u+500-Qe())){if(0!==st(e,0))break;if(((o=e.suspendedLanes)&r)!==r){Nu(),e.pingedLanes|=e.suspendedLanes&o;break}e.timeoutHandle=$r(es.bind(null,e,bu),t);break}es(e,bu);break;case 4:if(Hu(e,r),(4194240&r)===r)break;for(t=e.eventTimes,o=-1;0<r;){var l=31-rt(r);a=1<<l,(l=t[l])>o&&(o=l),r&=~a}if(r=o,10<(r=(120>(r=Qe()-r)?120:480>r?480:1080>r?1080:1920>r?1920:3e3>r?3e3:4320>r?4320:1960*ru(r/1960))-r)){e.timeoutHandle=$r(es.bind(null,e,bu),r);break}es(e,bu);break;case 5:es(e,bu);break;default:throw Error(i(329))}}}return Lu(e,Qe()),e.callbackNode===n?Ou.bind(null,e):null}function Au(e,t){var n=yu;return e.current.memoizedState.isDehydrated&&(Vu(e,t).flags|=256),2!==(e=Gu(e,t))&&(t=bu,bu=n,null!==t&&zu(t)),e}function zu(e){null===bu?bu=e:bu.push.apply(bu,e)}function Hu(e,t){for(t&=~gu,t&=~vu,e.suspendedLanes|=t,e.pingedLanes&=~t,e=e.expirationTimes;0<t;){var n=31-rt(t),r=1<<n;e[n]=-1,t&=~r}}function Uu(e){if(0!=(6&lu))throw Error(i(327));ts();var t=st(e,0);if(0==(1&t))return Lu(e,Qe()),null;var n=Gu(e,t);if(0!==e.tag&&2===n){var r=dt(e);0!==r&&(t=r,n=Au(e,r))}if(1===n)throw n=mu,Vu(e,0),Hu(e,t),Lu(e,Qe()),n;if(6===n)throw Error(i(345));return e.finishedWork=e.current.alternate,e.finishedLanes=t,es(e,bu),Lu(e,Qe()),null}function Wu(e,t){var n=lu;lu|=1;try{return e(t)}finally{0===(lu=n)&&(ku=Qe()+500,Mo&&Ro())}}function ju(e){null!==Su&&0===Su.tag&&0==(6&lu)&&ts();var t=lu;lu|=1;var n=au.transition,r=ht;try{if(au.transition=null,ht=1,e)return e()}finally{ht=r,au.transition=n,0==(6&(lu=t))&&Ro()}}function Ku(){du=fu.current,vo(fu)}function Vu(e,t){e.finishedWork=null,e.finishedLanes=0;var n=e.timeoutHandle;if(-1!==n&&(e.timeoutHandle=-1,Qr(n)),null!==su)for(n=su.return;null!==n;){var r=n;switch(_i(r),r.tag){case 1:null!=(r=r.type.childContextTypes)&&xo();break;case 3:Vi(),vo(_o),vo(bo),Zi();break;case 5:$i(r);break;case 4:Vi();break;case 13:case 19:vo(Qi);break;case 10:Uo(r.type._context);break;case 22:case 23:Ku()}n=n.return}if(uu=e,su=e=fs(e.current,null),cu=du=t,pu=0,mu=null,gu=vu=hu=0,bu=yu=null,null!==Vo){for(t=0;t<Vo.length;t++)if(null!==(r=(n=Vo[t]).interleaved)){n.interleaved=null;var o=r.next,i=n.pending;if(null!==i){var a=i.next;i.next=o,r.next=a}n.pending=r}Vo=null}return e}function qu(e,t){for(;;){var n=su;try{if(Ho(),Xi.current=Va,oa){for(var r=ta.memoizedState;null!==r;){var o=r.queue;null!==o&&(o.pending=null),r=r.next}oa=!1}if(ea=0,ra=na=ta=null,ia=!1,aa=0,iu.current=null,null===n||null===n.return){pu=1,mu=t,su=null;break}e:{var a=e,l=n.return,u=n,s=t;if(t=cu,u.flags|=32768,null!==s&&"object"==typeof s&&"function"==typeof s.then){var c=s,d=u,f=d.tag;if(0==(1&d.mode)&&(0===f||11===f||15===f)){var p=d.alternate;p?(d.updateQueue=p.updateQueue,d.memoizedState=p.memoizedState,d.lanes=p.lanes):(d.updateQueue=null,d.memoizedState=null)}var m=ol(l);if(null!==m){m.flags&=-257,il(m,l,u,0,t),1&m.mode&&rl(a,c,t),s=c;var h=(t=m).updateQueue;if(null===h){var v=new Set;v.add(s),t.updateQueue=v}else h.add(s);break e}if(0==(1&t)){rl(a,c,t),Qu();break e}s=Error(i(426))}else if(wi&&1&u.mode){var g=ol(l);if(null!==g){0==(65536&g.flags)&&(g.flags|=256),il(g,l,u,0,t),Ni(s);break e}}a=s,4!==pu&&(pu=2),null===yu?yu=[a]:yu.push(a),s=Ga(s,u),u=l;do{switch(u.tag){case 3:u.flags|=65536,t&=-t,u.lanes|=t,Xo(u,tl(0,s,t));break e;case 1:a=s;var y=u.type,b=u.stateNode;if(0==(128&u.flags)&&("function"==typeof y.getDerivedStateFromError||null!==b&&"function"==typeof b.componentDidCatch&&(null===xu||!xu.has(b)))){u.flags|=65536,t&=-t,u.lanes|=t,Xo(u,nl(u,a,t));break e}}u=u.return}while(null!==u)}Ju(n)}catch(e){t=e,su===n&&null!==n&&(su=n=n.return);continue}break}}function $u(){var e=ou.current;return ou.current=Va,null===e?Va:e}function Qu(){0!==pu&&3!==pu&&2!==pu||(pu=4),null===uu||0==(268435455&hu)&&0==(268435455&vu)||Hu(uu,cu)}function Gu(e,t){var n=lu;lu|=2;var r=$u();for(uu===e&&cu===t||Vu(e,t);;)try{Yu();break}catch(t){qu(e,t)}if(Ho(),lu=n,ou.current=r,null!==su)throw Error(i(261));return uu=null,cu=0,pu}function Yu(){for(;null!==su;)Xu(su)}function Zu(){for(;null!==su&&!qe();)Xu(su)}function Xu(e){var t=nu(e.alternate,e,du);e.memoizedProps=e.pendingProps,null===t?Ju(e):su=t,iu.current=null}function Ju(e){var t=e;do{var n=t.alternate;if(e=t.return,0==(32768&t.flags)){if(null!==(n=ul(n,t,du)))return void(su=n)}else{if(null!==(n=Rl(n,t)))return n.flags&=32767,void(su=n);if(null===e)return pu=6,void(su=null);e.flags|=32768,e.subtreeFlags=0,e.deletions=null}if(null!==(t=t.sibling))return void(su=t);su=t=e}while(null!==t);0===pu&&(pu=5)}function es(e,t){var n=ht,r=au.transition;try{au.transition=null,ht=1,function(e,t,n){do{ts()}while(null!==Su);if(0!=(6&lu))throw Error(i(327));var r=e.finishedWork,o=e.finishedLanes;if(null===r)return null;if(e.finishedWork=null,e.finishedLanes=0,r===e.current)throw Error(i(177));e.callbackNode=null,e.callbackPriority=0;var a=r.lanes|r.childLanes;if(function(e,t){var n=e.pendingLanes&~t;e.pendingLanes=t,e.suspendedLanes=0,e.pingedLanes=0,e.expiredLanes&=t,e.mutableReadLanes&=t,e.entangledLanes&=t,t=e.entanglements;var r=e.eventTimes;for(e=e.expirationTimes;0<n;){var o=31-rt(n),i=1<<o;t[o]=0,r[o]=-1,e[o]=-1,n&=~i}}(e,a),e===uu&&(su=uu=null,cu=0),0==(2064&r.subtreeFlags)&&0==(2064&r.flags)||Eu||(Eu=!0,us(Xe,(function(){return ts(),null}))),a=0!=(15990&r.flags),0!=(15990&r.subtreeFlags)||a){a=au.transition,au.transition=null;var l=ht;ht=1;var u=lu;lu|=4,iu.current=null,function(e,t){if(or(e=rr())){if("selectionStart"in e)var n={start:e.selectionStart,end:e.selectionEnd};else e:{var r=(n=(n=e.ownerDocument)&&n.defaultView||window).getSelection&&n.getSelection();if(r&&0!==r.rangeCount){n=r.anchorNode;var o=r.anchorOffset,a=r.focusNode;r=r.focusOffset;try{n.nodeType,a.nodeType}catch(e){n=null;break e}var l=0,u=-1,s=-1,c=0,d=0,f=e,p=null;t:for(;;){for(var m;f!==n||0!==o&&3!==f.nodeType||(u=l+o),f!==a||0!==r&&3!==f.nodeType||(s=l+r),3===f.nodeType&&(l+=f.nodeValue.length),null!==(m=f.firstChild);)p=f,f=m;for(;;){if(f===e)break t;if(p===n&&++c===o&&(u=l),p===a&&++d===r&&(s=l),null!==(m=f.nextSibling))break;p=(f=p).parentNode}f=m}n=-1===u||-1===s?null:{start:u,end:s}}else n=null}n=n||{start:0,end:0}}else n=null;for(Vr={focusedElem:e,selectionRange:n},Ol=t;null!==Ol;)if(e=(t=Ol).child,0!=(1028&t.subtreeFlags)&&null!==e)e.return=t,Ol=e;else for(;null!==Ol;){t=Ol;try{var h=t.alternate;if(0!=(1024&t.flags))switch(t.tag){case 0:case 11:case 15:break;case 1:if(null!==h){var v=h.memoizedProps,g=h.memoizedState,y=t.stateNode,b=y.getSnapshotBeforeUpdate(t.elementType===t.type?v:Bo(t.type,v),g);y.__reactInternalSnapshotBeforeUpdate=b}break;case 3:var _=t.stateNode.containerInfo;if(1===_.nodeType)_.textContent="";else if(9===_.nodeType){var k=_.body;null!=k&&(k.textContent="")}break;case 5:case 6:case 4:case 17:break;default:throw Error(i(163))}}catch(e){rs(t,t.return,e)}if(null!==(e=t.sibling)){e.return=t.return,Ol=e;break}Ol=t.return}h=Hl,Hl=!1}(e,r),function(e,t){for(Ol=t;null!==Ol;){var n=(t=Ol).deletions;if(null!==n)for(var r=0;r<n.length;r++){var o=n[r];try{Gl(e,o,t);var i=o.alternate;null!==i&&(i.return=null),o.return=null}catch(e){rs(o,t,e)}}if(n=t.child,0!=(12854&t.subtreeFlags)&&null!==n)n.return=t,Ol=n;else for(;null!==Ol;){t=Ol;try{var a=t.flags;if(32&a&&ce(t.stateNode,""),512&a){var l=t.alternate;if(null!==l){var u=l.ref;null!==u&&("function"==typeof u?u(null):u.current=null)}}if(8192&a)switch(t.tag){case 13:if(null!==t.memoizedState){var s=t.alternate;null!==s&&null!==s.memoizedState||(_u=Qe())}break;case 22:var c=null!==t.memoizedState,d=t.alternate,f=null!==d&&null!==d.memoizedState;e:{o=c;for(var p=null,m=r=n=t;;){if(5===m.tag){if(null===p){p=m;var h=m.stateNode;if(o){var v=h.style;"function"==typeof v.setProperty?v.setProperty("display","none","important"):v.display="none"}else{var g=m.stateNode,y=m.memoizedProps.style,b=null!=y&&y.hasOwnProperty("display")?y.display:null;g.style.display=pe("display",b)}}}else if(6===m.tag)null===p&&(m.stateNode.nodeValue=o?"":m.memoizedProps);else if((22!==m.tag&&23!==m.tag||null===m.memoizedState||m===r)&&null!==m.child){m.child.return=m,m=m.child;continue}if(m===r)break;for(;null===m.sibling;){if(null===m.return||m.return===r)break e;p===m&&(p=null),m=m.return}p===m&&(p=null),m.sibling.return=m.return,m=m.sibling}}if(c&&!f&&0!=(1&n.mode)){Ol=n;for(var _=n.child;null!==_;){for(n=Ol=_;null!==Ol;){var k=(r=Ol).child;switch(r.tag){case 0:case 11:case 14:case 15:Ul(4,r,r.return);break;case 1:Al(r,r.return);var C=r.stateNode;if("function"==typeof C.componentWillUnmount){var w=r.return;try{C.props=r.memoizedProps,C.state=r.memoizedState,C.componentWillUnmount()}catch(e){rs(r,w,e)}}break;case 5:Al(r,r.return);break;case 22:if(null!==r.memoizedState){eu(n);continue}}null!==k?(k.return=r,Ol=k):eu(n)}_=_.sibling}}}switch(4102&a){case 2:Ql(t),t.flags&=-3;break;case 6:Ql(t),t.flags&=-3,Yl(t.alternate,t);break;case 4096:t.flags&=-4097;break;case 4100:t.flags&=-4097,Yl(t.alternate,t);break;case 4:Yl(t.alternate,t)}}catch(e){rs(t,t.return,e)}if(null!==(n=t.sibling)){n.return=t.return,Ol=n;break}Ol=t.return}}}(e,r),ir(Vr),Vr=null,e.current=r,Xl(r,e,o),$e(),lu=u,ht=l,au.transition=a}else e.current=r;if(Eu&&(Eu=!1,Su=e,Iu=o),0===(a=e.pendingLanes)&&(xu=null),function(e){if(nt&&"function"==typeof nt.onCommitFiberRoot)try{nt.onCommitFiberRoot(tt,e,void 0,128==(128&e.current.flags))}catch(e){}}(r.stateNode),Lu(e,Qe()),null!==t)for(n=e.onRecoverableError,r=0;r<t.length;r++)n(t[r]);if(Cu)throw Cu=!1,e=wu,wu=null,e;0!=(1&Iu)&&0!==e.tag&&ts(),0!=(1&(a=e.pendingLanes))?e===Pu?Tu++:(Tu=0,Pu=e):Tu=0,Ro()}(e,t,n)}finally{au.transition=r,ht=n}return null}function ts(){if(null!==Su){var e=vt(Iu),t=au.transition,n=ht;try{if(au.transition=null,ht=16>e?16:e,null===Su)var r=!1;else{if(e=Su,Su=null,Iu=0,0!=(6&lu))throw Error(i(331));var o=lu;for(lu|=4,Ol=e.current;null!==Ol;){var a=Ol,l=a.child;if(0!=(16&Ol.flags)){var u=a.deletions;if(null!==u){for(var s=0;s<u.length;s++){var c=u[s];for(Ol=c;null!==Ol;){var d=Ol;switch(d.tag){case 0:case 11:case 15:Ul(8,d,a)}var f=d.child;if(null!==f)f.return=d,Ol=f;else for(;null!==Ol;){var p=(d=Ol).sibling,m=d.return;if(Vl(d),d===c){Ol=null;break}if(null!==p){p.return=m,Ol=p;break}Ol=m}}}var h=a.alternate;if(null!==h){var v=h.child;if(null!==v){h.child=null;do{var g=v.sibling;v.sibling=null,v=g}while(null!==v)}}Ol=a}}if(0!=(2064&a.subtreeFlags)&&null!==l)l.return=a,Ol=l;else e:for(;null!==Ol;){if(0!=(2048&(a=Ol).flags))switch(a.tag){case 0:case 11:case 15:Ul(9,a,a.return)}var y=a.sibling;if(null!==y){y.return=a.return,Ol=y;break e}Ol=a.return}}var b=e.current;for(Ol=b;null!==Ol;){var _=(l=Ol).child;if(0!=(2064&l.subtreeFlags)&&null!==_)_.return=l,Ol=_;else e:for(l=b;null!==Ol;){if(0!=(2048&(u=Ol).flags))try{switch(u.tag){case 0:case 11:case 15:Wl(9,u)}}catch(e){rs(u,u.return,e)}if(u===l){Ol=null;break e}var k=u.sibling;if(null!==k){k.return=u.return,Ol=k;break e}Ol=u.return}}if(lu=o,Ro(),nt&&"function"==typeof nt.onPostCommitFiberRoot)try{nt.onPostCommitFiberRoot(tt,e)}catch(e){}r=!0}return r}finally{ht=n,au.transition=t}}return!1}function ns(e,t,n){Yo(e,t=tl(0,t=Ga(n,t),1)),t=Nu(),null!==(e=Bu(e,1))&&(pt(e,1,t),Lu(e,t))}function rs(e,t,n){if(3===e.tag)ns(e,e,n);else for(;null!==t;){if(3===t.tag){ns(t,e,n);break}if(1===t.tag){var r=t.stateNode;if("function"==typeof t.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===xu||!xu.has(r))){Yo(t,e=nl(t,e=Ga(n,e),1)),e=Nu(),null!==(t=Bu(t,1))&&(pt(t,1,e),Lu(t,e));break}}t=t.return}}function os(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),t=Nu(),e.pingedLanes|=e.suspendedLanes&n,uu===e&&(cu&n)===n&&(4===pu||3===pu&&(130023424&cu)===cu&&500>Qe()-_u?Vu(e,0):gu|=n),Lu(e,t)}function is(e,t){0===t&&(0==(1&e.mode)?t=1:(t=lt,0==(130023424&(lt<<=1))&&(lt=4194304)));var n=Nu();null!==(e=Bu(e,t))&&(pt(e,t,n),Lu(e,n))}function as(e){var t=e.memoizedState,n=0;null!==t&&(n=t.retryLane),is(e,n)}function ls(e,t){var n=0;switch(e.tag){case 13:var r=e.stateNode,o=e.memoizedState;null!==o&&(n=o.retryLane);break;case 19:r=e.stateNode;break;default:throw Error(i(314))}null!==r&&r.delete(t),is(e,n)}function us(e,t){return Ke(e,t)}function ss(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.subtreeFlags=this.flags=0,this.deletions=null,this.childLanes=this.lanes=0,this.alternate=null}function cs(e,t,n,r){return new ss(e,t,n,r)}function ds(e){return!(!(e=e.prototype)||!e.isReactComponent)}function fs(e,t){var n=e.alternate;return null===n?((n=cs(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.type=e.type,n.flags=0,n.subtreeFlags=0,n.deletions=null),n.flags=14680064&e.flags,n.childLanes=e.childLanes,n.lanes=e.lanes,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function ps(e,t,n,r,o,a){var l=2;if(r=e,"function"==typeof e)ds(e)&&(l=1);else if("string"==typeof e)l=5;else e:switch(e){case w:return ms(n.children,o,a,t);case x:l=8,o|=8;break;case E:return(e=cs(12,n,t,2|o)).elementType=E,e.lanes=a,e;case P:return(e=cs(13,n,t,o)).elementType=P,e.lanes=a,e;case M:return(e=cs(19,n,t,o)).elementType=M,e.lanes=a,e;case R:return hs(n,o,a,t);default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case S:l=10;break e;case I:l=9;break e;case T:l=11;break e;case D:l=14;break e;case N:l=16,r=null;break e}throw Error(i(130,null==e?e:typeof e,""))}return(t=cs(l,n,t,o)).elementType=e,t.type=r,t.lanes=a,t}function ms(e,t,n,r){return(e=cs(7,e,r,t)).lanes=n,e}function hs(e,t,n,r){return(e=cs(22,e,r,t)).elementType=R,e.lanes=n,e.stateNode={},e}function vs(e,t,n){return(e=cs(6,e,null,t)).lanes=n,e}function gs(e,t,n){return(t=cs(4,null!==e.children?e.children:[],e.key,t)).lanes=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function ys(e,t,n,r,o){this.tag=t,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.callbackNode=this.pendingContext=this.context=null,this.callbackPriority=0,this.eventTimes=ft(0),this.expirationTimes=ft(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=ft(0),this.identifierPrefix=r,this.onRecoverableError=o,this.mutableSourceEagerHydrationData=null}function bs(e,t,n,r,o,i,a,l,u){return e=new ys(e,t,n,l,u),1===t?(t=1,!0===i&&(t|=8)):t=0,i=cs(3,null,null,t),e.current=i,i.stateNode=e,i.memoizedState={element:r,isDehydrated:n,cache:null,transitions:null},$o(i),e}function _s(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:C,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}function ks(e){if(!e)return yo;e:{if(He(e=e._reactInternals)!==e||1!==e.tag)throw Error(i(170));var t=e;do{switch(t.tag){case 3:t=t.stateNode.context;break e;case 1:if(wo(t.type)){t=t.stateNode.__reactInternalMemoizedMergedChildContext;break e}}t=t.return}while(null!==t);throw Error(i(171))}if(1===e.tag){var n=e.type;if(wo(n))return So(e,n,t)}return t}function Cs(e,t,n,r,o,i,a,l,u){return(e=bs(n,r,!0,e,0,i,0,l,u)).context=ks(null),n=e.current,(i=Go(r=Nu(),o=Ru(n))).callback=null!=t?t:null,Yo(n,i),e.current.lanes=o,pt(e,o,r),Lu(e,r),e}function ws(e,t,n,r){var o=t.current,i=Nu(),a=Ru(o);return n=ks(n),null===t.context?t.context=n:t.pendingContext=n,(t=Go(i,a)).payload={element:e},null!==(r=void 0===r?null:r)&&(t.callback=r),Yo(o,t),null!==(e=Fu(o,a,i))&&Zo(e,o,a),a}function xs(e){if(!(e=e.current).child)return null;switch(e.child.tag){case 5:default:return e.child.stateNode}}function Es(e,t){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var n=e.retryLane;e.retryLane=0!==n&&n<t?n:t}}function Ss(e,t){Es(e,t),(e=e.alternate)&&Es(e,t)}nu=function(e,t,n){if(null!==e)if(e.memoizedProps!==t.pendingProps||_o.current)cl=!0;else{if(0==(e.lanes&n)&&0==(128&t.flags))return cl=!1,function(e,t,n){switch(t.tag){case 3:_l(t),Di();break;case 5:qi(t);break;case 1:wo(t.type)&&Io(t);break;case 4:Ki(t,t.stateNode.containerInfo);break;case 10:var r=t.type._context,o=t.memoizedProps.value;go(Lo,r._currentValue),r._currentValue=o;break;case 13:if(null!==(r=t.memoizedState))return null!==r.dehydrated?(go(Qi,1&Qi.current),t.flags|=128,null):0!=(n&t.child.childLanes)?xl(e,t,n):(go(Qi,1&Qi.current),null!==(e=Nl(e,t,n))?e.sibling:null);go(Qi,1&Qi.current);break;case 19:if(r=0!=(n&t.childLanes),0!=(128&e.flags)){if(r)return Dl(e,t,n);t.flags|=128}if(null!==(o=t.memoizedState)&&(o.rendering=null,o.tail=null,o.lastEffect=null),go(Qi,Qi.current),r)break;return null;case 22:case 23:return t.lanes=0,hl(e,t,n)}return Nl(e,t,n)}(e,t,n);cl=0!=(131072&e.flags)}else cl=!1,wi&&0!=(1048576&t.flags)&&yi(t,di,t.index);switch(t.lanes=0,t.tag){case 2:var r=t.type;null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),e=t.pendingProps;var o=Co(t,bo.current);jo(t,n),o=ca(null,t,r,e,o,n);var a=da();return t.flags|=1,"object"==typeof o&&null!==o&&"function"==typeof o.render&&void 0===o.$$typeof?(t.tag=1,t.memoizedState=null,t.updateQueue=null,wo(r)?(a=!0,Io(t)):a=!1,t.memoizedState=null!==o.state&&void 0!==o.state?o.state:null,$o(t),o.updater=ri,t.stateNode=o,o._reactInternals=t,li(t,r,e,n),t=bl(null,t,r,!0,a,n)):(t.tag=0,wi&&a&&bi(t),dl(null,t,o,n),t=t.child),t;case 16:r=t.elementType;e:{switch(null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),e=t.pendingProps,r=(o=r._init)(r._payload),t.type=r,o=t.tag=function(e){if("function"==typeof e)return ds(e)?1:0;if(null!=e){if((e=e.$$typeof)===T)return 11;if(e===D)return 14}return 2}(r),e=Bo(r,e),o){case 0:t=gl(null,t,r,e,n);break e;case 1:t=yl(null,t,r,e,n);break e;case 11:t=fl(null,t,r,e,n);break e;case 14:t=pl(null,t,r,Bo(r.type,e),n);break e}throw Error(i(306,r,""))}return t;case 0:return r=t.type,o=t.pendingProps,gl(e,t,r,o=t.elementType===r?o:Bo(r,o),n);case 1:return r=t.type,o=t.pendingProps,yl(e,t,r,o=t.elementType===r?o:Bo(r,o),n);case 3:e:{if(_l(t),null===e)throw Error(i(387));r=t.pendingProps,o=(a=t.memoizedState).element,Qo(e,t),Jo(t,r,null,n);var l=t.memoizedState;if(r=l.element,a.isDehydrated){if(a={element:r,isDehydrated:!1,cache:l.cache,transitions:l.transitions},t.updateQueue.baseState=a,t.memoizedState=a,256&t.flags){t=kl(e,t,r,n,o=Error(i(423)));break e}if(r!==o){t=kl(e,t,r,n,o=Error(i(424)));break e}for(Ci=Jr(t.stateNode.containerInfo.firstChild),ki=t,wi=!0,xi=null,n=Ai(t,null,r,n),t.child=n;n;)n.flags=-3&n.flags|4096,n=n.sibling}else{if(Di(),r===o){t=Nl(e,t,n);break e}dl(e,t,r,n)}t=t.child}return t;case 5:return qi(t),null===e&&Ti(t),r=t.type,o=t.pendingProps,a=null!==e?e.memoizedProps:null,l=o.children,qr(r,o)?l=null:null!==a&&qr(r,a)&&(t.flags|=32),vl(e,t),dl(e,t,l,n),t.child;case 6:return null===e&&Ti(t),null;case 13:return xl(e,t,n);case 4:return Ki(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=Oi(t,null,r,n):dl(e,t,r,n),t.child;case 11:return r=t.type,o=t.pendingProps,fl(e,t,r,o=t.elementType===r?o:Bo(r,o),n);case 7:return dl(e,t,t.pendingProps,n),t.child;case 8:case 12:return dl(e,t,t.pendingProps.children,n),t.child;case 10:e:{if(r=t.type._context,o=t.pendingProps,a=t.memoizedProps,l=o.value,go(Lo,r._currentValue),r._currentValue=l,null!==a)if(Jn(a.value,l)){if(a.children===o.children&&!_o.current){t=Nl(e,t,n);break e}}else for(null!==(a=t.child)&&(a.return=t);null!==a;){var u=a.dependencies;if(null!==u){l=a.child;for(var s=u.firstContext;null!==s;){if(s.context===r){if(1===a.tag){(s=Go(-1,n&-n)).tag=2;var c=a.updateQueue;if(null!==c){var d=(c=c.shared).pending;null===d?s.next=s:(s.next=d.next,d.next=s),c.pending=s}}a.lanes|=n,null!==(s=a.alternate)&&(s.lanes|=n),Wo(a.return,n,t),u.lanes|=n;break}s=s.next}}else if(10===a.tag)l=a.type===t.type?null:a.child;else if(18===a.tag){if(null===(l=a.return))throw Error(i(341));l.lanes|=n,null!==(u=l.alternate)&&(u.lanes|=n),Wo(l,n,t),l=a.sibling}else l=a.child;if(null!==l)l.return=a;else for(l=a;null!==l;){if(l===t){l=null;break}if(null!==(a=l.sibling)){a.return=l.return,l=a;break}l=l.return}a=l}dl(e,t,o.children,n),t=t.child}return t;case 9:return o=t.type,r=t.pendingProps.children,jo(t,n),r=r(o=Ko(o)),t.flags|=1,dl(e,t,r,n),t.child;case 14:return o=Bo(r=t.type,t.pendingProps),pl(e,t,r,o=Bo(r.type,o),n);case 15:return ml(e,t,t.type,t.pendingProps,n);case 17:return r=t.type,o=t.pendingProps,o=t.elementType===r?o:Bo(r,o),null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),t.tag=1,wo(r)?(e=!0,Io(t)):e=!1,jo(t,n),ii(t,r,o),li(t,r,o,n),bl(null,t,r,!0,e,n);case 19:return Dl(e,t,n);case 22:return hl(e,t,n)}throw Error(i(156,t.tag))};var Is="function"==typeof reportError?reportError:function(e){console.error(e)};function Ts(e){this._internalRoot=e}function Ps(e){this._internalRoot=e}function Ms(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType)}function Ds(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function Ns(){}function Rs(e,t,n,r,o){var i=n._reactRootContainer;if(i){var a=i;if("function"==typeof o){var l=o;o=function(){var e=xs(a);l.call(e)}}ws(t,a,e,o)}else a=function(e,t,n,r,o){if(o){if("function"==typeof r){var i=r;r=function(){var e=xs(a);i.call(e)}}var a=Cs(t,r,e,0,null,!1,0,"",Ns);return e._reactRootContainer=a,e[oo]=a.current,Rr(8===e.nodeType?e.parentNode:e),ju(),a}for(;o=e.lastChild;)e.removeChild(o);if("function"==typeof r){var l=r;r=function(){var e=xs(u);l.call(e)}}var u=bs(e,0,!1,null,0,!1,0,"",Ns);return e._reactRootContainer=u,e[oo]=u.current,Rr(8===e.nodeType?e.parentNode:e),ju((function(){ws(t,u,n,r)})),u}(n,t,e,o,r);return xs(a)}Ps.prototype.render=Ts.prototype.render=function(e){var t=this._internalRoot;if(null===t)throw Error(i(409));ws(e,t,null,null)},Ps.prototype.unmount=Ts.prototype.unmount=function(){var e=this._internalRoot;if(null!==e){this._internalRoot=null;var t=e.containerInfo;ju((function(){ws(null,e,null,null)})),t[oo]=null}},Ps.prototype.unstable_scheduleHydration=function(e){if(e){var t=_t();e={blockedOn:null,target:e,priority:t};for(var n=0;n<Pt.length&&0!==t&&t<Pt[n].priority;n++);Pt.splice(n,0,e),0===n&&Rt(e)}},gt=function(e){switch(e.tag){case 3:var t=e.stateNode;if(t.current.memoizedState.isDehydrated){var n=ut(t.pendingLanes);0!==n&&(mt(t,1|n),Lu(t,Qe()),0==(6&lu)&&(ku=Qe()+500,Ro()))}break;case 13:var r=Nu();ju((function(){return Fu(e,1,r)})),Ss(e,1)}},yt=function(e){13===e.tag&&(Fu(e,134217728,Nu()),Ss(e,134217728))},bt=function(e){if(13===e.tag){var t=Nu(),n=Ru(e);Fu(e,n,t),Ss(e,n)}},_t=function(){return ht},kt=function(e,t){var n=ht;try{return ht=e,t()}finally{ht=n}},_e=function(e,t,n){switch(t){case"input":if(Z(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var o=fo(r);if(!o)throw Error(i(90));q(r),Z(r,o)}}}break;case"textarea":oe(e,n);break;case"select":null!=(t=n.value)&&te(e,!!n.multiple,t,!1)}},Se=Wu,Ie=ju;var Fs={usingClientEntryPoint:!1,Events:[so,co,fo,xe,Ee,Wu]},Bs={findFiberByHostInstance:uo,bundleType:0,version:"18.0.0-fc46dba67-20220329",rendererPackageName:"react-dom"},Ls={bundleType:Bs.bundleType,version:Bs.version,rendererPackageName:Bs.rendererPackageName,rendererConfig:Bs.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setErrorHandler:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:_.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=je(e))?null:e.stateNode},findFiberByHostInstance:Bs.findFiberByHostInstance||function(){return null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null,reconcilerVersion:"18.0.0-fc46dba67-20220329"};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var Os=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!Os.isDisabled&&Os.supportsFiber)try{tt=Os.inject(Ls),nt=Os}catch(e){}}t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=Fs,t.createPortal=function(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!Ms(t))throw Error(i(200));return _s(e,t,null,n)},t.createRoot=function(e,t){if(!Ms(e))throw Error(i(299));var n=!1,r="",o=Is;return null!=t&&(!0===t.unstable_strictMode&&(n=!0),void 0!==t.identifierPrefix&&(r=t.identifierPrefix),void 0!==t.onRecoverableError&&(o=t.onRecoverableError)),t=bs(e,1,!1,null,0,n,0,r,o),e[oo]=t.current,Rr(8===e.nodeType?e.parentNode:e),new Ts(t)},t.findDOMNode=function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternals;if(void 0===t){if("function"==typeof e.render)throw Error(i(188));throw e=Object.keys(e).join(","),Error(i(268,e))}return e=null===(e=je(t))?null:e.stateNode},t.flushSync=function(e){return ju(e)},t.hydrate=function(e,t,n){if(!Ds(t))throw Error(i(200));return Rs(null,e,t,!0,n)},t.hydrateRoot=function(e,t,n){if(!Ms(e))throw Error(i(405));var r=null!=n&&n.hydratedSources||null,o=!1,a="",l=Is;if(null!=n&&(!0===n.unstable_strictMode&&(o=!0),void 0!==n.identifierPrefix&&(a=n.identifierPrefix),void 0!==n.onRecoverableError&&(l=n.onRecoverableError)),t=Cs(t,null,e,1,null!=n?n:null,o,0,a,l),e[oo]=t.current,Rr(e),r)for(e=0;e<r.length;e++)o=(o=(n=r[e])._getVersion)(n._source),null==t.mutableSourceEagerHydrationData?t.mutableSourceEagerHydrationData=[n,o]:t.mutableSourceEagerHydrationData.push(n,o);return new Ps(t)},t.render=function(e,t,n){if(!Ds(t))throw Error(i(200));return Rs(null,e,t,!1,n)},t.unmountComponentAtNode=function(e){if(!Ds(e))throw Error(i(40));return!!e._reactRootContainer&&(ju((function(){Rs(null,null,e,!1,(function(){e._reactRootContainer=null,e[oo]=null}))})),!0)},t.unstable_batchedUpdates=Wu,t.unstable_renderSubtreeIntoContainer=function(e,t,n,r){if(!Ds(n))throw Error(i(200));if(null==e||void 0===e._reactInternals)throw Error(i(38));return Rs(e,t,n,!1,r)},t.version="18.0.0-fc46dba67-20220329"},function(e,t,n){"use strict";e.exports=n(38)},function(e,t,n){"use strict";(function(e){function n(e,t){var n=e.length;e.push(t);e:for(;0<n;){var r=n-1>>>1,o=e[r];if(!(0<i(o,t)))break e;e[r]=t,e[n]=o,n=r}}function r(e){return 0===e.length?null:e[0]}function o(e){if(0===e.length)return null;var t=e[0],n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,o=e.length,a=o>>>1;r<a;){var l=2*(r+1)-1,u=e[l],s=l+1,c=e[s];if(0>i(u,n))s<o&&0>i(c,u)?(e[r]=c,e[s]=n,r=s):(e[r]=u,e[l]=n,r=l);else{if(!(s<o&&0>i(c,n)))break e;e[r]=c,e[s]=n,r=s}}}return t}function i(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}if("object"==typeof performance&&"function"==typeof performance.now){var a=performance;t.unstable_now=function(){return a.now()}}else{var l=Date,u=l.now();t.unstable_now=function(){return l.now()-u}}var s=[],c=[],d=1,f=null,p=3,m=!1,h=!1,v=!1,g="function"==typeof setTimeout?setTimeout:null,y="function"==typeof clearTimeout?clearTimeout:null,b=void 0!==e?e:null;function _(e){for(var t=r(c);null!==t;){if(null===t.callback)o(c);else{if(!(t.startTime<=e))break;o(c),t.sortIndex=t.expirationTime,n(s,t)}t=r(c)}}function k(e){if(v=!1,_(e),!h)if(null!==r(s))h=!0,R(C);else{var t=r(c);null!==t&&F(k,t.startTime-e)}}function C(e,n){h=!1,v&&(v=!1,y(S),S=-1),m=!0;var i=p;try{for(_(n),f=r(s);null!==f&&(!(f.expirationTime>n)||e&&!P());){var a=f.callback;if("function"==typeof a){f.callback=null,p=f.priorityLevel;var l=a(f.expirationTime<=n);n=t.unstable_now(),"function"==typeof l?f.callback=l:f===r(s)&&o(s),_(n)}else o(s);f=r(s)}if(null!==f)var u=!0;else{var d=r(c);null!==d&&F(k,d.startTime-n),u=!1}return u}finally{f=null,p=i,m=!1}}"undefined"!=typeof navigator&&void 0!==navigator.scheduling&&void 0!==navigator.scheduling.isInputPending&&navigator.scheduling.isInputPending.bind(navigator.scheduling);var w,x=!1,E=null,S=-1,I=5,T=-1;function P(){return!(t.unstable_now()-T<I)}function M(){if(null!==E){var e=t.unstable_now();T=e;var n=!0;try{n=E(!0,e)}finally{n?w():(x=!1,E=null)}}else x=!1}if("function"==typeof b)w=function(){b(M)};else if("undefined"!=typeof MessageChannel){var D=new MessageChannel,N=D.port2;D.port1.onmessage=M,w=function(){N.postMessage(null)}}else w=function(){g(M,0)};function R(e){E=e,x||(x=!0,w())}function F(e,n){S=g((function(){e(t.unstable_now())}),n)}t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){h||m||(h=!0,R(C))},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):I=0<e?Math.floor(1e3/e):5},t.unstable_getCurrentPriorityLevel=function(){return p},t.unstable_getFirstCallbackNode=function(){return r(s)},t.unstable_next=function(e){switch(p){case 1:case 2:case 3:var t=3;break;default:t=p}var n=p;p=t;try{return e()}finally{p=n}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=function(){},t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=p;p=e;try{return t()}finally{p=n}},t.unstable_scheduleCallback=function(e,o,i){var a=t.unstable_now();switch("object"==typeof i&&null!==i?i="number"==typeof(i=i.delay)&&0<i?a+i:a:i=a,e){case 1:var l=-1;break;case 2:l=250;break;case 5:l=1073741823;break;case 4:l=1e4;break;default:l=5e3}return e={id:d++,callback:o,priorityLevel:e,startTime:i,expirationTime:l=i+l,sortIndex:-1},i>a?(e.sortIndex=i,n(c,e),null===r(s)&&e===r(c)&&(v?(y(S),S=-1):v=!0,F(k,i-a))):(e.sortIndex=l,n(s,e),h||m||(h=!0,R(C))),e},t.unstable_shouldYield=P,t.unstable_wrapCallback=function(e){var t=p;return function(){var n=p;p=t;try{return e.apply(this,arguments)}finally{p=n}}}}).call(this,n(39).setImmediate)},function(e,t,n){(function(e){var r=void 0!==e&&e||"undefined"!=typeof self&&self||window,o=Function.prototype.apply;function i(e,t){this._id=e,this._clearFn=t}t.setTimeout=function(){return new i(o.call(setTimeout,r,arguments),clearTimeout)},t.setInterval=function(){return new i(o.call(setInterval,r,arguments),clearInterval)},t.clearTimeout=t.clearInterval=function(e){e&&e.close()},i.prototype.unref=i.prototype.ref=function(){},i.prototype.close=function(){this._clearFn.call(r,this._id)},t.enroll=function(e,t){clearTimeout(e._idleTimeoutId),e._idleTimeout=t},t.unenroll=function(e){clearTimeout(e._idleTimeoutId),e._idleTimeout=-1},t._unrefActive=t.active=function(e){clearTimeout(e._idleTimeoutId);var t=e._idleTimeout;t>=0&&(e._idleTimeoutId=setTimeout((function(){e._onTimeout&&e._onTimeout()}),t))},n(40),t.setImmediate="undefined"!=typeof self&&self.setImmediate||void 0!==e&&e.setImmediate||this&&this.setImmediate,t.clearImmediate="undefined"!=typeof self&&self.clearImmediate||void 0!==e&&e.clearImmediate||this&&this.clearImmediate}).call(this,n(13))},function(e,t,n){(function(e,t){!function(e,n){"use strict";if(!e.setImmediate){var r,o,i,a,l,u=1,s={},c=!1,d=e.document,f=Object.getPrototypeOf&&Object.getPrototypeOf(e);f=f&&f.setTimeout?f:e,"[object process]"==={}.toString.call(e.process)?r=function(e){t.nextTick((function(){m(e)}))}:!function(){if(e.postMessage&&!e.importScripts){var t=!0,n=e.onmessage;return e.onmessage=function(){t=!1},e.postMessage("","*"),e.onmessage=n,t}}()?e.MessageChannel?((i=new MessageChannel).port1.onmessage=function(e){m(e.data)},r=function(e){i.port2.postMessage(e)}):d&&"onreadystatechange"in d.createElement("script")?(o=d.documentElement,r=function(e){var t=d.createElement("script");t.onreadystatechange=function(){m(e),t.onreadystatechange=null,o.removeChild(t),t=null},o.appendChild(t)}):r=function(e){setTimeout(m,0,e)}:(a="setImmediate$"+Math.random()+"$",l=function(t){t.source===e&&"string"==typeof t.data&&0===t.data.indexOf(a)&&m(+t.data.slice(a.length))},e.addEventListener?e.addEventListener("message",l,!1):e.attachEvent("onmessage",l),r=function(t){e.postMessage(a+t,"*")}),f.setImmediate=function(e){"function"!=typeof e&&(e=new Function(""+e));for(var t=new Array(arguments.length-1),n=0;n<t.length;n++)t[n]=arguments[n+1];var o={callback:e,args:t};return s[u]=o,r(u),u++},f.clearImmediate=p}function p(e){delete s[e]}function m(e){if(c)setTimeout(m,0,e);else{var t=s[e];if(t){c=!0;try{!function(e){var t=e.callback,n=e.args;switch(n.length){case 0:t();break;case 1:t(n[0]);break;case 2:t(n[0],n[1]);break;case 3:t(n[0],n[1],n[2]);break;default:t.apply(void 0,n)}}(t)}finally{p(e),c=!1}}}}}("undefined"==typeof self?void 0===e?this:e:self)}).call(this,n(13),n(22))},function(e,t,n){"use strict";n.r(t);var r=n(10),o=n.n(r),i=n(11),a=n.n(i),l=n(14),u=n.n(l),s=n(15),c=n.n(s),d=n(8),f=n.n(d),p=n(0),m=n(17);function h(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=f()(e);if(t){var o=f()(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return c()(this,n)}}var v=function(e){u()(n,e);var t=h(n);function n(){return o()(this,n),t.apply(this,arguments)}return a()(n,[{key:"render",value:function(){return p.createElement("div",{className:"page-Main"},p.createElement("h1",null,"Main1"),p.createElement(m.default.PrimaryButton,{text:"Test Library import from Layout"}))}}]),n}(p.Component);t.default=v},,function(e,t,n){"use strict";n.d(t,"a",(function(){return gl}));var r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])})(e,t)};function o(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}var i=function(){return(i=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)};function a(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(r=Object.getOwnPropertySymbols(e);o<r.length;o++)t.indexOf(r[o])<0&&Object.prototype.propertyIsEnumerable.call(e,r[o])&&(n[r[o]]=e[r[o]])}return n}function l(e,t,n,r){var o,i=arguments.length,a=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,r);else for(var l=e.length-1;l>=0;l--)(o=e[l])&&(a=(i<3?o(a):i>3?o(t,n,a):o(t,n))||a);return i>3&&a&&Object.defineProperty(t,n,a),a}Object.create;function u(e,t,n){if(n||2===arguments.length)for(var r,o=0,i=t.length;o<i;o++)!r&&o in t||(r||(r=Array.prototype.slice.call(t,0,o)),r[o]=t[o]);return e.concat(r||Array.prototype.slice.call(t))}Object.create;var s=n(0),c=!1;var d=void 0;try{d=window}catch(e){}function f(e){if(!c&&void 0!==d){var t=e;return t&&t.ownerDocument&&t.ownerDocument.defaultView?t.ownerDocument.defaultView:d}}var p=function(){function e(e,t){this._timeoutIds=null,this._immediateIds=null,this._intervalIds=null,this._animationFrameIds=null,this._isDisposed=!1,this._parent=e||null,this._onErrorHandler=t,this._noop=function(){}}return e.prototype.dispose=function(){var e;if(this._isDisposed=!0,this._parent=null,this._timeoutIds){for(e in this._timeoutIds)this._timeoutIds.hasOwnProperty(e)&&this.clearTimeout(parseInt(e,10));this._timeoutIds=null}if(this._immediateIds){for(e in this._immediateIds)this._immediateIds.hasOwnProperty(e)&&this.clearImmediate(parseInt(e,10));this._immediateIds=null}if(this._intervalIds){for(e in this._intervalIds)this._intervalIds.hasOwnProperty(e)&&this.clearInterval(parseInt(e,10));this._intervalIds=null}if(this._animationFrameIds){for(e in this._animationFrameIds)this._animationFrameIds.hasOwnProperty(e)&&this.cancelAnimationFrame(parseInt(e,10));this._animationFrameIds=null}},e.prototype.setTimeout=function(e,t){var n=this,r=0;return this._isDisposed||(this._timeoutIds||(this._timeoutIds={}),r=setTimeout((function(){try{n._timeoutIds&&delete n._timeoutIds[r],e.apply(n._parent)}catch(e){n._logError(e)}}),t),this._timeoutIds[r]=!0),r},e.prototype.clearTimeout=function(e){this._timeoutIds&&this._timeoutIds[e]&&(clearTimeout(e),delete this._timeoutIds[e])},e.prototype.setImmediate=function(e,t){var n=this,r=0,o=f(t);if(!this._isDisposed){this._immediateIds||(this._immediateIds={});r=o.setTimeout((function(){try{n._immediateIds&&delete n._immediateIds[r],e.apply(n._parent)}catch(e){n._logError(e)}}),0),this._immediateIds[r]=!0}return r},e.prototype.clearImmediate=function(e,t){var n=f(t);this._immediateIds&&this._immediateIds[e]&&(n.clearTimeout(e),delete this._immediateIds[e])},e.prototype.setInterval=function(e,t){var n=this,r=0;return this._isDisposed||(this._intervalIds||(this._intervalIds={}),r=setInterval((function(){try{e.apply(n._parent)}catch(e){n._logError(e)}}),t),this._intervalIds[r]=!0),r},e.prototype.clearInterval=function(e){this._intervalIds&&this._intervalIds[e]&&(clearInterval(e),delete this._intervalIds[e])},e.prototype.throttle=function(e,t,n){var r=this;if(this._isDisposed)return this._noop;var o,i,a=t||0,l=!0,u=!0,s=0,c=null;n&&"boolean"==typeof n.leading&&(l=n.leading),n&&"boolean"==typeof n.trailing&&(u=n.trailing);var d=function(t){var n=Date.now(),f=n-s,p=l?a-f:a;return f>=a&&(!t||l)?(s=n,c&&(r.clearTimeout(c),c=null),o=e.apply(r._parent,i)):null===c&&u&&(c=r.setTimeout(d,p)),o};return function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return i=e,d(!0)}},e.prototype.debounce=function(e,t,n){var r=this;if(this._isDisposed){var o=function(){};return o.cancel=function(){},o.flush=function(){return null},o.pending=function(){return!1},o}var i,a,l=t||0,u=!1,s=!0,c=null,d=0,f=Date.now(),p=null;n&&"boolean"==typeof n.leading&&(u=n.leading),n&&"boolean"==typeof n.trailing&&(s=n.trailing),n&&"number"==typeof n.maxWait&&!isNaN(n.maxWait)&&(c=n.maxWait);var m=function(e){p&&(r.clearTimeout(p),p=null),f=e},h=function(t){m(t),i=e.apply(r._parent,a)},v=function(e){var t=Date.now(),n=!1;e&&(u&&t-d>=l&&(n=!0),d=t);var o=t-d,a=l-o,m=t-f,g=!1;return null!==c&&(m>=c&&p?g=!0:a=Math.min(a,c-m)),o>=l||g||n?h(t):null!==p&&e||!s||(p=r.setTimeout(v,a)),i},g=function(){return!!p},y=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return a=e,v(!0)};return y.cancel=function(){g()&&m(Date.now())},y.flush=function(){return g()&&h(Date.now()),i},y.pending=g,y},e.prototype.requestAnimationFrame=function(e,t){var n=this,r=0,o=f(t);if(!this._isDisposed){this._animationFrameIds||(this._animationFrameIds={});var i=function(){try{n._animationFrameIds&&delete n._animationFrameIds[r],e.apply(n._parent)}catch(e){n._logError(e)}};r=o.requestAnimationFrame?o.requestAnimationFrame(i):o.setTimeout(i,0),this._animationFrameIds[r]=!0}return r},e.prototype.cancelAnimationFrame=function(e,t){var n=f(t);this._animationFrameIds&&this._animationFrameIds[e]&&(n.cancelAnimationFrame?n.cancelAnimationFrame(e):n.clearTimeout(e),delete this._animationFrameIds[e])},e.prototype._logError=function(e){this._onErrorHandler&&this._onErrorHandler(e)},e}();function m(e,t){for(var n in e)if(e.hasOwnProperty(n)&&(!t.hasOwnProperty(n)||t[n]!==e[n]))return!1;for(var n in t)if(t.hasOwnProperty(n)&&!e.hasOwnProperty(n))return!1;return!0}function h(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];return v.apply(this,[null,e].concat(t))}function v(e,t){for(var n=[],r=2;r<arguments.length;r++)n[r-2]=arguments[r];t=t||{};for(var o=0,i=n;o<i.length;o++){var a=i[o];if(a)for(var l in a)!a.hasOwnProperty(l)||e&&!e(l)||(t[l]=a[l])}return t}var g=function(){function e(t){this._id=e._uniqueId++,this._parent=t,this._eventRecords=[]}return e.raise=function(t,n,r,o){var i;if(e._isElement(t)){if("undefined"!=typeof document&&document.createEvent){var a=document.createEvent("HTMLEvents");a.initEvent(n,o||!1,!0),h(a,r),i=t.dispatchEvent(a)}else if("undefined"!=typeof document&&document.createEventObject){var l=document.createEventObject(r);t.fireEvent("on"+n,l)}}else for(;t&&!1!==i;){var u=t.__events__,s=u?u[n]:null;if(s)for(var c in s)if(s.hasOwnProperty(c))for(var d=s[c],f=0;!1!==i&&f<d.length;f++){var p=d[f];p.objectCallback&&(i=p.objectCallback.call(p.parent,r))}t=o?t.parent:null}return i},e.isObserved=function(e,t){var n=e&&e.__events__;return!!n&&!!n[t]},e.isDeclared=function(e,t){var n=e&&e.__declaredEvents;return!!n&&!!n[t]},e.stopPropagation=function(e){e.stopPropagation?e.stopPropagation():e.cancelBubble=!0},e._isElement=function(e){return!!e&&(!!e.addEventListener||"undefined"!=typeof HTMLElement&&e instanceof HTMLElement)},e.prototype.dispose=function(){this._isDisposed||(this._isDisposed=!0,this.off(),this._parent=null)},e.prototype.onAll=function(e,t,n){for(var r in t)t.hasOwnProperty(r)&&this.on(e,r,t[r],n)},e.prototype.on=function(t,n,r,o){var i=this;if(n.indexOf(",")>-1)for(var a=n.split(/[ ,]+/),l=0;l<a.length;l++)this.on(t,a[l],r,o);else{var u=this._parent,s={target:t,eventName:n,parent:u,callback:r,options:o};if((a=t.__events__=t.__events__||{})[n]=a[n]||{count:0},a[n][this._id]=a[n][this._id]||[],a[n][this._id].push(s),a[n].count++,e._isElement(t)){var c=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];if(!i._isDisposed){var n;try{if(!1===(n=r.apply(u,e))&&e[0]){var o=e[0];o.preventDefault&&o.preventDefault(),o.stopPropagation&&o.stopPropagation(),o.cancelBubble=!0}}catch(o){}return n}};s.elementCallback=c,t.addEventListener?t.addEventListener(n,c,o):t.attachEvent&&t.attachEvent("on"+n,c)}else{s.objectCallback=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];if(!i._isDisposed)return r.apply(u,e)}}this._eventRecords.push(s)}},e.prototype.off=function(e,t,n,r){for(var o=0;o<this._eventRecords.length;o++){var i=this._eventRecords[o];if(!(e&&e!==i.target||t&&t!==i.eventName||n&&n!==i.callback||"boolean"==typeof r&&r!==i.options)){var a=i.target.__events__,l=a[i.eventName],u=l?l[this._id]:null;u&&(1!==u.length&&n?(l.count--,u.splice(u.indexOf(i),1)):(l.count-=u.length,delete a[i.eventName][this._id]),l.count||delete a[i.eventName]),i.elementCallback&&(i.target.removeEventListener?i.target.removeEventListener(i.eventName,i.elementCallback,i.options):i.target.detachEvent&&i.target.detachEvent("on"+i.eventName,i.elementCallback)),this._eventRecords.splice(o--,1)}}},e.prototype.raise=function(t,n,r){return e.raise(this._parent,t,n,r)},e.prototype.declare=function(e){var t=this._parent.__declaredEvents=this._parent.__declaredEvents||{};if("string"==typeof e)t[e]=!0;else for(var n=0;n<e.length;n++)t[e[n]]=!0},e._uniqueId=0,e}();function y(e){console&&console.warn&&console.warn(e)}!function(e){function t(n,r){var o=e.call(this,n,r)||this;return function(e,t,n){for(var r=0,o=n.length;r<o;r++)b(e,t,n[r])}(o,t.prototype,["componentDidMount","shouldComponentUpdate","getSnapshotBeforeUpdate","render","componentDidUpdate","componentWillUnmount"]),o}o(t,e),t.prototype.componentDidUpdate=function(e,t){this._updateComponentRef(e,this.props)},t.prototype.componentDidMount=function(){this._setComponentRef(this.props.componentRef,this)},t.prototype.componentWillUnmount=function(){if(this._setComponentRef(this.props.componentRef,null),this.__disposables){for(var e=0,t=this._disposables.length;e<t;e++){var n=this.__disposables[e];n.dispose&&n.dispose()}this.__disposables=null}},Object.defineProperty(t.prototype,"className",{get:function(){if(!this.__className){var e=/function (.{1,})\(/.exec(this.constructor.toString());this.__className=e&&e.length>1?e[1]:""}return this.__className},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"_disposables",{get:function(){return this.__disposables||(this.__disposables=[]),this.__disposables},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"_async",{get:function(){return this.__async||(this.__async=new p(this),this._disposables.push(this.__async)),this.__async},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"_events",{get:function(){return this.__events||(this.__events=new g(this),this._disposables.push(this.__events)),this.__events},enumerable:!1,configurable:!0}),t.prototype._resolveRef=function(e){var t=this;return this.__resolves||(this.__resolves={}),this.__resolves[e]||(this.__resolves[e]=function(n){return t[e]=n}),this.__resolves[e]},t.prototype._updateComponentRef=function(e,t){void 0===t&&(t={}),e&&t&&e.componentRef!==t.componentRef&&(this._setComponentRef(e.componentRef,null),this._setComponentRef(t.componentRef,this))},t.prototype._warnDeprecations=function(e){this.className,this.props},t.prototype._warnMutuallyExclusive=function(e){this.className,this.props},t.prototype._warnConditionallyRequiredProps=function(e,t,n){this.className,this.props},t.prototype._setComponentRef=function(e,t){!this._skipComponentRefResolution&&e&&("function"==typeof e&&e(t),"object"==typeof e&&(e.current=t))}}(s.Component);function b(e,t,n){var r=e[n],o=t[n];(r||o)&&(e[n]=function(){for(var e,t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return o&&(e=o.apply(this,t)),r!==o&&(e=r.apply(this,t)),e})}function _(){return null}var k=0,C=function(){function e(){}return e.getValue=function(e,t){var n=w();return void 0===n[e]&&(n[e]="function"==typeof t?t():t),n[e]},e.setValue=function(e,t){var n=w(),r=n.__callbacks__,o=n[e];if(t!==o){n[e]=t;var i={oldValue:o,value:t,key:e};for(var a in r)r.hasOwnProperty(a)&&r[a](i)}return t},e.addChangeListener=function(e){var t=e.__id__,n=x();t||(t=e.__id__=String(k++)),n[t]=e},e.removeChangeListener=function(e){delete x()[e.__id__]},e}();function w(){var e,t=f()||{};return t.__globalSettings__||(t.__globalSettings__=((e={}).__callbacks__={},e)),t.__globalSettings__}function x(){return w().__callbacks__}var E={settings:{},scopedSettings:{},inCustomizerContext:!1},S=C.getValue("customizations",{settings:{},scopedSettings:{},inCustomizerContext:!1}),I=[],T=function(){function e(){}return e.reset=function(){S.settings={},S.scopedSettings={}},e.applySettings=function(t){S.settings=i(i({},S.settings),t),e._raiseChange()},e.applyScopedSettings=function(t,n){S.scopedSettings[t]=i(i({},S.scopedSettings[t]),n),e._raiseChange()},e.getSettings=function(e,t,n){void 0===n&&(n=E);for(var r={},o=t&&n.scopedSettings[t]||{},i=t&&S.scopedSettings[t]||{},a=0,l=e;a<l.length;a++){var u=l[a];r[u]=o[u]||n.settings[u]||i[u]||S.settings[u]}return r},e.applyBatchedUpdates=function(t,n){e._suppressUpdates=!0;try{t()}catch(e){}e._suppressUpdates=!1,n||e._raiseChange()},e.observe=function(e){I.push(e)},e.unobserve=function(e){I=I.filter((function(t){return t!==e}))},e._raiseChange=function(){e._suppressUpdates||I.forEach((function(e){return e()}))},e}();function P(e,t){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var M=s.createContext({customizations:{inCustomizerContext:!1,settings:{},scopedSettings:{}}});function D(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];if(e&&1===e.length&&e[0]&&!e[0].subComponentStyles)return e[0];for(var n={},r={},o=0,i=e;o<i.length;o++){var a=i[o];if(a)for(var l in a)if(a.hasOwnProperty(l)){if("subComponentStyles"===l&&void 0!==a.subComponentStyles){var s=a.subComponentStyles;for(var c in s)s.hasOwnProperty(c)&&(r.hasOwnProperty(c)?r[c].push(s[c]):r[c]=[s[c]]);continue}var d=n[l],f=a[l];n[l]=void 0===d?f:u(u([],Array.isArray(d)?d:[d]),Array.isArray(f)?f:[f])}}if(Object.keys(r).length>0){n.subComponentStyles={};var p=n.subComponentStyles,m=function(e){if(r.hasOwnProperty(e)){var t=r[e];p[e]=function(e){return D.apply(void 0,t.map((function(t){return"function"==typeof t?t(e):t})))}}};for(var c in r)m(c)}return n}function N(e,t,n){return function(r){var a,l=((a=function(a){function l(e){var t=a.call(this,e)||this;return t._styleCache={},t._onSettingChanged=t._onSettingChanged.bind(t),t}return o(l,a),l.prototype.componentDidMount=function(){T.observe(this._onSettingChanged)},l.prototype.componentWillUnmount=function(){T.unobserve(this._onSettingChanged)},l.prototype.render=function(){var o=this;return s.createElement(M.Consumer,null,(function(a){var l=T.getSettings(t,e,a.customizations),u=o.props;if(l.styles&&"function"==typeof l.styles&&(l.styles=l.styles(i(i({},l),u))),n&&l.styles){if(o._styleCache.default!==l.styles||o._styleCache.component!==u.styles){var c=D(l.styles,u.styles);o._styleCache.default=l.styles,o._styleCache.component=u.styles,o._styleCache.merged=c}return s.createElement(r,i({},l,u,{styles:o._styleCache.merged}))}return s.createElement(r,i({},l,u))}))},l.prototype._onSettingChanged=function(){this.forceUpdate()},l}(s.Component)).displayName="Customized"+e,a);return P(r,l)}}function R(e,t){if(e.length!==t.length)return!1;for(var n=0;n<e.length;n++)if(e[n]!==t[n])return!1;return!0}var F,B=function(e){return function(t){for(var n=0,r=e.refs;n<r.length;n++){var o=r[n];"function"==typeof o?o(t):o&&(o.current=t)}}},L=function(e){var t={refs:[]};return function(){for(var e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];return t.resolver&&R(t.refs,e)||(t.resolver=B(t)),t.refs=e,t.resolver}},O=0,A=1,z=2,H="undefined"!=typeof navigator&&/rv:11.0/.test(navigator.userAgent),U={};try{U=window||{}}catch(lr){}var W=function(){function e(e,t){var n,r,o,a,l,u;this._rules=[],this._preservedRules=[],this._counter=0,this._keyToClassName={},this._onInsertRuleCallbacks=[],this._onResetCallbacks=[],this._classNameToArgs={},this._config=i({injectionMode:"undefined"==typeof document?O:A,defaultPrefix:"css",namespace:void 0,cspSettings:void 0},e),this._classNameToArgs=null!==(n=null==t?void 0:t.classNameToArgs)&&void 0!==n?n:this._classNameToArgs,this._counter=null!==(r=null==t?void 0:t.counter)&&void 0!==r?r:this._counter,this._keyToClassName=null!==(a=null!==(o=this._config.classNameCache)&&void 0!==o?o:null==t?void 0:t.keyToClassName)&&void 0!==a?a:this._keyToClassName,this._preservedRules=null!==(l=null==t?void 0:t.preservedRules)&&void 0!==l?l:this._preservedRules,this._rules=null!==(u=null==t?void 0:t.rules)&&void 0!==u?u:this._rules}return e.getInstance=function(){if(!(F=U.__stylesheet__)||F._lastStyleElement&&F._lastStyleElement.ownerDocument!==document){var t=(null==U?void 0:U.FabricConfig)||{},n=new e(t.mergeStyles,t.serializedStylesheet);F=n,U.__stylesheet__=n}return F},e.prototype.serialize=function(){return JSON.stringify({classNameToArgs:this._classNameToArgs,counter:this._counter,keyToClassName:this._keyToClassName,preservedRules:this._preservedRules,rules:this._rules})},e.prototype.setConfig=function(e){this._config=i(i({},this._config),e)},e.prototype.onReset=function(e){var t=this;return this._onResetCallbacks.push(e),function(){t._onResetCallbacks=t._onResetCallbacks.filter((function(t){return t!==e}))}},e.prototype.onInsertRule=function(e){var t=this;return this._onInsertRuleCallbacks.push(e),function(){t._onInsertRuleCallbacks=t._onInsertRuleCallbacks.filter((function(t){return t!==e}))}},e.prototype.getClassName=function(e){var t=this._config.namespace;return(t?t+"-":"")+(e||this._config.defaultPrefix)+"-"+this._counter++},e.prototype.cacheClassName=function(e,t,n,r){this._keyToClassName[t]=e,this._classNameToArgs[e]={args:n,rules:r}},e.prototype.classNameFromKey=function(e){return this._keyToClassName[e]},e.prototype.getClassNameCache=function(){return this._keyToClassName},e.prototype.argsFromClassName=function(e){var t=this._classNameToArgs[e];return t&&t.args},e.prototype.insertedRulesFromClassName=function(e){var t=this._classNameToArgs[e];return t&&t.rules},e.prototype.insertRule=function(e,t){var n=this._config.injectionMode,r=n!==O?this._getStyleElement():void 0;if(t&&this._preservedRules.push(e),r)switch(n){case A:var o=r.sheet;try{o.insertRule(e,o.cssRules.length)}catch(e){}break;case z:r.appendChild(document.createTextNode(e))}else this._rules.push(e);this._config.onInsertRule&&this._config.onInsertRule(e),this._onInsertRuleCallbacks.forEach((function(e){return e()}))},e.prototype.getRules=function(e){return(e?this._preservedRules.join(""):"")+this._rules.join("")},e.prototype.reset=function(){this._rules=[],this._counter=0,this._classNameToArgs={},this._keyToClassName={},this._onResetCallbacks.forEach((function(e){return e()}))},e.prototype.resetKeys=function(){this._keyToClassName={}},e.prototype._getStyleElement=function(){var e=this;return this._styleElement||"undefined"==typeof document||(this._styleElement=this._createStyleElement(),H||window.requestAnimationFrame((function(){e._styleElement=void 0}))),this._styleElement},e.prototype._createStyleElement=function(){var e=document.head,t=document.createElement("style"),n=null;t.setAttribute("data-merge-styles","true");var r=this._config.cspSettings;if(r&&r.nonce&&t.setAttribute("nonce",r.nonce),this._lastStyleElement)n=this._lastStyleElement.nextElementSibling;else{var o=this._findPlaceholderStyleTag();n=o?o.nextElementSibling:e.childNodes[0]}return e.insertBefore(t,e.contains(n)?n:null),this._lastStyleElement=t,t},e.prototype._findPlaceholderStyleTag=function(){var e=document.head;return e?e.querySelector("style[data-merge-styles]"):null},e}(),j=!1,K=0,V={empty:!0},q={},$="undefined"==typeof WeakMap?null:WeakMap;function Q(){K++}function G(e,t,n){if(void 0===t&&(t=100),void 0===n&&(n=!1),!$)return e;if(!j){var r=W.getInstance();r&&r.onReset&&W.getInstance().onReset(Q),j=!0}var o,i=0,a=K;return function(){for(var r=[],l=0;l<arguments.length;l++)r[l]=arguments[l];var u=o;(void 0===o||a!==K||t>0&&i>t)&&(o=X(),i=0,a=K),u=o;for(var s=0;s<r.length;s++){var c=Z(r[s]);u.map.has(c)||u.map.set(c,X()),u=u.map.get(c)}return u.hasOwnProperty("value")||(u.value=e.apply(void 0,r),i++),!n||null!==u.value&&void 0!==u.value||(u.value=e.apply(void 0,r)),u.value}}function Y(e){if(!$)return e;var t=new $;return function(n){if(!n||"function"!=typeof n&&"object"!=typeof n)return e(n);if(t.has(n))return t.get(n);var r=e(n);return t.set(n,r),r}}function Z(e){return e?"object"==typeof e||"function"==typeof e?e:(q[e]||(q[e]={val:e}),q[e]):V}function X(){return{map:$?new $:null}}function J(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];for(var n=[],r=0,o=e;r<o.length;r++){var i=o[r];if(i)if("string"==typeof i)n.push(i);else if(i.hasOwnProperty("toString")&&"function"==typeof i.toString)n.push(i.toString());else for(var a in i)i[a]&&n.push(a)}return n.join(" ")}function ee(e,t){return void 0===t&&(t=!0),e&&(t&&function(e){var t,n;return e&&((n=e)&&n._virtual)&&(t=e._virtual.parent),t}(e)||e.parentNode&&e.parentNode)}function te(e,t){return e&&e!==document.body?t(e)?e:te(ee(e),t):null}function ne(e,t){var n=te(e,(function(e){return t===e||e.hasAttribute("data-portal-element")}));return null!==n&&n.hasAttribute("data-portal-element")}var re=9,oe=13,ie=18,ae=27,le=32,ue=33,se=34,ce=35,de=36,fe=37,pe=38,me=39,he=40,ve="ms-Fabric--isFocusVisible";function ge(e,t){var n=t?f(t):f();if(n){var r=n.document.body.classList;r.add(e?ve:"ms-Fabric--isFocusHidden"),r.remove(e?"ms-Fabric--isFocusHidden":ve)}}function ye(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];return t.length<2?t[0]:function(){for(var n=[],r=0;r<arguments.length;r++)n[r]=arguments[r];t.forEach((function(t){return t&&t.apply(e,n)}))}}function be(e){!function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=ye(e,e[n],t[n]))}(e,{componentDidMount:_e,componentDidUpdate:ke,componentWillUnmount:Ce})}function _e(){we(this.props.componentRef,this)}function ke(e){e.componentRef!==this.props.componentRef&&(we(e.componentRef,null),we(this.props.componentRef,this))}function Ce(){we(this.props.componentRef,null)}function we(e,t){e&&("object"==typeof e?e.current=t:"function"==typeof e&&e(t))}var xe=f()||{};void 0===xe.__currentId__&&(xe.__currentId__=0);var Ee=!1;function Se(e){if(!Ee){var t=W.getInstance();t&&t.onReset&&t.onReset(Ie),Ee=!0}return(void 0===e?"id__":e)+xe.__currentId__++}function Ie(e){void 0===e&&(e=0),xe.__currentId__=e}var Te,Pe=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];for(var n={},r=0,o=e;r<o.length;r++)for(var i=o[r],a=Array.isArray(i)?i:Object.keys(i),l=0,u=a;l<u.length;l++){var s=u[l];n[s]=1}return n},Me=Pe(["onCopy","onCut","onPaste","onCompositionEnd","onCompositionStart","onCompositionUpdate","onFocus","onFocusCapture","onBlur","onBlurCapture","onChange","onInput","onSubmit","onLoad","onError","onKeyDown","onKeyDownCapture","onKeyPress","onKeyUp","onAbort","onCanPlay","onCanPlayThrough","onDurationChange","onEmptied","onEncrypted","onEnded","onLoadedData","onLoadedMetadata","onLoadStart","onPause","onPlay","onPlaying","onProgress","onRateChange","onSeeked","onSeeking","onStalled","onSuspend","onTimeUpdate","onVolumeChange","onWaiting","onClick","onClickCapture","onContextMenu","onDoubleClick","onDrag","onDragEnd","onDragEnter","onDragExit","onDragLeave","onDragOver","onDragStart","onDrop","onMouseDown","onMouseDownCapture","onMouseEnter","onMouseLeave","onMouseMove","onMouseOut","onMouseOver","onMouseUp","onMouseUpCapture","onSelect","onTouchCancel","onTouchEnd","onTouchMove","onTouchStart","onScroll","onWheel","onPointerCancel","onPointerDown","onPointerEnter","onPointerLeave","onPointerMove","onPointerOut","onPointerOver","onPointerUp","onGotPointerCapture","onLostPointerCapture"]),De=Pe(["accessKey","children","className","contentEditable","dir","draggable","hidden","htmlFor","id","lang","ref","role","style","tabIndex","title","translate","spellCheck","name"]),Ne=Pe(De,Me),Re=(Pe(Ne,["form"]),Pe(Ne,["height","loop","muted","preload","src","width"])),Fe=(Pe(Re,["poster"]),Pe(Ne,["start"]),Pe(Ne,["value"]),Pe(Ne,["download","href","hrefLang","media","rel","target","type"])),Be=Pe(Ne,["autoFocus","disabled","form","formAction","formEncType","formMethod","formNoValidate","formTarget","type","value"]),Le=(Pe(Be,["accept","alt","autoCapitalize","autoComplete","checked","dirname","form","height","inputMode","list","max","maxLength","min","minLength","multiple","pattern","placeholder","readOnly","required","src","step","size","type","value","width"]),Pe(Be,["autoCapitalize","cols","dirname","form","maxLength","minLength","placeholder","readOnly","required","rows","wrap"]),Pe(Be,["form","multiple","required"]),Pe(Ne,["selected","value"]),Pe(Ne,["cellPadding","cellSpacing"]),Pe(Ne,["rowSpan","scope"]),Pe(Ne,["colSpan","headers","rowSpan","scope"]),Pe(Ne,["span"]),Pe(Ne,["span"]),Pe(Ne,["acceptCharset","action","encType","encType","method","noValidate","target"]),Pe(Ne,["allow","allowFullScreen","allowPaymentRequest","allowTransparency","csp","height","importance","referrerPolicy","sandbox","src","srcDoc","width"]),Pe(Ne,["alt","crossOrigin","height","src","srcSet","useMap","width"])),Oe=Ne;function Ae(e,t,n){for(var r=Array.isArray(t),o={},i=0,a=Object.keys(e);i<a.length;i++){var l=a[i];!(!r&&t[l]||r&&t.indexOf(l)>=0||0===l.indexOf("data-")||0===l.indexOf("aria-"))||n&&-1!==(null==n?void 0:n.indexOf(l))||(o[l]=e[l])}return o}var ze=((Te={})[pe]=1,Te[he]=1,Te[fe]=1,Te[me]=1,Te[de]=1,Te[ce]=1,Te[re]=1,Te[ue]=1,Te[se]=1,Te);var He=new WeakMap;function Ue(e,t){var n,r=He.get(e);return n=r?r+t:1,He.set(e,n),n}function We(e){s.useEffect((function(){var t,n=f(null==e?void 0:e.current);if(n&&!0!==(null===(t=n.FabricConfig)||void 0===t?void 0:t.disableFocusRects)){var r=Ue(n,1);return r<=1&&(n.addEventListener("mousedown",Ke,!0),n.addEventListener("pointerdown",Ve,!0),n.addEventListener("keydown",qe,!0)),function(){var e;n&&!0!==(null===(e=n.FabricConfig)||void 0===e?void 0:e.disableFocusRects)&&0===(r=Ue(n,-1))&&(n.removeEventListener("mousedown",Ke,!0),n.removeEventListener("pointerdown",Ve,!0),n.removeEventListener("keydown",qe,!0))}}}),[e])}var je=function(e){return We(e.rootRef),null};function Ke(e){ge(!1,e.target)}function Ve(e){"mouse"!==e.pointerType&&ge(!1,e.target)}function qe(e){var t;t=e.which,ze[t]&&ge(!0,e.target)}function $e(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n=e.filter((function(e){return e})).join(" ").trim();return""===n?void 0:n}function Qe(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];for(var r=[],o=0,i=t;o<i.length;o++){var a=i[o];a&&r.push("function"==typeof a?a(e):a)}return 1===r.length?r[0]:r.length?D.apply(void 0,r):{}}function Ge(e,t){var n,r=(n=s.useState(0)[1],function(){return n((function(e){return++e}))}),o=s.useContext(M).customizations,i=o.inCustomizerContext;return s.useEffect((function(){return i||T.observe(r),function(){i||T.unobserve(r)}}),[i]),T.getSettings(e,t,o)}var Ye,Ze,Xe=["theme","styles"];function Je(e,t,n,r,o){var l=(r=r||{scope:"",fields:void 0}).scope,u=r.fields,c=void 0===u?Xe:u,d=s.forwardRef((function(r,o){var u=s.useRef(),d=Ge(c,l),f=d.styles,p=(d.dir,a(d,["styles","dir"])),m=n?n(r):void 0,h=u.current&&u.current.__cachedInputs__||[],v=r.styles;if(!u.current||f!==h[1]||v!==h[2]){var g=function(e){return Qe(e,t,f,v)};g.__cachedInputs__=[t,f,v],g.__noStyleOverride__=!f&&!v,u.current=g}return s.createElement(e,i({ref:o},p,m,r,{styles:u.current}))}));d.displayName="Styled"+(e.displayName||e.name);var f=o?s.memo(d):d;return d.displayName&&(f.displayName=d.displayName),f}function et(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n=[],r=[],o=W.getInstance();function i(e){for(var t=0,a=e;t<a.length;t++){var l=a[t];if(l)if("string"==typeof l)if(l.indexOf(" ")>=0)i(l.split(" "));else{var u=o.argsFromClassName(l);u?i(u):-1===n.indexOf(l)&&n.push(l)}else Array.isArray(l)?i(l):"object"==typeof l&&r.push(l)}}return i(e),{classes:n,objects:r}}function tt(e){Ze!==e&&(Ze=e)}function nt(){return void 0===Ze&&(Ze="undefined"!=typeof document&&!!document.documentElement&&"rtl"===document.documentElement.getAttribute("dir")),Ze}function rt(){return{rtl:nt()}}!function(e){e[e.default=0]="default",e[e.image=1]="image",e[e.Default=1e5]="Default",e[e.Image=100001]="Image"}(Ye||(Ye={})),Ze=nt();var ot,it={};var at={"user-select":1};function lt(e,t){var n=function(){var e;if(!ot){var t="undefined"!=typeof document?document:void 0,n="undefined"!=typeof navigator?navigator:void 0,r=null===(e=null==n?void 0:n.userAgent)||void 0===e?void 0:e.toLowerCase();ot=t?{isWebkit:!(!t||!("WebkitAppearance"in t.documentElement.style)),isMoz:!!(r&&r.indexOf("firefox")>-1),isOpera:!!(r&&r.indexOf("opera")>-1),isMs:!(!n||!/rv:11.0/i.test(n.userAgent)&&!/Edge\/\d./i.test(navigator.userAgent))}:{isWebkit:!0,isMoz:!0,isOpera:!0,isMs:!0}}return ot}(),r=e[t];if(at[r]){var o=e[t+1];at[r]&&(n.isWebkit&&e.push("-webkit-"+r,o),n.isMoz&&e.push("-moz-"+r,o),n.isMs&&e.push("-ms-"+r,o),n.isOpera&&e.push("-o-"+r,o))}}var ut,st=["column-count","font-weight","flex","flex-grow","flex-shrink","fill-opacity","opacity","order","z-index","zoom"];function ct(e,t){var n=e[t],r=e[t+1];if("number"==typeof r){var o=st.indexOf(n)>-1,i=n.indexOf("--")>-1,a=o||i?"":"px";e[t+1]=""+r+a}}var dt="left",ft="right",pt=((ut={})[dt]=ft,ut[ft]=dt,ut),mt={"w-resize":"e-resize","sw-resize":"se-resize","nw-resize":"ne-resize"};function ht(e,t,n){if(e.rtl){var r=t[n];if(!r)return;var o=t[n+1];if("string"==typeof o&&o.indexOf("@noflip")>=0)t[n+1]=o.replace(/\s*(?:\/\*\s*)?\@noflip\b(?:\s*\*\/)?\s*?/g,"");else if(r.indexOf(dt)>=0)t[n]=r.replace(dt,ft);else if(r.indexOf(ft)>=0)t[n]=r.replace(ft,dt);else if(String(o).indexOf(dt)>=0)t[n+1]=o.replace(dt,ft);else if(String(o).indexOf(ft)>=0)t[n+1]=o.replace(ft,dt);else if(pt[r])t[n]=pt[r];else if(mt[o])t[n+1]=mt[o];else switch(r){case"margin":case"padding":t[n+1]=function(e){if("string"==typeof e){var t=e.split(" ");if(4===t.length)return t[0]+" "+t[3]+" "+t[2]+" "+t[1]}return e}(o);break;case"box-shadow":t[n+1]=function(e,t){var n=e.split(" "),r=parseInt(n[t],10);return n[0]=n[0].replace(String(r),String(-1*r)),n.join(" ")}(o,0)}}}function vt(e){var t=e&&e["&"];return t?t.displayName:void 0}var gt=/\:global\((.+?)\)/g;function yt(e,t){return e.indexOf(":global(")>=0?e.replace(gt,"$1"):0===e.indexOf(":")?t+e:e.indexOf("&")<0?t+" "+e:e}function bt(e,t,n,r){void 0===t&&(t={__order:[]}),0===n.indexOf("@")?_t([r],t,n=n+"{"+e):n.indexOf(",")>-1?function(e){if(!gt.test(e))return e;for(var t=[],n=/\:global\((.+?)\)/g,r=null;r=n.exec(e);)r[1].indexOf(",")>-1&&t.push([r.index,r.index+r[0].length,r[1].split(",").map((function(e){return":global("+e.trim()+")"})).join(", ")]);return t.reverse().reduce((function(e,t){var n=t[0],r=t[1],o=t[2];return e.slice(0,n)+o+e.slice(r)}),e)}(n).split(",").map((function(e){return e.trim()})).forEach((function(n){return _t([r],t,yt(n,e))})):_t([r],t,yt(n,e))}function _t(e,t,n){void 0===t&&(t={__order:[]}),void 0===n&&(n="&");var r=W.getInstance(),o=t[n];o||(o={},t[n]=o,t.__order.push(n));for(var i=0,a=e;i<a.length;i++){var l=a[i];if("string"==typeof l){var u=r.argsFromClassName(l);u&&_t(u,t,n)}else if(Array.isArray(l))_t(l,t,n);else for(var s in l)if(l.hasOwnProperty(s)){var c=l[s];if("selectors"===s){var d=l.selectors;for(var f in d)d.hasOwnProperty(f)&&bt(n,t,f,d[f])}else"object"==typeof c?null!==c&&bt(n,t,s,c):void 0!==c&&("margin"===s||"padding"===s?kt(o,s,c):o[s]=c)}}return t}function kt(e,t,n){var r="string"==typeof n?function(e){for(var t=[],n=0,r=0,o=0;o<e.length;o++)switch(e[o]){case"(":r++;break;case")":r&&r--;break;case"\t":case" ":r||(o>n&&t.push(e.substring(n,o)),n=o+1)}return n<e.length&&t.push(e.substring(n)),t}(n):[n];0===r.length&&r.push(n),"!important"===r[r.length-1]&&(r=r.slice(0,-1).map((function(e){return e+" !important"}))),e[t+"Top"]=r[0],e[t+"Right"]=r[1]||r[0],e[t+"Bottom"]=r[2]||r[0],e[t+"Left"]=r[3]||r[1]||r[0]}function Ct(e,t){for(var n=[e.rtl?"rtl":"ltr"],r=!1,o=0,i=t.__order;o<i.length;o++){var a=i[o];n.push(a);var l=t[a];for(var u in l)l.hasOwnProperty(u)&&void 0!==l[u]&&(r=!0,n.push(u,l[u]))}return r?n.join(""):void 0}function wt(e,t){return t<=0?"":1===t?e:e+wt(e,t-1)}function xt(e,t){if(!t)return"";var n,r,o,i=[];for(var a in t)t.hasOwnProperty(a)&&"displayName"!==a&&void 0!==t[a]&&i.push(a,t[a]);for(var l=0;l<i.length;l+=2)o=void 0,"-"!==(o=(n=i)[r=l]).charAt(0)&&(n[r]=it[o]=it[o]||o.replace(/([A-Z])/g,"-$1").toLowerCase()),ct(i,l),ht(e,i,l),lt(i,l);for(l=1;l<i.length;l+=4)i.splice(l,1,":",i[l],";");return i.join("")}function Et(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];var r=_t(t),o=Ct(e,r);if(o){var i=W.getInstance(),a={className:i.classNameFromKey(o),key:o,args:t};if(!a.className){a.className=i.getClassName(vt(r));for(var l=[],u=0,s=r.__order;u<s.length;u++){var c=s[u];l.push(c,xt(e,r[c]))}a.rulesToInsert=l}return a}}function St(e,t){void 0===t&&(t=1);var n=W.getInstance(),r=e.className,o=e.key,i=e.args,a=e.rulesToInsert;if(a){for(var l=0;l<a.length;l+=2){var u=a[l+1];if(u){var s=a[l],c=(s=s.replace(/&/g,wt("."+e.className,t)))+"{"+u+"}"+(0===s.indexOf("@")?"}":"");n.insertRule(c)}}n.cacheClassName(r,o,i,a)}}function It(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return Tt(e,rt())}function Tt(e,t){var n={subComponentStyles:{}};if(!e[0]&&e.length<=1)return{subComponentStyles:{}};var r=D.apply(void 0,e),o=[];for(var i in r)if(r.hasOwnProperty(i)){if("subComponentStyles"===i){n.subComponentStyles=r.subComponentStyles||{};continue}var a=et(r[i]),l=a.classes,u=a.objects;if(null==u?void 0:u.length)(d=Et(t||{},{displayName:i},u))&&(o.push(d),n[i]=l.concat([d.className]).join(" "));else n[i]=l.join(" ")}for(var s=0,c=o;s<c.length;s++){var d;(d=c[s])&&St(d,null==t?void 0:t.specificityMultiplier)}return n}function Pt(e){if(!c&&"undefined"!=typeof document){var t=e;return t&&t.ownerDocument?t.ownerDocument:document}}function Mt(e){var t=null;try{var n=f();t=n?n.sessionStorage.getItem(e):null}catch(e){}return t}function Dt(e,t){var n;try{null===(n=f())||void 0===n||n.sessionStorage.setItem(e,t)}catch(e){}}var Nt;function Rt(e){if(void 0===e&&(e={}),void 0!==e.rtl)return e.rtl;if(void 0===Nt){var t=Mt("isRTL");null!==t&&function(e,t){void 0===t&&(t=!1);var n=Pt();n&&n.documentElement.setAttribute("dir",e?"rtl":"ltr");t&&Dt("isRTL",e?"1":"0");tt(Nt=e)}(Nt="1"===t);var n=Pt();void 0===Nt&&n&&tt(Nt="rtl"===(n.body&&n.body.getAttribute("dir")||n.documentElement.getAttribute("dir")))}return!!Nt}var Ft=0,Bt=W.getInstance();Bt&&Bt.onReset&&Bt.onReset((function(){return Ft++}));var Lt,Ot,At;function zt(e){void 0===e&&(e={});var t=new Map,n=0,r=0,o=Ft;return function(i,a){var l;if(void 0===a&&(a={}),e.useStaticStyles&&"function"==typeof i&&i.__noStyleOverride__)return i(a);r++;var u=t,s=a.theme,c=s&&void 0!==s.rtl?s.rtl:Rt(),d=e.disableCaching;if(o!==Ft&&(o=Ft,t=new Map,n=0),e.disableCaching||(u=Ut(t,i),u=Ut(u,a)),!d&&u.__retval__||(u.__retval__=void 0===i?{}:Tt(["function"==typeof i?i(a):i],{rtl:!!c,specificityMultiplier:e.useStaticStyles?5:void 0}),d||n++),n>(e.cacheSize||50)){var p=f();(null===(l=null==p?void 0:p.FabricConfig)||void 0===l?void 0:l.enableClassNameCacheFullWarning)&&(console.warn("Styles are being recalculated too frequently. Cache miss rate is "+n+"/"+r+"."),console.trace()),t.clear(),n=0,e.disableCaching=!0}return u.__retval__}}function Ht(e,t){return t=function(e){switch(e){case void 0:return"__undefined__";case null:return"__null__";default:return e}}(t),e.has(t)||e.set(t,new Map),e.get(t)}function Ut(e,t){if("function"==typeof t)if(t.__cachedInputs__)for(var n=0,r=t.__cachedInputs__;n<r.length;n++){e=Ht(e,r[n])}else e=Ht(e,t);else if("object"==typeof t)for(var o in t)t.hasOwnProperty(o)&&(e=Ht(e,t[o]));return e}!function(e){e[e.center=0]="center",e[e.contain=1]="contain",e[e.cover=2]="cover",e[e.none=3]="none",e[e.centerCover=4]="centerCover",e[e.centerContain=5]="centerContain"}(Lt||(Lt={})),function(e){e[e.landscape=0]="landscape",e[e.portrait=1]="portrait"}(Ot||(Ot={})),function(e){e[e.notLoaded=0]="notLoaded",e[e.loaded=1]="loaded",e[e.error=2]="error",e[e.errorLoaded=3]="errorLoaded"}(At||(At={}));var Wt=c?s.useEffect:s.useLayoutEffect;function jt(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n=s.useCallback((function(t){n.current=t;for(var r=0,o=e;r<o.length;r++){var i=o[r];"function"==typeof i?i(t):i&&(i.current=t)}}),u([],e));return n}var Kt=zt(),Vt=/\.svg$/i;var qt=s.forwardRef((function(e,t){var n=s.useRef(),r=s.useRef(),o=function(e,t){var n=e.onLoadingStateChange,r=e.onLoad,o=e.onError,i=e.src,a=s.useState(At.notLoaded),l=a[0],u=a[1];Wt((function(){u(At.notLoaded)}),[i]),s.useEffect((function(){l===At.notLoaded&&(!!t.current&&(i&&t.current.naturalWidth>0&&t.current.naturalHeight>0||t.current.complete&&Vt.test(i))&&u(At.loaded))})),s.useEffect((function(){null==n||n(l)}),[l]);var c=s.useCallback((function(e){null==r||r(e),i&&u(At.loaded)}),[i,r]),d=s.useCallback((function(e){null==o||o(e),u(At.error)}),[o]);return[l,c,d]}(e,r),a=o[0],l=o[1],u=o[2],c=Ae(e,Le,["width","height"]),d=e.src,f=e.alt,p=e.width,m=e.height,h=e.shouldFadeIn,v=void 0===h||h,g=e.shouldStartVisible,y=e.className,b=e.imageFit,_=e.role,k=e.maximizeFrame,C=e.styles,w=e.theme,x=e.loading,E=function(e,t,n,r){var o=s.useRef(t),i=s.useRef();(void 0===i||o.current===At.notLoaded&&t===At.loaded)&&(i.current=function(e,t,n,r){var o=e.imageFit,i=e.width,a=e.height;if(void 0!==e.coverStyle)return e.coverStyle;if(t===At.loaded&&(o===Lt.cover||o===Lt.contain||o===Lt.centerContain||o===Lt.centerCover)&&n.current&&r.current){var l=void 0;if(l="number"==typeof i&&"number"==typeof a&&o!==Lt.centerContain&&o!==Lt.centerCover?i/a:r.current.clientWidth/r.current.clientHeight,n.current.naturalWidth/n.current.naturalHeight>l)return Ot.landscape}return Ot.portrait}(e,t,n,r));return o.current=t,i.current}(e,a,r,n),S=Kt(C,{theme:w,className:y,width:p,height:m,maximizeFrame:k,shouldFadeIn:v,shouldStartVisible:g,isLoaded:a===At.loaded||a===At.notLoaded&&e.shouldStartVisible,isLandscape:E===Ot.landscape,isCenter:b===Lt.center,isCenterContain:b===Lt.centerContain,isCenterCover:b===Lt.centerCover,isContain:b===Lt.contain,isCover:b===Lt.cover,isNone:b===Lt.none,isError:a===At.error,isNotImageFit:void 0===b});return s.createElement("div",{className:S.root,style:{width:p,height:m},ref:n},s.createElement("img",i({},c,{onLoad:l,onError:u,key:"fabricImage"+e.src||"",className:S.image,ref:jt(r,t),src:d,alt:f,role:_,loading:x})))}));function $t(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return Qt(e,rt())}function Qt(e,t){var n=et(e instanceof Array?e:[e]),r=n.classes,o=n.objects;return o.length&&r.push(function(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];var r=Et.apply(void 0,u([e],t));return r?(St(r,e.specificityMultiplier),r.className):""}(t||{},o)),r.join(" ")}function Gt(e){var t=W.getInstance(),n=[];for(var r in e)e.hasOwnProperty(r)&&n.push(r,"{",xt(rt(),e[r]),"}");var o=n.join(""),i=t.classNameFromKey(o);if(i)return i;var a=t.getClassName();return t.insertRule("@keyframes "+a+"{"+o+"}",!0),t.cacheClassName(a,o,[],["keyframes",o]),a}qt.displayName="ImageBase";var Yt="cubic-bezier(.1,.9,.2,1)",Zt="cubic-bezier(.1,.25,.75,.9)",Xt=Gt({from:{opacity:0},to:{opacity:1}}),Jt=Gt({from:{opacity:1},to:{opacity:0,visibility:"hidden"}}),en=Nn(-10),tn=Nn(-20),nn=Nn(-40),rn=Nn(-400),on=Nn(10),an=Nn(20),ln=Nn(40),un=Nn(400),sn=Rn(10),cn=Rn(20),dn=Rn(-10),fn=Rn(-20),pn=Fn(10),mn=Fn(20),hn=Fn(40),vn=Fn(400),gn=Fn(-10),yn=Fn(-20),bn=Fn(-40),_n=Fn(-400),kn=Bn(-10),Cn=Bn(-20),wn=Bn(10),xn=Bn(20),En=Gt({from:{transform:"scale3d(.98,.98,1)"},to:{transform:"scale3d(1,1,1)"}}),Sn=Gt({from:{transform:"scale3d(1,1,1)"},to:{transform:"scale3d(.98,.98,1)"}}),In=Gt({from:{transform:"scale3d(1.03,1.03,1)"},to:{transform:"scale3d(1,1,1)"}}),Tn=Gt({from:{transform:"scale3d(1,1,1)"},to:{transform:"scale3d(1.03,1.03,1)"}}),Pn=Gt({from:{transform:"rotateZ(0deg)"},to:{transform:"rotateZ(90deg)"}}),Mn=Gt({from:{transform:"rotateZ(0deg)"},to:{transform:"rotateZ(-90deg)"}});function Dn(e,t,n){return{animationName:e,animationDuration:t,animationTimingFunction:n,animationFillMode:"both"}}function Nn(e){return Gt({from:{transform:"translate3d("+e+"px,0,0)",pointerEvents:"none"},to:{transform:"translate3d(0,0,0)",pointerEvents:"auto"}})}function Rn(e){return Gt({from:{transform:"translate3d(0,"+e+"px,0)",pointerEvents:"none"},to:{transform:"translate3d(0,0,0)",pointerEvents:"auto"}})}function Fn(e){return Gt({from:{transform:"translate3d(0,0,0)"},to:{transform:"translate3d("+e+"px,0,0)"}})}function Bn(e){return Gt({from:{transform:"translate3d(0,0,0)"},to:{transform:"translate3d(0,"+e+"px,0)"}})}var Ln,On,An,zn,Hn,Un=function(e){var t={},n=function(n){var r;e.hasOwnProperty(n)&&Object.defineProperty(t,n,{get:function(){return void 0===r&&(r=$t(e[n]).toString()),r},enumerable:!0,configurable:!0})};for(var r in e)n(r);return t}({slideRightIn10:Dn(Xt+","+en,"0.367s",Yt),slideRightIn20:Dn(Xt+","+tn,"0.367s",Yt),slideRightIn40:Dn(Xt+","+nn,"0.367s",Yt),slideRightIn400:Dn(Xt+","+rn,"0.367s",Yt),slideLeftIn10:Dn(Xt+","+on,"0.367s",Yt),slideLeftIn20:Dn(Xt+","+an,"0.367s",Yt),slideLeftIn40:Dn(Xt+","+ln,"0.367s",Yt),slideLeftIn400:Dn(Xt+","+un,"0.367s",Yt),slideUpIn10:Dn(Xt+","+sn,"0.367s",Yt),slideUpIn20:Dn(Xt+","+cn,"0.367s",Yt),slideDownIn10:Dn(Xt+","+dn,"0.367s",Yt),slideDownIn20:Dn(Xt+","+fn,"0.367s",Yt),slideRightOut10:Dn(Jt+","+pn,"0.367s",Yt),slideRightOut20:Dn(Jt+","+mn,"0.367s",Yt),slideRightOut40:Dn(Jt+","+hn,"0.367s",Yt),slideRightOut400:Dn(Jt+","+vn,"0.367s",Yt),slideLeftOut10:Dn(Jt+","+gn,"0.367s",Yt),slideLeftOut20:Dn(Jt+","+yn,"0.367s",Yt),slideLeftOut40:Dn(Jt+","+bn,"0.367s",Yt),slideLeftOut400:Dn(Jt+","+_n,"0.367s",Yt),slideUpOut10:Dn(Jt+","+kn,"0.367s",Yt),slideUpOut20:Dn(Jt+","+Cn,"0.367s",Yt),slideDownOut10:Dn(Jt+","+wn,"0.367s",Yt),slideDownOut20:Dn(Jt+","+xn,"0.367s",Yt),scaleUpIn100:Dn(Xt+","+En,"0.367s",Yt),scaleDownIn100:Dn(Xt+","+In,"0.367s",Yt),scaleUpOut103:Dn(Jt+","+Tn,"0.167s",Zt),scaleDownOut98:Dn(Jt+","+Sn,"0.167s",Zt),fadeIn100:Dn(Xt,"0.167s",Zt),fadeIn200:Dn(Xt,"0.267s",Zt),fadeIn400:Dn(Xt,"0.367s",Zt),fadeIn500:Dn(Xt,"0.467s",Zt),fadeOut100:Dn(Jt,"0.167s",Zt),fadeOut200:Dn(Jt,"0.267s",Zt),fadeOut400:Dn(Jt,"0.367s",Zt),fadeOut500:Dn(Jt,"0.467s",Zt),rotate90deg:Dn(Pn,"0.1s",Zt),rotateN90deg:Dn(Mn,"0.1s",Zt)});!function(e){e.Arabic="Segoe UI Web (Arabic)",e.Cyrillic="Segoe UI Web (Cyrillic)",e.EastEuropean="Segoe UI Web (East European)",e.Greek="Segoe UI Web (Greek)",e.Hebrew="Segoe UI Web (Hebrew)",e.Thai="Leelawadee UI Web",e.Vietnamese="Segoe UI Web (Vietnamese)",e.WestEuropean="Segoe UI Web (West European)",e.Selawik="Selawik Web",e.Armenian="Segoe UI Web (Armenian)",e.Georgian="Segoe UI Web (Georgian)"}(Ln||(Ln={})),function(e){e.Arabic="'"+Ln.Arabic+"'",e.ChineseSimplified="'Microsoft Yahei UI', Verdana, Simsun",e.ChineseTraditional="'Microsoft Jhenghei UI', Pmingliu",e.Cyrillic="'"+Ln.Cyrillic+"'",e.EastEuropean="'"+Ln.EastEuropean+"'",e.Greek="'"+Ln.Greek+"'",e.Hebrew="'"+Ln.Hebrew+"'",e.Hindi="'Nirmala UI'",e.Japanese="'Yu Gothic UI', 'Meiryo UI', Meiryo, 'MS Pgothic', Osaka",e.Korean="'Malgun Gothic', Gulim",e.Selawik="'"+Ln.Selawik+"'",e.Thai="'Leelawadee UI Web', 'Kmer UI'",e.Vietnamese="'"+Ln.Vietnamese+"'",e.WestEuropean="'"+Ln.WestEuropean+"'",e.Armenian="'"+Ln.Armenian+"'",e.Georgian="'"+Ln.Georgian+"'"}(On||(On={})),function(e){e.size10="10px",e.size12="12px",e.size14="14px",e.size16="16px",e.size18="18px",e.size20="20px",e.size24="24px",e.size28="28px",e.size32="32px",e.size42="42px",e.size68="68px",e.mini="10px",e.xSmall="10px",e.small="12px",e.smallPlus="12px",e.medium="14px",e.mediumPlus="16px",e.icon="16px",e.large="18px",e.xLarge="20px",e.xLargePlus="24px",e.xxLarge="28px",e.xxLargePlus="32px",e.superLarge="42px",e.mega="68px"}(An||(An={})),function(e){e.light=100,e.semilight=300,e.regular=400,e.semibold=600,e.bold=700}(zn||(zn={})),function(e){e.xSmall="10px",e.small="12px",e.medium="16px",e.large="20px"}(Hn||(Hn={}));var Wn,jn="@media screen and (-ms-high-contrast: active), (forced-colors: active)";function Kn(e,t){return"@media only screen"+("number"==typeof e?" and (min-width: "+e+"px)":"")+("number"==typeof t?" and (max-width: "+t+"px)":"")}function Vn(e,t,n,r,o,i,a){return qn(e,"number"!=typeof t&&t?t:{inset:t,position:n,highContrastStyle:r,borderColor:o,outlineColor:i,isFocusedOnly:a})}function qn(e,t){var n,r;void 0===t&&(t={});var o=t.inset,i=void 0===o?0:o,a=t.width,l=void 0===a?1:a,u=t.position,s=void 0===u?"relative":u,c=t.highContrastStyle,d=t.borderColor,f=void 0===d?e.palette.white:d,p=t.outlineColor,m=void 0===p?e.palette.neutralSecondary:p,h=t.isFocusedOnly;return{outline:"transparent",position:s,selectors:(n={"::-moz-focus-inner":{border:"0"}},n["."+ve+" &"+(void 0===h||h?":focus":"")+":after"]={content:'""',position:"absolute",left:i+1,top:i+1,bottom:i+1,right:i+1,border:l+"px solid "+f,outline:l+"px solid "+m,zIndex:Wn.FocusStyle,selectors:(r={},r[jn]=c,r)},n)}}!function(e){e.Nav=1,e.ScrollablePane=1,e.FocusStyle=1,e.Coachmark=1e3,e.Layer=1e6,e.KeytipLayer=1000001}(Wn||(Wn={}));var $n={position:"absolute",width:1,height:1,margin:-1,padding:0,border:0,overflow:"hidden",whiteSpace:"nowrap"},Qn=G((function(e,t){var n=W.getInstance();return t?Object.keys(e).reduce((function(t,r){return t[r]=n.getClassName(e[r]),t}),{}):e}));function Gn(e,t,n){return Qn(e,void 0!==n?n:t.disableGlobalClassNames)}var Yn,Zn=n(20),Xn={themeDarker:"#004578",themeDark:"#005a9e",themeDarkAlt:"#106ebe",themePrimary:"#0078d4",themeSecondary:"#2b88d8",themeTertiary:"#71afe5",themeLight:"#c7e0f4",themeLighter:"#deecf9",themeLighterAlt:"#eff6fc",black:"#000000",blackTranslucent40:"rgba(0,0,0,.4)",neutralDark:"#201f1e",neutralPrimary:"#323130",neutralPrimaryAlt:"#3b3a39",neutralSecondary:"#605e5c",neutralSecondaryAlt:"#8a8886",neutralTertiary:"#a19f9d",neutralTertiaryAlt:"#c8c6c4",neutralQuaternary:"#d2d0ce",neutralQuaternaryAlt:"#e1dfdd",neutralLight:"#edebe9",neutralLighter:"#f3f2f1",neutralLighterAlt:"#faf9f8",accent:"#0078d4",white:"#ffffff",whiteTranslucent40:"rgba(255,255,255,.4)",yellowDark:"#d29200",yellow:"#ffb900",yellowLight:"#fff100",orange:"#d83b01",orangeLight:"#ea4300",orangeLighter:"#ff8c00",redDark:"#a4262c",red:"#e81123",magentaDark:"#5c005c",magenta:"#b4009e",magentaLight:"#e3008c",purpleDark:"#32145a",purple:"#5c2d91",purpleLight:"#b4a0ff",blueDark:"#002050",blueMid:"#00188f",blue:"#0078d4",blueLight:"#00bcf2",tealDark:"#004b50",teal:"#008272",tealLight:"#00b294",greenDark:"#004b1c",green:"#107c10",greenLight:"#bad80a"};!function(e){e.depth0="0 0 0 0 transparent",e.depth4="0 1.6px 3.6px 0 rgba(0, 0, 0, 0.132), 0 0.3px 0.9px 0 rgba(0, 0, 0, 0.108)",e.depth8="0 3.2px 7.2px 0 rgba(0, 0, 0, 0.132), 0 0.6px 1.8px 0 rgba(0, 0, 0, 0.108)",e.depth16="0 6.4px 14.4px 0 rgba(0, 0, 0, 0.132), 0 1.2px 3.6px 0 rgba(0, 0, 0, 0.108)",e.depth64="0 25.6px 57.6px 0 rgba(0, 0, 0, 0.22), 0 4.8px 14.4px 0 rgba(0, 0, 0, 0.18)"}(Yn||(Yn={}));var Jn={elevation4:Yn.depth4,elevation8:Yn.depth8,elevation16:Yn.depth16,elevation64:Yn.depth64,roundedCorner2:"2px",roundedCorner4:"4px",roundedCorner6:"6px"};function er(e){var t=W.getInstance(),n=xt(rt(),e);if(!t.classNameFromKey(n)){var r=t.getClassName();t.insertRule("@font-face{"+n+"}",!0),t.cacheClassName(r,n,[],["font-face",n])}}var tr,nr="'Segoe UI', '"+Ln.WestEuropean+"'",rr={ar:On.Arabic,bg:On.Cyrillic,cs:On.EastEuropean,el:On.Greek,et:On.EastEuropean,he:On.Hebrew,hi:On.Hindi,hr:On.EastEuropean,hu:On.EastEuropean,ja:On.Japanese,kk:On.EastEuropean,ko:On.Korean,lt:On.EastEuropean,lv:On.EastEuropean,pl:On.EastEuropean,ru:On.Cyrillic,sk:On.EastEuropean,"sr-latn":On.EastEuropean,th:On.Thai,tr:On.EastEuropean,uk:On.Cyrillic,vi:On.Vietnamese,"zh-hans":On.ChineseSimplified,"zh-hant":On.ChineseTraditional,hy:On.Armenian,ka:On.Georgian};function or(e,t,n){return{fontFamily:n,MozOsxFontSmoothing:"grayscale",WebkitFontSmoothing:"antialiased",fontSize:e,fontWeight:t}}var ir,ar,lr,ur,sr,cr=(ir=function(e){if(void 0===e&&(e="sessionStorage"),void 0===tr){var t=Pt(),n="localStorage"===e?function(e){var t=null;try{var n=f();t=n?n.localStorage.getItem(e):null}catch(e){}return t}("language"):"sessionStorage"===e?Mt("language"):void 0;n&&(tr=n),void 0===tr&&t&&(tr=t.documentElement.getAttribute("lang")),void 0===tr&&(tr="en")}return tr}(),ar=function(e){for(var t in rr)if(rr.hasOwnProperty(t)&&e&&0===t.indexOf(e))return rr[t];return nr}(ir)+", 'Segoe UI', -apple-system, BlinkMacSystemFont, 'Roboto', 'Helvetica Neue', sans-serif",{tiny:or(An.mini,zn.regular,ar),xSmall:or(An.xSmall,zn.regular,ar),small:or(An.small,zn.regular,ar),smallPlus:or(An.smallPlus,zn.regular,ar),medium:or(An.medium,zn.regular,ar),mediumPlus:or(An.mediumPlus,zn.regular,ar),large:or(An.large,zn.regular,ar),xLarge:or(An.xLarge,zn.semibold,ar),xLargePlus:or(An.xLargePlus,zn.semibold,ar),xxLarge:or(An.xxLarge,zn.semibold,ar),xxLargePlus:or(An.xxLargePlus,zn.semibold,ar),superLarge:or(An.superLarge,zn.semibold,ar),mega:or(An.mega,zn.semibold,ar)});function dr(e,t,n,r){er({fontFamily:e="'"+e+"'",src:(void 0!==r?"local('"+r+"'),":"")+"url('"+t+".woff2') format('woff2'),url('"+t+".woff') format('woff')",fontWeight:n,fontStyle:"normal",fontDisplay:"swap"})}function fr(e,t,n,r,o){void 0===r&&(r="segoeui");var i=e+"/"+n+"/"+r;dr(t,i+"-light",zn.light,o&&o+" Light"),dr(t,i+"-semilight",zn.semilight,o&&o+" SemiLight"),dr(t,i+"-regular",zn.regular,o),dr(t,i+"-semibold",zn.semibold,o&&o+" SemiBold"),dr(t,i+"-bold",zn.bold,o&&o+" Bold")}function pr(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];for(var r=0,o=t;r<o.length;r++){var i=o[r];mr(e||{},i)}return e}function mr(e,t,n){for(var r in void 0===n&&(n=[]),n.push(t),t)if(t.hasOwnProperty(r)&&"__proto__"!==r&&"constructor"!==r&&"prototype"!==r){var o=t[r];if("object"!=typeof o||null===o||Array.isArray(o))e[r]=o;else{var i=n.indexOf(o)>-1;e[r]=i?o:mr(e[r]||{},o,n)}}return n.pop(),e}function hr(e,t,n,r,o){return void 0===o&&(o=!1),function(e,t){var n="";!0===t&&(n=" /* @deprecated */");return e.listTextColor=e.listText+n,e.menuItemBackgroundChecked+=n,e.warningHighlight+=n,e.warningText=e.messageText+n,e.successText+=n,e}(vr(e,t,i({primaryButtonBorder:"transparent",errorText:r?"#F1707B":"#a4262c",messageText:r?"#F3F2F1":"#323130",messageLink:r?"#6CB8F6":"#005A9E",messageLinkHovered:r?"#82C7FF":"#004578",infoIcon:r?"#C8C6C4":"#605e5c",errorIcon:r?"#F1707B":"#A80000",blockingIcon:r?"#442726":"#FDE7E9",warningIcon:r?"#C8C6C4":"#797775",severeWarningIcon:r?"#FCE100":"#D83B01",successIcon:r?"#92C353":"#107C10",infoBackground:r?"#323130":"#f3f2f1",errorBackground:r?"#442726":"#FDE7E9",blockingBackground:r?"#442726":"#FDE7E9",warningBackground:r?"#433519":"#FFF4CE",severeWarningBackground:r?"#4F2A0F":"#FED9CC",successBackground:r?"#393D1B":"#DFF6DD",warningHighlight:r?"#fff100":"#ffb900",successText:r?"#92c353":"#107C10"},n),r),o)}function vr(e,t,n,r,o){void 0===o&&(o=!1);var a={},l=e||{},u=l.white,s=l.black,c=l.themePrimary,d=l.themeDark,f=l.themeDarker,p=l.themeDarkAlt,m=l.themeLighter,h=l.neutralLight,v=l.neutralLighter,g=l.neutralDark,y=l.neutralQuaternary,b=l.neutralQuaternaryAlt,_=l.neutralPrimary,k=l.neutralSecondary,C=l.neutralSecondaryAlt,w=l.neutralTertiary,x=l.neutralTertiaryAlt,E=l.neutralLighterAlt,S=l.accent;return u&&(a.bodyBackground=u,a.bodyFrameBackground=u,a.accentButtonText=u,a.buttonBackground=u,a.primaryButtonText=u,a.primaryButtonTextHovered=u,a.primaryButtonTextPressed=u,a.inputBackground=u,a.inputForegroundChecked=u,a.listBackground=u,a.menuBackground=u,a.cardStandoutBackground=u),s&&(a.bodyTextChecked=s,a.buttonTextCheckedHovered=s),c&&(a.link=c,a.primaryButtonBackground=c,a.inputBackgroundChecked=c,a.inputIcon=c,a.inputFocusBorderAlt=c,a.menuIcon=c,a.menuHeader=c,a.accentButtonBackground=c),d&&(a.primaryButtonBackgroundPressed=d,a.inputBackgroundCheckedHovered=d,a.inputIconHovered=d),f&&(a.linkHovered=f),p&&(a.primaryButtonBackgroundHovered=p),m&&(a.inputPlaceholderBackgroundChecked=m),h&&(a.bodyBackgroundChecked=h,a.bodyFrameDivider=h,a.bodyDivider=h,a.variantBorder=h,a.buttonBackgroundCheckedHovered=h,a.buttonBackgroundPressed=h,a.listItemBackgroundChecked=h,a.listHeaderBackgroundPressed=h,a.menuItemBackgroundPressed=h,a.menuItemBackgroundChecked=h),v&&(a.bodyBackgroundHovered=v,a.buttonBackgroundHovered=v,a.buttonBackgroundDisabled=v,a.buttonBorderDisabled=v,a.primaryButtonBackgroundDisabled=v,a.disabledBackground=v,a.listItemBackgroundHovered=v,a.listHeaderBackgroundHovered=v,a.menuItemBackgroundHovered=v),y&&(a.primaryButtonTextDisabled=y,a.disabledSubtext=y),b&&(a.listItemBackgroundCheckedHovered=b),w&&(a.disabledBodyText=w,a.variantBorderHovered=(null==n?void 0:n.variantBorderHovered)||w,a.buttonTextDisabled=w,a.inputIconDisabled=w,a.disabledText=w),_&&(a.bodyText=_,a.actionLink=_,a.buttonText=_,a.inputBorderHovered=_,a.inputText=_,a.listText=_,a.menuItemText=_),E&&(a.bodyStandoutBackground=E,a.defaultStateBackground=E),g&&(a.actionLinkHovered=g,a.buttonTextHovered=g,a.buttonTextChecked=g,a.buttonTextPressed=g,a.inputTextHovered=g,a.menuItemTextHovered=g),k&&(a.bodySubtext=k,a.focusBorder=k,a.inputBorder=k,a.smallInputBorder=k,a.inputPlaceholderText=k),C&&(a.buttonBorder=C),x&&(a.disabledBodySubtext=x,a.disabledBorder=x,a.buttonBackgroundChecked=x,a.menuDivider=x),S&&(a.accentButtonBackground=S),(null==t?void 0:t.elevation4)&&(a.cardShadow=t.elevation4),!r&&(null==t?void 0:t.elevation8)?a.cardShadowHovered=t.elevation8:a.variantBorderHovered&&(a.cardShadowHovered="0 0 1px "+a.variantBorderHovered),a=i(i({},a),n)}!function(e){if(e){var t=e+"/fonts";fr(t,Ln.Thai,"leelawadeeui-thai","leelawadeeui"),fr(t,Ln.Arabic,"segoeui-arabic"),fr(t,Ln.Cyrillic,"segoeui-cyrillic"),fr(t,Ln.EastEuropean,"segoeui-easteuropean"),fr(t,Ln.Greek,"segoeui-greek"),fr(t,Ln.Hebrew,"segoeui-hebrew"),fr(t,Ln.Vietnamese,"segoeui-vietnamese"),fr(t,Ln.WestEuropean,"segoeui-westeuropean","segoeui","Segoe UI"),fr(t,On.Selawik,"selawik","selawik"),fr(t,Ln.Armenian,"segoeui-armenian"),fr(t,Ln.Georgian,"segoeui-georgian"),dr("Leelawadee UI Web",t+"/leelawadeeui-thai/leelawadeeui-semilight",zn.light),dr("Leelawadee UI Web",t+"/leelawadeeui-thai/leelawadeeui-bold",zn.semibold)}}((sr=null===(lr=f())||void 0===lr?void 0:lr.FabricConfig,null!==(ur=null==sr?void 0:sr.fontBaseUrl)&&void 0!==ur?ur:"https://static2.sharepointonline.com/files/fabric/assets"));var gr={s2:"4px",s1:"8px",m:"16px",l1:"20px",l2:"32px"};function yr(e,t){void 0===e&&(e={}),void 0===t&&(t=!1);var n=!!e.isInverted;return function(e,t){var n,r,o;void 0===t&&(t={});var i=pr({},e,t,{semanticColors:vr(t.palette,t.effects,t.semanticColors,void 0===t.isInverted?e.isInverted:t.isInverted)});if((null===(n=t.palette)||void 0===n?void 0:n.themePrimary)&&!(null===(r=t.palette)||void 0===r?void 0:r.accent)&&(i.palette.accent=t.palette.themePrimary),t.defaultFontStyle)for(var a=0,l=Object.keys(i.fonts);a<l.length;a++){var u=l[a];i.fonts[u]=pr(i.fonts[u],t.defaultFontStyle,null===(o=null==t?void 0:t.fonts)||void 0===o?void 0:o[u])}return i}({palette:Xn,effects:Jn,fonts:cr,spacing:gr,isInverted:n,disableGlobalClassNames:!1,semanticColors:hr(Xn,Jn,void 0,n,t),rtl:void 0},e)}var br=yr({}),_r=[];function kr(){var e,t,n,r=f();(null===(t=null==r?void 0:r.FabricConfig)||void 0===t?void 0:t.legacyTheme)?function(e,t){var n;void 0===t&&(t=!1);br=yr(e,t),Object(Zn.a)(i(i(i(i({},br.palette),br.semanticColors),br.effects),function(e){for(var t={},n=0,r=Object.keys(e.fonts);n<r.length;n++)for(var o=r[n],i=e.fonts[o],a=0,l=Object.keys(i);a<l.length;a++){var u=l[a],s=o+u.charAt(0).toUpperCase()+u.slice(1),c=i[u];"fontSize"===u&&"number"==typeof c&&(c+="px"),t[s]=c}return t}(br))),T.applySettings(((n={}).theme=br,n)),_r.forEach((function(e){try{e(br)}catch(e){}}))}(r.FabricConfig.legacyTheme):T.getSettings(["theme"]).theme||((null===(n=null==r?void 0:r.FabricConfig)||void 0===n?void 0:n.theme)&&(br=yr(r.FabricConfig.theme)),T.applySettings(((e={}).theme=br,e)))}kr();var Cr=C.getValue("icons",{__options:{disableWarnings:!1,warnOnMissingIcons:!0},__remapped:{}}),wr=W.getInstance();wr&&wr.onReset&&wr.onReset((function(){for(var e in Cr)Cr.hasOwnProperty(e)&&Cr[e].subset&&(Cr[e].subset.className=void 0)}));var xr=function(e){return e.toLowerCase()};var Er=n(21);Object(Er.a)("@fluentui/style-utilities","8.6.6"),kr();var Sr={root:"ms-Image",rootMaximizeFrame:"ms-Image--maximizeFrame",image:"ms-Image-image",imageCenter:"ms-Image-image--center",imageContain:"ms-Image-image--contain",imageCover:"ms-Image-image--cover",imageCenterContain:"ms-Image-image--centerContain",imageCenterCover:"ms-Image-image--centerCover",imageNone:"ms-Image-image--none",imageLandscape:"ms-Image-image--landscape",imagePortrait:"ms-Image-image--portrait"},Ir=Je(qt,(function(e){var t=e.className,n=e.width,r=e.height,o=e.maximizeFrame,i=e.isLoaded,a=e.shouldFadeIn,l=e.shouldStartVisible,u=e.isLandscape,s=e.isCenter,c=e.isContain,d=e.isCover,p=e.isCenterContain,m=e.isCenterCover,h=e.isNone,v=e.isError,g=e.isNotImageFit,y=e.theme,b=Gn(Sr,y),_={position:"absolute",left:"50% /* @noflip */",top:"50%",transform:"translate(-50%,-50%)"},k=f(),C=void 0!==k&&void 0===k.navigator.msMaxTouchPoints,w=c&&u||d&&!u?{width:"100%",height:"auto"}:{width:"auto",height:"100%"};return{root:[b.root,y.fonts.medium,{overflow:"hidden"},o&&[b.rootMaximizeFrame,{height:"100%",width:"100%"}],i&&a&&!l&&Un.fadeIn400,(s||c||d||p||m)&&{position:"relative"},t],image:[b.image,{display:"block",opacity:0},i&&["is-loaded",{opacity:1}],s&&[b.imageCenter,_],c&&[b.imageContain,C&&{width:"100%",height:"100%",objectFit:"contain"},!C&&w,!C&&_],d&&[b.imageCover,C&&{width:"100%",height:"100%",objectFit:"cover"},!C&&w,!C&&_],p&&[b.imageCenterContain,u&&{maxWidth:"100%"},!u&&{maxHeight:"100%"},_],m&&[b.imageCenterCover,u&&{maxHeight:"100%"},!u&&{maxWidth:"100%"},_],h&&[b.imageNone,{width:"auto",height:"auto"}],g&&[!!n&&!r&&{height:"auto",width:"100%"},!n&&!!r&&{height:"100%",width:"auto"},!!n&&!!r&&{height:"100%",width:"100%"}],u&&b.imageLandscape,!u&&b.imagePortrait,!i&&"is-notLoaded",a&&"is-fadeIn",v&&"is-error"]}}),void 0,{scope:"Image"},!0);Ir.displayName="Image";var Tr=It({root:{display:"inline-block"},placeholder:["ms-Icon-placeHolder",{width:"1em"}],image:["ms-Icon-imageContainer",{overflow:"hidden"}]}),Pr=G((function(e){var t=function(e){var t=void 0,n=Cr.__options;if(e=e?xr(e):"",e=Cr.__remapped[e]||e)if(t=Cr[e]){var r=t.subset;r&&r.fontFace&&(r.isRegistered||(er(r.fontFace),r.isRegistered=!0),r.className||(r.className=$t(r.style,{fontFamily:r.fontFace.fontFamily,fontWeight:r.fontFace.fontWeight||"normal",fontStyle:r.fontFace.fontStyle||"normal"})))}else!n.disableWarnings&&n.warnOnMissingIcons&&y('The icon "'+e+'" was used but not registered. See https://github.com/microsoft/fluentui/wiki/Using-icons for more information.');return t}(e)||{subset:{},code:void 0},n=t.code,r=t.subset;return n?{children:n,iconClassName:r.className,fontFamily:r.fontFace&&r.fontFace.fontFamily,mergeImageProps:r.mergeImageProps}:null}),void 0,!0),Mr=function(e){var t=e.iconName,n=e.className,r=e.style,o=void 0===r?{}:r,a=Pr(t)||{},l=a.iconClassName,u=a.children,c=a.fontFamily,d=a.mergeImageProps,f=Ae(e,Ne),p=e["aria-label"]||e.title,m=e["aria-label"]||e["aria-labelledby"]||e.title?{role:d?void 0:"img"}:{"aria-hidden":!0},h=u;return d&&"object"==typeof u&&"object"==typeof u.props&&p&&(h=s.cloneElement(u,{alt:p})),s.createElement("i",i({"data-icon-name":t},m,f,d?{title:void 0,"aria-label":void 0}:{},{className:J("ms-Icon",Tr.root,l,!t&&Tr.placeholder,n),style:i({fontFamily:c},o)}),h)},Dr=(G((function(e,t,n){return Mr({iconName:e,className:t,"aria-label":n})})),zt({cacheSize:100})),Nr=Je(function(e){function t(t){var n=e.call(this,t)||this;return n._onImageLoadingStateChange=function(e){n.props.imageProps&&n.props.imageProps.onLoadingStateChange&&n.props.imageProps.onLoadingStateChange(e),e===At.error&&n.setState({imageLoadError:!0})},n.state={imageLoadError:!1},n}return o(t,e),t.prototype.render=function(){var e=this.props,t=e.children,n=e.className,r=e.styles,o=e.iconName,a=e.imageErrorAs,l=e.theme,u="string"==typeof o&&0===o.length,c=!!this.props.imageProps||this.props.iconType===Ye.image||this.props.iconType===Ye.Image,d=Pr(o)||{},f=d.iconClassName,p=d.children,m=d.mergeImageProps,h=Dr(r,{theme:l,className:n,iconClassName:f,isImage:c,isPlaceholder:u}),v=c?"span":"i",g=Ae(this.props,Ne,["aria-label"]),y=this.state.imageLoadError,b=i(i({},this.props.imageProps),{onLoadingStateChange:this._onImageLoadingStateChange}),_=y&&a||Ir,k=this.props["aria-label"]||this.props.ariaLabel,C=b.alt||k||this.props.title,w=!!(C||this.props["aria-labelledby"]||b["aria-label"]||b["aria-labelledby"])?{role:c||m?void 0:"img","aria-label":c||m?void 0:C}:{"aria-hidden":!0},x=p;return m&&p&&"object"==typeof p&&C&&(x=s.cloneElement(p,{alt:C})),s.createElement(v,i({"data-icon-name":o},w,g,m?{title:void 0,"aria-label":void 0}:{},{className:h.root}),c?s.createElement(_,i({},b)):t||x)},t}(s.Component),(function(e){var t=e.className,n=e.iconClassName,r=e.isPlaceholder,o=e.isImage,i=e.styles;return{root:[r&&Tr.placeholder,Tr.root,o&&Tr.image,n,t,i&&i.root,i&&i.imageContainer]}}),void 0,{scope:"Icon"},!0);Nr.displayName="Icon";var Rr=function(e){var t=e.className,n=e.imageProps,r=Ae(e,Ne,["aria-label","aria-labelledby","title","aria-describedby"]),o=n.alt||e["aria-label"],a=o||e["aria-labelledby"]||e.title||n["aria-label"]||n["aria-labelledby"]||n.title,l={"aria-labelledby":e["aria-labelledby"],"aria-describedby":e["aria-describedby"],title:e.title},u=a?{}:{"aria-hidden":!0};return s.createElement("div",i({},u,r,{className:J("ms-Icon",Tr.root,Tr.image,t)}),s.createElement(Ir,i({},l,n,{alt:a?o:""})))},Fr=0,Br=1,Lr=2,Or=3,Ar=4,zr=5,Hr=6,Ur=7,Wr=8,jr=9,Kr=10,Vr=11,qr=12,$r=13;var Qr,Gr=Y((function(e){return Y((function(t){var n=Y((function(e){return function(n){return t(n,e)}}));return function(r,o){return e(r,o?n(o):t)}}))}));!function(e){e[e.Normal=0]="Normal",e[e.Divider=1]="Divider",e[e.Header=2]="Header",e[e.Section=3]="Section"}(Qr||(Qr={}));var Yr,Zr=1,Xr=2;function Jr(e,t,n){void 0===n&&(n=!0);var r=!1;if(e&&t)if(n)if(e===t)r=!0;else for(r=!1;t;){var o=ee(t);if(o===e){r=!0;break}t=o}else e.contains&&(r=e.contains(t));return r}!function(e){e[e.vertical=0]="vertical",e[e.horizontal=1]="horizontal",e[e.bidirectional=2]="bidirectional",e[e.domOrder=3]="domOrder"}(Yr||(Yr={}));function eo(e){var t=no(e,e,!0,!1,!1,!0);return!!t&&(function(e){if(e){if(so)return void(so=e);so=e;var t=f(e);t&&t.requestAnimationFrame((function(){so&&so.focus(),so=void 0}))}}(t),!0)}function to(e,t,n,r,o,i,a,l){if(!t||!a&&t===e)return null;var u=ro(t);if(o&&u&&(i||!io(t)&&!ao(t))){var s=to(e,t.lastElementChild,!0,!0,!0,i,a,l);if(s){if(l&&oo(s,!0)||!l)return s;var c=to(e,s.previousElementSibling,!0,!0,!0,i,a,l);if(c)return c;for(var d=s.parentElement;d&&d!==t;){var f=to(e,d.previousElementSibling,!0,!0,!0,i,a,l);if(f)return f;d=d.parentElement}}}if(n&&u&&oo(t,l))return t;var p=to(e,t.previousElementSibling,!0,!0,!0,i,a,l);return p||(r?null:to(e,t.parentElement,!0,!1,!1,i,a,l))}function no(e,t,n,r,o,i,a,l){if(!t||t===e&&o&&!a)return null;var u=ro(t);if(n&&u&&oo(t,l))return t;if(!o&&u&&(i||!io(t)&&!ao(t))){var s=no(e,t.firstElementChild,!0,!0,!1,i,a,l);if(s)return s}if(t===e)return null;var c=no(e,t.nextElementSibling,!0,!0,!1,i,a,l);return c||(r?null:no(e,t.parentElement,!1,!1,!0,i,a,l))}function ro(e){if(!e||!e.getAttribute)return!1;var t=e.getAttribute("data-is-visible");return null!=t?"true"===t:0!==e.offsetHeight||null!==e.offsetParent||!0===e.isVisible}function oo(e,t){if(!e||e.disabled)return!1;var n=0,r=null;e&&e.getAttribute&&(r=e.getAttribute("tabIndex"))&&(n=parseInt(r,10));var o=e.getAttribute?e.getAttribute("data-is-focusable"):null,i=null!==r&&n>=0,a=!!e&&"false"!==o&&("A"===e.tagName||"BUTTON"===e.tagName||"INPUT"===e.tagName||"TEXTAREA"===e.tagName||"SELECT"===e.tagName||"true"===o||i);return t?-1!==n&&a:a}function io(e){return!!(e&&e.getAttribute&&e.getAttribute("data-focuszone-id"))}function ao(e){return!(!e||!e.getAttribute||"true"!==e.getAttribute("data-is-sub-focuszone"))}function lo(e,t){return"true"!==function(e,t){var n=te(e,(function(e){return e.hasAttribute(t)}));return n&&n.getAttribute(t)}(e,t)}var uo,so=void 0;$t({overflow:"hidden !important"});function co(){if(void 0===uo){var e=document.createElement("div");e.style.setProperty("width","100px"),e.style.setProperty("height","100px"),e.style.setProperty("overflow","scroll"),e.style.setProperty("position","absolute"),e.style.setProperty("top","-9999px"),document.body.appendChild(e),uo=e.offsetWidth-e.clientWidth,document.body.removeChild(e)}return uo}function fo(e){for(var t=e,n=Pt(e);t&&t!==n.body;){if("true"===t.getAttribute("data-is-scrollable"))return t;t=t.parentElement}for(t=e;t&&t!==n.body;){if("false"!==t.getAttribute("data-is-scrollable")){var r=getComputedStyle(t),o=r?r.getPropertyValue("overflow-y"):"";if(o&&("scroll"===o||"auto"===o))return t}t=t.parentElement}return t&&t!==n.body||(t=f(e)),t}var po;function mo(e,t){var n;"function"==typeof MouseEvent?n=new MouseEvent("click",{ctrlKey:null==t?void 0:t.ctrlKey,metaKey:null==t?void 0:t.metaKey,shiftKey:null==t?void 0:t.shiftKey,altKey:null==t?void 0:t.altKey,bubbles:null==t?void 0:t.bubbles,cancelable:null==t?void 0:t.cancelable}):(n=document.createEvent("MouseEvents")).initMouseEvent("click",!!t&&t.bubbles,!!t&&t.cancelable,window,0,0,0,0,0,!!t&&t.ctrlKey,!!t&&t.altKey,!!t&&t.shiftKey,!!t&&t.metaKey,0,null),e.dispatchEvent(n)}var ho,vo={},go=new Set,yo=["text","number","password","email","tel","url","search"],bo=function(e){function t(n){var r,o,i,a,l=e.call(this,n)||this;l._root=s.createRef(),l._mergedRef=L(),l._onFocus=function(e){if(!l._portalContainsElement(e.target)){var t,n=l.props,r=n.onActiveElementChanged,o=n.doNotAllowFocusEventToPropagate,i=n.stopFocusPropagation,a=n.onFocusNotification,u=n.onFocus,s=n.shouldFocusInnerElementWhenReceivedFocus,c=n.defaultTabbableElement,d=l._isImmediateDescendantOfZone(e.target);if(d)t=e.target;else for(var f=e.target;f&&f!==l._root.current;){if(oo(f)&&l._isImmediateDescendantOfZone(f)){t=f;break}f=ee(f,!1)}if(s&&e.target===l._root.current){var p=c&&"function"==typeof c&&l._root.current&&c(l._root.current);p&&oo(p)?(t=p,p.focus()):(l.focus(!0),l._activeElement&&(t=null))}var m=!l._activeElement;t&&t!==l._activeElement&&((d||m)&&l._setFocusAlignment(t,!0,!0),l._activeElement=t,m&&l._updateTabIndexes()),r&&r(l._activeElement,e),(i||o)&&e.stopPropagation(),u?u(e):a&&a()}},l._onBlur=function(){l._setParkedFocus(!1)},l._onMouseDown=function(e){if(!l._portalContainsElement(e.target)&&!l.props.disabled){for(var t=e.target,n=[];t&&t!==l._root.current;)n.push(t),t=ee(t,!1);for(;n.length&&((t=n.pop())&&oo(t)&&l._setActiveElement(t,!0),!io(t)););}},l._onKeyDown=function(e,t){if(!l._portalContainsElement(e.target)){var n=l.props,r=n.direction,o=n.disabled,i=n.isInnerZoneKeystroke,a=n.pagingSupportDisabled,u=n.shouldEnterInnerZone;if(!(o||(l.props.onKeyDown&&l.props.onKeyDown(e),e.isDefaultPrevented()||l._getDocument().activeElement===l._root.current&&l._isInnerZone))){if((u&&u(e)||i&&i(e))&&l._isImmediateDescendantOfZone(e.target)){var s=l._getFirstInnerZone();if(s){if(!s.focus(!0))return}else{if(!ao(e.target))return;if(!l.focusElement(no(e.target,e.target.firstChild,!0)))return}}else{if(e.altKey)return;switch(e.which){case le:if(l._shouldRaiseClicksOnSpace&&l._tryInvokeClickForFocusable(e.target,e))break;return;case fe:if(r!==Yr.vertical&&(l._preventDefaultWhenHandled(e),l._moveFocusLeft(t)))break;return;case me:if(r!==Yr.vertical&&(l._preventDefaultWhenHandled(e),l._moveFocusRight(t)))break;return;case pe:if(r!==Yr.horizontal&&(l._preventDefaultWhenHandled(e),l._moveFocusUp()))break;return;case he:if(r!==Yr.horizontal&&(l._preventDefaultWhenHandled(e),l._moveFocusDown()))break;return;case se:if(!a&&l._moveFocusPaging(!0))break;return;case ue:if(!a&&l._moveFocusPaging(!1))break;return;case re:if(l.props.allowTabKey||l.props.handleTabKey===Zr||l.props.handleTabKey===Xr&&l._isElementInput(e.target)){var c=!1;if(l._processingTabKey=!0,r!==Yr.vertical&&l._shouldWrapFocus(l._activeElement,"data-no-horizontal-wrap"))c=(Rt(t)?!e.shiftKey:e.shiftKey)?l._moveFocusLeft(t):l._moveFocusRight(t);else c=e.shiftKey?l._moveFocusUp():l._moveFocusDown();if(l._processingTabKey=!1,c)break;l.props.shouldResetActiveElementWhenTabFromZone&&(l._activeElement=null)}return;case de:if(l._isContentEditableElement(e.target)||l._isElementInput(e.target)&&!l._shouldInputLoseFocus(e.target,!1))return!1;var d=l._root.current&&l._root.current.firstChild;if(l._root.current&&d&&l.focusElement(no(l._root.current,d,!0)))break;return;case ce:if(l._isContentEditableElement(e.target)||l._isElementInput(e.target)&&!l._shouldInputLoseFocus(e.target,!0))return!1;var f=l._root.current&&l._root.current.lastChild;if(l._root.current&&l.focusElement(to(l._root.current,f,!0,!0,!0)))break;return;case oe:if(l._shouldRaiseClicksOnEnter&&l._tryInvokeClickForFocusable(e.target,e))break;return;default:return}}e.preventDefault(),e.stopPropagation()}}},l._getHorizontalDistanceFromCenter=function(e,t,n){var r=l._focusAlignment.left||l._focusAlignment.x||0,o=Math.floor(n.top),i=Math.floor(t.bottom),a=Math.floor(n.bottom),u=Math.floor(t.top);return e&&o>i||!e&&a<u?r>=n.left&&r<=n.left+n.width?0:Math.abs(n.left+n.width/2-r):l._shouldWrapFocus(l._activeElement,"data-no-vertical-wrap")?999999999:-999999999},be(l),l._id=Se("FocusZone"),l._focusAlignment={left:0,top:0},l._processingTabKey=!1;var u=null===(o=null!==(r=n.shouldRaiseClicks)&&void 0!==r?r:t.defaultProps.shouldRaiseClicks)||void 0===o||o;return l._shouldRaiseClicksOnEnter=null!==(i=n.shouldRaiseClicksOnEnter)&&void 0!==i?i:u,l._shouldRaiseClicksOnSpace=null!==(a=n.shouldRaiseClicksOnSpace)&&void 0!==a?a:u,l}return o(t,e),t.getOuterZones=function(){return go.size},t._onKeyDownCapture=function(e){e.which===re&&go.forEach((function(e){return e._updateTabIndexes()}))},t.prototype.componentDidMount=function(){var e=this._root.current;if(vo[this._id]=this,e){this._windowElement=f(e);for(var n=ee(e,!1);n&&n!==this._getDocument().body&&1===n.nodeType;){if(io(n)){this._isInnerZone=!0;break}n=ee(n,!1)}this._isInnerZone||(go.add(this),this._windowElement&&1===go.size&&this._windowElement.addEventListener("keydown",t._onKeyDownCapture,!0)),this._root.current&&this._root.current.addEventListener("blur",this._onBlur,!0),this._updateTabIndexes(),this.props.defaultTabbableElement&&"string"==typeof this.props.defaultTabbableElement?this._activeElement=this._getDocument().querySelector(this.props.defaultTabbableElement):this.props.defaultActiveElement&&(this._activeElement=this._getDocument().querySelector(this.props.defaultActiveElement)),this.props.shouldFocusOnMount&&this.focus()}},t.prototype.componentDidUpdate=function(){var e=this._root.current,t=this._getDocument();if(!this.props.preventFocusRestoration&&t&&this._lastIndexPath&&(t.activeElement===t.body||null===t.activeElement||t.activeElement===e)){var n=function(e,t){for(var n=e,r=0,o=t;r<o.length;r++){var i=o[r],a=n.children[Math.min(i,n.children.length-1)];if(!a)break;n=a}return n=oo(n)&&ro(n)?n:no(e,n,!0)||to(e,n)}(e,this._lastIndexPath);n?(this._setActiveElement(n,!0),n.focus(),this._setParkedFocus(!1)):this._setParkedFocus(!0)}},t.prototype.componentWillUnmount=function(){delete vo[this._id],this._isInnerZone||(go.delete(this),this._windowElement&&0===go.size&&this._windowElement.removeEventListener("keydown",t._onKeyDownCapture,!0)),this._root.current&&this._root.current.removeEventListener("blur",this._onBlur,!0),this._activeElement=null,this._defaultFocusElement=null},t.prototype.render=function(){var e=this,t=this.props,n=t.as,r=t.elementType,o=t.rootProps,a=t.ariaDescribedBy,l=t.ariaLabelledBy,u=t.className,c=Ae(this.props,Ne),d=n||r||"div";this._evaluateFocusBeforeRender();var f,p=(void 0===f&&(f=!1),!0===f&&(br=yr({},f)),br);return s.createElement(d,i({"aria-labelledby":l,"aria-describedby":a},c,o,{className:J((po||(po=$t({selectors:{":focus":{outline:"none"}}},"ms-FocusZone")),po),u),ref:this._mergedRef(this.props.elementRef,this._root),"data-focuszone-id":this._id,onKeyDown:function(t){return e._onKeyDown(t,p)},onFocus:this._onFocus,onMouseDownCapture:this._onMouseDown}),this.props.children)},t.prototype.focus=function(e){if(void 0===e&&(e=!1),this._root.current){if(!e&&"true"===this._root.current.getAttribute("data-is-focusable")&&this._isInnerZone){var t=this._getOwnerZone(this._root.current);if(t!==this._root.current){var n=vo[t.getAttribute("data-focuszone-id")];return!!n&&n.focusElement(this._root.current)}return!1}if(!e&&this._activeElement&&Jr(this._root.current,this._activeElement)&&oo(this._activeElement))return this._activeElement.focus(),!0;var r=this._root.current.firstChild;return this.focusElement(no(this._root.current,r,!0))}return!1},t.prototype.focusLast=function(){if(this._root.current){var e=this._root.current&&this._root.current.lastChild;return this.focusElement(to(this._root.current,e,!0,!0,!0))}return!1},t.prototype.focusElement=function(e,t){var n=this.props,r=n.onBeforeFocus,o=n.shouldReceiveFocus;return!(o&&!o(e)||r&&!r(e))&&(!!e&&(this._setActiveElement(e,t),this._activeElement&&this._activeElement.focus(),!0))},t.prototype.setFocusAlignment=function(e){this._focusAlignment=e},t.prototype._evaluateFocusBeforeRender=function(){var e=this._root.current,t=this._getDocument();if(t){var n=t.activeElement;if(n!==e){var r=Jr(e,n,!1);this._lastIndexPath=r?function(e,t){for(var n=[];t&&e&&t!==e;){var r=ee(t,!0);if(null===r)return[];n.unshift(Array.prototype.indexOf.call(r.children,t)),t=r}return n}(e,n):void 0}}},t.prototype._setParkedFocus=function(e){var t=this._root.current;t&&this._isParked!==e&&(this._isParked=e,e?(this.props.allowFocusRoot||(this._parkedTabIndex=t.getAttribute("tabindex"),t.setAttribute("tabindex","-1")),t.focus()):this.props.allowFocusRoot||(this._parkedTabIndex?(t.setAttribute("tabindex",this._parkedTabIndex),this._parkedTabIndex=void 0):t.removeAttribute("tabindex")))},t.prototype._setActiveElement=function(e,t){var n=this._activeElement;this._activeElement=e,n&&(io(n)&&this._updateTabIndexes(n),n.tabIndex=-1),this._activeElement&&(this._focusAlignment&&!t||this._setFocusAlignment(e,!0,!0),this._activeElement.tabIndex=0)},t.prototype._preventDefaultWhenHandled=function(e){this.props.preventDefaultWhenHandled&&e.preventDefault()},t.prototype._tryInvokeClickForFocusable=function(e,t){var n=e;if(n===this._root.current)return!1;do{if("BUTTON"===n.tagName||"A"===n.tagName||"INPUT"===n.tagName||"TEXTAREA"===n.tagName)return!1;if(this._isImmediateDescendantOfZone(n)&&"true"===n.getAttribute("data-is-focusable")&&"true"!==n.getAttribute("data-disable-click-on-enter"))return mo(n,t),!0;n=ee(n,!1)}while(n!==this._root.current);return!1},t.prototype._getFirstInnerZone=function(e){if(!(e=e||this._activeElement||this._root.current))return null;if(io(e))return vo[e.getAttribute("data-focuszone-id")];for(var t=e.firstElementChild;t;){if(io(t))return vo[t.getAttribute("data-focuszone-id")];var n=this._getFirstInnerZone(t);if(n)return n;t=t.nextElementSibling}return null},t.prototype._moveFocus=function(e,t,n,r){void 0===r&&(r=!0);var o=this._activeElement,i=-1,a=void 0,l=!1,u=this.props.direction===Yr.bidirectional;if(!o||!this._root.current)return!1;if(this._isElementInput(o)&&!this._shouldInputLoseFocus(o,e))return!1;var s=u?o.getBoundingClientRect():null;do{if(o=e?no(this._root.current,o):to(this._root.current,o),!u){a=o;break}if(o){var c=t(s,o.getBoundingClientRect());if(-1===c&&-1===i){a=o;break}if(c>-1&&(-1===i||c<i)&&(i=c,a=o),i>=0&&c<0)break}}while(o);if(a&&a!==this._activeElement)l=!0,this.focusElement(a);else if(this.props.isCircularNavigation&&r)return e?this.focusElement(no(this._root.current,this._root.current.firstElementChild,!0)):this.focusElement(to(this._root.current,this._root.current.lastElementChild,!0,!0,!0));return l},t.prototype._moveFocusDown=function(){var e=this,t=-1,n=this._focusAlignment.left||this._focusAlignment.x||0;return!!this._moveFocus(!0,(function(r,o){var i=-1,a=Math.floor(o.top),l=Math.floor(r.bottom);return a<l?e._shouldWrapFocus(e._activeElement,"data-no-vertical-wrap")?999999999:-999999999:((-1===t&&a>=l||a===t)&&(t=a,i=n>=o.left&&n<=o.left+o.width?0:Math.abs(o.left+o.width/2-n)),i)}))&&(this._setFocusAlignment(this._activeElement,!1,!0),!0)},t.prototype._moveFocusUp=function(){var e=this,t=-1,n=this._focusAlignment.left||this._focusAlignment.x||0;return!!this._moveFocus(!1,(function(r,o){var i=-1,a=Math.floor(o.bottom),l=Math.floor(o.top),u=Math.floor(r.top);return a>u?e._shouldWrapFocus(e._activeElement,"data-no-vertical-wrap")?999999999:-999999999:((-1===t&&a<=u||l===t)&&(t=l,i=n>=o.left&&n<=o.left+o.width?0:Math.abs(o.left+o.width/2-n)),i)}))&&(this._setFocusAlignment(this._activeElement,!1,!0),!0)},t.prototype._moveFocusLeft=function(e){var t=this,n=this._shouldWrapFocus(this._activeElement,"data-no-horizontal-wrap");return!!this._moveFocus(Rt(e),(function(r,o){var i=-1;return(Rt(e)?parseFloat(o.top.toFixed(3))<parseFloat(r.bottom.toFixed(3)):parseFloat(o.bottom.toFixed(3))>parseFloat(r.top.toFixed(3)))&&o.right<=r.right&&t.props.direction!==Yr.vertical?i=r.right-o.right:n||(i=-999999999),i}),void 0,n)&&(this._setFocusAlignment(this._activeElement,!0,!1),!0)},t.prototype._moveFocusRight=function(e){var t=this,n=this._shouldWrapFocus(this._activeElement,"data-no-horizontal-wrap");return!!this._moveFocus(!Rt(e),(function(r,o){var i=-1;return(Rt(e)?parseFloat(o.bottom.toFixed(3))>parseFloat(r.top.toFixed(3)):parseFloat(o.top.toFixed(3))<parseFloat(r.bottom.toFixed(3)))&&o.left>=r.left&&t.props.direction!==Yr.vertical?i=o.left-r.left:n||(i=-999999999),i}),void 0,n)&&(this._setFocusAlignment(this._activeElement,!0,!1),!0)},t.prototype._moveFocusPaging=function(e,t){void 0===t&&(t=!0);var n=this._activeElement;if(!n||!this._root.current)return!1;if(this._isElementInput(n)&&!this._shouldInputLoseFocus(n,e))return!1;var r=fo(n);if(!r)return!1;var o=-1,i=void 0,a=-1,l=-1,u=r.clientHeight,s=n.getBoundingClientRect();do{if(n=e?no(this._root.current,n):to(this._root.current,n)){var c=n.getBoundingClientRect(),d=Math.floor(c.top),f=Math.floor(s.bottom),p=Math.floor(c.bottom),m=Math.floor(s.top),h=this._getHorizontalDistanceFromCenter(e,s,c);if(e&&d>f+u||!e&&p<m-u)break;h>-1&&(e&&d>a?(a=d,o=h,i=n):!e&&p<l?(l=p,o=h,i=n):(-1===o||h<=o)&&(o=h,i=n))}}while(n);var v=!1;if(i&&i!==this._activeElement)v=!0,this.focusElement(i),this._setFocusAlignment(i,!1,!0);else if(this.props.isCircularNavigation&&t)return e?this.focusElement(no(this._root.current,this._root.current.firstElementChild,!0)):this.focusElement(to(this._root.current,this._root.current.lastElementChild,!0,!0,!0));return v},t.prototype._setFocusAlignment=function(e,t,n){if(this.props.direction===Yr.bidirectional&&(!this._focusAlignment||t||n)){var r=e.getBoundingClientRect(),o=r.left+r.width/2,i=r.top+r.height/2;this._focusAlignment||(this._focusAlignment={left:o,top:i}),t&&(this._focusAlignment.left=o),n&&(this._focusAlignment.top=i)}},t.prototype._isImmediateDescendantOfZone=function(e){return this._getOwnerZone(e)===this._root.current},t.prototype._getOwnerZone=function(e){for(var t=ee(e,!1);t&&t!==this._root.current&&t!==this._getDocument().body;){if(io(t))return t;t=ee(t,!1)}return t},t.prototype._updateTabIndexes=function(e){!this._activeElement&&this.props.defaultTabbableElement&&"function"==typeof this.props.defaultTabbableElement&&(this._activeElement=this.props.defaultTabbableElement(this._root.current)),!e&&this._root.current&&(this._defaultFocusElement=null,e=this._root.current,this._activeElement&&!Jr(e,this._activeElement)&&(this._activeElement=null)),this._activeElement&&!oo(this._activeElement)&&(this._activeElement=null);for(var t=e&&e.children,n=0;t&&n<t.length;n++){var r=t[n];io(r)?"true"===r.getAttribute("data-is-focusable")&&(this._isInnerZone||(this._activeElement||this._defaultFocusElement)&&this._activeElement!==r?"-1"!==r.getAttribute("tabindex")&&r.setAttribute("tabindex","-1"):(this._defaultFocusElement=r,"0"!==r.getAttribute("tabindex")&&r.setAttribute("tabindex","0"))):(r.getAttribute&&"false"===r.getAttribute("data-is-focusable")&&r.setAttribute("tabindex","-1"),oo(r)?this.props.disabled?r.setAttribute("tabindex","-1"):this._isInnerZone||(this._activeElement||this._defaultFocusElement)&&this._activeElement!==r?"-1"!==r.getAttribute("tabindex")&&r.setAttribute("tabindex","-1"):(this._defaultFocusElement=r,"0"!==r.getAttribute("tabindex")&&r.setAttribute("tabindex","0")):"svg"===r.tagName&&"false"!==r.getAttribute("focusable")&&r.setAttribute("focusable","false")),this._updateTabIndexes(r)}},t.prototype._isContentEditableElement=function(e){return e&&"true"===e.getAttribute("contenteditable")},t.prototype._isElementInput=function(e){return!(!e||!e.tagName||"input"!==e.tagName.toLowerCase()&&"textarea"!==e.tagName.toLowerCase())},t.prototype._shouldInputLoseFocus=function(e,t){if(!this._processingTabKey&&e&&e.type&&yo.indexOf(e.type.toLowerCase())>-1){var n=e.selectionStart,r=n!==e.selectionEnd,o=e.value,i=e.readOnly;if(r||n>0&&!t&&!i||n!==o.length&&t&&!i||this.props.handleTabKey&&(!this.props.shouldInputLoseFocusOnArrowKey||!this.props.shouldInputLoseFocusOnArrowKey(e)))return!1}return!0},t.prototype._shouldWrapFocus=function(e,t){return!this.props.checkForNoWrap||lo(e,t)},t.prototype._portalContainsElement=function(e){return e&&!!this._root.current&&ne(e,this._root.current)},t.prototype._getDocument=function(){return Pt(this._root.current)},t.defaultProps={isCircularNavigation:!1,direction:Yr.bidirectional,shouldRaiseClicks:!0},t}(s.Component);function _o(e){var t;if(void 0===ho||e){var n=f(),r=null===(t=null==n?void 0:n.navigator)||void 0===t?void 0:t.userAgent;ho=!!r&&-1!==r.indexOf("Macintosh")}return!!ho}var ko,Co,wo=function(){return!!(window&&window.navigator&&window.navigator.userAgent)&&/iPad|iPhone|iPod/i.test(window.navigator.userAgent)};function xo(e,t){for(var n=i({},t),r=0,o=Object.keys(e);r<o.length;r++){var a=o[r];void 0===n[a]&&(n[a]=e[a])}return n}function Eo(e){return e.canCheck?!(!e.isChecked&&!e.checked):"boolean"==typeof e.isChecked?e.isChecked:"boolean"==typeof e.checked?e.checked:null}function So(e){return!(!e.subMenuProps&&!e.items)}function Io(e){return!(!e.isDisabled&&!e.disabled)}function To(e){return null!==Eo(e)?"menuitemcheckbox":"menuitem"}function Po(e,t,n,r){return e.addEventListener(t,n,r),function(){return e.removeEventListener(t,n,r)}}!function(e){e[e.top=1]="top",e[e.bottom=-1]="bottom",e[e.left=2]="left",e[e.right=-2]="right"}(ko||(ko={})),function(e){e[e.top=0]="top",e[e.bottom=1]="bottom",e[e.start=2]="start",e[e.end=3]="end"}(Co||(Co={}));var Mo,Do=function(){function e(e,t,n,r){void 0===e&&(e=0),void 0===t&&(t=0),void 0===n&&(n=0),void 0===r&&(r=0),this.top=n,this.bottom=r,this.left=e,this.right=t}return Object.defineProperty(e.prototype,"width",{get:function(){return this.right-this.left},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"height",{get:function(){return this.bottom-this.top},enumerable:!1,configurable:!0}),e.prototype.equals=function(e){return parseFloat(this.top.toFixed(4))===parseFloat(e.top.toFixed(4))&&parseFloat(this.bottom.toFixed(4))===parseFloat(e.bottom.toFixed(4))&&parseFloat(this.left.toFixed(4))===parseFloat(e.left.toFixed(4))&&parseFloat(this.right.toFixed(4))===parseFloat(e.right.toFixed(4))},e}();function No(e,t,n){return{targetEdge:e,alignmentEdge:t,isAuto:n}}var Ro=((Mo={})[Fr]=No(ko.top,ko.left),Mo[Br]=No(ko.top),Mo[Lr]=No(ko.top,ko.right),Mo[Or]=No(ko.top,void 0,!0),Mo[Ar]=No(ko.bottom,ko.left),Mo[zr]=No(ko.bottom),Mo[Hr]=No(ko.bottom,ko.right),Mo[Ur]=No(ko.bottom,void 0,!0),Mo[Wr]=No(ko.left,ko.top),Mo[jr]=No(ko.left),Mo[Kr]=No(ko.left,ko.bottom),Mo[Vr]=No(ko.right,ko.top),Mo[qr]=No(ko.right),Mo[$r]=No(ko.right,ko.bottom),Mo);function Fo(e,t){return!(e.top<t.top)&&(!(e.bottom>t.bottom)&&(!(e.left<t.left)&&!(e.right>t.right)))}function Bo(e,t){var n=[];return e.top<t.top&&n.push(ko.top),e.bottom>t.bottom&&n.push(ko.bottom),e.left<t.left&&n.push(ko.left),e.right>t.right&&n.push(ko.right),n}function Lo(e,t){return e[ko[t]]}function Oo(e,t,n){return e[ko[t]]=n,e}function Ao(e,t){var n=Yo(t);return(Lo(e,n.positiveEdge)+Lo(e,n.negativeEdge))/2}function zo(e,t){return e>0?t:-1*t}function Ho(e,t){return zo(e,Lo(t,e))}function Uo(e,t,n){return zo(n,Lo(e,n)-Lo(t,n))}function Wo(e,t,n,r){void 0===r&&(r=!0);var o=Lo(e,t)-n,i=Oo(e,t,n);return r&&(i=Oo(e,-1*t,Lo(e,-1*t)-o)),i}function jo(e,t,n,r){return void 0===r&&(r=0),Wo(e,n,Lo(t,n)+zo(n,r))}function Ko(e,t,n){return Ho(n,e)>Ho(n,t)}function Vo(e,t){for(var n=0,r=0,o=Bo(e,t);r<o.length;r++){var i=o[r];n+=Math.pow(Uo(e,t,i),2)}return n}function qo(e,t,n,r,o,i,a){void 0===o&&(o=0);var l=r.alignmentEdge,u=r.alignTargetEdge,s={elementRectangle:e,targetEdge:r.targetEdge,alignmentEdge:l};i||a||(s=function(e,t,n,r,o){void 0===o&&(o=0);var i=[ko.left,ko.right,ko.bottom,ko.top];Rt()&&(i[0]*=-1,i[1]*=-1);for(var a,l=e,u=r.targetEdge,s=r.alignmentEdge,c=u,d=s,f=0;f<4;f++){if(Ko(l,n,u))return{elementRectangle:l,targetEdge:u,alignmentEdge:s};var p=Vo(l,n);(!a||p<a)&&(a=p,c=u,d=s),i.splice(i.indexOf(u),1),i.length>0&&(i.indexOf(-1*u)>-1?u*=-1:(s=u,u=i.slice(-1)[0]),l=Go(e,t,{targetEdge:u,alignmentEdge:s},o))}return{elementRectangle:l=Go(e,t,{targetEdge:c,alignmentEdge:d},o),targetEdge:c,alignmentEdge:d}}(e,t,n,r,o));var c=Bo(s.elementRectangle,n),d=i?-s.targetEdge:void 0;if(c.length>0)if(u)if(s.alignmentEdge&&c.indexOf(-1*s.alignmentEdge)>-1){var f=function(e,t,n,r){var o=e.alignmentEdge,i=e.targetEdge,a=-1*o;return{elementRectangle:Go(e.elementRectangle,t,{targetEdge:i,alignmentEdge:a},n,r),targetEdge:i,alignmentEdge:a}}(s,t,o,a);if(Fo(f.elementRectangle,n))return f;s=$o(Bo(f.elementRectangle,n),s,n,d)}else s=$o(c,s,n,d);else s=$o(c,s,n,d);return s}function $o(e,t,n,r){for(var o=0,i=e;o<i.length;o++){var a=i[o],l=void 0;if(r&&r===-1*a)l=Wo(t.elementRectangle,a,Lo(n,a),!1),t.forcedInBounds=!0;else Ko(l=jo(t.elementRectangle,n,a),n,-1*a)||(l=Wo(l,-1*a,Lo(n,-1*a),!1),t.forcedInBounds=!0);t.elementRectangle=l}return t}function Qo(e,t,n){var r=Yo(t).positiveEdge;return Wo(e,r,n-(Ao(e,t)-Lo(e,r)))}function Go(e,t,n,r,o){void 0===r&&(r=0);var i=new Do(e.left,e.right,e.top,e.bottom),a=n.alignmentEdge,l=n.targetEdge,u=o?l:-1*l;(i=o?jo(i,t,l,r):function(e,t,n,r){void 0===r&&(r=0);var o=zo(-1*n,r);return Wo(e,-1*n,Lo(t,n)+o)}(i,t,l,r),a)?i=jo(i,t,a):i=Qo(i,u,Ao(t,l));return i}function Yo(e){return e===ko.top||e===ko.bottom?{positiveEdge:ko.left,negativeEdge:ko.right}:{positiveEdge:ko.top,negativeEdge:ko.bottom}}function Zo(e,t,n){return n&&Math.abs(Uo(e,n,t))>Math.abs(Uo(e,n,-1*t))?-1*t:t}function Xo(e,t,n,r,o,i,a,l){var u,s={},c=ii(t),d=i?n:-1*n,f=o||Yo(n).positiveEdge;return a&&!function(e,t,n){return void 0!==n&&Lo(e,t)===Lo(n,t)}(e,(u=f,-1*u),r)||(f=Zo(e,f,r)),s[ko[d]]=Uo(e,c,d),s[ko[f]]=Uo(e,c,f),l&&(s[ko[-1*d]]=Uo(e,c,-1*d),s[ko[-1*f]]=Uo(e,c,-1*f)),s}function Jo(e){return Math.sqrt(e*e*2)}function ei(e,t,n){if(void 0===e&&(e=Ur),n)return{alignmentEdge:n.alignmentEdge,isAuto:n.isAuto,targetEdge:n.targetEdge};var r=i({},Ro[e]);return Rt()?(r.alignmentEdge&&r.alignmentEdge%2==0&&(r.alignmentEdge=-1*r.alignmentEdge),void 0!==t?Ro[t]:r):r}function ti(e,t,n){var r=Ao(t,e),o=Ao(n,e),i=Yo(e),a=i.positiveEdge,l=i.negativeEdge;return r<=o?a:l}function ni(e,t,n,r,o,i,a){var l=Go(e,t,r,o,a);return Fo(l,n)?{elementRectangle:l,targetEdge:r.targetEdge,alignmentEdge:r.alignmentEdge}:qo(l,t,n,r,o,i,a)}function ri(e,t,n){var r=-1*e.targetEdge,o=new Do(0,e.elementRectangle.width,0,e.elementRectangle.height),a={},l=Zo(e.elementRectangle,e.alignmentEdge?e.alignmentEdge:Yo(r).positiveEdge,n),u=Uo(e.elementRectangle,e.targetRectangle,r)>Math.abs(Lo(t,r));return a[ko[r]]=Lo(t,r),a[ko[l]]=Uo(t,o,l),{elementPosition:i({},a),closestEdge:ti(e.targetEdge,t,o),targetEdge:r,hideBeak:!u}}function oi(e,t){var n=t.targetRectangle,r=Yo(t.targetEdge),o=r.positiveEdge,i=r.negativeEdge,a=Ao(n,t.targetEdge),l=new Do(e/2,t.elementRectangle.width-e/2,e/2,t.elementRectangle.height-e/2),u=new Do(0,e,0,e);return Ko(u=Qo(u=Wo(u,-1*t.targetEdge,-e/2),-1*t.targetEdge,a-Ho(o,t.elementRectangle)),l,o)?Ko(u,l,i)||(u=jo(u,l,i)):u=jo(u,l,o),u}function ii(e){var t=e.getBoundingClientRect();return new Do(t.left,t.right,t.top,t.bottom)}function ai(e){return new Do(e.left,e.right,e.top,e.bottom)}function li(e,t,n,r){var o=e.gapSpace?e.gapSpace:0,a=function(e,t){var n;if(t){if(t.preventDefault){var r=t;n=new Do(r.clientX,r.clientX,r.clientY,r.clientY)}else if(t.getBoundingClientRect)n=ii(t);else{var o=t,i=o.left||o.x,a=o.top||o.y,l=o.right||i,u=o.bottom||a;n=new Do(i,l,a,u)}if(!Fo(n,e))for(var s=0,c=Bo(n,e);s<c.length;s++){var d=c[s];n[ko[d]]=e[ko[d]]}}else n=new Do(0,0,0,0);return n}(n,e.target),l=function(e,t,n,r,o){return e.isAuto&&(e.alignmentEdge=ti(e.targetEdge,t,n)),e.alignTargetEdge=o,e}(ei(e.directionalHint,e.directionalHintForRTL,r),a,n,e.coverTarget,e.alignTargetEdge),u=ni(ii(t),a,n,l,o,e.directionalHintFixed,e.coverTarget);return i(i({},u),{targetRectangle:a})}function ui(e,t,n,r,o){return{elementPosition:Xo(e.elementRectangle,t,e.targetEdge,n,e.alignmentEdge,r,o,e.forcedInBounds),targetEdge:e.targetEdge,alignmentEdge:e.alignmentEdge}}function si(e,t,n,r,o){var a=e.isBeakVisible&&e.beakWidth||0,l=Jo(a)/2+(e.gapSpace?e.gapSpace:0),u=e;u.gapSpace=l;var s=e.bounds?ai(e.bounds):new Do(0,window.innerWidth-co(),0,window.innerHeight),c=li(u,n,s,r),d=ri(c,oi(a,c),s);return i(i({},ui(c,t,s,e.coverTarget,o)),{beakPosition:d})}function ci(e,t,n,r){return function(e,t,n,r){return si(e,t,n,r,!0)}(e,t,n,r)}var di=["TEMPLATE","STYLE","SCRIPT"];function fi(e){var t=s.useRef();return void 0===t.current&&(t.current={value:"function"==typeof e?e():e}),t.current.value}function pi(){var e=fi((function(){return new p}));return s.useEffect((function(){return function(){return e.dispose()}}),[e]),e}function mi(e,t,n,r){var o=s.useRef(n);o.current=n,s.useEffect((function(){var n=e&&"current"in e?e.current:e;if(n)return Po(n,t,(function(e){return o.current(e)}),r)}),[e,t,r])}var hi=s.createContext({window:"object"==typeof window?window:void 0}),vi=function(){return s.useContext(hi).window};function gi(e){var t=e.originalElement,n=e.containsFocus;t&&n&&t!==f()&&setTimeout((function(){var e;null===(e=t.focus)||void 0===e||e.call(t)}),0)}function yi(e,t){var n=e.onRestoreFocus,r=void 0===n?gi:n,o=s.useRef(),i=s.useRef(!1);s.useEffect((function(){return o.current=Pt().activeElement,function(e){var t=Pt(e),n=t&&t.activeElement;return!(!n||!Jr(e,n))}(t.current)&&(i.current=!0),function(){var e;null==r||r({originalElement:o.current,containsFocus:i.current,documentContainsFocus:(null===(e=Pt())||void 0===e?void 0:e.hasFocus())||!1}),o.current=void 0}}),[]),mi(t,"focus",s.useCallback((function(){i.current=!0}),[]),!0),mi(t,"blur",s.useCallback((function(e){t.current&&e.relatedTarget&&!t.current.contains(e.relatedTarget)&&(i.current=!1)}),[]),!0)}function bi(e,t){var n="true"===String(e["aria-modal"]).toLowerCase()&&e.enableAriaHiddenSiblings;s.useEffect((function(){if(n&&t.current)return function(e){var t=Pt(e);if(!t)return function(){};for(var n=[];e!==t.body&&e.parentElement;){for(var r=0,o=e.parentElement.children;r<o.length;r++){var i=o[r],a=i.getAttribute("aria-hidden");i!==e&&"true"!==(null==a?void 0:a.toLowerCase())&&-1===di.indexOf(i.tagName)&&n.push([i,a])}e=e.parentElement}return n.forEach((function(e){e[0].setAttribute("aria-hidden","true")})),function(){!function(e){e.forEach((function(e){var t=e[0],n=e[1];n?t.setAttribute("aria-hidden",n):t.removeAttribute("aria-hidden")}))}(n),n=[]}}(t.current)}),[t,n])}var _i=s.forwardRef((function(e,t){var n=xo({shouldRestoreFocus:!0,enableAriaHiddenSiblings:!0},e),r=s.useRef(),o=jt(r,t);bi(n,r),yi(n,r);var a=n.role,l=n.className,u=n.ariaLabel,c=n.ariaLabelledBy,d=n.ariaDescribedBy,f=n.style,p=n.children,m=n.onDismiss,h=function(e,t){var n=pi(),r=s.useState(!1),o=r[0],i=r[1];return s.useEffect((function(){return n.requestAnimationFrame((function(){var n;if(!e.style||!e.style.overflowY){var r=!1;if(t&&t.current&&(null===(n=t.current)||void 0===n?void 0:n.firstElementChild)){var a=t.current.clientHeight,l=t.current.firstElementChild.clientHeight;a>0&&l>a&&(r=l-a>1)}o!==r&&i(r)}})),function(){return n.dispose()}})),o}(n,r),v=s.useCallback((function(e){switch(e.which){case ae:m&&(m(e),e.preventDefault(),e.stopPropagation())}}),[m]);return mi(vi(),"keydown",v),s.createElement("div",i({ref:o},Ae(n,Oe),{className:l,role:a,"aria-label":u,"aria-labelledby":c,"aria-describedby":d,onKeyDown:v,style:i({overflowY:h?"scroll":void 0,outline:"none"},f)}),p)}));_i.displayName="Popup";var ki,Ci=s.createContext({window:"object"==typeof window?window:void 0});function wi(e,t){var n=s.useRef(),r=s.useRef(null),o=s.useContext(Ci).window;if(!e||e!==n.current||"string"==typeof e){var i=null==t?void 0:t.current;if(e)if("string"==typeof e){var a=Pt(i);r.current=a?a.querySelector(e):null}else r.current="stopPropagation"in e||"getBoundingClientRect"in e?e:"current"in e?e.current:e;n.current=e}return[r,o]}var xi=((ki={})[ko.top]=Un.slideUpIn10,ki[ko.bottom]=Un.slideDownIn10,ki[ko.left]=Un.slideLeftIn10,ki[ko.right]=Un.slideRightIn10,ki),Ei=0,Si=0,Ii={opacity:0,filter:"opacity(0)",pointerEvents:"none"},Ti=["role","aria-roledescription"],Pi={preventDismissOnLostFocus:!1,preventDismissOnScroll:!1,preventDismissOnResize:!1,isBeakVisible:!0,beakWidth:16,gapSpace:0,minPagePadding:8,directionalHint:Ur},Mi=zt({disableCaching:!0});function Di(e,t,n,r,o){var a=s.useState(),l=a[0],u=a[1],c=s.useRef(0),d=s.useRef(),f=pi(),p=e.hidden,m=e.target,h=e.finalHeight,v=e.calloutMaxHeight,g=e.onPositioned,y=e.directionalHint;return s.useEffect((function(){if(!p){var a=f.requestAnimationFrame((function(){var a,s,f,p;if(t.current&&n){var y=i(i({},e),{target:r.current,bounds:o()}),b=n.cloneNode(!0);b.style.maxHeight=v?""+v:"",b.style.visibility="hidden",null===(a=n.parentElement)||void 0===a||a.appendChild(b);var _=d.current===m?l:void 0,k=h?ci(y,t.current,b,_):function(e,t,n,r){return si(e,t,n,r)}(y,t.current,b,_);null===(s=n.parentElement)||void 0===s||s.removeChild(b),!l&&k||l&&k&&(p=k,!Fi((f=l).elementPosition,p.elementPosition)||!Fi(f.beakPosition.elementPosition,p.beakPosition.elementPosition))&&c.current<5?(c.current++,u(k)):c.current>0&&(c.current=0,null==g||g(l))}}),n);return d.current=m,function(){f.cancelAnimationFrame(a),d.current=void 0}}u(void 0),c.current=0}),[p,y,f,n,v,t,r,h,o,g,l,e,m]),l}var Ni=s.memo(s.forwardRef((function(e,t){var n=xo(Pi,e),r=n.styles,o=n.style,a=n.ariaLabel,l=n.ariaDescribedBy,u=n.ariaLabelledBy,c=n.className,d=n.isBeakVisible,f=n.children,p=n.beakWidth,m=n.calloutWidth,h=n.calloutMaxWidth,v=n.calloutMinWidth,g=n.doNotLayer,y=n.finalHeight,b=n.hideOverflow,_=void 0===b?!!y:b,k=n.backgroundColor,C=n.calloutMaxHeight,w=n.onScroll,x=n.shouldRestoreFocus,E=void 0===x||x,S=n.target,I=n.hidden,T=n.onLayerMounted,P=s.useRef(null),M=s.useState(null),D=M[0],N=M[1],R=s.useCallback((function(e){N(e)}),[]),F=jt(P,t),B=wi(n.target,{current:D}),L=B[0],O=B[1],A=function(e,t,n){var r=e.bounds,o=e.minPagePadding,i=void 0===o?Pi.minPagePadding:o,a=e.target,l=s.useState(!1),u=l[0],c=l[1],d=s.useRef(),f=s.useCallback((function(){if(!d.current||u){var e="function"==typeof r?n?r(a,n):void 0:r;!e&&n&&(e={top:(e=function(e,t){return function(e,t){var n=void 0;if(t.getWindowSegments&&(n=t.getWindowSegments()),void 0===n||n.length<=1)return{top:0,left:0,right:t.innerWidth,bottom:t.innerHeight,width:t.innerWidth,height:t.innerHeight};var r=0,o=0;if(null!==e&&e.getBoundingClientRect){var i=e.getBoundingClientRect();r=(i.left+i.right)/2,o=(i.top+i.bottom)/2}else null!==e&&(r=e.left||e.x,o=e.top||e.y);for(var a={top:0,left:0,right:0,bottom:0,width:0,height:0},l=0,u=n;l<u.length;l++){var s=u[l];r&&s.left<=r&&s.right>=r&&o&&s.top<=o&&s.bottom>=o&&(a={top:s.top,left:s.left,right:s.right,bottom:s.bottom,width:s.width,height:s.height})}return a}(e,t)}(t.current,n)).top+i,left:e.left+i,right:e.right-i,bottom:e.bottom-i,width:e.width-2*i,height:e.height-2*i}),d.current=e,u&&c(!1)}return d.current}),[r,i,a,t,n,u]),p=pi();return mi(n,"resize",p.debounce((function(){c(!0)}),500,{leading:!0})),f}(n,L,O),z=Di(n,P,D,L,A),H=function(e,t,n){var r,o=e.calloutMaxHeight,i=e.finalHeight,a=e.directionalHint,l=e.directionalHintFixed,u=e.hidden,c=s.useState(),d=c[0],f=c[1],p=null!==(r=null==n?void 0:n.elementPosition)&&void 0!==r?r:{},m=p.top,h=p.bottom;return s.useEffect((function(){var e,n=null!==(e=t())&&void 0!==e?e:{},r=n.top,i=n.bottom;o||u?f(o||void 0):"number"==typeof m&&i?f(i-m):"number"==typeof h&&"number"==typeof r&&i&&f(i-r-h)}),[h,o,i,a,l,t,u,n,m]),d}(n,A,z),U=function(e,t,n,r,o){var i=e.hidden,a=e.onDismiss,l=e.preventDismissOnScroll,u=e.preventDismissOnResize,c=e.preventDismissOnLostFocus,d=e.dismissOnTargetClick,f=e.shouldDismissOnWindowFocus,p=e.preventDismissOnEvent,m=s.useRef(!1),h=pi(),v=fi([function(){m.current=!0},function(){m.current=!1}]),g=!!t;return s.useEffect((function(){var e=function(e){g&&!l&&v(e)},t=function(e){u||p&&p(e)||null==a||a(e)},s=function(e){c||v(e)},v=function(e){var t=e.composedPath?e.composedPath():[],i=t.length>0?t[0]:e.target,l=n.current&&!Jr(n.current,i);if(l&&m.current)m.current=!1;else if(!r.current&&l||e.target!==o&&l&&(!r.current||"stopPropagation"in r.current||d||i!==r.current&&!Jr(r.current,i))){if(p&&p(e))return;null==a||a(e)}},y=function(e){f&&((!p||p(e))&&(p||c)||(null==o?void 0:o.document.hasFocus())||null!==e.relatedTarget||null==a||a(e))},b=new Promise((function(n){h.setTimeout((function(){if(!i&&o){var r=[Po(o,"scroll",e,!0),Po(o,"resize",t,!0),Po(o.document.documentElement,"focus",s,!0),Po(o.document.documentElement,"click",s,!0),Po(o,"blur",y,!0)];n((function(){r.forEach((function(e){return e()}))}))}}),0)}));return function(){b.then((function(e){return e()}))}}),[i,h,n,r,o,a,f,d,c,u,l,g,p]),v}(n,z,P,L,O),W=U[0],j=U[1],K=(null==z?void 0:z.elementPosition.top)&&(null==z?void 0:z.elementPosition.bottom),V=i(i({},null==z?void 0:z.elementPosition),{maxHeight:H});if(K&&(V.bottom=void 0),function(e,t,n){var r=e.hidden,o=e.setInitialFocus,i=pi(),a=!!t;s.useEffect((function(){if(!r&&o&&a&&n){var e=i.requestAnimationFrame((function(){return eo(n)}),n);return function(){return i.cancelAnimationFrame(e)}}}),[r,a,i,n,o])}(n,z,D),s.useEffect((function(){I||null==T||T()}),[I]),!O)return null;var q=_,$=d&&!!S,Q=Mi(r,{theme:n.theme,className:c,overflowYHidden:q,calloutWidth:m,positions:z,beakWidth:p,backgroundColor:k,calloutMaxWidth:h,calloutMinWidth:v,doNotLayer:g}),G=i(i({maxHeight:C||"100%"},o),q&&{overflowY:"hidden"}),Y=n.hidden?{visibility:"hidden"}:void 0;return s.createElement("div",{ref:F,className:Q.container,style:Y},s.createElement("div",i({},Ae(n,Oe,Ti),{className:J(Q.root,z&&z.targetEdge&&xi[z.targetEdge]),style:z?i({},V):Ii,tabIndex:-1,ref:R}),$&&s.createElement("div",{className:Q.beak,style:Ri(z)}),$&&s.createElement("div",{className:Q.beakCurtain}),s.createElement(_i,{role:n.role,"aria-roledescription":n["aria-roledescription"],ariaDescribedBy:l,ariaLabel:a,ariaLabelledBy:u,className:Q.calloutMain,onDismiss:n.onDismiss,onMouseDown:W,onMouseUp:j,onRestoreFocus:n.onRestoreFocus,onScroll:w,shouldRestoreFocus:E,style:G},f)))})),(function(e,t){return!(t.shouldUpdateWhenHidden||!e.hidden||!t.hidden)||m(e,t)}));function Ri(e){var t,n,r=i(i({},null===(t=null==e?void 0:e.beakPosition)||void 0===t?void 0:t.elementPosition),{display:(null===(n=null==e?void 0:e.beakPosition)||void 0===n?void 0:n.hideBeak)?"none":void 0});return r.top||r.bottom||r.left||r.right||(r.left=Si,r.top=Ei),r}function Fi(e,t){for(var n in t)if(t.hasOwnProperty(n)){var r=e[n],o=t[n];if(void 0===r||void 0===o)return!1;if(r.toFixed(2)!==o.toFixed(2))return!1}return!0}function Bi(e){return{height:e,width:e}}Ni.displayName="CalloutContentBase";var Li={container:"ms-Callout-container",root:"ms-Callout",beak:"ms-Callout-beak",beakCurtain:"ms-Callout-beakCurtain",calloutMain:"ms-Callout-main"},Oi=Je(Ni,(function(e){var t,n=e.theme,r=e.className,o=e.overflowYHidden,i=e.calloutWidth,a=e.beakWidth,l=e.backgroundColor,u=e.calloutMaxWidth,s=e.calloutMinWidth,c=e.doNotLayer,d=Gn(Li,n),f=n.semanticColors,p=n.effects;return{container:[d.container,{position:"relative"}],root:[d.root,n.fonts.medium,{position:"absolute",display:"flex",zIndex:c?Wn.Layer:void 0,boxSizing:"border-box",borderRadius:p.roundedCorner2,boxShadow:p.elevation16,selectors:(t={},t[jn]={borderWidth:1,borderStyle:"solid",borderColor:"WindowText"},t)},{selectors:{"&::-moz-focus-inner":{border:0},"&":{outline:"transparent"}}},r,!!i&&{width:i},!!u&&{maxWidth:u},!!s&&{minWidth:s}],beak:[d.beak,{position:"absolute",backgroundColor:f.menuBackground,boxShadow:"inherit",border:"inherit",boxSizing:"border-box",transform:"rotate(45deg)"},Bi(a),l&&{backgroundColor:l}],beakCurtain:[d.beakCurtain,{position:"absolute",top:0,right:0,bottom:0,left:0,backgroundColor:f.menuBackground,borderRadius:p.roundedCorner2}],calloutMain:[d.calloutMain,{backgroundColor:f.menuBackground,overflowX:"hidden",overflowY:"auto",position:"relative",width:"100%",borderRadius:p.roundedCorner2},o&&{overflowY:"hidden"},l&&{backgroundColor:l}]}}),void 0,{scope:"CalloutContent"}),Ai=n(5);function zi(e,t){return void 0===e&&(e={}),(Ui(t)?t:function(e){return function(t){return e?i(i({},t),e):t}}(t))(e)}function Hi(e,t){return void 0===e&&(e={}),(Ui(t)?t:function(e){void 0===e&&(e={});return function(t){var n=i({},t);for(var r in e)e.hasOwnProperty(r)&&(n[r]=i(i({},t[r]),e[r]));return n}}(t))(e)}function Ui(e){return"function"==typeof e}var Wi=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t._onCustomizationChange=function(){return t.forceUpdate()},t}return o(t,e),t.prototype.componentDidMount=function(){T.observe(this._onCustomizationChange)},t.prototype.componentWillUnmount=function(){T.unobserve(this._onCustomizationChange)},t.prototype.render=function(){var e=this,t=this.props.contextTransform;return s.createElement(M.Consumer,null,(function(n){var r=function(e,t){var n=(t||{}).customizations,r=void 0===n?{settings:{},scopedSettings:{}}:n;return{customizations:{settings:zi(r.settings,e.settings),scopedSettings:Hi(r.scopedSettings,e.scopedSettings),inCustomizerContext:!0}}}(e.props,n);return t&&(r=t(r)),s.createElement(M.Provider,{value:r},e.props.children)}))},t}(s.Component),ji=zt(),Ki=G((function(e,t){return yr(i(i({},e),{rtl:t}))})),Vi=s.forwardRef((function(e,t){var n=e.className,r=e.theme,o=e.applyTheme,a=e.applyThemeToBody,l=e.styles,u=ji(l,{theme:r,applyTheme:o,className:n}),c=s.useRef(null);return function(e,t,n){var r=t.bodyThemed;s.useEffect((function(){if(e){var t=Pt(n.current);if(t)return t.body.classList.add(r),function(){t.body.classList.remove(r)}}}),[r,e,n])}(a,u,c),We(c),s.createElement(s.Fragment,null,function(e,t,n,r){var o=t.root,a=e.as,l=void 0===a?"div":a,u=e.dir,c=e.theme,d=Ae(e,Oe,["dir"]),f=function(e){var t=e.theme,n=e.dir,r=Rt(t)?"rtl":"ltr",o=Rt()?"rtl":"ltr",i=n||r;return{rootDir:i!==r||i!==o?i:n,needsTheme:i!==r}}(e),p=f.rootDir,m=f.needsTheme,h=s.createElement(l,i({dir:p},d,{className:o,ref:jt(n,r)}));m&&(h=s.createElement(Wi,{settings:{theme:Ki(c,"rtl"===u)}},h));return h}(e,u,c,t))}));Vi.displayName="FabricBase";var qi={fontFamily:"inherit"},$i={root:"ms-Fabric",bodyThemed:"ms-Fabric-bodyThemed"},Qi=Je(Vi,(function(e){var t=e.theme,n=e.className,r=e.applyTheme;return{root:[Gn($i,t).root,t.fonts.medium,{color:t.palette.neutralPrimary,selectors:{"& button":qi,"& input":qi,"& textarea":qi}},r&&{color:t.semanticColors.bodyText,backgroundColor:t.semanticColors.bodyBackground},n],bodyThemed:[{backgroundColor:t.semanticColors.bodyBackground}]}}),void 0,{scope:"Fabric"});var Gi={},Yi={},Zi="#fluent-default-layer-host";var Xi,Ji=zt(),ea=s.forwardRef((function(e,t){var n=s.useRef(null),r=jt(n,t),o=s.useRef(),a=s.useState(!1),l=a[0],u=a[1],c=function(){var e;return null===(e=s.useContext(hi).window)||void 0===e?void 0:e.document}(),d=e.eventBubblingEnabled,f=e.styles,p=e.theme,m=e.className,h=e.children,v=e.hostId,g=e.onLayerDidMount,y=void 0===g?function(){}:g,b=e.onLayerMounted,_=void 0===b?function(){}:b,k=e.onLayerWillUnmount,C=e.insertFirst,w=Ji(f,{theme:p,className:m,isNotHost:!v}),x=function(){var e,t;if(v){var n=function(e){var t=Yi[e];return t&&t[0]||void 0}(v);return n?null!==(e=n.rootRef.current)&&void 0!==e?e:null:null!==(t=null==c?void 0:c.getElementById(v))&&void 0!==t?t:null}var r=Zi,o=r?null==c?void 0:c.querySelector(r):null;return!o&&c&&(o=function(e){var t=e.createElement("div");return t.setAttribute("id","fluent-default-layer-host"),t.style.cssText="position:fixed;z-index:1000000",null==e||e.body.appendChild(t),t}(c)),o},E=function(){null==k||k();var e=o.current;o.current=void 0,e&&e.parentNode&&e.parentNode.removeChild(e)},S=function(){var e,t,r=x();if(r){E();var i=null===(t=null!==(e=r.ownerDocument)&&void 0!==e?e:c)||void 0===t?void 0:t.createElement("div");i&&(i.className=w.root,i.setAttribute("data-portal-element","true"),function(e,t){var n=e,r=t;n._virtual||(n._virtual={children:[]});var o=n._virtual.parent;if(o&&o!==t){var i=o._virtual.children.indexOf(n);i>-1&&o._virtual.children.splice(i,1)}n._virtual.parent=r||void 0,r&&(r._virtual||(r._virtual={children:[]}),r._virtual.children.push(n))}(i,n.current),C?r.insertBefore(i,r.firstChild):r.appendChild(i),o.current=i,u(!0))}};return Wt((function(){return S(),v&&function(e,t){Gi[e]||(Gi[e]=[]),Gi[e].push(t);var n=Yi[e];if(n)for(var r=0,o=n;r<o.length;r++){o[r].notifyLayersChanged()}}(v,S),function(){E(),v&&function(e,t){var n=Gi[e];if(n){var r=n.indexOf(t);r>=0&&(n.splice(r,1),0===n.length&&delete Gi[e])}var o=Yi[e];if(o)for(var i=0,a=o;i<a.length;i++){a[i].notifyLayersChanged()}}(v,S)}}),[v]),s.useEffect((function(){o.current&&l&&(null==_||_(),null==y||y(),u(!1))}),[l,_,y]),s.createElement("span",{className:"ms-layer",ref:r},o.current&&Ai.createPortal(s.createElement(Qi,i({},!d&&function(){Xi||(Xi={},["onClick","onContextMenu","onDoubleClick","onDrag","onDragEnd","onDragEnter","onDragExit","onDragLeave","onDragOver","onDragStart","onDrop","onMouseDown","onMouseEnter","onMouseLeave","onMouseMove","onMouseOver","onMouseOut","onMouseUp","onTouchMove","onTouchStart","onTouchCancel","onTouchEnd","onKeyDown","onKeyPress","onKeyUp","onFocus","onBlur","onChange","onInput","onInvalid","onSubmit"].forEach((function(e){return Xi[e]=ta})));return Xi}(),{className:w.content}),h),o.current))}));ea.displayName="LayerBase";var ta=function(e){e.eventPhase===Event.BUBBLING_PHASE&&"mouseenter"!==e.type&&"mouseleave"!==e.type&&"touchstart"!==e.type&&"touchend"!==e.type&&e.stopPropagation()};var na={root:"ms-Layer",rootNoHost:"ms-Layer--fixed",content:"ms-Layer-content"},ra=Je(ea,(function(e){var t=e.className,n=e.isNotHost,r=e.theme,o=Gn(na,r);return{root:[o.root,r.fonts.medium,n&&[o.rootNoHost,{position:"fixed",zIndex:Wn.Layer,top:0,left:0,bottom:0,right:0,visibility:"hidden"}],t],content:[o.content,{visibility:"visible"}]}}),void 0,{scope:"Layer",fields:["hostId","theme","styles"]}),oa=s.forwardRef((function(e,t){var n=e.layerProps,r=e.doNotLayer,o=a(e,["layerProps","doNotLayer"]),l=s.createElement(Oi,i({},o,{doNotLayer:r,ref:t}));return r?l:s.createElement(ra,i({},n),l)}));oa.displayName="Callout";var ia,aa=function(e){var t=e.item,n=e.classNames,r=t.iconProps;return s.createElement(Nr,i({},r,{className:n.icon}))},la=function(e){var t=e.item;return e.hasIcons?t.onRenderIcon?t.onRenderIcon(e,aa):aa(e):null},ua=function(e){var t=e.onCheckmarkClick,n=e.item,r=e.classNames,o=Eo(n);if(t){return s.createElement(Nr,{iconName:!1!==n.canCheck&&o?"CheckMark":"",className:r.checkmarkIcon,onClick:function(e){return t(n,e)}})}return null},sa=function(e){var t=e.item,n=e.classNames;return t.text||t.name?s.createElement("span",{className:n.label},t.text||t.name):null},ca=function(e){var t=e.item,n=e.classNames;return t.secondaryText?s.createElement("span",{className:n.secondaryText},t.secondaryText):null},da=function(e){var t=e.item,n=e.classNames,r=e.theme;return So(t)?s.createElement(Nr,i({iconName:Rt(r)?"ChevronLeft":"ChevronRight"},t.submenuIconProps,{className:n.subMenuIcon})):null},fa=function(e){function t(t){var n=e.call(this,t)||this;return n.openSubMenu=function(){var e=n.props,t=e.item,r=e.openSubMenu,o=e.getSubmenuTarget;if(o){var i=o();So(t)&&r&&i&&r(t,i)}},n.dismissSubMenu=function(){var e=n.props,t=e.item,r=e.dismissSubMenu;So(t)&&r&&r()},n.dismissMenu=function(e){var t=n.props.dismissMenu;t&&t(void 0,e)},be(n),n}return o(t,e),t.prototype.render=function(){var e=this.props,t=e.item,n=e.classNames,r=t.onRenderContent||this._renderLayout;return s.createElement("div",{className:t.split?n.linkContentMenu:n.linkContent},r(this.props,{renderCheckMarkIcon:ua,renderItemIcon:la,renderItemName:sa,renderSecondaryText:ca,renderSubMenuIcon:da}))},t.prototype._renderLayout=function(e,t){return s.createElement(s.Fragment,null,t.renderCheckMarkIcon(e),t.renderItemIcon(e),t.renderItemName(e),t.renderSecondaryText(e),t.renderSubMenuIcon(e))},t}(s.Component),pa=G((function(e){return It({wrapper:{display:"inline-flex",height:"100%",alignItems:"center"},divider:{width:1,height:"100%",backgroundColor:e.palette.neutralTertiaryAlt}})})),ma=Kn(0,639),ha=G((function(e){var t,n,r,o,a,l=e.semanticColors,u=e.fonts,s=e.palette,c=l.menuItemBackgroundHovered,d=l.menuItemTextHovered,f=l.menuItemBackgroundPressed,p=l.bodyDivider;return D({item:[u.medium,{color:l.bodyText,position:"relative",boxSizing:"border-box"}],divider:{display:"block",height:"1px",backgroundColor:p,position:"relative"},root:[Vn(e),u.medium,{color:l.bodyText,backgroundColor:"transparent",border:"none",width:"100%",height:36,lineHeight:36,display:"block",cursor:"pointer",padding:"0px 8px 0 4px",textAlign:"left"}],rootDisabled:{color:l.disabledBodyText,cursor:"default",pointerEvents:"none",selectors:(t={},t[jn]=i({color:"GrayText",opacity:1},{forcedColorAdjust:"none",MsHighContrastAdjust:"none"}),t)},rootHovered:{backgroundColor:c,color:d,selectors:{".ms-ContextualMenu-icon":{color:s.themeDarkAlt},".ms-ContextualMenu-submenuIcon":{color:s.neutralPrimary}}},rootFocused:{backgroundColor:s.white},rootChecked:{selectors:{".ms-ContextualMenu-checkmarkIcon":{color:s.neutralPrimary}}},rootPressed:{backgroundColor:f,selectors:{".ms-ContextualMenu-icon":{color:s.themeDark},".ms-ContextualMenu-submenuIcon":{color:s.neutralPrimary}}},rootExpanded:{backgroundColor:f,color:l.bodyTextChecked,selectors:(n={".ms-ContextualMenu-submenuIcon":(r={},r[jn]={color:"inherit"},r)},n[jn]=i({},{forcedColorAdjust:"none",MsHighContrastAdjust:"none"}),n)},linkContent:{whiteSpace:"nowrap",height:"inherit",display:"flex",alignItems:"center",maxWidth:"100%"},anchorLink:{padding:"0px 8px 0 4px",textRendering:"auto",color:"inherit",letterSpacing:"normal",wordSpacing:"normal",textTransform:"none",textIndent:"0px",textShadow:"none",textDecoration:"none",boxSizing:"border-box"},label:{margin:"0 4px",verticalAlign:"middle",display:"inline-block",flexGrow:"1",textOverflow:"ellipsis",whiteSpace:"nowrap"},secondaryText:{color:e.palette.neutralSecondary,paddingLeft:"20px",textAlign:"right"},icon:{display:"inline-block",minHeight:"1px",maxHeight:36,fontSize:Hn.medium,width:Hn.medium,margin:"0 4px",verticalAlign:"middle",flexShrink:"0",selectors:(o={},o[ma]={fontSize:Hn.large,width:Hn.large},o)},iconColor:{color:l.menuIcon},iconDisabled:{color:l.disabledBodyText},checkmarkIcon:{color:l.bodySubtext},subMenuIcon:{height:36,lineHeight:36,color:s.neutralSecondary,textAlign:"center",display:"inline-block",verticalAlign:"middle",flexShrink:"0",fontSize:Hn.small,selectors:(a={":hover":{color:s.neutralPrimary},":active":{color:s.neutralPrimary}},a[ma]={fontSize:Hn.medium},a)},splitButtonFlexContainer:[Vn(e),{display:"flex",height:36,flexWrap:"nowrap",justifyContent:"center",alignItems:"flex-start"}]})})),va=Kn(0,639),ga=G((function(e){var t;return It(pa(e),{wrapper:{position:"absolute",right:28,selectors:(t={},t[va]={right:32},t)},divider:{height:16,width:1}})})),ya={item:"ms-ContextualMenu-item",divider:"ms-ContextualMenu-divider",root:"ms-ContextualMenu-link",isChecked:"is-checked",isExpanded:"is-expanded",isDisabled:"is-disabled",linkContent:"ms-ContextualMenu-linkContent",linkContentMenu:"ms-ContextualMenu-linkContent",icon:"ms-ContextualMenu-icon",iconColor:"ms-ContextualMenu-iconColor",checkmarkIcon:"ms-ContextualMenu-checkmarkIcon",subMenuIcon:"ms-ContextualMenu-submenuIcon",label:"ms-ContextualMenu-itemText",secondaryText:"ms-ContextualMenu-secondaryText",splitMenu:"ms-ContextualMenu-splitMenu",screenReaderText:"ms-ContextualMenu-screenReaderText"},ba=G((function(e,t,n,r,o,i,a,l,u,s,c,d){var f,p,m,h,v=ha(e),g=Gn(ya,e);return It({item:[g.item,v.item,a],divider:[g.divider,v.divider,l],root:[g.root,v.root,r&&[g.isChecked,v.rootChecked],o&&v.anchorLink,n&&[g.isExpanded,v.rootExpanded],t&&[g.isDisabled,v.rootDisabled],!t&&!n&&[{selectors:(f={":hover":v.rootHovered,":active":v.rootPressed},f["."+ve+" &:focus, ."+ve+" &:focus:hover"]=v.rootFocused,f["."+ve+" &:hover"]={background:"inherit;"},f)}],d],splitPrimary:[v.root,{width:"calc(100% - 28px)"},r&&["is-checked",v.rootChecked],(t||c)&&["is-disabled",v.rootDisabled],!(t||c)&&!r&&[{selectors:(p={":hover":v.rootHovered},p[":hover ~ ."+g.splitMenu]=v.rootHovered,p[":active"]=v.rootPressed,p["."+ve+" &:focus, ."+ve+" &:focus:hover"]=v.rootFocused,p["."+ve+" &:hover"]={background:"inherit;"},p)}]],splitMenu:[g.splitMenu,v.root,{flexBasis:"0",padding:"0 8px",minWidth:"28px"},n&&["is-expanded",v.rootExpanded],t&&["is-disabled",v.rootDisabled],!t&&!n&&[{selectors:(m={":hover":v.rootHovered,":active":v.rootPressed},m["."+ve+" &:focus, ."+ve+" &:focus:hover"]=v.rootFocused,m["."+ve+" &:hover"]={background:"inherit;"},m)}]],anchorLink:v.anchorLink,linkContent:[g.linkContent,v.linkContent],linkContentMenu:[g.linkContentMenu,v.linkContent,{justifyContent:"center"}],icon:[g.icon,i&&v.iconColor,v.icon,u,t&&[g.isDisabled,v.iconDisabled]],iconColor:v.iconColor,checkmarkIcon:[g.checkmarkIcon,i&&v.checkmarkIcon,v.icon,u],subMenuIcon:[g.subMenuIcon,v.subMenuIcon,s,n&&{color:e.palette.neutralPrimary},t&&[v.iconDisabled]],label:[g.label,v.label],secondaryText:[g.secondaryText,v.secondaryText],splitContainer:[v.splitButtonFlexContainer,!t&&!r&&[{selectors:(h={},h["."+ve+" &:focus, ."+ve+" &:focus:hover"]=v.rootFocused,h)}]],screenReaderText:[g.screenReaderText,v.screenReaderText,$n,{visibility:"hidden"}]})})),_a=function(e){var t=e.theme,n=e.disabled,r=e.expanded,o=e.checked,i=e.isAnchorLink,a=e.knownIcon,l=e.itemClassName,u=e.dividerClassName,s=e.iconClassName,c=e.subMenuClassName,d=e.primaryDisabled,f=e.className;return ba(t,n,r,o,i,a,l,u,s,c,d,f)},ka=Je(fa,_a,void 0,{scope:"ContextualMenuItem"}),Ca=function(e){function t(t){var n=e.call(this,t)||this;return n._onItemMouseEnter=function(e){var t=n.props,r=t.item,o=t.onItemMouseEnter;o&&o(r,e,e.currentTarget)},n._onItemClick=function(e){var t=n.props,r=t.item,o=t.onItemClickBase;o&&o(r,e,e.currentTarget)},n._onItemMouseLeave=function(e){var t=n.props,r=t.item,o=t.onItemMouseLeave;o&&o(r,e)},n._onItemKeyDown=function(e){var t=n.props,r=t.item,o=t.onItemKeyDown;o&&o(r,e)},n._onItemMouseMove=function(e){var t=n.props,r=t.item,o=t.onItemMouseMove;o&&o(r,e,e.currentTarget)},n._getSubmenuTarget=function(){},be(n),n}return o(t,e),t.prototype.shouldComponentUpdate=function(e){return!m(e,this.props)},t}(s.Component);function wa(e){var t=Object(s.useRef)();return Object(s.useEffect)((function(){t.current=e})),t.current}!function(e){e.KEYTIP_ADDED="keytipAdded",e.KEYTIP_REMOVED="keytipRemoved",e.KEYTIP_UPDATED="keytipUpdated",e.PERSISTED_KEYTIP_ADDED="persistedKeytipAdded",e.PERSISTED_KEYTIP_REMOVED="persistedKeytipRemoved",e.PERSISTED_KEYTIP_EXECUTE="persistedKeytipExecute",e.ENTER_KEYTIP_MODE="enterKeytipMode",e.EXIT_KEYTIP_MODE="exitKeytipMode"}(ia||(ia={}));var xa=function(){function e(){this.keytips={},this.persistedKeytips={},this.sequenceMapping={},this.inKeytipMode=!1,this.shouldEnterKeytipMode=!0,this.delayUpdatingKeytipChange=!1}return e.getInstance=function(){return this._instance},e.prototype.init=function(e){this.delayUpdatingKeytipChange=e},e.prototype.register=function(e,t){void 0===t&&(t=!1);var n=e;t||(n=this.addParentOverflow(e),this.sequenceMapping[n.keySequences.toString()]=n);var r=this._getUniqueKtp(n);if(t?this.persistedKeytips[r.uniqueID]=r:this.keytips[r.uniqueID]=r,this.inKeytipMode||!this.delayUpdatingKeytipChange){var o=t?ia.PERSISTED_KEYTIP_ADDED:ia.KEYTIP_ADDED;g.raise(this,o,{keytip:n,uniqueID:r.uniqueID})}return r.uniqueID},e.prototype.update=function(e,t){var n=this.addParentOverflow(e),r=this._getUniqueKtp(n,t),o=this.keytips[t];o&&(r.keytip.visible=o.keytip.visible,this.keytips[t]=r,delete this.sequenceMapping[o.keytip.keySequences.toString()],this.sequenceMapping[r.keytip.keySequences.toString()]=r.keytip,!this.inKeytipMode&&this.delayUpdatingKeytipChange||g.raise(this,ia.KEYTIP_UPDATED,{keytip:r.keytip,uniqueID:r.uniqueID}))},e.prototype.unregister=function(e,t,n){void 0===n&&(n=!1),n?delete this.persistedKeytips[t]:delete this.keytips[t],!n&&delete this.sequenceMapping[e.keySequences.toString()];var r=n?ia.PERSISTED_KEYTIP_REMOVED:ia.KEYTIP_REMOVED;!this.inKeytipMode&&this.delayUpdatingKeytipChange||g.raise(this,r,{keytip:e,uniqueID:t})},e.prototype.enterKeytipMode=function(){g.raise(this,ia.ENTER_KEYTIP_MODE)},e.prototype.exitKeytipMode=function(){g.raise(this,ia.EXIT_KEYTIP_MODE)},e.prototype.getKeytips=function(){var e=this;return Object.keys(this.keytips).map((function(t){return e.keytips[t].keytip}))},e.prototype.addParentOverflow=function(e){var t=u([],e.keySequences);if(t.pop(),0!==t.length){var n=this.sequenceMapping[t.toString()];if(n&&n.overflowSetSequence)return i(i({},e),{overflowSetSequence:n.overflowSetSequence})}return e},e.prototype.menuExecute=function(e,t){g.raise(this,ia.PERSISTED_KEYTIP_EXECUTE,{overflowButtonSequences:e,keytipSequences:t})},e.prototype._getUniqueKtp=function(e,t){return void 0===t&&(t=Se()),{keytip:i({},e),uniqueID:t}},e._instance=new e,e}();function Ea(e){return e.reduce((function(e,t){return e+"-"+t.split("").join("-")}),"ktp")}function Sa(e){var t=s.useRef(),n=e.keytipProps?i({disabled:e.disabled},e.keytipProps):void 0,r=fi(xa.getInstance()),o=wa(e);Wt((function(){t.current&&n&&((null==o?void 0:o.keytipProps)!==e.keytipProps||(null==o?void 0:o.disabled)!==e.disabled)&&r.update(n,t.current)})),Wt((function(){return n&&(t.current=r.register(n)),function(){n&&r.unregister(n,t.current)}}),[]);var a={ariaDescribedBy:void 0,keytipId:void 0};return n&&(a=function(e,t,n){var r=e.addParentOverflow(t),o=$e(n,function(e){return e.length?" ktp-layer-id "+Ea(e):" ktp-layer-id"}(r.keySequences)),i=u([],r.keySequences);r.overflowSetSequence&&(i=function(e,t){var n,r,o,i=t.length,a=u([],t).pop(),l=u([],e);return n=i-1,r=a,(o=l.slice()).splice(n,0,r),o}(i,r.overflowSetSequence));var a=Ea(i);return{ariaDescribedBy:o,keytipId:a}}(r,n,e.ariaDescribedBy)),a}var Ia=function(e){var t,n=e.children,r=Sa(a(e,["children"])),o=r.keytipId,i=r.ariaDescribedBy;return n(((t={})["data-ktp-target"]=o,t["data-ktp-execute-target"]=o,t["aria-describedby"]=i,t))},Ta=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t._anchor=s.createRef(),t._getMemoizedMenuButtonKeytipProps=G((function(e){return i(i({},e),{hasMenu:!0})})),t._getSubmenuTarget=function(){return t._anchor.current?t._anchor.current:void 0},t._onItemClick=function(e){var n=t.props,r=n.item,o=n.onItemClick;o&&o(r,e)},t._renderAriaDescription=function(e,n){return e?s.createElement("span",{id:t._ariaDescriptionId,className:n},e):null},t}return o(t,e),t.prototype.render=function(){var e=this,t=this.props,n=t.item,r=t.classNames,o=t.index,a=t.focusableElementIndex,l=t.totalItemCount,u=t.hasCheckmarks,c=t.hasIcons,d=t.contextualMenuItemAs,f=void 0===d?ka:d,p=t.expandedMenuItemKey,m=t.onItemClick,h=t.openSubMenu,v=t.dismissSubMenu,g=t.dismissMenu,y=n.rel;n.target&&"_blank"===n.target.toLowerCase()&&(y=y||"nofollow noopener noreferrer");var b=So(n),_=Ae(n,Fe),k=Io(n),C=n.itemProps,w=n.ariaDescription,x=n.keytipProps;x&&b&&(x=this._getMemoizedMenuButtonKeytipProps(x)),w&&(this._ariaDescriptionId=Se());var E=$e(n.ariaDescribedBy,w?this._ariaDescriptionId:void 0,_["aria-describedby"]),S={"aria-describedby":E};return s.createElement("div",null,s.createElement(Ia,{keytipProps:n.keytipProps,ariaDescribedBy:E,disabled:k},(function(t){return s.createElement("a",i({},S,_,t,{ref:e._anchor,href:n.href,target:n.target,rel:y,className:r.root,role:"menuitem","aria-haspopup":b||void 0,"aria-expanded":b?n.key===p:void 0,"aria-posinset":a+1,"aria-setsize":l,"aria-disabled":Io(n),style:n.style,onClick:e._onItemClick,onMouseEnter:e._onItemMouseEnter,onMouseLeave:e._onItemMouseLeave,onMouseMove:e._onItemMouseMove,onKeyDown:b?e._onItemKeyDown:void 0}),s.createElement(f,i({componentRef:n.componentRef,item:n,classNames:r,index:o,onCheckmarkClick:u&&m?m:void 0,hasIcons:c,openSubMenu:h,dismissSubMenu:v,dismissMenu:g,getSubmenuTarget:e._getSubmenuTarget},C)),e._renderAriaDescription(w,r.screenReaderText))})))},t}(Ca),Pa=zt(),Ma=s.forwardRef((function(e,t){var n=e.styles,r=e.theme,o=e.getClassNames,i=e.className,a=Pa(n,{theme:r,getClassNames:o,className:i});return s.createElement("span",{className:a.wrapper,ref:t},s.createElement("span",{className:a.divider}))}));Ma.displayName="VerticalDividerBase";var Da=Je(Ma,(function(e){var t=e.theme,n=e.getClassNames,r=e.className;if(!t)throw new Error("Theme is undefined or null.");if(n){var o=n(t);return{wrapper:[o.wrapper],divider:[o.divider]}}return{wrapper:[{display:"inline-flex",height:"100%",alignItems:"center"},r],divider:[{width:1,height:"100%",backgroundColor:t.palette.neutralTertiaryAlt}]}}),void 0,{scope:"VerticalDivider"}),Na=function(e){function t(t){var n=e.call(this,t)||this;return n._getMemoizedMenuButtonKeytipProps=G((function(e){return i(i({},e),{hasMenu:!0})})),n._onItemKeyDown=function(e){var t=n.props,r=t.item,o=t.onItemKeyDown;e.which===oe?(n._executeItemClick(e),e.preventDefault(),e.stopPropagation()):o&&o(r,e)},n._getSubmenuTarget=function(){return n._splitButton},n._renderAriaDescription=function(e,t){return e?s.createElement("span",{id:n._ariaDescriptionId,className:t},e):null},n._onItemMouseEnterPrimary=function(e){var t=n.props,r=t.item,o=t.onItemMouseEnter;o&&o(i(i({},r),{subMenuProps:void 0,items:void 0}),e,n._splitButton)},n._onItemMouseEnterIcon=function(e){var t=n.props,r=t.item,o=t.onItemMouseEnter;o&&o(r,e,n._splitButton)},n._onItemMouseMovePrimary=function(e){var t=n.props,r=t.item,o=t.onItemMouseMove;o&&o(i(i({},r),{subMenuProps:void 0,items:void 0}),e,n._splitButton)},n._onItemMouseMoveIcon=function(e){var t=n.props,r=t.item,o=t.onItemMouseMove;o&&o(r,e,n._splitButton)},n._onIconItemClick=function(e){var t=n.props,r=t.item,o=t.onItemClickBase;o&&o(r,e,n._splitButton?n._splitButton:e.currentTarget)},n._executeItemClick=function(e){var t=n.props,r=t.item,o=t.executeItemClick,i=t.onItemClick;if(!r.disabled&&!r.isDisabled)return n._processingTouch&&i?i(r,e):void(o&&o(r,e))},n._onTouchStart=function(e){n._splitButton&&!("onpointerdown"in n._splitButton)&&n._handleTouchAndPointerEvent(e)},n._onPointerDown=function(e){"touch"===e.pointerType&&(n._handleTouchAndPointerEvent(e),e.preventDefault(),e.stopImmediatePropagation())},n._async=new p(n),n._events=new g(n),n}return o(t,e),t.prototype.componentDidMount=function(){this._splitButton&&"onpointerdown"in this._splitButton&&this._events.on(this._splitButton,"pointerdown",this._onPointerDown,!0)},t.prototype.componentWillUnmount=function(){this._async.dispose(),this._events.dispose()},t.prototype.render=function(){var e=this,t=this.props,n=t.item,r=t.classNames,o=t.index,a=t.focusableElementIndex,l=t.totalItemCount,u=t.hasCheckmarks,c=t.hasIcons,d=t.onItemMouseLeave,f=t.expandedMenuItemKey,p=So(n),m=n.keytipProps;m&&(m=this._getMemoizedMenuButtonKeytipProps(m));var h=n.ariaDescription;return h&&(this._ariaDescriptionId=Se()),s.createElement(Ia,{keytipProps:m,disabled:Io(n)},(function(t){return s.createElement("div",{"data-ktp-target":t["data-ktp-target"],ref:function(t){return e._splitButton=t},role:To(n),"aria-label":n.ariaLabel,className:r.splitContainer,"aria-disabled":Io(n),"aria-expanded":p?n.key===f:void 0,"aria-haspopup":!0,"aria-describedby":$e(n.ariaDescribedBy,h?e._ariaDescriptionId:void 0,t["aria-describedby"]),"aria-checked":n.isChecked||n.checked,"aria-posinset":a+1,"aria-setsize":l,onMouseEnter:e._onItemMouseEnterPrimary,onMouseLeave:d?d.bind(e,i(i({},n),{subMenuProps:null,items:null})):void 0,onMouseMove:e._onItemMouseMovePrimary,onKeyDown:e._onItemKeyDown,onClick:e._executeItemClick,onTouchStart:e._onTouchStart,tabIndex:0,"data-is-focusable":!0,"aria-roledescription":n["aria-roledescription"]},e._renderSplitPrimaryButton(n,r,o,u,c),e._renderSplitDivider(n),e._renderSplitIconButton(n,r,o,t),e._renderAriaDescription(h,r.screenReaderText))}))},t.prototype._renderSplitPrimaryButton=function(e,t,n,r,o){var a=this.props,l=a.contextualMenuItemAs,u=void 0===l?ka:l,c=a.onItemClick,d={key:e.key,disabled:Io(e)||e.primaryDisabled,name:e.name,text:e.text||e.name,secondaryText:e.secondaryText,className:t.splitPrimary,canCheck:e.canCheck,isChecked:e.isChecked,checked:e.checked,iconProps:e.iconProps,onRenderIcon:e.onRenderIcon,data:e.data,"data-is-focusable":!1},f=e.itemProps;return s.createElement("button",i({},Ae(d,Be)),s.createElement(u,i({"data-is-focusable":!1,item:d,classNames:t,index:n,onCheckmarkClick:r&&c?c:void 0,hasIcons:o},f)))},t.prototype._renderSplitDivider=function(e){var t=e.getSplitButtonVerticalDividerClassNames||ga;return s.createElement(Da,{getClassNames:t})},t.prototype._renderSplitIconButton=function(e,t,n,r){var o=this.props,a=o.contextualMenuItemAs,l=void 0===a?ka:a,u=o.onItemMouseLeave,c=o.onItemMouseDown,d=o.openSubMenu,f=o.dismissSubMenu,p=o.dismissMenu,m={onClick:this._onIconItemClick,disabled:Io(e),className:t.splitMenu,subMenuProps:e.subMenuProps,submenuIconProps:e.submenuIconProps,split:!0,key:e.key},h=i(i({},Ae(m,Be)),{onMouseEnter:this._onItemMouseEnterIcon,onMouseLeave:u?u.bind(this,e):void 0,onMouseDown:function(t){return c?c(e,t):void 0},onMouseMove:this._onItemMouseMoveIcon,"data-is-focusable":!1,"data-ktp-execute-target":r["data-ktp-execute-target"],"aria-hidden":!0}),v=e.itemProps;return s.createElement("button",i({},h),s.createElement(l,i({componentRef:e.componentRef,item:m,classNames:t,index:n,hasIcons:!1,openSubMenu:d,dismissSubMenu:f,dismissMenu:p,getSubmenuTarget:this._getSubmenuTarget},v)))},t.prototype._handleTouchAndPointerEvent=function(e){var t=this,n=this.props.onTap;n&&n(e),this._lastTouchTimeoutId&&(this._async.clearTimeout(this._lastTouchTimeoutId),this._lastTouchTimeoutId=void 0),this._processingTouch=!0,this._lastTouchTimeoutId=this._async.setTimeout((function(){t._processingTouch=!1,t._lastTouchTimeoutId=void 0}),500)},t}(Ca),Ra=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t._btn=s.createRef(),t._getMemoizedMenuButtonKeytipProps=G((function(e){return i(i({},e),{hasMenu:!0})})),t._renderAriaDescription=function(e,n){return e?s.createElement("span",{id:t._ariaDescriptionId,className:n},e):null},t._getSubmenuTarget=function(){return t._btn.current?t._btn.current:void 0},t}return o(t,e),t.prototype.render=function(){var e=this,t=this.props,n=t.item,r=t.classNames,o=t.index,a=t.focusableElementIndex,l=t.totalItemCount,u=t.hasCheckmarks,c=t.hasIcons,d=t.contextualMenuItemAs,f=void 0===d?ka:d,p=t.expandedMenuItemKey,m=t.onItemMouseDown,h=t.onItemClick,v=t.openSubMenu,g=t.dismissSubMenu,y=t.dismissMenu,b=Eo(n),_=null!==b,k=To(n),C=So(n),w=n.itemProps,x=n.ariaLabel,E=n.ariaDescription,S=Ae(n,Be);delete S.disabled;var I=n.role||k;E&&(this._ariaDescriptionId=Se());var T=$e(n.ariaDescribedBy,E?this._ariaDescriptionId:void 0,S["aria-describedby"]),P={className:r.root,onClick:this._onItemClick,onKeyDown:C?this._onItemKeyDown:void 0,onMouseEnter:this._onItemMouseEnter,onMouseLeave:this._onItemMouseLeave,onMouseDown:function(e){return m?m(n,e):void 0},onMouseMove:this._onItemMouseMove,href:n.href,title:n.title,"aria-label":x,"aria-describedby":T,"aria-haspopup":C||void 0,"aria-expanded":C?n.key===p:void 0,"aria-posinset":a+1,"aria-setsize":l,"aria-disabled":Io(n),"aria-checked":"menuitemcheckbox"!==I&&"menuitemradio"!==I||!_?void 0:!!b,"aria-selected":"menuitem"===I&&_?!!b:void 0,role:I,style:n.style},M=n.keytipProps;return M&&C&&(M=this._getMemoizedMenuButtonKeytipProps(M)),s.createElement(Ia,{keytipProps:M,ariaDescribedBy:T,disabled:Io(n)},(function(t){return s.createElement("button",i({ref:e._btn},S,P,t),s.createElement(f,i({componentRef:n.componentRef,item:n,classNames:r,index:o,onCheckmarkClick:u&&h?h:void 0,hasIcons:c,openSubMenu:v,dismissSubMenu:g,dismissMenu:y,getSubmenuTarget:e._getSubmenuTarget},w)),e._renderAriaDescription(E,r.screenReaderText))}))},t}(Ca);function Fa(e,t){var n=s.useRef(t);return n.current||(n.current=Se(e)),n.current}var Ba=["setState","render","componentWillMount","UNSAFE_componentWillMount","componentDidMount","componentWillReceiveProps","UNSAFE_componentWillReceiveProps","shouldComponentUpdate","componentWillUpdate","getSnapshotBeforeUpdate","UNSAFE_componentWillUpdate","componentDidUpdate","componentWillUnmount"];var La;!function(e){function t(t){var n=e.call(this,t)||this;return n._updateComposedComponentRef=n._updateComposedComponentRef.bind(n),n}o(t,e),t.prototype._updateComposedComponentRef=function(e){var t;this._composedComponentInstance=e,e?this._hoisted=function(e,t,n){void 0===n&&(n=Ba);var r=[],o=function(o){"function"!=typeof t[o]||void 0!==e[o]||n&&-1!==n.indexOf(o)||(r.push(o),e[o]=function(){for(var e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];t[o].apply(t,e)})};for(var i in t)o(i);return r}(this,e):this._hoisted&&(t=this,this._hoisted.forEach((function(e){return delete t[e]})))}}(s.Component);!function(e){e[e.small=0]="small",e[e.medium=1]="medium",e[e.large=2]="large",e[e.xLarge=3]="xLarge",e[e.xxLarge=4]="xxLarge",e[e.xxxLarge=5]="xxxLarge",e[e.unknown=999]="unknown"}(La||(La={}));var Oa,Aa,za=[479,639,1023,1365,1919,99999999];function Ha(){var e;return null!==(e=null!=Oa?Oa:Aa)&&void 0!==e?e:La.large}function Ua(e){var t=La.small;if(e){try{for(;e.innerWidth>za[t];)t++}catch(e){t=Ha()}Aa=t}else{if(void 0===Oa)throw new Error("Content was rendered in a server environment without providing a default responsive mode. Call setResponsiveMode to define what the responsive mode is.");t=Oa}return t}var Wa=s.createContext({}),ja=zt(),Ka=zt(),Va={items:[],shouldFocusOnMount:!0,gapSpace:0,directionalHint:Ur,beakWidth:16};function qa(e,t){var n=null==t?void 0:t.target,r=e.subMenuProps?e.subMenuProps.items:e.items;if(r){for(var o=[],l=0,u=r;l<u.length;l++){var s=u[l];if(s.preferMenuTargetAsEventTarget){var c=s.onClick,d=a(s,["onClick"]);o.push(i(i({},d),{onClick:el(c,n)}))}else o.push(s)}return o}}var $a=G((function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return function(t){return Qe.apply(void 0,u([t,_a],e))}}));function Qa(e,t){var n=e.hidden,r=e.items,o=e.theme,i=e.className,a=e.id,l=e.target,u=s.useState(),c=u[0],d=u[1],f=s.useState(),p=f[0],m=f[1],v=s.useState(),g=v[0],y=v[1],b=Fa("ContextualMenu",a),_=s.useCallback((function(){y(void 0),d(void 0),m(void 0)}),[]),k=s.useCallback((function(e,t,n){var r=e.key;c!==r&&(t.focus(),y(n),d(r),m(t))}),[c]);s.useEffect((function(){n&&_()}),[n,_]);var C=function(e,t){var n=s.useRef(!1);return s.useEffect((function(){return n.current=!0,function(){n.current=!1}}),[]),function(r,o){o?e(r,o):n.current&&t()}}(t,_);return[c,k,function(){var e=function e(t,n){for(var r=0,o=n;r<o.length;r++){var i=o[r];if(i.itemType===Qr.Section&&i.sectionProps){var a=e(t,i.sectionProps.items);if(a)return a}else if(i.key&&i.key===t)return i}}(c,r),t=null;if(e&&(t={items:qa(e,{target:l}),target:p,onDismiss:C,isSubMenu:!0,id:b,shouldFocusOnMount:!0,shouldFocusOnContainer:g,directionalHint:Rt(o)?Wr:Vr,className:i,gapSpace:0,isBeakVisible:!1},e.subMenuProps&&h(t,e.subMenuProps),e.preferMenuTargetAsEventTarget)){var n=e.onItemClick;t.onItemClick=el(n,l)}return t},C]}function Ga(e,t,n,r){var o=e.theme,i=e.isSubMenu,a=e.focusZoneProps,l=void 0===a?{}:a,u=l.checkForNoWrap,c=l.direction,d=void 0===c?Yr.vertical:c,f=s.useRef(),p=function(e,n,r){var o=!1;return n(e)&&(t(e,r),e.preventDefault(),e.stopPropagation(),o=!0),o},m=function(e){return e.which===ae||function(e){var t=Rt(o)?me:fe;return!(e.which!==t||!i)&&!(d!==Yr.vertical&&(!u||lo(e.target,"data-no-horizontal-wrap")))}(e)||e.which===pe&&(e.altKey||e.metaKey)},h=function(e){f.current=Za(e);var t=e.which===ae&&(_o()||wo());return p(e,m,t)},v=function(e){var t=f.current&&Za(e);return f.current=!1,!!t&&!(wo()||_o())};return[h,function(e){return p(e,v,!0)},function(e){if(!h(e)&&n.current){var t,r,o=!(!e.altKey&&!e.metaKey),i=e.which===pe,a=e.which===he;if(!o&&(i||a)){var l=i?(t=n.current,r=n.current.lastChild,to(t,r,!0,!1,!0,!0)):function(e,t,n){return no(e,t,!0,!1,!1,n)}(n.current,n.current.firstChild,!0);l&&(l.focus(),e.preventDefault(),e.stopPropagation())}}},function(e,t){var n=Rt(o)?fe:me;e.disabled||t.which!==n&&t.which!==oe&&(t.which!==he||!t.altKey&&!t.metaKey)||(r(e,t.currentTarget),t.preventDefault())}]}var Ya=s.memo(s.forwardRef((function(e,t){var n,r=xo(Va,e),o=(r.ref,a(r,["ref"])),l=s.useRef(null),u=pi(),c=Fa("ContextualMenu",o.id),d=function(e,t){var n;return null===(n=o.onDismiss)||void 0===n?void 0:n.call(o,e,t)},p=wi(o.target,l),m=p[0],h=p[1],v=function(e,t){var n=e.hidden,r=e.onRestoreFocus,o=s.useRef(),i=s.useCallback((function(e){var t,n;r?r(e):(null==e?void 0:e.documentContainsFocus)&&(null===(n=null===(t=o.current)||void 0===t?void 0:t.focus)||void 0===n||n.call(t))}),[r]);return Wt((function(){var e;n?o.current&&(i({originalElement:o.current,containsFocus:!0,documentContainsFocus:(null===(e=Pt())||void 0===e?void 0:e.hasFocus())||!1}),o.current=void 0):o.current=null==t?void 0:t.document.activeElement}),[n,null==t?void 0:t.document.activeElement,i]),[i]}(o,h)[0],g=Qa(o,d),y=g[0],b=g[1],_=g[2],k=g[3],C=function(e){var t=e.delayUpdateFocusOnHover,n=e.hidden,r=s.useRef(!t),o=s.useRef(!1);s.useEffect((function(){r.current=!t,o.current=!n&&(!t&&o.current)}),[t,n]);var i=s.useCallback((function(){t&&(r.current=!1)}),[t]);return[r,o,i]}(o),w=C[0],x=C[1],E=C[2],S=function(e){var t=s.useRef(!0),n=s.useRef();return[function(){t.current||void 0===n.current?t.current=!1:(e.clearTimeout(n.current),n.current=void 0),n.current=e.setTimeout((function(){t.current=!0}),250)},t]}(u),I=S[0],T=S[1],P=function(e,t){var n=e.subMenuHoverDelay,r=void 0===n?250:n,o=s.useRef(void 0),i=function(){void 0!==o.current&&(t.clearTimeout(o.current),o.current=void 0)};return[i,function(e){o.current=t.setTimeout((function(){e(),i()}),r)},o]}(o,u),M=P[0],D=P[1],N=P[2],R=function(e,t){var n=s.useState(Ha()),r=n[0],o=n[1],i=s.useCallback((function(){var t=Ua(f(e.current));r!==t&&o(t)}),[e,r]);return mi(vi(),"resize",i),s.useEffect((function(){void 0===t&&i()}),[t]),null!=t?t:r}(l,o.responsiveMode);!function(e,t){var n=e.hidden,r=void 0!==n&&n,o=e.onMenuDismissed,i=e.onMenuOpened,a=wa(r),l=s.useRef(i),u=s.useRef(o),c=s.useRef(e);l.current=i,u.current=o,c.current=e,s.useEffect((function(){var e,t;r&&!1===a?null===(e=u.current)||void 0===e||e.call(u,c.current):r||!1===a||null===(t=l.current)||void 0===t||t.call(l,c.current)}),[r,a]),s.useEffect((function(){return function(){var e;return null===(e=u.current)||void 0===e?void 0:e.call(u,c.current)}}),[])}(o);var F=Ga(o,d,l,b),B=F[0],L=F[1],O=F[2],A=F[3],z=function(e,t,n,r,o,i,a,l,u,s,c,d,f){var p=e.target,m=function(){return!t.current||!i.current},h=function(e,t,n){var r=n||t.currentTarget;e.key!==a&&(s(),void 0===a&&r.focus(),So(e)?(t.stopPropagation(),u((function(){r.focus(),c(e,r,!0)}))):u((function(){d(t),r.focus()})))},v=function(t,n,r){var o=qa(t,{target:p});if(s(),So(t)||o&&o.length){if(t.key!==a){var i="boolean"==typeof e.shouldFocusOnContainer?e.shouldFocusOnContainer:"mouse"===n.nativeEvent.pointerType;c(t,r,i)}}else g(t,n);n.stopPropagation(),n.preventDefault()},g=function(t,n){if(!t.disabled&&!t.isDisabled){t.preferMenuTargetAsEventTarget&&tl(n,p);var r=!1;t.onClick?r=!!t.onClick(n,t):e.onItemClick&&(r=!!e.onItemClick(n,t)),!r&&n.defaultPrevented||f(n,!0)}};return[function(e,t,n){o.current&&(i.current=!0),m()||h(e,t,n)},function(e,a,l){var u=a.currentTarget;o.current&&(i.current=!0,t.current&&void 0===n.current&&u!==(null==r?void 0:r.document.activeElement)&&h(e,a,l))},function(e,t){var n;if(!m()&&(s(),void 0===a))if(l.current.setActive)try{l.current.setActive()}catch(e){}else null===(n=l.current)||void 0===n||n.focus()},function(e,t){v(e,t,t.currentTarget)},function(e,t){g(e,t),t.stopPropagation()},g,v]}(o,T,N,h,w,x,y,l,D,M,b,k,d),H=z[0],U=z[1],W=z[2],j=z[3],K=z[4],V=z[5],q=z[6],$=function(e,t,n){var r=0,o=e.items,i=e.totalItemCount,a=e.hasCheckmarks,l=e.hasIcons;return s.createElement("ul",{className:t.list,onKeyDown:B,onKeyUp:L,role:"presentation"},o.map((function(e,n){var o=Q(e,n,r,i,a,l,t);if(e.itemType!==Qr.Divider&&e.itemType!==Qr.Header){var u=e.customOnRenderListLength?e.customOnRenderListLength:1;r+=u}return o})))},Q=function(e,t,n,r,i,a,l){var u,c,d=[],f=e.iconProps||{iconName:"None"},p=e.getItemClassNames,m=e.itemProps,h=m?m.styles:void 0,v=e.itemType===Qr.Divider?e.className:void 0,g=e.submenuIconProps?e.submenuIconProps.className:"";if(p)c=p(o.theme,Io(e),y===e.key,!!Eo(e),!!e.href,"None"!==f.iconName,e.className,v,f.className,g,e.primaryDisabled);else{var b={theme:o.theme,disabled:Io(e),expanded:y===e.key,checked:!!Eo(e),isAnchorLink:!!e.href,knownIcon:"None"!==f.iconName,itemClassName:e.className,dividerClassName:v,iconClassName:f.className,subMenuClassName:g,primaryDisabled:e.primaryDisabled};c=Ka($a(null===(u=l.subComponentStyles)||void 0===u?void 0:u.menuItem,h),b)}switch("-"!==e.text&&"-"!==e.name||(e.itemType=Qr.Divider),e.itemType){case Qr.Divider:d.push(Z(t,c));break;case Qr.Header:d.push(Z(t,c));var _=ee(e,c,l,t,i,a);d.push(Y(_,e.key||t,c,e.title));break;case Qr.Section:d.push(G(e,c,l,t,i,a));break;default:var k=function(){return X(e,c,t,n,r,i,a)},C=o.onRenderContextualMenuItem?o.onRenderContextualMenuItem(e,k):k();d.push(Y(C,e.key||t,c,e.title))}return s.createElement(s.Fragment,{key:e.key},d)},G=function(e,t,n,r,o,a){var l=e.sectionProps;if(l){var u,d;if(l.title){var f=void 0,p="";if("string"==typeof l.title){var m=c+l.title.replace(/\s/g,"");f={key:"section-"+l.title+"-title",itemType:Qr.Header,text:l.title,id:m},p=m}else{var h=l.title.id||c+l.title.key.replace(/\s/g,"");f=i(i({},l.title),{id:h}),p=h}f&&(d={role:"group","aria-labelledby":p},u=ee(f,t,n,r,o,a))}return l.items&&l.items.length>0?s.createElement("li",{role:"presentation",key:l.key||e.key||"section-"+r},s.createElement("div",i({},d),s.createElement("ul",{className:n.list,role:"presentation"},l.topDivider&&Z(r,t,!0,!0),u&&Y(u,e.key||r,t,e.title),l.items.map((function(e,t){return Q(e,t,t,l.items.length,o,a,n)})),l.bottomDivider&&Z(r,t,!1,!0)))):void 0}},Y=function(e,t,n,r){return s.createElement("li",{role:"presentation",title:r,key:t,className:n.item},e)},Z=function(e,t,n,r){return r||e>0?s.createElement("li",{role:"separator",key:"separator-"+e+(void 0===n?"":n?"-top":"-bottom"),className:t.divider,"aria-hidden":"true"}):null},X=function(e,t,n,r,a,l,u){if(e.onRender)return e.onRender(i({"aria-posinset":r+1,"aria-setsize":a},e),d);var c={item:e,classNames:t,index:n,focusableElementIndex:r,totalItemCount:a,hasCheckmarks:l,hasIcons:u,contextualMenuItemAs:o.contextualMenuItemAs,onItemMouseEnter:H,onItemMouseLeave:W,onItemMouseMove:U,onItemMouseDown:Xa,executeItemClick:V,onItemKeyDown:A,expandedMenuItemKey:y,openSubMenu:b,dismissSubMenu:k,dismissMenu:d};return e.href?s.createElement(Ta,i({},c,{onItemClick:K})):e.split&&So(e)?s.createElement(Na,i({},c,{onItemClick:j,onItemClickBase:q,onTap:M})):s.createElement(Ra,i({},c,{onItemClick:j,onItemClickBase:q}))},ee=function(e,t,n,r,a,l){var u=o.contextualMenuItemAs,c=void 0===u?ka:u,d=e.itemProps,f=e.id,p=d&&Ae(d,Oe);return s.createElement("div",i({id:f,className:n.header},p,{style:e.style}),s.createElement(c,i({item:e,classNames:t,index:r,onCheckmarkClick:a?j:void 0,hasIcons:l},d)))},te=o.isBeakVisible,ne=o.items,re=o.labelElementId,oe=o.id,ie=o.className,ae=o.beakWidth,le=o.directionalHint,ue=o.directionalHintForRTL,se=o.alignTargetEdge,ce=o.gapSpace,de=o.coverTarget,fe=o.ariaLabel,pe=o.doNotLayer,me=o.target,he=o.bounds,ve=o.useTargetWidth,ge=o.useTargetAsMinWidth,ye=o.directionalHintFixed,be=o.shouldFocusOnMount,_e=o.shouldFocusOnContainer,ke=o.title,Ce=o.styles,we=o.theme,xe=o.calloutProps,Ee=o.onRenderSubMenu,Se=void 0===Ee?Ja:Ee,Ie=o.onRenderMenuList,Te=void 0===Ie?function(e,t){return $(e,De)}:Ie,Pe=o.focusZoneProps,Me=o.getMenuClassNames,De=Me?Me(we,ie):ja(Ce,{theme:we,className:ie}),Ne=function e(t){for(var n=0,r=t;n<r.length;n++){var o=r[n];if(o.iconProps)return!0;if(o.itemType===Qr.Section&&o.sectionProps&&e(o.sectionProps.items))return!0}return!1}(ne);var Re,Fe=i(i({direction:Yr.vertical,handleTabKey:Zr,isCircularNavigation:!0},Pe),{className:J(De.root,null===(n=o.focusZoneProps)||void 0===n?void 0:n.className)}),Be=function(e){return e.some((function(e){return!!e.canCheck||!(!e.sectionProps||!e.sectionProps.items.some((function(e){return!0===e.canCheck})))}))}(ne),Le=y&&!0!==o.hidden?_():null;te=void 0===te?R<=La.medium:te;var ze=m.current;if((ve||ge)&&ze&&ze.offsetWidth){var He=ze.getBoundingClientRect().width-2;ve?Re={width:He}:ge&&(Re={minWidth:He})}if(ne&&ne.length>0){for(var Ue=0,We=0,je=ne;We<je.length;We++){var Ke=je[We];if(Ke.itemType!==Qr.Divider&&Ke.itemType!==Qr.Header){var Ve=Ke.customOnRenderListLength?Ke.customOnRenderListLength:1;Ue+=Ve}}var qe=De.subComponentStyles?De.subComponentStyles.callout:void 0;return s.createElement(Wa.Consumer,null,(function(e){return s.createElement(oa,i({styles:qe,onRestoreFocus:v},xe,{target:me||e.target,isBeakVisible:te,beakWidth:ae,directionalHint:le,directionalHintForRTL:ue,gapSpace:ce,coverTarget:de,doNotLayer:pe,className:J("ms-ContextualMenu-Callout",xe&&xe.className),setInitialFocus:be,onDismiss:o.onDismiss||e.onDismiss,onScroll:I,bounds:he,directionalHintFixed:ye,alignTargetEdge:se,hidden:o.hidden||e.hidden,ref:t}),s.createElement("div",{style:Re,ref:l,id:oe,className:De.container,tabIndex:_e?0:-1,onKeyDown:O,onKeyUp:L,onFocusCapture:E,"aria-label":fe,"aria-labelledby":re,role:"menu"},ke&&s.createElement("div",{className:De.title}," ",ke," "),ne&&ne.length?function(e,t){var n=o.focusZoneAs,r=void 0===n?bo:n;return s.createElement(r,i({},t),e)}(Te({ariaLabel:fe,items:ne,totalItemCount:Ue,hasCheckmarks:Be,hasIcons:Ne,defaultMenuItemRenderer:function(e){return function(e,t){var n=e.index,r=e.focusableElementIndex,o=e.totalItemCount,i=e.hasCheckmarks,a=e.hasIcons;return Q(e,n,r,o,i,a,t)}(e,De)},labelElementId:re},(function(e,t){return $(e,De)})),Fe):null,Le&&Se(Le,Ja)))}))}return null})),(function(e,t){return!(t.shouldUpdateWhenHidden||!e.hidden||!t.hidden)||m(e,t)}));function Za(e){return e.which===ie||"Meta"===e.key}function Xa(e,t){var n;null===(n=e.onMouseDown)||void 0===n||n.call(e,e,t)}function Ja(e,t){throw Error("ContextualMenuBase: onRenderSubMenu callback is null or undefined. Please ensure to set `onRenderSubMenu` property either manually or with `styled` helper.")}function el(e,t){return e?function(n,r){return tl(n,t),e(n,r)}:e}function tl(e,t){e&&t&&(e.persist(),t instanceof Event?e.target=t.target:t instanceof Element&&(e.target=t))}Ya.displayName="ContextualMenuBase";var nl={root:"ms-ContextualMenu",container:"ms-ContextualMenu-container",list:"ms-ContextualMenu-list",header:"ms-ContextualMenu-header",title:"ms-ContextualMenu-title",isopen:"is-open"};function rl(e){return s.createElement(ol,i({},e))}var ol=Je(Ya,(function(e){var t=e.className,n=e.theme,r=Gn(nl,n),o=n.fonts,i=n.semanticColors,a=n.effects;return{root:[n.fonts.medium,r.root,r.isopen,{backgroundColor:i.menuBackground,minWidth:"180px"},t],container:[r.container,{selectors:{":focus":{outline:0}}}],list:[r.list,r.isopen,{listStyleType:"none",margin:"0",padding:"0"}],header:[r.header,o.small,{fontWeight:zn.semibold,color:i.menuHeader,background:"none",backgroundColor:"transparent",border:"none",height:36,lineHeight:36,cursor:"default",padding:"0px 6px",userSelect:"none",textAlign:"left"}],title:[r.title,{fontSize:o.mediumPlus.fontSize,paddingRight:"14px",paddingLeft:"14px",paddingBottom:"5px",paddingTop:"5px",backgroundColor:i.menuItemBackgroundPressed}],subComponentStyles:{callout:{root:{boxShadow:a.elevation8}},menuItem:{}}}}),(function(e){return{onRenderSubMenu:e.onRenderSubMenu?(t=e.onRenderSubMenu,n=rl,Gr(t)(n)):rl};var t,n}),{scope:"ContextualMenu"}),il=ol;il.displayName="ContextualMenu";var al={msButton:"ms-Button",msButtonHasMenu:"ms-Button--hasMenu",msButtonIcon:"ms-Button-icon",msButtonMenuIcon:"ms-Button-menuIcon",msButtonLabel:"ms-Button-label",msButtonDescription:"ms-Button-description",msButtonScreenReaderText:"ms-Button-screenReaderText",msButtonFlexContainer:"ms-Button-flexContainer",msButtonTextContainer:"ms-Button-textContainer"},ll=G((function(e,t,n,r,o,i,a,l,u,s,c){var d,f,p=Gn(al,e||{}),m=s&&!c;return It({root:[p.msButton,t.root,r,u&&["is-checked",t.rootChecked],m&&["is-expanded",t.rootExpanded,{selectors:(d={},d[":hover ."+p.msButtonIcon]=t.iconExpandedHovered,d[":hover ."+p.msButtonMenuIcon]=t.menuIconExpandedHovered||t.rootExpandedHovered,d[":hover"]=t.rootExpandedHovered,d)}],l&&[al.msButtonHasMenu,t.rootHasMenu],a&&["is-disabled",t.rootDisabled],!a&&!m&&!u&&{selectors:(f={":hover":t.rootHovered},f[":hover ."+p.msButtonLabel]=t.labelHovered,f[":hover ."+p.msButtonIcon]=t.iconHovered,f[":hover ."+p.msButtonDescription]=t.descriptionHovered,f[":hover ."+p.msButtonMenuIcon]=t.menuIconHovered,f[":focus"]=t.rootFocused,f[":active"]=t.rootPressed,f[":active ."+p.msButtonIcon]=t.iconPressed,f[":active ."+p.msButtonDescription]=t.descriptionPressed,f[":active ."+p.msButtonMenuIcon]=t.menuIconPressed,f)},a&&u&&[t.rootCheckedDisabled],!a&&u&&{selectors:{":hover":t.rootCheckedHovered,":active":t.rootCheckedPressed}},n],flexContainer:[p.msButtonFlexContainer,t.flexContainer],textContainer:[p.msButtonTextContainer,t.textContainer],icon:[p.msButtonIcon,o,t.icon,m&&t.iconExpanded,u&&t.iconChecked,a&&t.iconDisabled],label:[p.msButtonLabel,t.label,u&&t.labelChecked,a&&t.labelDisabled],menuIcon:[p.msButtonMenuIcon,i,t.menuIcon,u&&t.menuIconChecked,a&&!c&&t.menuIconDisabled,!a&&!m&&!u&&{selectors:{":hover":t.menuIconHovered,":active":t.menuIconPressed}},m&&["is-expanded",t.menuIconExpanded]],description:[p.msButtonDescription,t.description,u&&t.descriptionChecked,a&&t.descriptionDisabled],screenReaderText:[p.msButtonScreenReaderText,t.screenReaderText]})})),ul=G((function(e,t,n,r,o){return{root:$t(e.splitButtonMenuButton,n&&[e.splitButtonMenuButtonExpanded],t&&[e.splitButtonMenuButtonDisabled],r&&!t&&[e.splitButtonMenuButtonChecked],o&&!t&&[{selectors:{":focus":e.splitButtonMenuFocused}}]),splitButtonContainer:$t(e.splitButtonContainer,!t&&r&&[e.splitButtonContainerChecked,{selectors:{":hover":e.splitButtonContainerCheckedHovered}}],!t&&!r&&[{selectors:{":hover":e.splitButtonContainerHovered,":focus":e.splitButtonContainerFocused}}],t&&e.splitButtonContainerDisabled),icon:$t(e.splitButtonMenuIcon,t&&e.splitButtonMenuIconDisabled,!t&&o&&e.splitButtonMenuIcon),flexContainer:$t(e.splitButtonFlexContainer),divider:$t(e.splitButtonDivider,(o||t)&&e.splitButtonDividerDisabled)}}));var sl=Y((function(e){var t=e;return Y((function(n){if(e===n)throw new Error("Attempted to compose a component with itself.");var r=n,o=Y((function(e){return function(t){return s.createElement(r,i({},t,{defaultRender:e}))}}));return function(e){var n=e.defaultRender;return s.createElement(t,i({},e,{defaultRender:n?o(n):r}))}}))}));var cl=function(e){function t(t){var n=e.call(this,t)||this;return n._buttonElement=s.createRef(),n._splitButtonContainer=s.createRef(),n._mergedRef=L(),n._renderedVisibleMenu=!1,n._getMemoizedMenuButtonKeytipProps=G((function(e){return i(i({},e),{hasMenu:!0})})),n._onRenderIcon=function(e,t){var r=n.props.iconProps;if(r&&(void 0!==r.iconName||r.imageProps)){var o=r.className,l=r.imageProps,u=a(r,["className","imageProps"]);if(r.styles)return s.createElement(Nr,i({className:J(n._classNames.icon,o),imageProps:l},u));if(r.iconName)return s.createElement(Mr,i({className:J(n._classNames.icon,o)},u));if(l)return s.createElement(Rr,i({className:J(n._classNames.icon,o),imageProps:l},u))}return null},n._onRenderTextContents=function(){var e=n.props,t=e.text,r=e.children,o=e.secondaryText,i=void 0===o?n.props.description:o,a=e.onRenderText,l=void 0===a?n._onRenderText:a,u=e.onRenderDescription,c=void 0===u?n._onRenderDescription:u;return t||"string"==typeof r||i?s.createElement("span",{className:n._classNames.textContainer},l(n.props,n._onRenderText),c(n.props,n._onRenderDescription)):[l(n.props,n._onRenderText),c(n.props,n._onRenderDescription)]},n._onRenderText=function(){var e=n.props.text,t=n.props.children;return void 0===e&&"string"==typeof t&&(e=t),n._hasText()?s.createElement("span",{key:n._labelId,className:n._classNames.label,id:n._labelId},e):null},n._onRenderChildren=function(){var e=n.props.children;return"string"==typeof e?null:e},n._onRenderDescription=function(e){var t=e.secondaryText,r=void 0===t?n.props.description:t;return r?s.createElement("span",{key:n._descriptionId,className:n._classNames.description,id:n._descriptionId},r):null},n._onRenderAriaDescription=function(){var e=n.props.ariaDescription;return e?s.createElement("span",{className:n._classNames.screenReaderText,id:n._ariaDescriptionId},e):null},n._onRenderMenuIcon=function(e){var t=n.props.menuIconProps;return s.createElement(Mr,i({iconName:"ChevronDown"},t,{className:n._classNames.menuIcon}))},n._onRenderMenu=function(e){var t,r,o=n.props.menuAs?(t=n.props.menuAs,r=il,sl(t)(r)):il;return s.createElement(o,i({},e))},n._onDismissMenu=function(e){var t=n.props.menuProps;t&&t.onDismiss&&t.onDismiss(e),e&&e.defaultPrevented||n._dismissMenu()},n._dismissMenu=function(){n._menuShouldFocusOnMount=void 0,n._menuShouldFocusOnContainer=void 0,n.setState({menuHidden:!0})},n._openMenu=function(e,t){void 0===t&&(t=!0),n.props.menuProps&&(n._menuShouldFocusOnContainer=e,n._menuShouldFocusOnMount=t,n._renderedVisibleMenu=!0,n.setState({menuHidden:!1}))},n._onToggleMenu=function(e){var t=!0;n.props.menuProps&&!1===n.props.menuProps.shouldFocusOnMount&&(t=!1),n.state.menuHidden?n._openMenu(e,t):n._dismissMenu()},n._onSplitContainerFocusCapture=function(e){var t=n._splitButtonContainer.current;!t||e.target&&ne(e.target,t)||t.focus()},n._onSplitButtonPrimaryClick=function(e){n.state.menuHidden||n._dismissMenu(),!n._processingTouch&&n.props.onClick?n.props.onClick(e):n._processingTouch&&n._onMenuClick(e)},n._onKeyDown=function(e){!n.props.disabled||e.which!==oe&&e.which!==le?n.props.disabled||(n.props.menuProps?n._onMenuKeyDown(e):void 0!==n.props.onKeyDown&&n.props.onKeyDown(e)):(e.preventDefault(),e.stopPropagation())},n._onKeyUp=function(e){n.props.disabled||void 0===n.props.onKeyUp||n.props.onKeyUp(e)},n._onKeyPress=function(e){n.props.disabled||void 0===n.props.onKeyPress||n.props.onKeyPress(e)},n._onMouseUp=function(e){n.props.disabled||void 0===n.props.onMouseUp||n.props.onMouseUp(e)},n._onMouseDown=function(e){n.props.disabled||void 0===n.props.onMouseDown||n.props.onMouseDown(e)},n._onClick=function(e){n.props.disabled||(n.props.menuProps?n._onMenuClick(e):void 0!==n.props.onClick&&n.props.onClick(e))},n._onSplitButtonContainerKeyDown=function(e){e.which===oe||e.which===le?n._buttonElement.current&&(n._buttonElement.current.click(),e.preventDefault(),e.stopPropagation()):n._onMenuKeyDown(e)},n._onMenuKeyDown=function(e){if(!n.props.disabled){n.props.onKeyDown&&n.props.onKeyDown(e);var t=e.which===pe,r=e.which===he;if(!e.defaultPrevented&&n._isValidMenuOpenKey(e)){var o=n.props.onMenuClick;o&&o(e,n.props),n._onToggleMenu(!1),e.preventDefault(),e.stopPropagation()}if(e.which!==oe&&e.which!==le||ge(!0,e.target),!e.altKey&&!e.metaKey&&(t||r))if(!n.state.menuHidden&&n.props.menuProps)(void 0!==n._menuShouldFocusOnMount?n._menuShouldFocusOnMount:n.props.menuProps.shouldFocusOnMount)||(e.preventDefault(),e.stopPropagation(),n._menuShouldFocusOnMount=!0,n.forceUpdate())}},n._onTouchStart=function(){n._isSplitButton&&n._splitButtonContainer.current&&!("onpointerdown"in n._splitButtonContainer.current)&&n._handleTouchAndPointerEvent()},n._onMenuClick=function(e){var t=n.props,r=t.onMenuClick,o=t.menuProps;r&&r(e,n.props);var i="boolean"==typeof(null==o?void 0:o.shouldFocusOnContainer)?o.shouldFocusOnContainer:"mouse"===e.nativeEvent.pointerType;e.defaultPrevented||(n._onToggleMenu(i),e.preventDefault(),e.stopPropagation())},be(n),n._async=new p(n),n._events=new g(n),n.props.split,n._labelId=Se(),n._descriptionId=Se(),n._ariaDescriptionId=Se(),n.state={menuHidden:!0},n}return o(t,e),Object.defineProperty(t.prototype,"_isSplitButton",{get:function(){return!!this.props.menuProps&&!!this.props.onClick&&!0===this.props.split},enumerable:!1,configurable:!0}),t.prototype.render=function(){var e,t=this.props,n=t.ariaDescription,r=t.ariaLabel,o=t.ariaHidden,i=t.className,a=t.disabled,l=t.allowDisabledFocus,u=t.primaryDisabled,s=t.secondaryText,c=void 0===s?this.props.description:s,d=t.href,f=t.iconProps,p=t.menuIconProps,m=t.styles,v=t.checked,g=t.variantClassName,y=t.theme,b=t.toggle,k=t.getClassNames,C=t.role,w=this.state.menuHidden,x=a||u;this._classNames=k?k(y,i,g,f&&f.className,p&&p.className,x,v,!w,!!this.props.menuProps,this.props.split,!!l):ll(y,m,i,g,f&&f.className,p&&p.className,x,!!this.props.menuProps,v,!w,this.props.split);var E=this._ariaDescriptionId,S=this._labelId,I=this._descriptionId,T=!x&&!!d,P=T?"a":"button",M=Ae(h(T?{}:{type:"button"},this.props.rootProps,this.props),T?Fe:Be,["disabled"]),D=r||M["aria-label"],N=void 0;n?N=E:c&&this.props.onRenderDescription!==_?N=I:M["aria-describedby"]&&(N=M["aria-describedby"]);var R=void 0;M["aria-labelledby"]?R=M["aria-labelledby"]:N&&!D&&(R=this._hasText()?S:void 0);var F=!(!1===this.props["data-is-focusable"]||a&&!l||this._isSplitButton),B="menuitemcheckbox"===C||"checkbox"===C,L=B||!0===b?!!v:void 0,O=h(M,((e={className:this._classNames.root,ref:this._mergedRef(this.props.elementRef,this._buttonElement),disabled:x&&!l,onKeyDown:this._onKeyDown,onKeyPress:this._onKeyPress,onKeyUp:this._onKeyUp,onMouseDown:this._onMouseDown,onMouseUp:this._onMouseUp,onClick:this._onClick,"aria-label":D,"aria-labelledby":R,"aria-describedby":N,"aria-disabled":x,"data-is-focusable":F})[B?"aria-checked":"aria-pressed"]=L,e));if(o&&(O["aria-hidden"]=!0),this._isSplitButton)return this._onRenderSplitButtonContent(P,O);if(this.props.menuProps){var A=this.props.menuProps.id,z=void 0===A?this._labelId+"-menu":A;h(O,{"aria-expanded":!w,"aria-controls":w?null:z,"aria-haspopup":!0})}return this._onRenderContent(P,O)},t.prototype.componentDidMount=function(){this._isSplitButton&&this._splitButtonContainer.current&&("onpointerdown"in this._splitButtonContainer.current&&this._events.on(this._splitButtonContainer.current,"pointerdown",this._onPointerDown,!0),"onpointerup"in this._splitButtonContainer.current&&this.props.onPointerUp&&this._events.on(this._splitButtonContainer.current,"pointerup",this.props.onPointerUp,!0))},t.prototype.componentDidUpdate=function(e,t){this.props.onAfterMenuDismiss&&!t.menuHidden&&this.state.menuHidden&&this.props.onAfterMenuDismiss()},t.prototype.componentWillUnmount=function(){this._async.dispose(),this._events.dispose()},t.prototype.focus=function(){this._isSplitButton&&this._splitButtonContainer.current?(ge(!0),this._splitButtonContainer.current.focus()):this._buttonElement.current&&(ge(!0),this._buttonElement.current.focus())},t.prototype.dismissMenu=function(){this._dismissMenu()},t.prototype.openMenu=function(e,t){this._openMenu(e,t)},t.prototype._onRenderContent=function(e,t){var n=this,r=this.props,o=e,a=r.menuIconProps,l=r.menuProps,u=r.onRenderIcon,c=void 0===u?this._onRenderIcon:u,d=r.onRenderAriaDescription,f=void 0===d?this._onRenderAriaDescription:d,p=r.onRenderChildren,m=void 0===p?this._onRenderChildren:p,h=r.onRenderMenu,v=void 0===h?this._onRenderMenu:h,g=r.onRenderMenuIcon,y=void 0===g?this._onRenderMenuIcon:g,b=r.disabled,_=r.keytipProps;_&&l&&(_=this._getMemoizedMenuButtonKeytipProps(_));var k=function(e){return s.createElement(o,i({},t,e),s.createElement("span",{className:n._classNames.flexContainer,"data-automationid":"splitbuttonprimary"},c(r,n._onRenderIcon),n._onRenderTextContents(),f(r,n._onRenderAriaDescription),m(r,n._onRenderChildren),!n._isSplitButton&&(l||a||n.props.onRenderMenuIcon)&&y(n.props,n._onRenderMenuIcon),l&&!l.doNotLayer&&n._shouldRenderMenu()&&v(n._getMenuProps(l),n._onRenderMenu)))},C=_?s.createElement(Ia,{keytipProps:this._isSplitButton?void 0:_,ariaDescribedBy:t["aria-describedby"],disabled:b},(function(e){return k(e)})):k();return l&&l.doNotLayer?s.createElement(s.Fragment,null,C,this._shouldRenderMenu()&&v(this._getMenuProps(l),this._onRenderMenu)):s.createElement(s.Fragment,null,C,s.createElement(je,null))},t.prototype._shouldRenderMenu=function(){var e=this.state.menuHidden,t=this.props,n=t.persistMenu,r=t.renderPersistedMenuHiddenOnMount;return!e||!(!n||!this._renderedVisibleMenu&&!r)},t.prototype._hasText=function(){return null!==this.props.text&&(void 0!==this.props.text||"string"==typeof this.props.children)},t.prototype._getMenuProps=function(e){var t=this.props.persistMenu,n=this.state.menuHidden;return e.ariaLabel||e.labelElementId||!this._hasText()||(e=i(i({},e),{labelElementId:this._labelId})),i(i({id:this._labelId+"-menu",directionalHint:Ar},e),{shouldFocusOnContainer:this._menuShouldFocusOnContainer,shouldFocusOnMount:this._menuShouldFocusOnMount,hidden:t?n:void 0,className:J("ms-BaseButton-menuhost",e.className),target:this._isSplitButton?this._splitButtonContainer.current:this._buttonElement.current,onDismiss:this._onDismissMenu})},t.prototype._onRenderSplitButtonContent=function(e,t){var n=this,r=this.props,o=r.styles,a=void 0===o?{}:o,l=r.disabled,u=r.allowDisabledFocus,c=r.checked,d=r.getSplitButtonClassNames,f=r.primaryDisabled,p=r.menuProps,m=r.toggle,v=r.role,g=r.primaryActionButtonProps,y=this.props.keytipProps,b=this.state.menuHidden,_=d?d(!!l,!b,!!c,!!u):a&&ul(a,!!l,!b,!!c,!!f);h(t,{onClick:void 0,onPointerDown:void 0,onPointerUp:void 0,tabIndex:-1,"data-is-focusable":!1}),y&&p&&(y=this._getMemoizedMenuButtonKeytipProps(y));var k=Ae(t,[],["disabled"]);g&&h(t,g);var C=function(r){return s.createElement("div",i({},k,{"data-ktp-target":r?r["data-ktp-target"]:void 0,role:v||"button","aria-disabled":l,"aria-haspopup":!0,"aria-expanded":!b,"aria-pressed":m?!!c:void 0,"aria-describedby":$e(t["aria-describedby"],r?r["aria-describedby"]:void 0),className:_&&_.splitButtonContainer,onKeyDown:n._onSplitButtonContainerKeyDown,onTouchStart:n._onTouchStart,ref:n._splitButtonContainer,"data-is-focusable":!0,onClick:l||f?void 0:n._onSplitButtonPrimaryClick,tabIndex:!l&&!f||u?0:void 0,"aria-roledescription":t["aria-roledescription"],onFocusCapture:n._onSplitContainerFocusCapture}),s.createElement("span",{style:{display:"flex"}},n._onRenderContent(e,t),n._onRenderSplitButtonMenuButton(_,r),n._onRenderSplitButtonDivider(_)))};return y?s.createElement(Ia,{keytipProps:y,disabled:l},(function(e){return C(e)})):C()},t.prototype._onRenderSplitButtonDivider=function(e){if(e&&e.divider){return s.createElement("span",{className:e.divider,"aria-hidden":!0,onClick:function(e){e.stopPropagation()}})}return null},t.prototype._onRenderSplitButtonMenuButton=function(e,n){var r=this.props,o=r.allowDisabledFocus,a=r.checked,l=r.disabled,u=r.splitButtonMenuProps,c=r.splitButtonAriaLabel,d=r.primaryDisabled,f=this.state.menuHidden,p=this.props.menuIconProps;void 0===p&&(p={iconName:"ChevronDown"});var m=i(i({},u),{styles:e,checked:a,disabled:l,allowDisabledFocus:o,onClick:this._onMenuClick,menuProps:void 0,iconProps:i(i({},p),{className:this._classNames.menuIcon}),ariaLabel:c,"aria-haspopup":!0,"aria-expanded":!f,"data-is-focusable":!1});return s.createElement(t,i({},m,{"data-ktp-execute-target":n?n["data-ktp-execute-target"]:n,onMouseDown:this._onMouseDown,tabIndex:d&&!o?0:-1}))},t.prototype._onPointerDown=function(e){var t=this.props.onPointerDown;t&&t(e),"touch"===e.pointerType&&(this._handleTouchAndPointerEvent(),e.preventDefault(),e.stopImmediatePropagation())},t.prototype._handleTouchAndPointerEvent=function(){var e=this;void 0!==this._lastTouchTimeoutId&&(this._async.clearTimeout(this._lastTouchTimeoutId),this._lastTouchTimeoutId=void 0),this._processingTouch=!0,this._lastTouchTimeoutId=this._async.setTimeout((function(){e._processingTouch=!1,e._lastTouchTimeoutId=void 0,e.focus()}),500)},t.prototype._isValidMenuOpenKey=function(e){return this.props.menuTriggerKeyCode?e.which===this.props.menuTriggerKeyCode:!!this.props.menuProps&&(e.which===he&&(e.altKey||e.metaKey))},t.defaultProps={baseClassName:"ms-Button",styles:{},split:!1},t}(s.Component),dl={outline:0},fl=function(e){return{fontSize:e,margin:"0 4px",height:"16px",lineHeight:"16px",textAlign:"center",flexShrink:0}},pl=G((function(e){var t,n,r=e.semanticColors,o=e.effects,i=e.fonts,a=r.buttonBorder,l=r.disabledBackground,u=r.disabledText,s={left:-2,top:-2,bottom:-2,right:-2,outlineColor:"ButtonText"};return{root:[Vn(e,{inset:1,highContrastStyle:s,borderColor:"transparent"}),e.fonts.medium,{boxSizing:"border-box",border:"1px solid "+a,userSelect:"none",display:"inline-block",textDecoration:"none",textAlign:"center",cursor:"pointer",padding:"0 16px",borderRadius:o.roundedCorner2,selectors:{":active > *":{position:"relative",left:0,top:0}}}],rootDisabled:[Vn(e,{inset:1,highContrastStyle:s,borderColor:"transparent"}),{backgroundColor:l,borderColor:l,color:u,cursor:"default",selectors:{":hover":dl,":focus":dl}}],iconDisabled:{color:u,selectors:(t={},t[jn]={color:"GrayText"},t)},menuIconDisabled:{color:u,selectors:(n={},n[jn]={color:"GrayText"},n)},flexContainer:{display:"flex",height:"100%",flexWrap:"nowrap",justifyContent:"center",alignItems:"center"},description:{display:"block"},textContainer:{flexGrow:1,display:"block"},icon:fl(i.mediumPlus.fontSize),menuIcon:fl(i.small.fontSize),label:{margin:"0 4px",lineHeight:"100%",display:"block"},screenReaderText:$n}})),ml=G((function(e,t){var n,r,o,a,l,u,s,c,d,f,p,m,h,v=e.effects,g=e.palette,y=e.semanticColors,b={left:-2,top:-2,bottom:-2,right:-2,border:"none"},_={position:"absolute",width:1,right:31,top:8,bottom:8};return D({splitButtonContainer:[Vn(e,{highContrastStyle:b,inset:2}),{display:"inline-flex",selectors:{".ms-Button--default":{borderTopRightRadius:"0",borderBottomRightRadius:"0",borderRight:"none"},".ms-Button--primary":{borderTopRightRadius:"0",borderBottomRightRadius:"0",border:"none",selectors:(n={},n[jn]=i({color:"WindowText",backgroundColor:"Window",border:"1px solid WindowText",borderRightWidth:"0"},{forcedColorAdjust:"none",MsHighContrastAdjust:"none"}),n)},".ms-Button--primary + .ms-Button":{border:"none",selectors:(r={},r[jn]={border:"1px solid WindowText",borderLeftWidth:"0"},r)}}}],splitButtonContainerHovered:{selectors:{".ms-Button--primary":{selectors:(o={},o[jn]={color:"Window",backgroundColor:"Highlight"},o)},".ms-Button.is-disabled":{color:y.buttonTextDisabled,selectors:(a={},a[jn]={color:"GrayText",borderColor:"GrayText",backgroundColor:"Window"},a)}}},splitButtonContainerChecked:{selectors:{".ms-Button--primary":{selectors:(l={},l[jn]=i({color:"Window",backgroundColor:"WindowText"},{forcedColorAdjust:"none",MsHighContrastAdjust:"none"}),l)}}},splitButtonContainerCheckedHovered:{selectors:{".ms-Button--primary":{selectors:(u={},u[jn]=i({color:"Window",backgroundColor:"WindowText"},{forcedColorAdjust:"none",MsHighContrastAdjust:"none"}),u)}}},splitButtonContainerFocused:{outline:"none!important"},splitButtonMenuButton:(s={padding:6,height:"auto",boxSizing:"border-box",borderRadius:0,borderTopRightRadius:v.roundedCorner2,borderBottomRightRadius:v.roundedCorner2,border:"1px solid "+g.neutralSecondaryAlt,borderLeft:"none",outline:"transparent",userSelect:"none",display:"inline-block",textDecoration:"none",textAlign:"center",cursor:"pointer",verticalAlign:"top",width:32,marginLeft:-1,marginTop:0,marginRight:0,marginBottom:0},s[jn]={".ms-Button-menuIcon":{color:"WindowText"}},s),splitButtonDivider:i(i({},_),{selectors:(c={},c[jn]={backgroundColor:"WindowText"},c)}),splitButtonDividerDisabled:i(i({},_),{selectors:(d={},d[jn]={backgroundColor:"GrayText"},d)}),splitButtonMenuButtonDisabled:{pointerEvents:"none",border:"none",selectors:(f={":hover":{cursor:"default"},".ms-Button--primary":{selectors:(p={},p[jn]={color:"GrayText",borderColor:"GrayText",backgroundColor:"Window"},p)},".ms-Button-menuIcon":{selectors:(m={},m[jn]={color:"GrayText"},m)}},f[jn]={color:"GrayText",border:"1px solid GrayText",backgroundColor:"Window"},f)},splitButtonFlexContainer:{display:"flex",height:"100%",flexWrap:"nowrap",justifyContent:"center",alignItems:"center"},splitButtonContainerDisabled:{outline:"none",border:"none",selectors:(h={},h[jn]=i({color:"GrayText",borderColor:"GrayText",backgroundColor:"Window"},{forcedColorAdjust:"none",MsHighContrastAdjust:"none"}),h)},splitButtonMenuFocused:i({},Vn(e,{highContrastStyle:b,inset:2}))},t)}));var hl=G((function(e,t,n){var r=pl(e),o=ml(e);return D(r,{root:{minWidth:"80px",height:"32px"},label:{fontWeight:zn.semibold}},n?function(e){var t,n,r,o,a,l,u,s,c,d=e.palette,f=e.semanticColors;return{root:{backgroundColor:f.primaryButtonBackground,border:"1px solid "+f.primaryButtonBackground,color:f.primaryButtonText,selectors:(t={},t[jn]=i({color:"Window",backgroundColor:"WindowText",borderColor:"WindowText"},{forcedColorAdjust:"none",MsHighContrastAdjust:"none"}),t["."+ve+" &:focus"]={selectors:{":after":{border:"none",outlineColor:d.white}}},t)},rootHovered:{backgroundColor:f.primaryButtonBackgroundHovered,border:"1px solid "+f.primaryButtonBackgroundHovered,color:f.primaryButtonTextHovered,selectors:(n={},n[jn]={color:"Window",backgroundColor:"Highlight",borderColor:"Highlight"},n)},rootPressed:{backgroundColor:f.primaryButtonBackgroundPressed,border:"1px solid "+f.primaryButtonBackgroundPressed,color:f.primaryButtonTextPressed,selectors:(r={},r[jn]=i({color:"Window",backgroundColor:"WindowText",borderColor:"WindowText"},{forcedColorAdjust:"none",MsHighContrastAdjust:"none"}),r)},rootExpanded:{backgroundColor:f.primaryButtonBackgroundPressed,color:f.primaryButtonTextPressed},rootChecked:{backgroundColor:f.primaryButtonBackgroundPressed,color:f.primaryButtonTextPressed},rootCheckedHovered:{backgroundColor:f.primaryButtonBackgroundPressed,color:f.primaryButtonTextPressed},rootDisabled:{color:f.primaryButtonTextDisabled,backgroundColor:f.primaryButtonBackgroundDisabled,selectors:(o={},o[jn]={color:"GrayText",borderColor:"GrayText",backgroundColor:"Window"},o)},splitButtonContainer:{selectors:(a={},a[jn]={border:"none"},a)},splitButtonDivider:i(i({},{position:"absolute",width:1,right:31,top:8,bottom:8}),{backgroundColor:d.white,selectors:(l={},l[jn]={backgroundColor:"Window"},l)}),splitButtonMenuButton:{backgroundColor:f.primaryButtonBackground,color:f.primaryButtonText,selectors:(u={},u[jn]={backgroundColor:"WindowText"},u[":hover"]={backgroundColor:f.primaryButtonBackgroundHovered,selectors:(s={},s[jn]={color:"Highlight"},s)},u)},splitButtonMenuButtonDisabled:{backgroundColor:f.primaryButtonBackgroundDisabled,selectors:{":hover":{backgroundColor:f.primaryButtonBackgroundDisabled}}},splitButtonMenuButtonChecked:{backgroundColor:f.primaryButtonBackgroundPressed,selectors:{":hover":{backgroundColor:f.primaryButtonBackgroundPressed}}},splitButtonMenuButtonExpanded:{backgroundColor:f.primaryButtonBackgroundPressed,selectors:{":hover":{backgroundColor:f.primaryButtonBackgroundPressed}}},splitButtonMenuIcon:{color:f.primaryButtonText},splitButtonMenuIconDisabled:{color:d.neutralTertiary,selectors:(c={},c[jn]={color:"GrayText"},c)}}}(e):function(e){var t,n,r,o,a,l=e.semanticColors,u=e.palette,s=l.buttonBackground,c=l.buttonBackgroundPressed,d=l.buttonBackgroundHovered,f=l.buttonBackgroundDisabled,p=l.buttonText,m=l.buttonTextHovered,h=l.buttonTextDisabled,v=l.buttonTextChecked,g=l.buttonTextCheckedHovered;return{root:{backgroundColor:s,color:p},rootHovered:{backgroundColor:d,color:m,selectors:(t={},t[jn]={borderColor:"Highlight",color:"Highlight"},t)},rootPressed:{backgroundColor:c,color:v},rootExpanded:{backgroundColor:c,color:v},rootChecked:{backgroundColor:c,color:v},rootCheckedHovered:{backgroundColor:c,color:g},rootDisabled:{color:h,backgroundColor:f,selectors:(n={},n[jn]={color:"GrayText",borderColor:"GrayText",backgroundColor:"Window"},n)},splitButtonContainer:{selectors:(r={},r[jn]={border:"none"},r)},splitButtonMenuButton:{color:u.white,backgroundColor:"transparent",selectors:{":hover":{backgroundColor:u.neutralLight,selectors:(o={},o[jn]={color:"Highlight"},o)}}},splitButtonMenuButtonDisabled:{backgroundColor:l.buttonBackgroundDisabled,selectors:{":hover":{backgroundColor:l.buttonBackgroundDisabled}}},splitButtonDivider:i(i({},{position:"absolute",width:1,right:31,top:8,bottom:8}),{backgroundColor:u.neutralTertiaryAlt,selectors:(a={},a[jn]={backgroundColor:"WindowText"},a)}),splitButtonDividerDisabled:{backgroundColor:e.palette.neutralTertiaryAlt},splitButtonMenuButtonChecked:{backgroundColor:u.neutralQuaternaryAlt,selectors:{":hover":{backgroundColor:u.neutralQuaternaryAlt}}},splitButtonMenuButtonExpanded:{backgroundColor:u.neutralQuaternaryAlt,selectors:{":hover":{backgroundColor:u.neutralQuaternaryAlt}}},splitButtonMenuIcon:{color:l.buttonText},splitButtonMenuIconDisabled:{color:l.buttonTextDisabled}}}(e),o,t)})),vl=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return o(t,e),t.prototype.render=function(){var e=this.props,t=e.primary,n=void 0!==t&&t,r=e.styles,o=e.theme;return s.createElement(cl,i({},this.props,{variantClassName:n?"ms-Button--primary":"ms-Button--default",styles:hl(o,r,n),onRenderDescription:_}))},t=l([N("DefaultButton",["theme","styles"],!0)],t)}(s.Component),gl=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return o(t,e),t.prototype.render=function(){return s.createElement(vl,i({},this.props,{primary:!0,onRenderDescription:_}))},t=l([N("PrimaryButton",["theme","styles"],!0)],t)}(s.Component)},,function(e,t){function n(t,r){return e.exports=n=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},e.exports.__esModule=!0,e.exports.default=e.exports,n(t,r)}e.exports=n,e.exports.__esModule=!0,e.exports.default=e.exports},function(e,t){function n(t){return e.exports=n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},e.exports.__esModule=!0,e.exports.default=e.exports,n(t)}e.exports=n,e.exports.__esModule=!0,e.exports.default=e.exports},function(e,t){e.exports=function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e},e.exports.__esModule=!0,e.exports.default=e.exports}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZ2V0UHJvdG90eXBlT2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2suanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MuanMiLCJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9idWlsZGluL2dsb2JhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbmhlcml0cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuLmpzIiwid2VicGFjazovLy8uL3NyYy9tb2R1bGVzLnRzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vY2xpZW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWljcm9zb2Z0L2xvYWQtdGhlbWVkLXN0eWxlcy9saWItZXM2L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AZmx1ZW50dWkvc2V0LXZlcnNpb24vbGliL3NldFZlcnNpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BmbHVlbnR1aS9zZXQtdmVyc2lvbi9saWIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Byb2Nlc3MvYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QvY2pzL3JlYWN0LnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vY2pzL3JlYWN0LWRvbS5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc2NoZWR1bGVyL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zY2hlZHVsZXIvY2pzL3NjaGVkdWxlci5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdGltZXJzLWJyb3dzZXJpZnkvbWFpbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc2V0aW1tZWRpYXRlL3NldEltbWVkaWF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9NYWluMS50c3giLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3RzbGliL3RzbGliLmVzNi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGZsdWVudHVpL3V0aWxpdGllcy9saWIvZG9tL3NldFNTUi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGZsdWVudHVpL3V0aWxpdGllcy9saWIvZG9tL2dldFdpbmRvdy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGZsdWVudHVpL3V0aWxpdGllcy9saWIvQXN5bmMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BmbHVlbnR1aS91dGlsaXRpZXMvbGliL29iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGZsdWVudHVpL3V0aWxpdGllcy9saWIvRXZlbnRHcm91cC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGZsdWVudHVpL3V0aWxpdGllcy9saWIvd2Fybi93YXJuLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AZmx1ZW50dWkvdXRpbGl0aWVzL2xpYi9CYXNlQ29tcG9uZW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AZmx1ZW50dWkvdXRpbGl0aWVzL2xpYi9HbG9iYWxTZXR0aW5ncy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGZsdWVudHVpL3V0aWxpdGllcy9saWIvY3VzdG9taXphdGlvbnMvQ3VzdG9taXphdGlvbnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BmbHVlbnR1aS91dGlsaXRpZXMvbGliL2hvaXN0U3RhdGljcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGZsdWVudHVpL3V0aWxpdGllcy9saWIvY3VzdG9taXphdGlvbnMvQ3VzdG9taXplckNvbnRleHQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BmbHVlbnR1aS9tZXJnZS1zdHlsZXMvbGliL2NvbmNhdFN0eWxlU2V0cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGZsdWVudHVpL3V0aWxpdGllcy9saWIvY3VzdG9taXphdGlvbnMvY3VzdG9taXphYmxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AZmx1ZW50dWkvdXRpbGl0aWVzL2xpYi9hcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGZsdWVudHVpL3V0aWxpdGllcy9saWIvY3JlYXRlTWVyZ2VkUmVmLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AZmx1ZW50dWkvbWVyZ2Utc3R5bGVzL2xpYi9TdHlsZXNoZWV0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AZmx1ZW50dWkvdXRpbGl0aWVzL2xpYi9tZW1vaXplLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AZmx1ZW50dWkvdXRpbGl0aWVzL2xpYi9jc3MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BmbHVlbnR1aS91dGlsaXRpZXMvbm9kZV9tb2R1bGVzL0BmbHVlbnR1aS9kb20tdXRpbGl0aWVzL2xpYi9nZXRQYXJlbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BmbHVlbnR1aS91dGlsaXRpZXMvbm9kZV9tb2R1bGVzL0BmbHVlbnR1aS9kb20tdXRpbGl0aWVzL2xpYi9nZXRWaXJ0dWFsUGFyZW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AZmx1ZW50dWkvdXRpbGl0aWVzL25vZGVfbW9kdWxlcy9AZmx1ZW50dWkvZG9tLXV0aWxpdGllcy9saWIvaXNWaXJ0dWFsRWxlbWVudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGZsdWVudHVpL3V0aWxpdGllcy9ub2RlX21vZHVsZXMvQGZsdWVudHVpL2RvbS11dGlsaXRpZXMvbGliL2ZpbmRFbGVtZW50UmVjdXJzaXZlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AZmx1ZW50dWkvdXRpbGl0aWVzL25vZGVfbW9kdWxlcy9AZmx1ZW50dWkvZG9tLXV0aWxpdGllcy9saWIvcG9ydGFsQ29udGFpbnNFbGVtZW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AZmx1ZW50dWkvdXRpbGl0aWVzL25vZGVfbW9kdWxlcy9AZmx1ZW50dWkvZG9tLXV0aWxpdGllcy9saWIvc2V0UG9ydGFsQXR0cmlidXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AZmx1ZW50dWkvdXRpbGl0aWVzL2xpYi9LZXlDb2Rlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGZsdWVudHVpL3V0aWxpdGllcy9saWIvc2V0Rm9jdXNWaXNpYmlsaXR5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AZmx1ZW50dWkvdXRpbGl0aWVzL2xpYi9hcHBlbmRGdW5jdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGZsdWVudHVpL3V0aWxpdGllcy9saWIvaW5pdGlhbGl6ZUNvbXBvbmVudFJlZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGZsdWVudHVpL3V0aWxpdGllcy9saWIvZXh0ZW5kQ29tcG9uZW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AZmx1ZW50dWkvdXRpbGl0aWVzL2xpYi9nZXRJZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGZsdWVudHVpL3V0aWxpdGllcy9saWIvcHJvcGVydGllcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGZsdWVudHVpL3V0aWxpdGllcy9saWIva2V5Ym9hcmQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BmbHVlbnR1aS91dGlsaXRpZXMvbGliL3VzZUZvY3VzUmVjdHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BmbHVlbnR1aS91dGlsaXRpZXMvbGliL2FyaWEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BmbHVlbnR1aS9tZXJnZS1zdHlsZXMvbGliL2NvbmNhdFN0eWxlU2V0c1dpdGhQcm9wcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGZsdWVudHVpL3V0aWxpdGllcy9saWIvY3VzdG9taXphdGlvbnMvdXNlQ3VzdG9taXphdGlvblNldHRpbmdzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AZmx1ZW50dWkvdXRpbGl0aWVzL2xpYi9zdHlsZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BmbHVlbnR1aS9yZWFjdC9saWIvY29tcG9uZW50cy9JY29uL0ljb24udHlwZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BmbHVlbnR1aS9tZXJnZS1zdHlsZXMvbGliL1N0eWxlT3B0aW9uc1N0YXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AZmx1ZW50dWkvbWVyZ2Utc3R5bGVzL2xpYi9leHRyYWN0U3R5bGVQYXJ0cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGZsdWVudHVpL21lcmdlLXN0eWxlcy9saWIvdHJhbnNmb3Jtcy9rZWJhYlJ1bGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AZmx1ZW50dWkvbWVyZ2Utc3R5bGVzL2xpYi9nZXRWZW5kb3JTZXR0aW5ncy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGZsdWVudHVpL21lcmdlLXN0eWxlcy9saWIvdHJhbnNmb3Jtcy9wcmVmaXhSdWxlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGZsdWVudHVpL21lcmdlLXN0eWxlcy9saWIvdHJhbnNmb3Jtcy9wcm92aWRlVW5pdHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BmbHVlbnR1aS9tZXJnZS1zdHlsZXMvbGliL3RyYW5zZm9ybXMvcnRsaWZ5UnVsZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BmbHVlbnR1aS9tZXJnZS1zdHlsZXMvbGliL3N0eWxlVG9DbGFzc05hbWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BmbHVlbnR1aS9tZXJnZS1zdHlsZXMvbGliL3Rva2VuaXplV2l0aFBhcmVudGhlc2VzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AZmx1ZW50dWkvbWVyZ2Utc3R5bGVzL2xpYi9tZXJnZVN0eWxlU2V0cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGZsdWVudHVpL3V0aWxpdGllcy9saWIvZG9tL2dldERvY3VtZW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AZmx1ZW50dWkvdXRpbGl0aWVzL2xpYi9zZXNzaW9uU3RvcmFnZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGZsdWVudHVpL3V0aWxpdGllcy9saWIvcnRsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AZmx1ZW50dWkvdXRpbGl0aWVzL2xpYi9jbGFzc05hbWVzRnVuY3Rpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BmbHVlbnR1aS9yZWFjdC9saWIvY29tcG9uZW50cy9JbWFnZS9JbWFnZS50eXBlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGZsdWVudHVpL3V0aWxpdGllcy9saWIvdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGZsdWVudHVpL3JlYWN0LWhvb2tzL2xpYi91c2VNZXJnZWRSZWZzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AZmx1ZW50dWkvcmVhY3QvbGliL2NvbXBvbmVudHMvSW1hZ2UvSW1hZ2UuYmFzZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGZsdWVudHVpL21lcmdlLXN0eWxlcy9saWIvbWVyZ2VTdHlsZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BmbHVlbnR1aS9tZXJnZS1zdHlsZXMvbGliL2tleWZyYW1lcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGZsdWVudHVpL3RoZW1lL2xpYi9tb3Rpb24vQW5pbWF0aW9uU3R5bGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AZmx1ZW50dWkvc3R5bGUtdXRpbGl0aWVzL2xpYi9jbGFzc05hbWVzL0FuaW1hdGlvbkNsYXNzTmFtZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BmbHVlbnR1aS90aGVtZS9saWIvZm9udHMvRmx1ZW50Rm9udHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BmbHVlbnR1aS9zdHlsZS11dGlsaXRpZXMvbGliL3V0aWxpdGllcy9idWlsZENsYXNzTWFwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AZmx1ZW50dWkvc3R5bGUtdXRpbGl0aWVzL2xpYi9zdHlsZXMvQ29tbW9uU3R5bGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AZmx1ZW50dWkvc3R5bGUtdXRpbGl0aWVzL2xpYi9zdHlsZXMvekluZGV4ZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BmbHVlbnR1aS9zdHlsZS11dGlsaXRpZXMvbGliL3N0eWxlcy9nZXRGb2N1c1N0eWxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AZmx1ZW50dWkvc3R5bGUtdXRpbGl0aWVzL2xpYi9zdHlsZXMvaGlkZGVuQ29udGVudFN0eWxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AZmx1ZW50dWkvc3R5bGUtdXRpbGl0aWVzL2xpYi9zdHlsZXMvZ2V0R2xvYmFsQ2xhc3NOYW1lcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGZsdWVudHVpL3RoZW1lL2xpYi9lZmZlY3RzL0ZsdWVudERlcHRocy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGZsdWVudHVpL3RoZW1lL2xpYi9jb2xvcnMvRGVmYXVsdFBhbGV0dGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BmbHVlbnR1aS90aGVtZS9saWIvZWZmZWN0cy9EZWZhdWx0RWZmZWN0cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGZsdWVudHVpL21lcmdlLXN0eWxlcy9saWIvZm9udEZhY2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BmbHVlbnR1aS90aGVtZS9saWIvZm9udHMvY3JlYXRlRm9udFN0eWxlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGZsdWVudHVpL3V0aWxpdGllcy9saWIvbGFuZ3VhZ2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BmbHVlbnR1aS90aGVtZS9saWIvZm9udHMvRGVmYXVsdEZvbnRTdHlsZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BmbHVlbnR1aS91dGlsaXRpZXMvbGliL2xvY2FsU3RvcmFnZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGZsdWVudHVpL3V0aWxpdGllcy9saWIvbWVyZ2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BmbHVlbnR1aS90aGVtZS9saWIvdXRpbGl0aWVzL21ha2VTZW1hbnRpY0NvbG9ycy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGZsdWVudHVpL3RoZW1lL2xpYi9zcGFjaW5nL0RlZmF1bHRTcGFjaW5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AZmx1ZW50dWkvdGhlbWUvbGliL2NyZWF0ZVRoZW1lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AZmx1ZW50dWkvdGhlbWUvbGliL21lcmdlVGhlbWVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AZmx1ZW50dWkvc3R5bGUtdXRpbGl0aWVzL2xpYi9zdHlsZXMvdGhlbWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BmbHVlbnR1aS9zdHlsZS11dGlsaXRpZXMvbGliL3V0aWxpdGllcy9pY29ucy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGZsdWVudHVpL3N0eWxlLXV0aWxpdGllcy9saWIvdmVyc2lvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGZsdWVudHVpL3N0eWxlLXV0aWxpdGllcy9saWIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BmbHVlbnR1aS9yZWFjdC9saWIvY29tcG9uZW50cy9JbWFnZS9JbWFnZS5zdHlsZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BmbHVlbnR1aS9yZWFjdC9saWIvY29tcG9uZW50cy9JbWFnZS9JbWFnZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGZsdWVudHVpL3JlYWN0L2xpYi9jb21wb25lbnRzL0ljb24vSWNvbi5zdHlsZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BmbHVlbnR1aS9yZWFjdC9saWIvY29tcG9uZW50cy9JY29uL0ZvbnRJY29uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AZmx1ZW50dWkvcmVhY3QvbGliL2NvbXBvbmVudHMvSWNvbi9JY29uLmJhc2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BmbHVlbnR1aS9yZWFjdC9saWIvY29tcG9uZW50cy9JY29uL0ljb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BmbHVlbnR1aS9yZWFjdC9saWIvY29tcG9uZW50cy9JY29uL0ltYWdlSWNvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGZsdWVudHVpL3JlYWN0L2xpYi9jb21tb24vRGlyZWN0aW9uYWxIaW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AZmx1ZW50dWkvdXRpbGl0aWVzL2xpYi9yZW5kZXJGdW5jdGlvbi9jb21wb3NlUmVuZGVyRnVuY3Rpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BmbHVlbnR1aS9yZWFjdC9saWIvY29tcG9uZW50cy9Db250ZXh0dWFsTWVudS9Db250ZXh0dWFsTWVudS50eXBlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGZsdWVudHVpL3JlYWN0L25vZGVfbW9kdWxlcy9AZmx1ZW50dWkvcmVhY3QtZm9jdXMvbGliL2NvbXBvbmVudHMvRm9jdXNab25lL0ZvY3VzWm9uZS50eXBlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGZsdWVudHVpL3V0aWxpdGllcy9ub2RlX21vZHVsZXMvQGZsdWVudHVpL2RvbS11dGlsaXRpZXMvbGliL2VsZW1lbnRDb250YWlucy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGZsdWVudHVpL3V0aWxpdGllcy9saWIvZm9jdXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BmbHVlbnR1aS91dGlsaXRpZXMvbm9kZV9tb2R1bGVzL0BmbHVlbnR1aS9kb20tdXRpbGl0aWVzL2xpYi9lbGVtZW50Q29udGFpbnNBdHRyaWJ1dGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BmbHVlbnR1aS91dGlsaXRpZXMvbGliL3Njcm9sbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGZsdWVudHVpL3JlYWN0L25vZGVfbW9kdWxlcy9AZmx1ZW50dWkvcmVhY3QtZm9jdXMvbGliL2NvbXBvbmVudHMvRm9jdXNab25lL0ZvY3VzWm9uZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGZsdWVudHVpL3V0aWxpdGllcy9saWIvb3NEZXRlY3Rvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGZsdWVudHVpL3V0aWxpdGllcy9saWIvbW9iaWxlRGV0ZWN0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BmbHVlbnR1aS9yZWFjdC9saWIvdXRpbGl0aWVzL3Bvc2l0aW9uaW5nL3Bvc2l0aW9uaW5nLnR5cGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AZmx1ZW50dWkvdXRpbGl0aWVzL2xpYi9nZXRQcm9wc1dpdGhEZWZhdWx0cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGZsdWVudHVpL3JlYWN0L2xpYi91dGlsaXRpZXMvY29udGV4dHVhbE1lbnUvY29udGV4dHVhbE1lbnVVdGlsaXR5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AZmx1ZW50dWkvdXRpbGl0aWVzL2xpYi9kb20vb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BmbHVlbnR1aS91dGlsaXRpZXMvbGliL1JlY3RhbmdsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGZsdWVudHVpL3JlYWN0L2xpYi91dGlsaXRpZXMvcG9zaXRpb25pbmcvcG9zaXRpb25pbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BmbHVlbnR1aS91dGlsaXRpZXMvbGliL21vZGFsaXplLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AZmx1ZW50dWkvcmVhY3QtaG9va3MvbGliL3VzZUNvbnN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AZmx1ZW50dWkvcmVhY3QtaG9va3MvbGliL3VzZUFzeW5jLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AZmx1ZW50dWkvcmVhY3QtaG9va3MvbGliL3VzZU9uRXZlbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BmbHVlbnR1aS9yZWFjdC9ub2RlX21vZHVsZXMvQGZsdWVudHVpL3JlYWN0LXdpbmRvdy1wcm92aWRlci9saWIvV2luZG93UHJvdmlkZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BmbHVlbnR1aS9yZWFjdC9saWIvY29tcG9uZW50cy9Qb3B1cC9Qb3B1cC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGZsdWVudHVpL3JlYWN0LWhvb2tzL25vZGVfbW9kdWxlcy9AZmx1ZW50dWkvcmVhY3Qtd2luZG93LXByb3ZpZGVyL2xpYi9XaW5kb3dQcm92aWRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGZsdWVudHVpL3JlYWN0L2xpYi9jb21wb25lbnRzL0NhbGxvdXQvQ2FsbG91dENvbnRlbnQuYmFzZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGZsdWVudHVpL3JlYWN0LWhvb2tzL2xpYi91c2VUYXJnZXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BmbHVlbnR1aS9yZWFjdC9saWIvY29tcG9uZW50cy9DYWxsb3V0L0NhbGxvdXRDb250ZW50LnN0eWxlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGZsdWVudHVpL3JlYWN0L2xpYi9jb21wb25lbnRzL0NhbGxvdXQvQ2FsbG91dENvbnRlbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BmbHVlbnR1aS91dGlsaXRpZXMvbGliL2N1c3RvbWl6YXRpb25zL21lcmdlU2V0dGluZ3MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BmbHVlbnR1aS91dGlsaXRpZXMvbGliL2N1c3RvbWl6YXRpb25zL0N1c3RvbWl6ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BmbHVlbnR1aS91dGlsaXRpZXMvbGliL2N1c3RvbWl6YXRpb25zL21lcmdlQ3VzdG9taXphdGlvbnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BmbHVlbnR1aS9yZWFjdC9saWIvY29tcG9uZW50cy9GYWJyaWMvRmFicmljLmJhc2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BmbHVlbnR1aS9yZWFjdC9saWIvY29tcG9uZW50cy9GYWJyaWMvRmFicmljLnN0eWxlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGZsdWVudHVpL3JlYWN0L2xpYi9jb21wb25lbnRzL0ZhYnJpYy9GYWJyaWMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BmbHVlbnR1aS9yZWFjdC9saWIvY29tcG9uZW50cy9MYXllci9MYXllci5ub3RpZmljYXRpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BmbHVlbnR1aS9yZWFjdC9saWIvY29tcG9uZW50cy9MYXllci9MYXllci5iYXNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AZmx1ZW50dWkvdXRpbGl0aWVzL25vZGVfbW9kdWxlcy9AZmx1ZW50dWkvZG9tLXV0aWxpdGllcy9saWIvc2V0VmlydHVhbFBhcmVudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGZsdWVudHVpL3JlYWN0L2xpYi9jb21wb25lbnRzL0xheWVyL0xheWVyLnN0eWxlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGZsdWVudHVpL3JlYWN0L2xpYi9jb21wb25lbnRzL0xheWVyL0xheWVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AZmx1ZW50dWkvcmVhY3QvbGliL2NvbXBvbmVudHMvQ2FsbG91dC9DYWxsb3V0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AZmx1ZW50dWkvcmVhY3QvbGliL2NvbXBvbmVudHMvQ29udGV4dHVhbE1lbnUvQ29udGV4dHVhbE1lbnVJdGVtLmJhc2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BmbHVlbnR1aS9yZWFjdC9saWIvdXRpbGl0aWVzL2tleXRpcHMvS2V5dGlwQ29uc3RhbnRzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AZmx1ZW50dWkvcmVhY3QvbGliL2NvbXBvbmVudHMvRGl2aWRlci9WZXJ0aWNhbERpdmlkZXIuY2xhc3NOYW1lcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGZsdWVudHVpL3JlYWN0L2xpYi9jb21wb25lbnRzL0NvbnRleHR1YWxNZW51L0NvbnRleHR1YWxNZW51LmNuc3R5bGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AZmx1ZW50dWkvcmVhY3QvbGliL2NvbXBvbmVudHMvQ29udGV4dHVhbE1lbnUvQ29udGV4dHVhbE1lbnUuY2xhc3NOYW1lcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGZsdWVudHVpL3JlYWN0L2xpYi9jb21wb25lbnRzL0NvbnRleHR1YWxNZW51L0NvbnRleHR1YWxNZW51SXRlbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGZsdWVudHVpL3JlYWN0L2xpYi9jb21wb25lbnRzL0NvbnRleHR1YWxNZW51L0NvbnRleHR1YWxNZW51SXRlbVdyYXBwZXIvQ29udGV4dHVhbE1lbnVJdGVtV3JhcHBlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGZsdWVudHVpL3JlYWN0LWhvb2tzL2xpYi91c2VQcmV2aW91cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGZsdWVudHVpL3JlYWN0L2xpYi91dGlsaXRpZXMva2V5dGlwcy9LZXl0aXBNYW5hZ2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AZmx1ZW50dWkvcmVhY3QvbGliL3V0aWxpdGllcy9rZXl0aXBzL0tleXRpcFV0aWxzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AZmx1ZW50dWkvcmVhY3QvbGliL2NvbXBvbmVudHMvS2V5dGlwRGF0YS91c2VLZXl0aXBEYXRhLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AZmx1ZW50dWkvcmVhY3QvbGliL2NvbXBvbmVudHMvS2V5dGlwRGF0YS9LZXl0aXBEYXRhLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AZmx1ZW50dWkvcmVhY3QvbGliL2NvbXBvbmVudHMvQ29udGV4dHVhbE1lbnUvQ29udGV4dHVhbE1lbnVJdGVtV3JhcHBlci9Db250ZXh0dWFsTWVudUFuY2hvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGZsdWVudHVpL3JlYWN0L2xpYi9jb21wb25lbnRzL0RpdmlkZXIvVmVydGljYWxEaXZpZGVyLmJhc2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BmbHVlbnR1aS9yZWFjdC9saWIvY29tcG9uZW50cy9EaXZpZGVyL1ZlcnRpY2FsRGl2aWRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGZsdWVudHVpL3JlYWN0L2xpYi9jb21wb25lbnRzL0RpdmlkZXIvVmVydGljYWxEaXZpZGVyLnN0eWxlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGZsdWVudHVpL3JlYWN0L2xpYi9jb21wb25lbnRzL0NvbnRleHR1YWxNZW51L0NvbnRleHR1YWxNZW51SXRlbVdyYXBwZXIvQ29udGV4dHVhbE1lbnVTcGxpdEJ1dHRvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGZsdWVudHVpL3JlYWN0L2xpYi9jb21wb25lbnRzL0NvbnRleHR1YWxNZW51L0NvbnRleHR1YWxNZW51SXRlbVdyYXBwZXIvQ29udGV4dHVhbE1lbnVCdXR0b24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BmbHVlbnR1aS9yZWFjdC1ob29rcy9saWIvdXNlSWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BmbHVlbnR1aS91dGlsaXRpZXMvbGliL2hvaXN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AZmx1ZW50dWkvcmVhY3QvbGliL3V0aWxpdGllcy9kZWNvcmF0b3JzL0Jhc2VEZWNvcmF0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BmbHVlbnR1aS9yZWFjdC9saWIvdXRpbGl0aWVzL2RlY29yYXRvcnMvd2l0aFJlc3BvbnNpdmVNb2RlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AZmx1ZW50dWkvcmVhY3QvbGliL3V0aWxpdGllcy9ob29rcy91c2VSZXNwb25zaXZlTW9kZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGZsdWVudHVpL3JlYWN0L2xpYi91dGlsaXRpZXMvTWVudUNvbnRleHQvTWVudUNvbnRleHQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BmbHVlbnR1aS9yZWFjdC9saWIvY29tcG9uZW50cy9Db250ZXh0dWFsTWVudS9Db250ZXh0dWFsTWVudS5iYXNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AZmx1ZW50dWkvcmVhY3QvbGliL2NvbXBvbmVudHMvQ29udGV4dHVhbE1lbnUvQ29udGV4dHVhbE1lbnUuc3R5bGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AZmx1ZW50dWkvcmVhY3QvbGliL2NvbXBvbmVudHMvQ29udGV4dHVhbE1lbnUvQ29udGV4dHVhbE1lbnUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BmbHVlbnR1aS9yZWFjdC9saWIvY29tcG9uZW50cy9CdXR0b24vQmFzZUJ1dHRvbi5jbGFzc05hbWVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AZmx1ZW50dWkvcmVhY3QvbGliL2NvbXBvbmVudHMvQnV0dG9uL1NwbGl0QnV0dG9uL1NwbGl0QnV0dG9uLmNsYXNzTmFtZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BmbHVlbnR1aS91dGlsaXRpZXMvbGliL2NvbXBvbmVudEFzL2NvbXBvc2VDb21wb25lbnRBcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGZsdWVudHVpL3JlYWN0L2xpYi9jb21wb25lbnRzL0J1dHRvbi9CYXNlQnV0dG9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AZmx1ZW50dWkvcmVhY3QvbGliL2NvbXBvbmVudHMvQnV0dG9uL0Jhc2VCdXR0b24uc3R5bGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AZmx1ZW50dWkvcmVhY3QvbGliL2NvbXBvbmVudHMvQnV0dG9uL1NwbGl0QnV0dG9uL1NwbGl0QnV0dG9uLnN0eWxlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGZsdWVudHVpL3JlYWN0L2xpYi9jb21wb25lbnRzL0J1dHRvbi9EZWZhdWx0QnV0dG9uL0RlZmF1bHRCdXR0b24uc3R5bGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AZmx1ZW50dWkvcmVhY3QvbGliL2NvbXBvbmVudHMvQnV0dG9uL0J1dHRvblRoZW1lcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGZsdWVudHVpL3JlYWN0L2xpYi9jb21wb25lbnRzL0J1dHRvbi9EZWZhdWx0QnV0dG9uL0RlZmF1bHRCdXR0b24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BmbHVlbnR1aS9yZWFjdC9saWIvY29tcG9uZW50cy9CdXR0b24vUHJpbWFyeUJ1dHRvbi9QcmltYXJ5QnV0dG9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL3NldFByb3RvdHlwZU9mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL3R5cGVvZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQuanMiXSwibmFtZXMiOlsiaW5zdGFsbGVkTW9kdWxlcyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImV4cG9ydHMiLCJtb2R1bGUiLCJpIiwibCIsIm1vZHVsZXMiLCJjYWxsIiwibSIsImMiLCJkIiwibmFtZSIsImdldHRlciIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJyIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJ2YWx1ZSIsInQiLCJtb2RlIiwiX19lc01vZHVsZSIsIm5zIiwiY3JlYXRlIiwia2V5IiwiYmluZCIsIm4iLCJvYmplY3QiLCJwcm9wZXJ0eSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwicCIsInMiLCJjaGVja0RDRSIsIl9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyIsImVyciIsImNvbnNvbGUiLCJlcnJvciIsIl9nZXRQcm90b3R5cGVPZiIsInNldFByb3RvdHlwZU9mIiwiZ2V0UHJvdG90eXBlT2YiLCJfX3Byb3RvX18iLCJpbnN0YW5jZSIsIkNvbnN0cnVjdG9yIiwiVHlwZUVycm9yIiwiX2RlZmluZVByb3BlcnRpZXMiLCJ0YXJnZXQiLCJwcm9wcyIsImxlbmd0aCIsImRlc2NyaXB0b3IiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsInByb3RvUHJvcHMiLCJzdGF0aWNQcm9wcyIsImciLCJ0aGlzIiwiRnVuY3Rpb24iLCJlIiwid2luZG93Iiwic3ViQ2xhc3MiLCJzdXBlckNsYXNzIiwiY29uc3RydWN0b3IiLCJfdHlwZW9mIiwiYXNzZXJ0VGhpc0luaXRpYWxpemVkIiwic2VsZiIsImRlZmF1bHRET00iLCJSZWFjdERPTSIsIlJlYWN0RE9NMiIsIlByaW1hcnlCdXR0b24iLCJjcmVhdGVSb290IiwiaHlkcmF0ZVJvb3QiLCJfX2Fzc2lnbiIsImFzc2lnbiIsImFyZ3VtZW50cyIsImFwcGx5IiwiX3Jvb3QiLCJnbG9iYWwiLCJfc3R5bGVOb25jZSIsIkNTUFNldHRpbmdzIiwibm9uY2UiLCJfdGhlbWVTdGF0ZSIsInN0YXRlIiwiX190aGVtZVN0YXRlX18iLCJ0aGVtZSIsInVuZGVmaW5lZCIsImxhc3RTdHlsZUVsZW1lbnQiLCJyZWdpc3RlcmVkU3R5bGVzIiwicnVuU3RhdGUiLCJwZXJmIiwiY291bnQiLCJkdXJhdGlvbiIsImZsdXNoVGltZXIiLCJidWZmZXIiLCJyZWdpc3RlcmVkVGhlbWFibGVTdHlsZXMiLCJpbml0aWFsaXplVGhlbWVTdGF0ZSIsImFwcGx5VGhlbWFibGVTdHlsZXMiLCJzdHlsZXNBcnJheSIsInN0eWxlUmVjb3JkIiwibG9hZFN0eWxlcyIsInJlc29sdmVUaGVtYWJsZUFycmF5Iiwic3R5bGVTdHJpbmciLCJzdHlsZUFycmF5IiwiZG9jdW1lbnQiLCJoZWFkIiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJzdHlsZUVsZW1lbnQiLCJjcmVhdGVFbGVtZW50IiwiX2EiLCJ0aGVtYWJsZSIsInNldEF0dHJpYnV0ZSIsImFwcGVuZENoaWxkIiwiY3JlYXRlVGV4dE5vZGUiLCJldiIsImNyZWF0ZUV2ZW50IiwiaW5pdEV2ZW50IiwiYXJncyIsIm5ld1N0eWxlIiwiZGlzcGF0Y2hFdmVudCIsInJlY29yZCIsInRoZW1hYmxlU3R5bGUiLCJwdXNoIiwicmVnaXN0ZXJTdHlsZXMiLCJsb2FkVGhlbWUiLCJ0aGVtYWJsZVN0eWxlcyIsIl9pIiwib3B0aW9uIiwiY2xlYXJTdHlsZXNJbnRlcm5hbCIsImNsZWFyU3R5bGVzIiwiY29uY2F0IiwicmVsb2FkU3R5bGVzIiwicmVjb3JkcyIsImZvckVhY2giLCJwYXJlbnRFbGVtZW50IiwicmVtb3ZlQ2hpbGQiLCJzcGxpdFN0eWxlQXJyYXkiLCJtYXAiLCJjdXJyZW50VmFsdWUiLCJ0aGVtZVNsb3QiLCJ0aGVtZWRWYWx1ZSIsImRlZmF1bHRWYWx1ZSIsIkRFQlVHIiwid2FybiIsInJhd1N0cmluZyIsImpvaW4iLCJwYWNrYWdlc0NhY2hlIiwiX3dpbiIsInNldFZlcnNpb24iLCJwYWNrYWdlTmFtZSIsInBhY2thZ2VWZXJzaW9uIiwicGFja2FnZXMiLCJfX3BhY2thZ2VzX18iLCJjYWNoZWRTZXRUaW1lb3V0IiwiY2FjaGVkQ2xlYXJUaW1lb3V0IiwicHJvY2VzcyIsImRlZmF1bHRTZXRUaW1vdXQiLCJFcnJvciIsImRlZmF1bHRDbGVhclRpbWVvdXQiLCJydW5UaW1lb3V0IiwiZnVuIiwic2V0VGltZW91dCIsImNsZWFyVGltZW91dCIsImN1cnJlbnRRdWV1ZSIsInF1ZXVlIiwiZHJhaW5pbmciLCJxdWV1ZUluZGV4IiwiY2xlYW5VcE5leHRUaWNrIiwiZHJhaW5RdWV1ZSIsInRpbWVvdXQiLCJsZW4iLCJydW4iLCJtYXJrZXIiLCJydW5DbGVhclRpbWVvdXQiLCJJdGVtIiwiYXJyYXkiLCJub29wIiwibmV4dFRpY2siLCJBcnJheSIsInRpdGxlIiwiYnJvd3NlciIsImVudiIsImFyZ3YiLCJ2ZXJzaW9uIiwidmVyc2lvbnMiLCJvbiIsImFkZExpc3RlbmVyIiwib25jZSIsIm9mZiIsInJlbW92ZUxpc3RlbmVyIiwicmVtb3ZlQWxsTGlzdGVuZXJzIiwiZW1pdCIsInByZXBlbmRMaXN0ZW5lciIsInByZXBlbmRPbmNlTGlzdGVuZXIiLCJsaXN0ZW5lcnMiLCJiaW5kaW5nIiwiY3dkIiwiY2hkaXIiLCJkaXIiLCJ1bWFzayIsImZvciIsInEiLCJ1IiwidiIsInciLCJ4IiwieSIsInoiLCJpdGVyYXRvciIsIkIiLCJpc01vdW50ZWQiLCJlbnF1ZXVlRm9yY2VVcGRhdGUiLCJlbnF1ZXVlUmVwbGFjZVN0YXRlIiwiZW5xdWV1ZVNldFN0YXRlIiwiQyIsIkQiLCJFIiwiYSIsImIiLCJjb250ZXh0IiwicmVmcyIsInVwZGF0ZXIiLCJGIiwiRyIsImlzUmVhY3RDb21wb25lbnQiLCJzZXRTdGF0ZSIsImZvcmNlVXBkYXRlIiwiSCIsImlzUHVyZVJlYWN0Q29tcG9uZW50IiwiSSIsImlzQXJyYXkiLCJKIiwiSyIsImN1cnJlbnQiLCJMIiwicmVmIiwiX19zZWxmIiwiX19zb3VyY2UiLCJNIiwiayIsImgiLCJjaGlsZHJlbiIsImYiLCJkZWZhdWx0UHJvcHMiLCIkJHR5cGVvZiIsInR5cGUiLCJfb3duZXIiLCJPIiwiUCIsIlEiLCJyZXBsYWNlIiwiZXNjYXBlIiwidG9TdHJpbmciLCJSIiwiTiIsIkEiLCJuZXh0IiwiZG9uZSIsIlN0cmluZyIsImtleXMiLCJTIiwiVCIsIl9zdGF0dXMiLCJfcmVzdWx0IiwidGhlbiIsImRlZmF1bHQiLCJVIiwiViIsInRyYW5zaXRpb24iLCJXIiwiUmVhY3RDdXJyZW50RGlzcGF0Y2hlciIsIlJlYWN0Q3VycmVudEJhdGNoQ29uZmlnIiwiUmVhY3RDdXJyZW50T3duZXIiLCJDaGlsZHJlbiIsInRvQXJyYXkiLCJvbmx5IiwiQ29tcG9uZW50IiwiRnJhZ21lbnQiLCJQcm9maWxlciIsIlB1cmVDb21wb25lbnQiLCJTdHJpY3RNb2RlIiwiU3VzcGVuc2UiLCJfX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRCIsImNsb25lRWxlbWVudCIsImNyZWF0ZUNvbnRleHQiLCJfY3VycmVudFZhbHVlIiwiX2N1cnJlbnRWYWx1ZTIiLCJfdGhyZWFkQ291bnQiLCJQcm92aWRlciIsIkNvbnN1bWVyIiwiX2RlZmF1bHRWYWx1ZSIsIl9nbG9iYWxOYW1lIiwiX2NvbnRleHQiLCJjcmVhdGVGYWN0b3J5IiwiY3JlYXRlUmVmIiwiZm9yd2FyZFJlZiIsInJlbmRlciIsImlzVmFsaWRFbGVtZW50IiwibGF6eSIsIl9wYXlsb2FkIiwiX2luaXQiLCJtZW1vIiwiY29tcGFyZSIsInN0YXJ0VHJhbnNpdGlvbiIsInVuc3RhYmxlX2FjdCIsInVzZUNhbGxiYWNrIiwidXNlQ29udGV4dCIsInVzZURlYnVnVmFsdWUiLCJ1c2VEZWZlcnJlZFZhbHVlIiwidXNlRWZmZWN0IiwidXNlSWQiLCJ1c2VJbXBlcmF0aXZlSGFuZGxlIiwidXNlSW5zZXJ0aW9uRWZmZWN0IiwidXNlTGF5b3V0RWZmZWN0IiwidXNlTWVtbyIsInVzZVJlZHVjZXIiLCJ1c2VSZWYiLCJ1c2VTdGF0ZSIsInVzZVN5bmNFeHRlcm5hbFN0b3JlIiwidXNlVHJhbnNpdGlvbiIsImFhIiwiYmEiLCJlbmNvZGVVUklDb21wb25lbnQiLCJjYSIsIlNldCIsImRhIiwiZWEiLCJmYSIsImFkZCIsImhhIiwiaWEiLCJqYSIsImthIiwibGEiLCJhY2NlcHRzQm9vbGVhbnMiLCJhdHRyaWJ1dGVOYW1lIiwiYXR0cmlidXRlTmFtZXNwYWNlIiwibXVzdFVzZVByb3BlcnR5IiwicHJvcGVydHlOYW1lIiwic2FuaXRpemVVUkwiLCJyZW1vdmVFbXB0eVN0cmluZyIsInNwbGl0IiwidG9Mb3dlckNhc2UiLCJwYSIsInFhIiwidG9VcHBlckNhc2UiLCJyYSIsInNsaWNlIiwibmEiLCJpc05hTiIsIm9hIiwidGVzdCIsIm1hIiwicmVtb3ZlQXR0cmlidXRlIiwic2V0QXR0cmlidXRlTlMiLCJ4bGlua0hyZWYiLCJzYSIsInRhIiwidWEiLCJ2YSIsIndhIiwieGEiLCJ5YSIsIkFhIiwiQmEiLCJDYSIsIkRhIiwiRWEiLCJGYSIsIkdhIiwiSGEiLCJJYSIsIkphIiwiS2EiLCJzdGFjayIsInRyaW0iLCJtYXRjaCIsIkxhIiwiTWEiLCJwcmVwYXJlU3RhY2tUcmFjZSIsInNldCIsIlJlZmxlY3QiLCJjb25zdHJ1Y3QiLCJkaXNwbGF5TmFtZSIsImluY2x1ZGVzIiwiTmEiLCJ0YWciLCJQYSIsIk9hIiwiUWEiLCJSYSIsIm5vZGVOYW1lIiwiVGEiLCJfdmFsdWVUcmFja2VyIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiZ2V0VmFsdWUiLCJzZXRWYWx1ZSIsInN0b3BUcmFja2luZyIsIlNhIiwiVWEiLCJjaGVja2VkIiwiVmEiLCJhY3RpdmVFbGVtZW50IiwiYm9keSIsIldhIiwiZGVmYXVsdENoZWNrZWQiLCJfd3JhcHBlclN0YXRlIiwiaW5pdGlhbENoZWNrZWQiLCJYYSIsImluaXRpYWxWYWx1ZSIsImNvbnRyb2xsZWQiLCJZYSIsIlphIiwiJGEiLCJhYiIsIm93bmVyRG9jdW1lbnQiLCJiYiIsImNiIiwib3B0aW9ucyIsInNlbGVjdGVkIiwiZGVmYXVsdFNlbGVjdGVkIiwiZGlzYWJsZWQiLCJkYiIsImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MIiwiZWIiLCJmYiIsImdiIiwidGV4dENvbnRlbnQiLCJoYiIsImliIiwiamIiLCJrYiIsIk1TQXBwIiwiZXhlY1Vuc2FmZUxvY2FsRnVuY3Rpb24iLCJuYW1lc3BhY2VVUkkiLCJpbm5lckhUTUwiLCJ2YWx1ZU9mIiwiZmlyc3RDaGlsZCIsImxiIiwibGFzdENoaWxkIiwibm9kZVR5cGUiLCJub2RlVmFsdWUiLCJtYiIsImFuaW1hdGlvbkl0ZXJhdGlvbkNvdW50IiwiYXNwZWN0UmF0aW8iLCJib3JkZXJJbWFnZU91dHNldCIsImJvcmRlckltYWdlU2xpY2UiLCJib3JkZXJJbWFnZVdpZHRoIiwiYm94RmxleCIsImJveEZsZXhHcm91cCIsImJveE9yZGluYWxHcm91cCIsImNvbHVtbkNvdW50IiwiY29sdW1ucyIsImZsZXgiLCJmbGV4R3JvdyIsImZsZXhQb3NpdGl2ZSIsImZsZXhTaHJpbmsiLCJmbGV4TmVnYXRpdmUiLCJmbGV4T3JkZXIiLCJncmlkQXJlYSIsImdyaWRSb3ciLCJncmlkUm93RW5kIiwiZ3JpZFJvd1NwYW4iLCJncmlkUm93U3RhcnQiLCJncmlkQ29sdW1uIiwiZ3JpZENvbHVtbkVuZCIsImdyaWRDb2x1bW5TcGFuIiwiZ3JpZENvbHVtblN0YXJ0IiwiZm9udFdlaWdodCIsImxpbmVDbGFtcCIsImxpbmVIZWlnaHQiLCJvcGFjaXR5Iiwib3JkZXIiLCJvcnBoYW5zIiwidGFiU2l6ZSIsIndpZG93cyIsInpJbmRleCIsInpvb20iLCJmaWxsT3BhY2l0eSIsImZsb29kT3BhY2l0eSIsInN0b3BPcGFjaXR5Iiwic3Ryb2tlRGFzaGFycmF5Iiwic3Ryb2tlRGFzaG9mZnNldCIsInN0cm9rZU1pdGVybGltaXQiLCJzdHJva2VPcGFjaXR5Iiwic3Ryb2tlV2lkdGgiLCJuYiIsIm9iIiwicGIiLCJzdHlsZSIsImluZGV4T2YiLCJzZXRQcm9wZXJ0eSIsImNoYXJBdCIsInN1YnN0cmluZyIsInFiIiwibWVudWl0ZW0iLCJhcmVhIiwiYmFzZSIsImJyIiwiY29sIiwiZW1iZWQiLCJociIsImltZyIsImlucHV0Iiwia2V5Z2VuIiwibGluayIsIm1ldGEiLCJwYXJhbSIsInNvdXJjZSIsInRyYWNrIiwid2JyIiwicmIiLCJzYiIsImlzIiwidGIiLCJ1YiIsInNyY0VsZW1lbnQiLCJjb3JyZXNwb25kaW5nVXNlRWxlbWVudCIsInBhcmVudE5vZGUiLCJ2YiIsIndiIiwieGIiLCJ5YiIsInpiIiwic3RhdGVOb2RlIiwiQWIiLCJCYiIsIkNiIiwiRGIiLCJFYiIsIkZiIiwiR2IiLCJIYiIsIkliIiwiSmIiLCJhZGRFdmVudExpc3RlbmVyIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsIktiIiwib25FcnJvciIsIkxiIiwiTWIiLCJOYiIsIk9iIiwiUGIiLCJRYiIsIlNiIiwiYWx0ZXJuYXRlIiwicmV0dXJuIiwiZmxhZ3MiLCJUYiIsIm1lbW9pemVkU3RhdGUiLCJkZWh5ZHJhdGVkIiwiVWIiLCJXYiIsImNoaWxkIiwic2libGluZyIsIlZiIiwiWGIiLCJZYiIsInVuc3RhYmxlX3NjaGVkdWxlQ2FsbGJhY2siLCJaYiIsInVuc3RhYmxlX2NhbmNlbENhbGxiYWNrIiwiJGIiLCJ1bnN0YWJsZV9zaG91bGRZaWVsZCIsImFjIiwidW5zdGFibGVfcmVxdWVzdFBhaW50IiwidW5zdGFibGVfbm93IiwiYmMiLCJ1bnN0YWJsZV9nZXRDdXJyZW50UHJpb3JpdHlMZXZlbCIsImNjIiwidW5zdGFibGVfSW1tZWRpYXRlUHJpb3JpdHkiLCJkYyIsInVuc3RhYmxlX1VzZXJCbG9ja2luZ1ByaW9yaXR5IiwiZWMiLCJ1bnN0YWJsZV9Ob3JtYWxQcmlvcml0eSIsImZjIiwidW5zdGFibGVfTG93UHJpb3JpdHkiLCJnYyIsInVuc3RhYmxlX0lkbGVQcmlvcml0eSIsImhjIiwiaWMiLCJsYyIsIk1hdGgiLCJjbHozMiIsIm1jIiwibmMiLCJsb2ciLCJMTjIiLCJvYyIsInBjIiwicWMiLCJyYyIsInBlbmRpbmdMYW5lcyIsInN1c3BlbmRlZExhbmVzIiwicGluZ2VkTGFuZXMiLCJlbnRhbmdsZWRMYW5lcyIsImVudGFuZ2xlbWVudHMiLCJzYyIsInVjIiwidmMiLCJ3YyIsImV2ZW50VGltZXMiLCJ5YyIsInpjIiwiQWMiLCJCYyIsIkNjIiwiRGMiLCJFYyIsIkZjIiwiR2MiLCJIYyIsIkljIiwiSmMiLCJLYyIsIk1hcCIsIkxjIiwiTWMiLCJOYyIsIk9jIiwiZGVsZXRlIiwicG9pbnRlcklkIiwiUGMiLCJuYXRpdmVFdmVudCIsImJsb2NrZWRPbiIsImRvbUV2ZW50TmFtZSIsImV2ZW50U3lzdGVtRmxhZ3MiLCJ0YXJnZXRDb250YWluZXJzIiwiUmMiLCJTYyIsInByaW9yaXR5IiwiaXNEZWh5ZHJhdGVkIiwiY29udGFpbmVySW5mbyIsIlRjIiwiVWMiLCJzaGlmdCIsIlZjIiwiV2MiLCJYYyIsIlljIiwiWmMiLCIkYyIsImFkIiwiYmQiLCJjZCIsImRkIiwiUWMiLCJzdG9wUHJvcGFnYXRpb24iLCJlZCIsImZkIiwiZ2QiLCJoZCIsImlkIiwiamQiLCJrZXlDb2RlIiwiY2hhckNvZGUiLCJrZCIsImxkIiwibWQiLCJfcmVhY3ROYW1lIiwiX3RhcmdldEluc3QiLCJjdXJyZW50VGFyZ2V0IiwiaXNEZWZhdWx0UHJldmVudGVkIiwiZGVmYXVsdFByZXZlbnRlZCIsInJldHVyblZhbHVlIiwiaXNQcm9wYWdhdGlvblN0b3BwZWQiLCJwcmV2ZW50RGVmYXVsdCIsImNhbmNlbEJ1YmJsZSIsInBlcnNpc3QiLCJpc1BlcnNpc3RlbnQiLCJyZCIsInNkIiwidGQiLCJuZCIsImV2ZW50UGhhc2UiLCJidWJibGVzIiwiY2FuY2VsYWJsZSIsInRpbWVTdGFtcCIsIkRhdGUiLCJub3ciLCJpc1RydXN0ZWQiLCJvZCIsInBkIiwidmlldyIsImRldGFpbCIsInFkIiwidmQiLCJzY3JlZW5YIiwic2NyZWVuWSIsImNsaWVudFgiLCJjbGllbnRZIiwicGFnZVgiLCJwYWdlWSIsImN0cmxLZXkiLCJzaGlmdEtleSIsImFsdEtleSIsIm1ldGFLZXkiLCJnZXRNb2RpZmllclN0YXRlIiwidWQiLCJidXR0b24iLCJidXR0b25zIiwicmVsYXRlZFRhcmdldCIsImZyb21FbGVtZW50IiwidG9FbGVtZW50IiwibW92ZW1lbnRYIiwibW92ZW1lbnRZIiwid2QiLCJ5ZCIsImRhdGFUcmFuc2ZlciIsIkFkIiwiQ2QiLCJhbmltYXRpb25OYW1lIiwiZWxhcHNlZFRpbWUiLCJwc2V1ZG9FbGVtZW50IiwiRWQiLCJjbGlwYm9hcmREYXRhIiwiR2QiLCJkYXRhIiwiSGQiLCJFc2MiLCJTcGFjZWJhciIsIkxlZnQiLCJVcCIsIlJpZ2h0IiwiRG93biIsIkRlbCIsIldpbiIsIk1lbnUiLCJBcHBzIiwiU2Nyb2xsIiwiTW96UHJpbnRhYmxlS2V5IiwiSWQiLCI4IiwiOSIsIjEyIiwiMTMiLCIxNiIsIjE3IiwiMTgiLCIxOSIsIjIwIiwiMjciLCIzMiIsIjMzIiwiMzQiLCIzNSIsIjM2IiwiMzciLCIzOCIsIjM5IiwiNDAiLCI0NSIsIjQ2IiwiMTEyIiwiMTEzIiwiMTE0IiwiMTE1IiwiMTE2IiwiMTE3IiwiMTE4IiwiMTE5IiwiMTIwIiwiMTIxIiwiMTIyIiwiMTIzIiwiMTQ0IiwiMTQ1IiwiMjI0IiwiSmQiLCJBbHQiLCJDb250cm9sIiwiTWV0YSIsIlNoaWZ0IiwiS2QiLCJNZCIsImZyb21DaGFyQ29kZSIsImNvZGUiLCJsb2NhdGlvbiIsInJlcGVhdCIsImxvY2FsZSIsIndoaWNoIiwiT2QiLCJ3aWR0aCIsImhlaWdodCIsInByZXNzdXJlIiwidGFuZ2VudGlhbFByZXNzdXJlIiwidGlsdFgiLCJ0aWx0WSIsInR3aXN0IiwicG9pbnRlclR5cGUiLCJpc1ByaW1hcnkiLCJRZCIsInRvdWNoZXMiLCJ0YXJnZXRUb3VjaGVzIiwiY2hhbmdlZFRvdWNoZXMiLCJTZCIsIlVkIiwiZGVsdGFYIiwid2hlZWxEZWx0YVgiLCJkZWx0YVkiLCJ3aGVlbERlbHRhWSIsIndoZWVsRGVsdGEiLCJkZWx0YVoiLCJkZWx0YU1vZGUiLCJWZCIsIldkIiwiWGQiLCJkb2N1bWVudE1vZGUiLCJZZCIsIlpkIiwiJGQiLCJhZSIsImJlIiwiY2UiLCJkZSIsImdlIiwiY29sb3IiLCJkYXRlIiwiZGF0ZXRpbWUiLCJlbWFpbCIsIm1vbnRoIiwibnVtYmVyIiwicGFzc3dvcmQiLCJyYW5nZSIsInNlYXJjaCIsInRlbCIsInRleHQiLCJ0aW1lIiwidXJsIiwid2VlayIsImhlIiwiaWUiLCJqZSIsImV2ZW50Iiwia2UiLCJsZSIsIm1lIiwibmUiLCJvZSIsInBlIiwicWUiLCJyZSIsInNlIiwidGUiLCJ1ZSIsIm9uaW5wdXQiLCJ2ZSIsImRldGFjaEV2ZW50Iiwid2UiLCJ4ZSIsImF0dGFjaEV2ZW50IiwieWUiLCJ6ZSIsIkFlIiwiQ2UiLCJEZSIsIkVlIiwiRmUiLCJub2RlIiwib2Zmc2V0IiwibmV4dFNpYmxpbmciLCJIZSIsIkhUTUxJRnJhbWVFbGVtZW50IiwiY29udGVudFdpbmRvdyIsImhyZWYiLCJJZSIsImNvbnRlbnRFZGl0YWJsZSIsIkplIiwiZm9jdXNlZEVsZW0iLCJzZWxlY3Rpb25SYW5nZSIsIkdlIiwiY29udGFpbnMiLCJjb21wYXJlRG9jdW1lbnRQb3NpdGlvbiIsImRvY3VtZW50RWxlbWVudCIsInN0YXJ0IiwiZW5kIiwic2VsZWN0aW9uU3RhcnQiLCJzZWxlY3Rpb25FbmQiLCJtaW4iLCJkZWZhdWx0VmlldyIsImdldFNlbGVjdGlvbiIsImV4dGVuZCIsInJhbmdlQ291bnQiLCJhbmNob3JOb2RlIiwiYW5jaG9yT2Zmc2V0IiwiZm9jdXNOb2RlIiwiZm9jdXNPZmZzZXQiLCJjcmVhdGVSYW5nZSIsInNldFN0YXJ0IiwicmVtb3ZlQWxsUmFuZ2VzIiwiYWRkUmFuZ2UiLCJzZXRFbmQiLCJlbGVtZW50IiwibGVmdCIsInNjcm9sbExlZnQiLCJ0b3AiLCJzY3JvbGxUb3AiLCJmb2N1cyIsIktlIiwiTGUiLCJNZSIsIk5lIiwiT2UiLCJQZSIsIlFlIiwiUmUiLCJhbmltYXRpb25lbmQiLCJhbmltYXRpb25pdGVyYXRpb24iLCJhbmltYXRpb25zdGFydCIsInRyYW5zaXRpb25lbmQiLCJTZSIsIlRlIiwiVWUiLCJhbmltYXRpb24iLCJWZSIsIldlIiwiWGUiLCJZZSIsIlplIiwiJGUiLCJhZiIsImJmIiwiY2YiLCJmZiIsImdmIiwiaGYiLCJSYiIsImxpc3RlbmVyIiwiamYiLCJoYXMiLCJrZiIsImxmIiwibWYiLCJyYW5kb20iLCJuZiIsImNhcHR1cmUiLCJwYXNzaXZlIiwib2YiLCJwZiIsInBhcmVudFdpbmRvdyIsInFmIiwicmYiLCJ6YSIsImVlIiwiY2hhciIsImZlIiwidW5zaGlmdCIsInNmIiwidGYiLCJ1ZiIsInZmIiwid2YiLCJ4ZiIsInlmIiwiX19odG1sIiwiemYiLCJBZiIsIkJmIiwiUHJvbWlzZSIsIkRmIiwicXVldWVNaWNyb3Rhc2siLCJyZXNvbHZlIiwiY2F0Y2giLCJDZiIsIkVmIiwiRmYiLCJHZiIsInByZXZpb3VzU2libGluZyIsIkhmIiwiSWYiLCJKZiIsIktmIiwiTGYiLCJNZiIsIk5mIiwiT2YiLCJQZiIsIlFmIiwiUmYiLCJTZiIsImNvbnRleHRUeXBlcyIsIl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQiLCJfX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dCIsIlRmIiwiY2hpbGRDb250ZXh0VHlwZXMiLCJVZiIsIlZmIiwiV2YiLCJnZXRDaGlsZENvbnRleHQiLCJYZiIsIl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0IiwiWWYiLCJaZiIsIiRmIiwiYWciLCJiZyIsImRnIiwiZWciLCJmZyIsImdnIiwiaGciLCJpZyIsImpnIiwia2ciLCJsZyIsIm1nIiwiY2hpbGRMYW5lcyIsIm5nIiwiZGVwZW5kZW5jaWVzIiwiZmlyc3RDb250ZXh0IiwibGFuZXMiLCJvZyIsInBnIiwibWVtb2l6ZWRWYWx1ZSIsInFnIiwicmciLCJzZyIsInVwZGF0ZVF1ZXVlIiwiYmFzZVN0YXRlIiwiZmlyc3RCYXNlVXBkYXRlIiwibGFzdEJhc2VVcGRhdGUiLCJzaGFyZWQiLCJwZW5kaW5nIiwiaW50ZXJsZWF2ZWQiLCJlZmZlY3RzIiwidGciLCJ1ZyIsImV2ZW50VGltZSIsImxhbmUiLCJwYXlsb2FkIiwiY2FsbGJhY2siLCJ2ZyIsIndnIiwieGciLCJ5ZyIsInpnIiwiQWciLCJCZyIsIkNnIiwiRmciLCJfcmVhY3RJbnRlcm5hbHMiLCJEZyIsIkVnIiwiR2ciLCJzaG91bGRDb21wb25lbnRVcGRhdGUiLCJIZyIsImNvbnRleHRUeXBlIiwiSWciLCJjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzIiwiVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMiLCJKZyIsImdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyIsImdldFNuYXBzaG90QmVmb3JlVXBkYXRlIiwiVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCIsImNvbXBvbmVudFdpbGxNb3VudCIsImNvbXBvbmVudERpZE1vdW50IiwiS2ciLCJMZyIsIk1nIiwiTmciLCJPZyIsIlBnIiwiUWciLCJSZyIsIlNnIiwiVGciLCJVZyIsIlZnIiwiV2ciLCJYZyIsIllnIiwiWmciLCIkZyIsImFoIiwiZWxlbWVudFR5cGUiLCJkZWxldGlvbnMiLCJiaCIsInBlbmRpbmdQcm9wcyIsIm92ZXJmbG93IiwidHJlZUNvbnRleHQiLCJyZXRyeUxhbmUiLCJjaCIsImRoIiwiZWgiLCJmaCIsIm1lbW9pemVkUHJvcHMiLCJnaCIsImhoIiwiaWgiLCJfc3RyaW5nUmVmIiwiamgiLCJraCIsImxoIiwiaW5kZXgiLCJtaCIsIm5oIiwib2giLCJpbXBsZW1lbnRhdGlvbiIsInBoIiwicWgiLCJyaCIsInNoIiwidGgiLCJ1aCIsInZoIiwid2giLCJ4aCIsInloIiwidGFnTmFtZSIsInpoIiwiQWgiLCJCaCIsIkNoIiwicmV2ZWFsT3JkZXIiLCJEaCIsIkVoIiwiX3dvcmtJblByb2dyZXNzVmVyc2lvblByaW1hcnkiLCJGaCIsIkdoIiwiSGgiLCJJaCIsIkpoIiwiS2giLCJMaCIsIk1oIiwiTmgiLCJPaCIsIlBoIiwiUWgiLCJSaCIsIlNoIiwiVGgiLCJiYXNlUXVldWUiLCJVaCIsIlZoIiwiV2giLCJsYXN0UmVuZGVyZWRSZWR1Y2VyIiwiYWN0aW9uIiwiaGFzRWFnZXJTdGF0ZSIsImVhZ2VyU3RhdGUiLCJsYXN0UmVuZGVyZWRTdGF0ZSIsImRpc3BhdGNoIiwiWGgiLCJZaCIsIlpoIiwiJGgiLCJhaSIsImdldFNuYXBzaG90IiwiYmkiLCJjaSIsImRpIiwibGFzdEVmZmVjdCIsInN0b3JlcyIsImVpIiwiZmkiLCJnaSIsImRlc3Ryb3kiLCJkZXBzIiwiaGkiLCJpaSIsImppIiwia2kiLCJsaSIsIm1pIiwibmkiLCJvaSIsInBpIiwicWkiLCJyaSIsInNpIiwidGkiLCJ1aSIsInZpIiwid2kiLCJ4aSIsInlpIiwicmVhZENvbnRleHQiLCJ1c2VNdXRhYmxlU291cmNlIiwidW5zdGFibGVfaXNOZXdSZWNvbmNpbGVyIiwiaWRlbnRpZmllclByZWZpeCIsInppIiwibWVzc2FnZSIsIkFpIiwiTGkiLCJOaSIsIk9pIiwiQmkiLCJXZWFrTWFwIiwiQ2kiLCJEaSIsIkVpIiwiRmkiLCJnZXREZXJpdmVkU3RhdGVGcm9tRXJyb3IiLCJjb21wb25lbnREaWRDYXRjaCIsIkdpIiwiY29tcG9uZW50U3RhY2siLCJIaSIsInBpbmdDYWNoZSIsIklpIiwiSmkiLCJLaSIsIlBpIiwidGFpbE1vZGUiLCJ0YWlsIiwic3VidHJlZUZsYWdzIiwiUWkiLCJwZW5kaW5nQ29udGV4dCIsIlJpIiwid2FzTXVsdGlwbGUiLCJtdWx0aXBsZSIsIm9uQ2xpY2siLCJvbmNsaWNrIiwic2l6ZSIsImNyZWF0ZUVsZW1lbnROUyIsImF1dG9Gb2N1cyIsIlNpIiwicmVuZGVyaW5nIiwiVGkiLCJyZW5kZXJpbmdTdGFydFRpbWUiLCJpc0JhY2t3YXJkcyIsImxhc3QiLCJVaSIsIlZpIiwiV2kiLCJYaSIsIllpIiwiWmkiLCIkaSIsImFqIiwiYmoiLCJjaiIsImRqIiwiYmFzZUxhbmVzIiwiY2FjaGVQb29sIiwiZWoiLCJmaiIsImdqIiwiVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUiLCJjb21wb25lbnRXaWxsVXBkYXRlIiwiY29tcG9uZW50RGlkVXBkYXRlIiwiaGoiLCJpaiIsImpqIiwia2oiLCJsaiIsIm1qIiwiZmFsbGJhY2siLCJuaiIsIm9qIiwicGoiLCJxaiIsIl9yZWFjdFJldHJ5IiwicmoiLCJzaiIsInRqIiwidWoiLCJ2aiIsInhqIiwieWoiLCJ6aiIsIkFqIiwiV2Vha1NldCIsIlgiLCJCaiIsIkNqIiwiRGoiLCJFaiIsIkdqIiwiSGoiLCJJaiIsIkpqIiwib25Db21taXRGaWJlclVubW91bnQiLCJjb21wb25lbnRXaWxsVW5tb3VudCIsIktqIiwiTGoiLCJNaiIsIk5qIiwiT2oiLCJQaiIsImluc2VydEJlZm9yZSIsIlFqIiwiX3JlYWN0Um9vdENvbnRhaW5lciIsIlJqIiwiU2oiLCJUaiIsIlhqIiwiWWoiLCJaaiIsImFrIiwiX19yZWFjdEludGVybmFsU25hcHNob3RCZWZvcmVVcGRhdGUiLCJzcmMiLCJXaiIsIkxrIiwiYmsiLCJjZWlsIiwiY2siLCJkayIsImVrIiwiWSIsIloiLCJmayIsImdrIiwiaGsiLCJpayIsImprIiwiVmoiLCJJbmZpbml0eSIsImtrIiwibGsiLCJtayIsIm5rIiwib2siLCJwayIsInFrIiwicmsiLCJzayIsInRrIiwiY2FsbGJhY2tOb2RlIiwiZXhwaXJhdGlvblRpbWVzIiwiZXhwaXJlZExhbmVzIiwidGMiLCJjYWxsYmFja1ByaW9yaXR5IiwiY2ciLCJ1ayIsInZrIiwid2siLCJ4ayIsInlrIiwiemsiLCJBayIsIkJrIiwiQ2siLCJEayIsIkVrIiwiZmluaXNoZWRXb3JrIiwiZmluaXNoZWRMYW5lcyIsIkZrIiwidGltZW91dEhhbmRsZSIsIkdrIiwiSGsiLCJJayIsIkprIiwiS2siLCJtdXRhYmxlUmVhZExhbmVzIiwieGMiLCJGaiIsImRpc3BsYXkiLCJVaiIsIm9uQ29tbWl0RmliZXJSb290IiwiamMiLCJvblJlY292ZXJhYmxlRXJyb3IiLCJNayIsIm9uUG9zdENvbW1pdEZpYmVyUm9vdCIsIk5rIiwiT2siLCJRayIsInBlbmRpbmdDaGlsZHJlbiIsIlJrIiwibXV0YWJsZVNvdXJjZUVhZ2VySHlkcmF0aW9uRGF0YSIsIlNrIiwiY2FjaGUiLCJ0cmFuc2l0aW9ucyIsIlRrIiwiVWsiLCJWayIsIldrIiwiWGsiLCJZayIsIlprIiwid2oiLCJQayIsImFsIiwicmVwb3J0RXJyb3IiLCJibCIsIl9pbnRlcm5hbFJvb3QiLCJjbCIsImRsIiwiZWwiLCJmbCIsImhsIiwiZ2wiLCJ1bm1vdW50IiwidW5zdGFibGVfc2NoZWR1bGVIeWRyYXRpb24iLCJzcGxpY2UiLCJxdWVyeVNlbGVjdG9yQWxsIiwiSlNPTiIsInN0cmluZ2lmeSIsImZvcm0iLCJpbCIsInVzaW5nQ2xpZW50RW50cnlQb2ludCIsIkV2ZW50cyIsImpsIiwiZmluZEZpYmVyQnlIb3N0SW5zdGFuY2UiLCJidW5kbGVUeXBlIiwicmVuZGVyZXJQYWNrYWdlTmFtZSIsImtsIiwicmVuZGVyZXJDb25maWciLCJvdmVycmlkZUhvb2tTdGF0ZSIsIm92ZXJyaWRlSG9va1N0YXRlRGVsZXRlUGF0aCIsIm92ZXJyaWRlSG9va1N0YXRlUmVuYW1lUGF0aCIsIm92ZXJyaWRlUHJvcHMiLCJvdmVycmlkZVByb3BzRGVsZXRlUGF0aCIsIm92ZXJyaWRlUHJvcHNSZW5hbWVQYXRoIiwic2V0RXJyb3JIYW5kbGVyIiwic2V0U3VzcGVuc2VIYW5kbGVyIiwic2NoZWR1bGVVcGRhdGUiLCJjdXJyZW50RGlzcGF0Y2hlclJlZiIsImZpbmRIb3N0SW5zdGFuY2VCeUZpYmVyIiwiZmluZEhvc3RJbnN0YW5jZXNGb3JSZWZyZXNoIiwic2NoZWR1bGVSZWZyZXNoIiwic2NoZWR1bGVSb290Iiwic2V0UmVmcmVzaEhhbmRsZXIiLCJnZXRDdXJyZW50RmliZXIiLCJyZWNvbmNpbGVyVmVyc2lvbiIsImxsIiwiaXNEaXNhYmxlZCIsInN1cHBvcnRzRmliZXIiLCJpbmplY3QiLCJjcmVhdGVQb3J0YWwiLCJ1bnN0YWJsZV9zdHJpY3RNb2RlIiwiZmluZERPTU5vZGUiLCJmbHVzaFN5bmMiLCJoeWRyYXRlIiwiaHlkcmF0ZWRTb3VyY2VzIiwiX2dldFZlcnNpb24iLCJfc291cmNlIiwidW5tb3VudENvbXBvbmVudEF0Tm9kZSIsInVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzIiwidW5zdGFibGVfcmVuZGVyU3VidHJlZUludG9Db250YWluZXIiLCJwb3AiLCJzb3J0SW5kZXgiLCJwZXJmb3JtYW5jZSIsInNldEltbWVkaWF0ZSIsInN0YXJ0VGltZSIsImV4cGlyYXRpb25UaW1lIiwicHJpb3JpdHlMZXZlbCIsIm5hdmlnYXRvciIsInNjaGVkdWxpbmciLCJpc0lucHV0UGVuZGluZyIsIk1lc3NhZ2VDaGFubmVsIiwicG9ydDIiLCJwb3J0MSIsIm9ubWVzc2FnZSIsInBvc3RNZXNzYWdlIiwidW5zdGFibGVfUHJvZmlsaW5nIiwidW5zdGFibGVfY29udGludWVFeGVjdXRpb24iLCJ1bnN0YWJsZV9mb3JjZUZyYW1lUmF0ZSIsImZsb29yIiwidW5zdGFibGVfZ2V0Rmlyc3RDYWxsYmFja05vZGUiLCJ1bnN0YWJsZV9uZXh0IiwidW5zdGFibGVfcGF1c2VFeGVjdXRpb24iLCJ1bnN0YWJsZV9ydW5XaXRoUHJpb3JpdHkiLCJkZWxheSIsInVuc3RhYmxlX3dyYXBDYWxsYmFjayIsIlRpbWVvdXQiLCJjbGVhckZuIiwiX2lkIiwiX2NsZWFyRm4iLCJzY29wZSIsInNldEludGVydmFsIiwiY2xlYXJJbnRlcnZhbCIsImNsb3NlIiwidW5yZWYiLCJlbnJvbGwiLCJpdGVtIiwibXNlY3MiLCJfaWRsZVRpbWVvdXRJZCIsIl9pZGxlVGltZW91dCIsInVuZW5yb2xsIiwiX3VucmVmQWN0aXZlIiwiYWN0aXZlIiwiX29uVGltZW91dCIsImNsZWFySW1tZWRpYXRlIiwicmVnaXN0ZXJJbW1lZGlhdGUiLCJodG1sIiwiY2hhbm5lbCIsIm1lc3NhZ2VQcmVmaXgiLCJvbkdsb2JhbE1lc3NhZ2UiLCJuZXh0SGFuZGxlIiwidGFza3NCeUhhbmRsZSIsImN1cnJlbnRseVJ1bm5pbmdBVGFzayIsImRvYyIsImF0dGFjaFRvIiwiaGFuZGxlIiwicnVuSWZQcmVzZW50IiwiaW1wb3J0U2NyaXB0cyIsInBvc3RNZXNzYWdlSXNBc3luY2hyb25vdXMiLCJvbGRPbk1lc3NhZ2UiLCJjYW5Vc2VQb3N0TWVzc2FnZSIsInNjcmlwdCIsIm9ucmVhZHlzdGF0ZWNoYW5nZSIsInRhc2siLCJNYWluMSIsImNsYXNzTmFtZSIsIlJlYWN0IiwiZXh0ZW5kU3RhdGljcyIsIl9fZXh0ZW5kcyIsIl9fIiwiX19yZXN0IiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwicHJvcGVydHlJc0VudW1lcmFibGUiLCJfX2RlY29yYXRlIiwiZGVjb3JhdG9ycyIsImRlc2MiLCJkZWNvcmF0ZSIsIl9fc3ByZWFkQXJyYXkiLCJ0byIsImZyb20iLCJwYWNrIiwiYXIiLCJfaXNTU1IiLCJfd2luZG93IiwiZ2V0V2luZG93Iiwicm9vdEVsZW1lbnQiLCJBc3luYyIsInBhcmVudCIsIl90aW1lb3V0SWRzIiwiX2ltbWVkaWF0ZUlkcyIsIl9pbnRlcnZhbElkcyIsIl9hbmltYXRpb25GcmFtZUlkcyIsIl9pc0Rpc3Bvc2VkIiwiX3BhcmVudCIsIl9vbkVycm9ySGFuZGxlciIsIl9ub29wIiwiZGlzcG9zZSIsInBhcnNlSW50IiwiY2FuY2VsQW5pbWF0aW9uRnJhbWUiLCJfdGhpcyIsInRpbWVvdXRJZCIsIl9sb2dFcnJvciIsInRhcmdldEVsZW1lbnQiLCJpbW1lZGlhdGVJZCIsIndpbiIsImludGVydmFsSWQiLCJ0aHJvdHRsZSIsImZ1bmMiLCJ3YWl0IiwibGFzdFJlc3VsdCIsImxhc3RBcmdzIiwid2FpdE1TIiwibGVhZGluZyIsInRyYWlsaW5nIiwibGFzdEV4ZWN1dGVUaW1lIiwidXNlckNhbGwiLCJkZWx0YSIsIndhaXRMZW5ndGgiLCJkZWJvdW5jZSIsIm5vT3BGdW5jdGlvbiIsImNhbmNlbCIsImZsdXNoIiwibWF4V2FpdCIsImxhc3RDYWxsVGltZSIsIm1hcmtFeGVjdXRlZCIsImludm9rZUZ1bmN0aW9uIiwiZXhlY3V0ZUltbWVkaWF0ZWx5IiwibWF4V2FpdERlbHRhIiwibWF4V2FpdEV4cGlyZWQiLCJyZXN1bHRGdW5jdGlvbiIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsImFuaW1hdGlvbkZyYW1lSWQiLCJhbmltYXRpb25GcmFtZUNhbGxiYWNrIiwic2hhbGxvd0NvbXBhcmUiLCJwcm9wTmFtZSIsImZpbHRlcmVkQXNzaWduIiwiaXNBbGxvd2VkIiwiYXJnc18xIiwic291cmNlT2JqZWN0IiwiRXZlbnRHcm91cCIsIl91bmlxdWVJZCIsIl9ldmVudFJlY29yZHMiLCJyYWlzZSIsImV2ZW50TmFtZSIsImV2ZW50QXJncyIsImJ1YmJsZUV2ZW50IiwicmV0VmFsIiwiX2lzRWxlbWVudCIsImNyZWF0ZUV2ZW50T2JqZWN0IiwiZXZPYmoiLCJmaXJlRXZlbnQiLCJldmVudHMiLCJfX2V2ZW50c19fIiwiZXZlbnRSZWNvcmRzIiwiZXZlbnRSZWNvcmRMaXN0IiwibGlzdEluZGV4Iiwib2JqZWN0Q2FsbGJhY2siLCJpc09ic2VydmVkIiwiaXNEZWNsYXJlZCIsImRlY2xhcmVkRXZlbnRzIiwiX19kZWNsYXJlZEV2ZW50cyIsIkhUTUxFbGVtZW50Iiwib25BbGwiLCJ1c2VDYXB0dXJlIiwicGFyZW50XzEiLCJldmVudFJlY29yZCIsInByb2Nlc3NFbGVtZW50RXZlbnQiLCJyZXN1bHQiLCJlbGVtZW50Q2FsbGJhY2siLCJ0YXJnZXRBcnJheUxvb2t1cCIsInRhcmdldEFycmF5IiwiZGVjbGFyZSIsIl9zdXBlciIsIkJhc2VDb21wb25lbnQiLCJvYmoiLCJtZXRob2ROYW1lcyIsIl9tYWtlU2FmZSIsIl9tYWtlQWxsU2FmZSIsInByZXZQcm9wcyIsInByZXZTdGF0ZSIsIl91cGRhdGVDb21wb25lbnRSZWYiLCJfc2V0Q29tcG9uZW50UmVmIiwiY29tcG9uZW50UmVmIiwiX19kaXNwb3NhYmxlcyIsIl9kaXNwb3NhYmxlcyIsImRpc3Bvc2FibGUiLCJfX2NsYXNzTmFtZSIsInJlc3VsdHMiLCJleGVjIiwiX19hc3luYyIsIl9fZXZlbnRzIiwiX3Jlc29sdmVSZWYiLCJyZWZOYW1lIiwiX19yZXNvbHZlcyIsImN1cnJlbnRQcm9wcyIsIm5ld1Byb3BzIiwiX3dhcm5EZXByZWNhdGlvbnMiLCJkZXByZWNhdGlvbk1hcCIsIl93YXJuTXV0dWFsbHlFeGNsdXNpdmUiLCJtdXR1YWxseUV4Y2x1c2l2ZU1hcCIsIl93YXJuQ29uZGl0aW9uYWxseVJlcXVpcmVkUHJvcHMiLCJyZXF1aXJlZFByb3BzIiwiY29uZGl0aW9uYWxQcm9wTmFtZSIsImNvbmRpdGlvbiIsIl9za2lwQ29tcG9uZW50UmVmUmVzb2x1dGlvbiIsIm1ldGhvZE5hbWUiLCJjbGFzc01ldGhvZCIsInByb3RvdHlwZU1ldGhvZCIsIm51bGxSZW5kZXIiLCJfY291bnRlciIsIkdsb2JhbFNldHRpbmdzIiwiZ2xvYmFsU2V0dGluZ3MiLCJfZ2V0R2xvYmFsU2V0dGluZ3MiLCJjYWxsYmFja3MiLCJvbGRWYWx1ZSIsImNoYW5nZURlc2NyaXB0aW9uIiwiYWRkQ2hhbmdlTGlzdGVuZXIiLCJfX2lkX18iLCJfZ2V0Q2FsbGJhY2tzIiwicmVtb3ZlQ2hhbmdlTGlzdGVuZXIiLCJnbG9iYWxPYmoiLCJOT19DVVNUT01JWkFUSU9OUyIsInNldHRpbmdzIiwic2NvcGVkU2V0dGluZ3MiLCJpbkN1c3RvbWl6ZXJDb250ZXh0IiwiX2FsbFNldHRpbmdzIiwiX2V2ZW50cyIsIkN1c3RvbWl6YXRpb25zIiwicmVzZXQiLCJhcHBseVNldHRpbmdzIiwiX3JhaXNlQ2hhbmdlIiwiYXBwbHlTY29wZWRTZXR0aW5ncyIsInNjb3BlTmFtZSIsImdldFNldHRpbmdzIiwicHJvcGVydGllcyIsImxvY2FsU2V0dGluZ3MiLCJsb2NhbFNjb3BlZFNldHRpbmdzIiwiZ2xvYmFsU2NvcGVkU2V0dGluZ3MiLCJwcm9wZXJ0aWVzXzEiLCJhcHBseUJhdGNoZWRVcGRhdGVzIiwic3VwcHJlc3NVcGRhdGUiLCJfc3VwcHJlc3NVcGRhdGVzIiwib2JzZXJ2ZSIsIm9uQ2hhbmdlIiwidW5vYnNlcnZlIiwiZmlsdGVyIiwiaG9pc3RTdGF0aWNzIiwiZGVzdCIsIm5hbWVfMSIsIkN1c3RvbWl6ZXJDb250ZXh0IiwiY3VzdG9taXphdGlvbnMiLCJjb25jYXRTdHlsZVNldHMiLCJzdHlsZVNldHMiLCJzdWJDb21wb25lbnRTdHlsZXMiLCJtZXJnZWRTZXQiLCJ3b3JraW5nU3ViY29tcG9uZW50U3R5bGVzIiwic3R5bGVTZXRzXzEiLCJjdXJyZW50U2V0IiwicHJvcCIsImN1cnJlbnRDb21wb25lbnRTdHlsZXMiLCJzdWJDb21wUHJvcCIsIm1lcmdlZFZhbHVlIiwibWVyZ2VkU3ViU3R5bGVzIiwiX2xvb3BfMSIsIndvcmtpbmdTZXRfMSIsInN0eWxlUHJvcHMiLCJzdHlsZUZ1bmN0aW9uT3JPYmplY3QiLCJmaWVsZHMiLCJjb25jYXRTdHlsZXMiLCJDb21wb3NlZENvbXBvbmVudCIsInJlc3VsdENsYXNzIiwiQ29tcG9uZW50V2l0aEluamVjdGVkUHJvcHMiLCJfc3R5bGVDYWNoZSIsIl9vblNldHRpbmdDaGFuZ2VkIiwiY29tcG9uZW50UHJvcHMiLCJzdHlsZXMiLCJjb21wb25lbnQiLCJtZXJnZWRTdHlsZXMiLCJtZXJnZWQiLCJhcnJheXNFcXVhbCIsImFycmF5MSIsImFycmF5MiIsIl9zdHlsZXNoZWV0IiwiY3JlYXRlUmVzb2x2ZXIiLCJsb2NhbCIsIm5ld1ZhbHVlIiwiY3JlYXRlTWVyZ2VkUmVmIiwibmV3UmVmcyIsInJlc29sdmVyIiwiSW5qZWN0aW9uTW9kZSIsIlJFVVNFX1NUWUxFX05PREUiLCJ1c2VyQWdlbnQiLCJfZ2xvYmFsIiwiU3R5bGVzaGVldCIsImNvbmZpZyIsInNlcmlhbGl6ZWRTdHlsZXNoZWV0IiwiX2IiLCJfYyIsIl9kIiwiX2UiLCJfZiIsIl9ydWxlcyIsIl9wcmVzZXJ2ZWRSdWxlcyIsIl9rZXlUb0NsYXNzTmFtZSIsIl9vbkluc2VydFJ1bGVDYWxsYmFja3MiLCJfb25SZXNldENhbGxiYWNrcyIsIl9jbGFzc05hbWVUb0FyZ3MiLCJfY29uZmlnIiwiaW5qZWN0aW9uTW9kZSIsImRlZmF1bHRQcmVmaXgiLCJuYW1lc3BhY2UiLCJjc3BTZXR0aW5ncyIsImNsYXNzTmFtZVRvQXJncyIsImNvdW50ZXIiLCJjbGFzc05hbWVDYWNoZSIsImtleVRvQ2xhc3NOYW1lIiwicHJlc2VydmVkUnVsZXMiLCJydWxlcyIsImdldEluc3RhbmNlIiwiX2xhc3RTdHlsZUVsZW1lbnQiLCJmYWJyaWNDb25maWciLCJGYWJyaWNDb25maWciLCJzdHlsZXNoZWV0IiwibWVyZ2VTdHlsZXMiLCJzZXJpYWxpemUiLCJzZXRDb25maWciLCJvblJlc2V0Iiwib25JbnNlcnRSdWxlIiwiZ2V0Q2xhc3NOYW1lIiwiY2FjaGVDbGFzc05hbWUiLCJjbGFzc05hbWVGcm9tS2V5IiwiZ2V0Q2xhc3NOYW1lQ2FjaGUiLCJhcmdzRnJvbUNsYXNzTmFtZSIsImVudHJ5IiwiaW5zZXJ0ZWRSdWxlc0Zyb21DbGFzc05hbWUiLCJpbnNlcnRSdWxlIiwicnVsZSIsInByZXNlcnZlIiwiX2dldFN0eWxlRWxlbWVudCIsInNoZWV0IiwiY3NzUnVsZXMiLCJnZXRSdWxlcyIsImluY2x1ZGVQcmVzZXJ2ZWRSdWxlcyIsInJlc2V0S2V5cyIsIl9zdHlsZUVsZW1lbnQiLCJfY3JlYXRlU3R5bGVFbGVtZW50Iiwibm9kZVRvSW5zZXJ0QmVmb3JlIiwibmV4dEVsZW1lbnRTaWJsaW5nIiwicGxhY2Vob2xkZXJTdHlsZVRhZyIsIl9maW5kUGxhY2Vob2xkZXJTdHlsZVRhZyIsImNoaWxkTm9kZXMiLCJxdWVyeVNlbGVjdG9yIiwiX2luaXRpYWxpemVkU3R5bGVzaGVldFJlc2V0cyIsIl9yZXNldENvdW50ZXIiLCJfZW1wdHlPYmplY3QiLCJlbXB0eSIsIl9kaWN0aW9uYXJ5IiwiX3dlYWtNYXAiLCJyZXNldE1lbW9pemF0aW9ucyIsIm1lbW9pemVGdW5jdGlvbiIsIm1heENhY2hlU2l6ZSIsImlnbm9yZU51bGxPclVuZGVmaW5lZFJlc3VsdCIsInJvb3ROb2RlIiwiY2FjaGVTaXplIiwibG9jYWxSZXNldENvdW50ZXIiLCJjdXJyZW50Tm9kZSIsIl9jcmVhdGVOb2RlIiwiYXJnIiwiX25vcm1hbGl6ZUFyZyIsImNyZWF0ZU1lbW9pemVyIiwidmFsIiwiY3NzIiwiY2xhc3NlcyIsImdldFBhcmVudCIsImFsbG93VmlydHVhbFBhcmVudHMiLCJfdmlydHVhbCIsImdldFZpcnR1YWxQYXJlbnQiLCJmaW5kRWxlbWVudFJlY3Vyc2l2ZSIsIm1hdGNoRnVuY3Rpb24iLCJwb3J0YWxDb250YWluc0VsZW1lbnQiLCJlbGVtZW50TWF0Y2giLCJ0ZXN0RWxlbWVudCIsImhhc0F0dHJpYnV0ZSIsIktleUNvZGVzIiwiSXNGb2N1c1Zpc2libGVDbGFzc05hbWUiLCJzZXRGb2N1c1Zpc2liaWxpdHkiLCJlbmFibGVkIiwiY2xhc3NMaXN0IiwicmVtb3ZlIiwiYXBwZW5kRnVuY3Rpb24iLCJmdW5jdGlvbnMiLCJpbml0aWFsaXplQ29tcG9uZW50UmVmIiwibWV0aG9kcyIsImV4dGVuZENvbXBvbmVudCIsIl9vbk1vdW50IiwiX29uVXBkYXRlIiwiX29uVW5tb3VudCIsImdldElkIiwicHJlZml4IiwicmVzZXRJZHMiLCJ0b09iamVjdE1hcCIsIml0ZW1zIiwiaXRlbXNfMSIsImtleXNfMSIsImJhc2VFbGVtZW50RXZlbnRzIiwiYmFzZUVsZW1lbnRQcm9wZXJ0aWVzIiwiaHRtbEVsZW1lbnRQcm9wZXJ0aWVzIiwiYXVkaW9Qcm9wZXJ0aWVzIiwiYW5jaG9yUHJvcGVydGllcyIsImJ1dHRvblByb3BlcnRpZXMiLCJpbWdQcm9wZXJ0aWVzIiwiZGl2UHJvcGVydGllcyIsImdldE5hdGl2ZVByb3BzIiwiYWxsb3dlZFByb3BOYW1lcyIsImV4Y2x1ZGVkUHJvcE5hbWVzIiwia2V5c18yIiwiRGlyZWN0aW9uYWxLZXlDb2RlcyIsIm1vdW50Q291bnRlcnMiLCJzZXRNb3VudENvdW50ZXJzIiwiY3VyclZhbHVlIiwidXNlRm9jdXNSZWN0cyIsInJvb3RSZWYiLCJkaXNhYmxlRm9jdXNSZWN0cyIsIl9vbk1vdXNlRG93biIsIl9vblBvaW50ZXJEb3duIiwiX29uS2V5RG93biIsIkZvY3VzUmVjdHMiLCJtZXJnZUFyaWFBdHRyaWJ1dGVWYWx1ZXMiLCJhcmlhQXR0cmlidXRlcyIsIm1lcmdlZEF0dHJpYnV0ZSIsImNvbmNhdFN0eWxlU2V0c1dpdGhQcm9wcyIsImFsbFN0eWxlcyIsImFsbFN0eWxlc18xIiwidXNlQ3VzdG9taXphdGlvblNldHRpbmdzIiwiSWNvblR5cGUiLCJfcnRsIiwiRGVmYXVsdEZpZWxkcyIsInN0eWxlZCIsImJhc2VTdHlsZXMiLCJnZXRQcm9wcyIsImN1c3RvbWl6YWJsZSIsInB1cmUiLCJXcmFwcGVkIiwiZm9yd2FyZGVkUmVmIiwiY3VzdG9taXplZFN0eWxlcyIsInJlc3QiLCJhZGRpdGlvbmFsUHJvcHMiLCJfX2NhY2hlZElucHV0c19fIiwicHJvcFN0eWxlcyIsImNvbmNhdGVuYXRlZFN0eWxlcyIsIl9fbm9TdHlsZU92ZXJyaWRlX18iLCJwdXJlQ29tcG9uZW50IiwiZXh0cmFjdFN0eWxlUGFydHMiLCJvYmplY3RzIiwiX3Byb2Nlc3NBcmdzIiwiYXJnc0xpc3QiLCJhcmdzTGlzdF8xIiwidHJhbnNsYXRlZEFyZ3MiLCJzZXRSVEwiLCJpc1JUTCIsImdldFJUTCIsImdldEF0dHJpYnV0ZSIsImdldFN0eWxlT3B0aW9ucyIsInJ0bCIsIl92ZW5kb3JTZXR0aW5ncyIsImF1dG9QcmVmaXhOYW1lcyIsInByZWZpeFJ1bGVzIiwicnVsZVBhaXJzIiwidmVuZG9yU2V0dGluZ3MiLCJuYXYiLCJpc1dlYmtpdCIsImlzTW96IiwiaXNPcGVyYSIsImlzTXMiLCJnZXRWZW5kb3JTZXR0aW5ncyIsIk5PTl9QSVhFTF9OVU1CRVJfUFJPUFMiLCJwcm92aWRlVW5pdHMiLCJpc05vblBpeGVsUHJvcCIsImlzVmFyaWFibGVPclByZWZpeGVkIiwidW5pdCIsIkxFRlQiLCJSSUdIVCIsIk5BTUVfUkVQTEFDRU1FTlRTIiwiVkFMVUVfUkVQTEFDRU1FTlRTIiwicnRsaWZ5UnVsZXMiLCJwYXJ0cyIsImZsaXBRdWFkIiwicGFydEluZGV4IiwibnVtYmVyVmFsIiwibmVnYXRlTnVtIiwiZ2V0RGlzcGxheU5hbWUiLCJyb290U3R5bGUiLCJnbG9iYWxTZWxlY3RvclJlZ0V4cCIsImV4cGFuZFNlbGVjdG9yIiwibmV3U2VsZWN0b3IiLCJjdXJyZW50U2VsZWN0b3IiLCJleHRyYWN0U2VsZWN0b3IiLCJzZWxlY3RvciIsIl9fb3JkZXIiLCJleHRyYWN0UnVsZXMiLCJzZWxlY3RvcldpdGhHbG9iYWxzIiwicmVwbGFjZW1lbnRJbmZvIiwiZmluZEdsb2JhbCIsInJldmVyc2UiLCJyZWR1Y2UiLCJtYXRjaEluZGV4IiwibWF0Y2hFbmRJbmRleCIsInJlcGxhY2VtZW50IiwiZXhwYW5kQ29tbWFTZXBhcmF0ZWRHbG9iYWxzIiwic2VwYXJhdGVkU2VsZWN0b3IiLCJjdXJyZW50UnVsZXMiLCJleHBhbmRlZFJ1bGVzIiwicHJvcFZhbHVlIiwic2VsZWN0b3JzIiwiZXhwYW5kUXVhZHMiLCJwYXJ0U3RhcnQiLCJwYXJlbnMiLCJ0b2tlbml6ZVdpdGhQYXJlbnRoZXNlcyIsImdldEtleUZvclJ1bGVzIiwic2VyaWFsaXplZCIsImhhc1Byb3BzIiwicnVsZXNGb3JTZWxlY3RvciIsInJlcGVhdFN0cmluZyIsInNlcmlhbGl6ZVJ1bGVFbnRyaWVzIiwicnVsZUVudHJpZXMiLCJhbGxFbnRyaWVzIiwic3R5bGVUb1JlZ2lzdHJhdGlvbiIsInJlZ2lzdHJhdGlvbiIsInJ1bGVzVG9JbnNlcnQiLCJhcHBseVJlZ2lzdHJhdGlvbiIsInNwZWNpZmljaXR5TXVsdGlwbGllciIsInByb2Nlc3NlZFJ1bGUiLCJtZXJnZVN0eWxlU2V0cyIsIm1lcmdlQ3NzU2V0cyIsImNsYXNzTmFtZVNldCIsImNvbmNhdGVuYXRlZFN0eWxlU2V0IiwicmVnaXN0cmF0aW9ucyIsInN0eWxlU2V0QXJlYSIsInJlZ2lzdHJhdGlvbnNfMSIsImdldERvY3VtZW50IiwiZ2V0SXRlbSIsInNlc3Npb25TdG9yYWdlIiwic2V0SXRlbSIsIl9pc1JUTCIsInNhdmVkUlRMIiwicGVyc2lzdFNldHRpbmciLCJfbWVtb2l6ZWRDbGFzc05hbWVzIiwiSW1hZ2VGaXQiLCJJbWFnZUNvdmVyU3R5bGUiLCJJbWFnZUxvYWRTdGF0ZSIsImNsYXNzTmFtZXNGdW5jdGlvbiIsInN0eWxlQ2FsY0NvdW50IiwiZ2V0Q2xhc3NOYW1lc0NvdW50IiwiY3VycmVudE1lbW9pemVkQ2xhc3NOYW1lcyIsInVzZVN0YXRpY1N0eWxlcyIsImRpc2FibGVDYWNoaW5nIiwiX3RyYXZlcnNlTWFwIiwiZW5hYmxlQ2xhc3NOYW1lQ2FjaGVGdWxsV2FybmluZyIsInRyYWNlIiwiY2xlYXIiLCJfdHJhdmVyc2VFZGdlIiwiX25vcm1hbGl6ZVZhbHVlIiwiaW5wdXRzIiwidXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCIsInVzZU1lcmdlZFJlZnMiLCJtZXJnZWRDYWxsYmFjayIsInJlZnNfMSIsIlNWR19SRUdFWCIsIkltYWdlQmFzZSIsImZyYW1lRWxlbWVudCIsImltYWdlRWxlbWVudCIsIm9uTG9hZGluZ1N0YXRlQ2hhbmdlIiwib25Mb2FkIiwibm90TG9hZGVkIiwibG9hZFN0YXRlIiwic2V0TG9hZFN0YXRlIiwibmF0dXJhbFdpZHRoIiwibmF0dXJhbEhlaWdodCIsImNvbXBsZXRlIiwibG9hZGVkIiwib25JbWFnZUxvYWRlZCIsIm9uSW1hZ2VFcnJvciIsInVzZUxvYWRTdGF0ZSIsImltYWdlUHJvcHMiLCJhbHQiLCJzaG91bGRGYWRlSW4iLCJzaG91bGRTdGFydFZpc2libGUiLCJpbWFnZUZpdCIsInJvbGUiLCJtYXhpbWl6ZUZyYW1lIiwibG9hZGluZyIsImNvdmVyU3R5bGUiLCJwcmV2aW91c0xvYWRTdGF0ZSIsImNvdmVyIiwiY29udGFpbiIsImNlbnRlckNvbnRhaW4iLCJjZW50ZXJDb3ZlciIsImRlc2lyZWRSYXRpbyIsImNsaWVudFdpZHRoIiwiY2xpZW50SGVpZ2h0IiwibGFuZHNjYXBlIiwicG9ydHJhaXQiLCJjb21wdXRlQ292ZXJTdHlsZSIsInVzZUNvdmVyU3R5bGUiLCJjbGFzc05hbWVzIiwiaXNMb2FkZWQiLCJpc0xhbmRzY2FwZSIsImlzQ2VudGVyIiwiY2VudGVyIiwiaXNDZW50ZXJDb250YWluIiwiaXNDZW50ZXJDb3ZlciIsImlzQ29udGFpbiIsImlzQ292ZXIiLCJpc05vbmUiLCJub25lIiwiaXNFcnJvciIsImlzTm90SW1hZ2VGaXQiLCJyb290IiwiaW1hZ2UiLCJtZXJnZUNzcyIsInN0eWxlVG9DbGFzc05hbWUiLCJrZXlmcmFtZXMiLCJ0aW1lbGluZSIsInJ1bGVzQXJyYXkiLCJFQVNJTkdfRlVOQ1RJT05fMSIsIkVBU0lOR19GVU5DVElPTl8yIiwiRkFERV9JTiIsIkZBREVfT1VUIiwidmlzaWJpbGl0eSIsIlNMSURFX1JJR0hUX0lOMTAiLCJfY3JlYXRlU2xpZGVJblgiLCJTTElERV9SSUdIVF9JTjIwIiwiU0xJREVfUklHSFRfSU40MCIsIlNMSURFX1JJR0hUX0lONDAwIiwiU0xJREVfTEVGVF9JTjEwIiwiU0xJREVfTEVGVF9JTjIwIiwiU0xJREVfTEVGVF9JTjQwIiwiU0xJREVfTEVGVF9JTjQwMCIsIlNMSURFX1VQX0lOMTAiLCJfY3JlYXRlU2xpZGVJblkiLCJTTElERV9VUF9JTjIwIiwiU0xJREVfRE9XTl9JTjEwIiwiU0xJREVfRE9XTl9JTjIwIiwiU0xJREVfUklHSFRfT1VUMTAiLCJfY3JlYXRlU2xpZGVPdXRYIiwiU0xJREVfUklHSFRfT1VUMjAiLCJTTElERV9SSUdIVF9PVVQ0MCIsIlNMSURFX1JJR0hUX09VVDQwMCIsIlNMSURFX0xFRlRfT1VUMTAiLCJTTElERV9MRUZUX09VVDIwIiwiU0xJREVfTEVGVF9PVVQ0MCIsIlNMSURFX0xFRlRfT1VUNDAwIiwiU0xJREVfVVBfT1VUMTAiLCJfY3JlYXRlU2xpZGVPdXRZIiwiU0xJREVfVVBfT1VUMjAiLCJTTElERV9ET1dOX09VVDEwIiwiU0xJREVfRE9XTl9PVVQyMCIsIlNDQUxFX1VQMTAwIiwidHJhbnNmb3JtIiwiU0NBTEVfRE9XTjk4IiwiU0NBTEVfRE9XTjEwMCIsIlNDQUxFX1VQMTAzIiwiUk9UQVRFOTAiLCJST1RBVEVfTjkwIiwiX2NyZWF0ZUFuaW1hdGlvbiIsImFuaW1hdGlvbkR1cmF0aW9uIiwiYW5pbWF0aW9uVGltaW5nRnVuY3Rpb24iLCJhbmltYXRpb25GaWxsTW9kZSIsImZyb21YIiwicG9pbnRlckV2ZW50cyIsImZyb21ZIiwidG9YIiwidG9ZIiwiTG9jYWxpemVkRm9udE5hbWVzIiwiTG9jYWxpemVkRm9udEZhbWlsaWVzIiwiRm9udFNpemVzIiwiRm9udFdlaWdodHMiLCJJY29uRm9udFNpemVzIiwiQW5pbWF0aW9uQ2xhc3NOYW1lcyIsInN0eWxlTmFtZSIsImNsYXNzTmFtZV8xIiwiYnVpbGRDbGFzc01hcCIsInNsaWRlUmlnaHRJbjEwIiwic2xpZGVSaWdodEluMjAiLCJzbGlkZVJpZ2h0SW40MCIsInNsaWRlUmlnaHRJbjQwMCIsInNsaWRlTGVmdEluMTAiLCJzbGlkZUxlZnRJbjIwIiwic2xpZGVMZWZ0SW40MCIsInNsaWRlTGVmdEluNDAwIiwic2xpZGVVcEluMTAiLCJzbGlkZVVwSW4yMCIsInNsaWRlRG93bkluMTAiLCJzbGlkZURvd25JbjIwIiwic2xpZGVSaWdodE91dDEwIiwic2xpZGVSaWdodE91dDIwIiwic2xpZGVSaWdodE91dDQwIiwic2xpZGVSaWdodE91dDQwMCIsInNsaWRlTGVmdE91dDEwIiwic2xpZGVMZWZ0T3V0MjAiLCJzbGlkZUxlZnRPdXQ0MCIsInNsaWRlTGVmdE91dDQwMCIsInNsaWRlVXBPdXQxMCIsInNsaWRlVXBPdXQyMCIsInNsaWRlRG93bk91dDEwIiwic2xpZGVEb3duT3V0MjAiLCJzY2FsZVVwSW4xMDAiLCJzY2FsZURvd25JbjEwMCIsInNjYWxlVXBPdXQxMDMiLCJzY2FsZURvd25PdXQ5OCIsImZhZGVJbjEwMCIsImZhZGVJbjIwMCIsImZhZGVJbjQwMCIsImZhZGVJbjUwMCIsImZhZGVPdXQxMDAiLCJmYWRlT3V0MjAwIiwiZmFkZU91dDQwMCIsImZhZGVPdXQ1MDAiLCJyb3RhdGU5MGRlZyIsInJvdGF0ZU45MGRlZyIsIkFyYWJpYyIsIkN5cmlsbGljIiwiRWFzdEV1cm9wZWFuIiwiR3JlZWsiLCJIZWJyZXciLCJUaGFpIiwiVmlldG5hbWVzZSIsIldlc3RFdXJvcGVhbiIsIlNlbGF3aWsiLCJBcm1lbmlhbiIsIkdlb3JnaWFuIiwiQ2hpbmVzZVNpbXBsaWZpZWQiLCJDaGluZXNlVHJhZGl0aW9uYWwiLCJIaW5kaSIsIkphcGFuZXNlIiwiS29yZWFuIiwic2l6ZTEwIiwic2l6ZTEyIiwic2l6ZTE0Iiwic2l6ZTE2Iiwic2l6ZTE4Iiwic2l6ZTIwIiwic2l6ZTI0Iiwic2l6ZTI4Iiwic2l6ZTMyIiwic2l6ZTQyIiwic2l6ZTY4IiwibWluaSIsInhTbWFsbCIsInNtYWxsIiwic21hbGxQbHVzIiwibWVkaXVtIiwibWVkaXVtUGx1cyIsImljb24iLCJsYXJnZSIsInhMYXJnZSIsInhMYXJnZVBsdXMiLCJ4eExhcmdlIiwieHhMYXJnZVBsdXMiLCJzdXBlckxhcmdlIiwibWVnYSIsImxpZ2h0Iiwic2VtaWxpZ2h0IiwicmVndWxhciIsInNlbWlib2xkIiwiYm9sZCIsIlpJbmRleGVzIiwiSGlnaENvbnRyYXN0U2VsZWN0b3IiLCJnZXRTY3JlZW5TZWxlY3RvciIsIm1heCIsImdldEZvY3VzU3R5bGUiLCJpbnNldE9yT3B0aW9ucyIsInBvc2l0aW9uIiwiaGlnaENvbnRyYXN0U3R5bGUiLCJib3JkZXJDb2xvciIsIm91dGxpbmVDb2xvciIsImlzRm9jdXNlZE9ubHkiLCJfZ2V0Rm9jdXNTdHlsZUludGVybmFsIiwiaW5zZXQiLCJwYWxldHRlIiwid2hpdGUiLCJfZyIsIm5ldXRyYWxTZWNvbmRhcnkiLCJfaCIsIm91dGxpbmUiLCJib3JkZXIiLCJjb250ZW50IiwiYm90dG9tIiwicmlnaHQiLCJGb2N1c1N0eWxlIiwiTmF2IiwiU2Nyb2xsYWJsZVBhbmUiLCJDb2FjaG1hcmsiLCJMYXllciIsIktleXRpcExheWVyIiwiaGlkZGVuQ29udGVudFN0eWxlIiwibWFyZ2luIiwicGFkZGluZyIsIndoaXRlU3BhY2UiLCJfZ2V0R2xvYmFsQ2xhc3NOYW1lcyIsImRpc2FibGVHbG9iYWxDbGFzc05hbWVzIiwic3R5bGVTaGVldCIsImFjYyIsImdldEdsb2JhbENsYXNzTmFtZXMiLCJEZXB0aHMiLCJEZWZhdWx0UGFsZXR0ZSIsInRoZW1lRGFya2VyIiwidGhlbWVEYXJrIiwidGhlbWVEYXJrQWx0IiwidGhlbWVQcmltYXJ5IiwidGhlbWVTZWNvbmRhcnkiLCJ0aGVtZVRlcnRpYXJ5IiwidGhlbWVMaWdodCIsInRoZW1lTGlnaHRlciIsInRoZW1lTGlnaHRlckFsdCIsImJsYWNrIiwiYmxhY2tUcmFuc2x1Y2VudDQwIiwibmV1dHJhbERhcmsiLCJuZXV0cmFsUHJpbWFyeSIsIm5ldXRyYWxQcmltYXJ5QWx0IiwibmV1dHJhbFNlY29uZGFyeUFsdCIsIm5ldXRyYWxUZXJ0aWFyeSIsIm5ldXRyYWxUZXJ0aWFyeUFsdCIsIm5ldXRyYWxRdWF0ZXJuYXJ5IiwibmV1dHJhbFF1YXRlcm5hcnlBbHQiLCJuZXV0cmFsTGlnaHQiLCJuZXV0cmFsTGlnaHRlciIsIm5ldXRyYWxMaWdodGVyQWx0IiwiYWNjZW50Iiwid2hpdGVUcmFuc2x1Y2VudDQwIiwieWVsbG93RGFyayIsInllbGxvdyIsInllbGxvd0xpZ2h0Iiwib3JhbmdlIiwib3JhbmdlTGlnaHQiLCJvcmFuZ2VMaWdodGVyIiwicmVkRGFyayIsInJlZCIsIm1hZ2VudGFEYXJrIiwibWFnZW50YSIsIm1hZ2VudGFMaWdodCIsInB1cnBsZURhcmsiLCJwdXJwbGUiLCJwdXJwbGVMaWdodCIsImJsdWVEYXJrIiwiYmx1ZU1pZCIsImJsdWUiLCJibHVlTGlnaHQiLCJ0ZWFsRGFyayIsInRlYWwiLCJ0ZWFsTGlnaHQiLCJncmVlbkRhcmsiLCJncmVlbiIsImdyZWVuTGlnaHQiLCJkZXB0aDAiLCJkZXB0aDQiLCJkZXB0aDgiLCJkZXB0aDE2IiwiZGVwdGg2NCIsIkRlZmF1bHRFZmZlY3RzIiwiZWxldmF0aW9uNCIsImVsZXZhdGlvbjgiLCJlbGV2YXRpb24xNiIsImVsZXZhdGlvbjY0Iiwicm91bmRlZENvcm5lcjIiLCJyb3VuZGVkQ29ybmVyNCIsInJvdW5kZWRDb3JuZXI2IiwiZm9udEZhY2UiLCJmb250IiwiX2xhbmd1YWdlIiwiZGVmYXVsdEZvbnRGYW1pbHkiLCJMYW5ndWFnZVRvRm9udE1hcCIsImNzIiwiZXQiLCJodSIsImtvIiwibHQiLCJsdiIsInBsIiwicnUiLCJ0ciIsImh5IiwiX2NyZWF0ZUZvbnQiLCJ3ZWlnaHQiLCJmb250RmFtaWx5IiwiTW96T3N4Rm9udFNtb290aGluZyIsIldlYmtpdEZvbnRTbW9vdGhpbmciLCJmb250U2l6ZSIsImxvY2FsZUNvZGUiLCJmb250RmFtaWx5V2l0aEZhbGxiYWNrIiwiRGVmYXVsdEZvbnRTdHlsZXMiLCJwZXJzaXN0ZW5jZVR5cGUiLCJzYXZlZExhbmd1YWdlIiwibG9jYWxTdG9yYWdlIiwiZ2V0TGFuZ3VhZ2UiLCJsYW5ndWFnZSIsImxhbmciLCJfZ2V0TG9jYWxpemVkRm9udEZhbWlseSIsInRpbnkiLCJfcmVnaXN0ZXJGb250RmFjZSIsImxvY2FsRm9udE5hbWUiLCJsb2NhbEZvbnRTcmMiLCJmb250U3R5bGUiLCJmb250RGlzcGxheSIsIl9yZWdpc3RlckZvbnRGYWNlU2V0IiwiYmFzZVVybCIsImNkbkZvbGRlciIsImNkbkZvbnROYW1lIiwidXJsQmFzZSIsIm1lcmdlIiwiX21lcmdlIiwiY2lyY3VsYXJSZWZlcmVuY2VzIiwiaXNDaXJjdWxhclJlZmVyZW5jZSIsIm1ha2VTZW1hbnRpY0NvbG9ycyIsImlzSW52ZXJ0ZWQiLCJkZXBDb21tZW50cyIsImRlcCIsImxpc3RUZXh0Q29sb3IiLCJsaXN0VGV4dCIsIm1lbnVJdGVtQmFja2dyb3VuZENoZWNrZWQiLCJ3YXJuaW5nSGlnaGxpZ2h0Iiwid2FybmluZ1RleHQiLCJtZXNzYWdlVGV4dCIsInN1Y2Nlc3NUZXh0IiwiX2ZpeERlcHJlY2F0ZWRTbG90cyIsImdldFNlbWFudGljQ29sb3JzIiwicHJpbWFyeUJ1dHRvbkJvcmRlciIsImVycm9yVGV4dCIsIm1lc3NhZ2VMaW5rIiwibWVzc2FnZUxpbmtIb3ZlcmVkIiwiaW5mb0ljb24iLCJlcnJvckljb24iLCJibG9ja2luZ0ljb24iLCJ3YXJuaW5nSWNvbiIsInNldmVyZVdhcm5pbmdJY29uIiwic3VjY2Vzc0ljb24iLCJpbmZvQmFja2dyb3VuZCIsImVycm9yQmFja2dyb3VuZCIsImJsb2NraW5nQmFja2dyb3VuZCIsIndhcm5pbmdCYWNrZ3JvdW5kIiwic2V2ZXJlV2FybmluZ0JhY2tncm91bmQiLCJzdWNjZXNzQmFja2dyb3VuZCIsImJvZHlCYWNrZ3JvdW5kIiwiYm9keUZyYW1lQmFja2dyb3VuZCIsImFjY2VudEJ1dHRvblRleHQiLCJidXR0b25CYWNrZ3JvdW5kIiwicHJpbWFyeUJ1dHRvblRleHQiLCJwcmltYXJ5QnV0dG9uVGV4dEhvdmVyZWQiLCJwcmltYXJ5QnV0dG9uVGV4dFByZXNzZWQiLCJpbnB1dEJhY2tncm91bmQiLCJpbnB1dEZvcmVncm91bmRDaGVja2VkIiwibGlzdEJhY2tncm91bmQiLCJtZW51QmFja2dyb3VuZCIsImNhcmRTdGFuZG91dEJhY2tncm91bmQiLCJib2R5VGV4dENoZWNrZWQiLCJidXR0b25UZXh0Q2hlY2tlZEhvdmVyZWQiLCJwcmltYXJ5QnV0dG9uQmFja2dyb3VuZCIsImlucHV0QmFja2dyb3VuZENoZWNrZWQiLCJpbnB1dEljb24iLCJpbnB1dEZvY3VzQm9yZGVyQWx0IiwibWVudUljb24iLCJtZW51SGVhZGVyIiwiYWNjZW50QnV0dG9uQmFja2dyb3VuZCIsInByaW1hcnlCdXR0b25CYWNrZ3JvdW5kUHJlc3NlZCIsImlucHV0QmFja2dyb3VuZENoZWNrZWRIb3ZlcmVkIiwiaW5wdXRJY29uSG92ZXJlZCIsImxpbmtIb3ZlcmVkIiwicHJpbWFyeUJ1dHRvbkJhY2tncm91bmRIb3ZlcmVkIiwiaW5wdXRQbGFjZWhvbGRlckJhY2tncm91bmRDaGVja2VkIiwiYm9keUJhY2tncm91bmRDaGVja2VkIiwiYm9keUZyYW1lRGl2aWRlciIsImJvZHlEaXZpZGVyIiwidmFyaWFudEJvcmRlciIsImJ1dHRvbkJhY2tncm91bmRDaGVja2VkSG92ZXJlZCIsImJ1dHRvbkJhY2tncm91bmRQcmVzc2VkIiwibGlzdEl0ZW1CYWNrZ3JvdW5kQ2hlY2tlZCIsImxpc3RIZWFkZXJCYWNrZ3JvdW5kUHJlc3NlZCIsIm1lbnVJdGVtQmFja2dyb3VuZFByZXNzZWQiLCJib2R5QmFja2dyb3VuZEhvdmVyZWQiLCJidXR0b25CYWNrZ3JvdW5kSG92ZXJlZCIsImJ1dHRvbkJhY2tncm91bmREaXNhYmxlZCIsImJ1dHRvbkJvcmRlckRpc2FibGVkIiwicHJpbWFyeUJ1dHRvbkJhY2tncm91bmREaXNhYmxlZCIsImRpc2FibGVkQmFja2dyb3VuZCIsImxpc3RJdGVtQmFja2dyb3VuZEhvdmVyZWQiLCJsaXN0SGVhZGVyQmFja2dyb3VuZEhvdmVyZWQiLCJtZW51SXRlbUJhY2tncm91bmRIb3ZlcmVkIiwicHJpbWFyeUJ1dHRvblRleHREaXNhYmxlZCIsImRpc2FibGVkU3VidGV4dCIsImxpc3RJdGVtQmFja2dyb3VuZENoZWNrZWRIb3ZlcmVkIiwiZGlzYWJsZWRCb2R5VGV4dCIsInZhcmlhbnRCb3JkZXJIb3ZlcmVkIiwiYnV0dG9uVGV4dERpc2FibGVkIiwiaW5wdXRJY29uRGlzYWJsZWQiLCJkaXNhYmxlZFRleHQiLCJib2R5VGV4dCIsImFjdGlvbkxpbmsiLCJidXR0b25UZXh0IiwiaW5wdXRCb3JkZXJIb3ZlcmVkIiwiaW5wdXRUZXh0IiwibWVudUl0ZW1UZXh0IiwiYm9keVN0YW5kb3V0QmFja2dyb3VuZCIsImRlZmF1bHRTdGF0ZUJhY2tncm91bmQiLCJhY3Rpb25MaW5rSG92ZXJlZCIsImJ1dHRvblRleHRIb3ZlcmVkIiwiYnV0dG9uVGV4dENoZWNrZWQiLCJidXR0b25UZXh0UHJlc3NlZCIsImlucHV0VGV4dEhvdmVyZWQiLCJtZW51SXRlbVRleHRIb3ZlcmVkIiwiYm9keVN1YnRleHQiLCJmb2N1c0JvcmRlciIsImlucHV0Qm9yZGVyIiwic21hbGxJbnB1dEJvcmRlciIsImlucHV0UGxhY2Vob2xkZXJUZXh0IiwiYnV0dG9uQm9yZGVyIiwiZGlzYWJsZWRCb2R5U3VidGV4dCIsImRpc2FibGVkQm9yZGVyIiwiYnV0dG9uQmFja2dyb3VuZENoZWNrZWQiLCJtZW51RGl2aWRlciIsImNhcmRTaGFkb3ciLCJjYXJkU2hhZG93SG92ZXJlZCIsImZvbnRVcmwiLCJyZWdpc3RlckRlZmF1bHRGb250RmFjZXMiLCJmb250QmFzZVVybCIsIkRlZmF1bHRTcGFjaW5nIiwiczIiLCJzMSIsImwxIiwibDIiLCJjcmVhdGVUaGVtZSIsInBhcnRpYWxUaGVtZSIsIm1lcmdlZFRoZW1lIiwic2VtYW50aWNDb2xvcnMiLCJkZWZhdWx0Rm9udFN0eWxlIiwiZm9udHMiLCJtZXJnZVRoZW1lcyIsInNwYWNpbmciLCJfdGhlbWUiLCJfb25UaGVtZUNoYW5nZUNhbGxiYWNrcyIsImluaXRpYWxpemVUaGVtZUluQ3VzdG9taXphdGlvbnMiLCJsZWdhY3lUaGVtZSIsImxpbmVzIiwiZm9udE5hbWUiLCJfbG9hZEZvbnRzIiwiX2ljb25TZXR0aW5ncyIsIl9fb3B0aW9ucyIsImRpc2FibGVXYXJuaW5ncyIsIndhcm5Pbk1pc3NpbmdJY29ucyIsIl9fcmVtYXBwZWQiLCJzdWJzZXQiLCJub3JtYWxpemVJY29uTmFtZSIsIkdsb2JhbENsYXNzTmFtZXMiLCJyb290TWF4aW1pemVGcmFtZSIsImltYWdlQ2VudGVyIiwiaW1hZ2VDb250YWluIiwiaW1hZ2VDb3ZlciIsImltYWdlQ2VudGVyQ29udGFpbiIsImltYWdlQ2VudGVyQ292ZXIiLCJpbWFnZU5vbmUiLCJpbWFnZUxhbmRzY2FwZSIsImltYWdlUG9ydHJhaXQiLCJJbWFnZSIsIkltYWdlRml0U3R5bGVzIiwic3VwcG9ydHNPYmplY3RGaXQiLCJtc01heFRvdWNoUG9pbnRzIiwiZmFsbGJhY2tPYmplY3RGaXRTdHlsZXMiLCJvYmplY3RGaXQiLCJtYXhXaWR0aCIsIm1heEhlaWdodCIsInBsYWNlaG9sZGVyIiwiZ2V0SWNvbkNvbnRlbnQiLCJpY29uTmFtZSIsImlzUmVnaXN0ZXJlZCIsImdldEljb24iLCJpY29uQ2xhc3NOYW1lIiwibWVyZ2VJbWFnZVByb3BzIiwiRm9udEljb24iLCJpY29uQ29udGVudCIsIm5hdGl2ZVByb3BzIiwiYWNjZXNzaWJsZU5hbWUiLCJjb250YWluZXJQcm9wcyIsImZpbmFsQ2hpbGRyZW4iLCJhcmlhTGFiZWwiLCJJY29uIiwiSWNvbkJhc2UiLCJfb25JbWFnZUxvYWRpbmdTdGF0ZUNoYW5nZSIsImltYWdlTG9hZEVycm9yIiwiaW1hZ2VFcnJvckFzIiwiaXNQbGFjZWhvbGRlciIsImlzSW1hZ2UiLCJpY29uVHlwZSIsImljb25Db250ZW50Q2hpbGRyZW4iLCJSb290VHlwZSIsIkltYWdlVHlwZSIsImZpbmFsSWNvbkNvbnRlbnRDaGlsZHJlbiIsImltYWdlQ29udGFpbmVyIiwiSW1hZ2VJY29uIiwiYWx0VGV4dCIsImhhc05hbWUiLCJpbWFnZU5hbWVQcm9wcyIsIkRpcmVjdGlvbmFsSGludCIsIkNvbnRleHR1YWxNZW51SXRlbVR5cGUiLCJtZW1vaXplciIsIm91dGVyIiwiaW5uZXIiLCJpbm5lck1lbW9pemVyIiwiZGVmYXVsdFJlbmRlciIsImlubmVyUHJvcHMiLCJvdXRlclByb3BzIiwiRm9jdXNab25lRGlyZWN0aW9uIiwiRm9jdXNab25lVGFiYmFibGVFbGVtZW50cyIsImVsZW1lbnRDb250YWlucyIsImlzQ29udGFpbmVkIiwibmV4dFBhcmVudCIsImZvY3VzRmlyc3RDaGlsZCIsImdldE5leHRFbGVtZW50IiwidGFyZ2V0VG9Gb2N1c09uTmV4dFJlcGFpbnQiLCJmb2N1c0FzeW5jIiwiZ2V0UHJldmlvdXNFbGVtZW50IiwiY3VycmVudEVsZW1lbnQiLCJjaGVja05vZGUiLCJzdXBwcmVzc1BhcmVudFRyYXZlcnNhbCIsInRyYXZlcnNlQ2hpbGRyZW4iLCJpbmNsdWRlRWxlbWVudHNJbkZvY3VzWm9uZXMiLCJhbGxvd0ZvY3VzUm9vdCIsInRhYmJhYmxlIiwiaXNDdXJyZW50RWxlbWVudFZpc2libGUiLCJpc0VsZW1lbnRWaXNpYmxlIiwiaXNFbGVtZW50Rm9jdXNab25lIiwiaXNFbGVtZW50Rm9jdXNTdWJab25lIiwiY2hpbGRNYXRjaCIsImxhc3RFbGVtZW50Q2hpbGQiLCJpc0VsZW1lbnRUYWJiYWJsZSIsImNoaWxkTWF0Y2hTaWJsaW5nTWF0Y2giLCJwcmV2aW91c0VsZW1lbnRTaWJsaW5nIiwiY2hpbGRNYXRjaFBhcmVudCIsImNoaWxkTWF0Y2hQYXJlbnRNYXRjaCIsInNpYmxpbmdNYXRjaCIsInN1cHByZXNzQ2hpbGRUcmF2ZXJzYWwiLCJmaXJzdEVsZW1lbnRDaGlsZCIsInZpc2liaWxpdHlBdHRyaWJ1dGUiLCJvZmZzZXRIZWlnaHQiLCJvZmZzZXRQYXJlbnQiLCJpc1Zpc2libGUiLCJjaGVja1RhYkluZGV4IiwidGFiSW5kZXgiLCJ0YWJJbmRleEF0dHJpYnV0ZVZhbHVlIiwiaXNGb2N1c2FibGVBdHRyaWJ1dGUiLCJpc1RhYkluZGV4U2V0Iiwic2hvdWxkV3JhcEZvY3VzIiwibm9XcmFwRGF0YUF0dHJpYnV0ZSIsImF0dHJpYnV0ZSIsImVsZW1lbnRDb250YWluc0F0dHJpYnV0ZSIsIl9zY3JvbGxiYXJXaWR0aCIsImdldFNjcm9sbGJhcldpZHRoIiwic2Nyb2xsRGl2Iiwib2Zmc2V0V2lkdGgiLCJmaW5kU2Nyb2xsYWJsZVBhcmVudCIsInN0YXJ0aW5nRWxlbWVudCIsImNvbXB1dGVkU3R5bGVzIiwiZ2V0Q29tcHV0ZWRTdHlsZSIsIm92ZXJmbG93WSIsImdldFByb3BlcnR5VmFsdWUiLCJmb2N1c1pvbmVTdHlsZXMiLCJyYWlzZUNsaWNrRnJvbUtleWJvYXJkRXZlbnQiLCJNb3VzZUV2ZW50IiwiaW5pdE1vdXNlRXZlbnQiLCJpc01hY1Jlc3VsdCIsIl9hbGxJbnN0YW5jZXMiLCJfb3V0ZXJab25lcyIsIkFMTE9XRURfSU5QVVRfVFlQRVMiLCJGb2N1c1pvbmUiLCJfbWVyZ2VkUmVmIiwiX29uRm9jdXMiLCJfcG9ydGFsQ29udGFpbnNFbGVtZW50IiwibmV3QWN0aXZlRWxlbWVudCIsIm9uQWN0aXZlRWxlbWVudENoYW5nZWQiLCJkb05vdEFsbG93Rm9jdXNFdmVudFRvUHJvcGFnYXRlIiwic3RvcEZvY3VzUHJvcGFnYXRpb24iLCJvbkZvY3VzTm90aWZpY2F0aW9uIiwib25Gb2N1cyIsInNob3VsZEZvY3VzSW5uZXJFbGVtZW50V2hlblJlY2VpdmVkRm9jdXMiLCJkZWZhdWx0VGFiYmFibGVFbGVtZW50IiwiaXNJbW1lZGlhdGVEZXNjZW5kYW50IiwiX2lzSW1tZWRpYXRlRGVzY2VuZGFudE9mWm9uZSIsIm1heWJlRWxlbWVudFRvRm9jdXMiLCJfYWN0aXZlRWxlbWVudCIsImluaXRpYWxFbGVtZW50Rm9jdXNlZCIsIl9zZXRGb2N1c0FsaWdubWVudCIsIl91cGRhdGVUYWJJbmRleGVzIiwiX29uQmx1ciIsIl9zZXRQYXJrZWRGb2N1cyIsInBhdGgiLCJfc2V0QWN0aXZlRWxlbWVudCIsImRpcmVjdGlvbiIsImlzSW5uZXJab25lS2V5c3Ryb2tlIiwicGFnaW5nU3VwcG9ydERpc2FibGVkIiwic2hvdWxkRW50ZXJJbm5lclpvbmUiLCJvbktleURvd24iLCJfZ2V0RG9jdW1lbnQiLCJfaXNJbm5lclpvbmUiLCJpbm5lclpvbmUiLCJfZ2V0Rmlyc3RJbm5lclpvbmUiLCJmb2N1c0VsZW1lbnQiLCJfc2hvdWxkUmFpc2VDbGlja3NPblNwYWNlIiwiX3RyeUludm9rZUNsaWNrRm9yRm9jdXNhYmxlIiwidmVydGljYWwiLCJfcHJldmVudERlZmF1bHRXaGVuSGFuZGxlZCIsIl9tb3ZlRm9jdXNMZWZ0IiwiX21vdmVGb2N1c1JpZ2h0IiwiaG9yaXpvbnRhbCIsIl9tb3ZlRm9jdXNVcCIsIl9tb3ZlRm9jdXNEb3duIiwiX21vdmVGb2N1c1BhZ2luZyIsImFsbG93VGFiS2V5IiwiaGFuZGxlVGFiS2V5IiwiX2lzRWxlbWVudElucHV0IiwiZm9jdXNDaGFuZ2VkIiwiX3Byb2Nlc3NpbmdUYWJLZXkiLCJfc2hvdWxkV3JhcEZvY3VzIiwic2hvdWxkUmVzZXRBY3RpdmVFbGVtZW50V2hlblRhYkZyb21ab25lIiwiX2lzQ29udGVudEVkaXRhYmxlRWxlbWVudCIsIl9zaG91bGRJbnB1dExvc2VGb2N1cyIsIl9zaG91bGRSYWlzZUNsaWNrc09uRW50ZXIiLCJfZ2V0SG9yaXpvbnRhbERpc3RhbmNlRnJvbUNlbnRlciIsImlzRm9yd2FyZCIsImFjdGl2ZVJlY3QiLCJ0YXJnZXRSZWN0IiwibGVmdEFsaWdubWVudCIsIl9mb2N1c0FsaWdubWVudCIsInRhcmdldFJlY3RUb3AiLCJhY3RpdmVSZWN0Qm90dG9tIiwidGFyZ2V0UmVjdEJvdHRvbSIsImFjdGl2ZVJlY3RUb3AiLCJhYnMiLCJzaG91bGRSYWlzZUNsaWNrc0ZhbGxiYWNrIiwic2hvdWxkUmFpc2VDbGlja3MiLCJzaG91bGRSYWlzZUNsaWNrc09uRW50ZXIiLCJzaG91bGRSYWlzZUNsaWNrc09uU3BhY2UiLCJnZXRPdXRlclpvbmVzIiwiX29uS2V5RG93bkNhcHR1cmUiLCJ6b25lIiwiX3dpbmRvd0VsZW1lbnQiLCJkZWZhdWx0QWN0aXZlRWxlbWVudCIsInNob3VsZEZvY3VzT25Nb3VudCIsInByZXZlbnRGb2N1c1Jlc3RvcmF0aW9uIiwiX2xhc3RJbmRleFBhdGgiLCJlbGVtZW50VG9Gb2N1cyIsInBhdGhfMSIsIm5leHRDaGlsZCIsImdldEZvY3VzYWJsZUJ5SW5kZXhQYXRoIiwiX2RlZmF1bHRGb2N1c0VsZW1lbnQiLCJhcyIsInJvb3RQcm9wcyIsImFyaWFEZXNjcmliZWRCeSIsImFyaWFMYWJlbGxlZEJ5IiwiZGl2UHJvcHMiLCJUYWciLCJfZXZhbHVhdGVGb2N1c0JlZm9yZVJlbmRlciIsImVsZW1lbnRSZWYiLCJvbk1vdXNlRG93bkNhcHR1cmUiLCJmb3JjZUludG9GaXJzdEVsZW1lbnQiLCJvd25lclpvbmVFbGVtZW50IiwiX2dldE93bmVyWm9uZSIsIm93bmVyWm9uZSIsImZvY3VzTGFzdCIsImZvcmNlQWxpZ25tZW50Iiwib25CZWZvcmVGb2N1cyIsInNob3VsZFJlY2VpdmVGb2N1cyIsInNldEZvY3VzQWxpZ25tZW50IiwicG9pbnQiLCJmb2N1c2VkRWxlbWVudCIsInNob3VsZFJlc3RvcmVGb2N1cyIsImdldEVsZW1lbnRJbmRleFBhdGgiLCJpc1BhcmtlZCIsIl9pc1BhcmtlZCIsIl9wYXJrZWRUYWJJbmRleCIsInByZXZpb3VzQWN0aXZlRWxlbWVudCIsInByZXZlbnREZWZhdWx0V2hlbkhhbmRsZWQiLCJfbW92ZUZvY3VzIiwiZ2V0RGlzdGFuY2VGcm9tQ2VudGVyIiwidXNlRGVmYXVsdFdyYXAiLCJjYW5kaWRhdGVEaXN0YW5jZSIsImNhbmRpZGF0ZUVsZW1lbnQiLCJjaGFuZ2VkRm9jdXMiLCJpc0JpZGlyZWN0aW9uYWwiLCJiaWRpcmVjdGlvbmFsIiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwiZWxlbWVudERpc3RhbmNlIiwiaXNDaXJjdWxhck5hdmlnYXRpb24iLCJ0YXJnZXRUb3AiLCJkaXN0YW5jZSIsInNob3VsZFdyYXAiLCJwYXJzZUZsb2F0IiwidG9GaXhlZCIsInNjcm9sbGFibGVQYXJlbnQiLCJ0YXJnZXRCb3R0b20iLCJwYWdlc2l6ZSIsImlzSG9yaXpvbnRhbCIsImlzVmVydGljYWwiLCJyZWN0IiwidG9wXzEiLCJjaGlsZEluZGV4IiwiaXNSYW5nZVNlbGVjdGVkIiwiaW5wdXRWYWx1ZSIsImlzUmVhZG9ubHkiLCJyZWFkT25seSIsInNob3VsZElucHV0TG9zZUZvY3VzT25BcnJvd0tleSIsImNoZWNrRm9yTm9XcmFwIiwiaXNNYWMiLCJSZWN0YW5nbGVFZGdlIiwiUG9zaXRpb24iLCJpc0lPUyIsImdldFByb3BzV2l0aERlZmF1bHRzIiwicHJvcHNXaXRob3V0RGVmYXVsdHMiLCJnZXRJc0NoZWNrZWQiLCJjYW5DaGVjayIsImlzQ2hlY2tlZCIsImhhc1N1Ym1lbnUiLCJzdWJNZW51UHJvcHMiLCJpc0l0ZW1EaXNhYmxlZCIsImdldE1lbnVJdGVtQXJpYVJvbGUiLCJSZWN0YW5nbGUiLCJlcXVhbHMiLCJfY3JlYXRlUG9zaXRpb25EYXRhIiwidGFyZ2V0RWRnZSIsImFsaWdubWVudEVkZ2UiLCJpc0F1dG8iLCJEaXJlY3Rpb25hbERpY3Rpb25hcnkiLCJfaXNSZWN0YW5nbGVXaXRoaW5Cb3VuZHMiLCJib3VuZGluZ1JlY3QiLCJfZ2V0T3V0T2ZCb3VuZHNFZGdlcyIsIm91dE9mQm91bmRzIiwiX2dldEVkZ2VWYWx1ZSIsImVkZ2UiLCJfc2V0RWRnZVZhbHVlIiwiX2dldENlbnRlclZhbHVlIiwiZWRnZXMiLCJfZ2V0RmxhbmtpbmdFZGdlcyIsInBvc2l0aXZlRWRnZSIsIm5lZ2F0aXZlRWRnZSIsIl9nZXRSZWxhdGl2ZUVkZ2VWYWx1ZSIsIl9nZXRSZWxhdGl2ZVJlY3RFZGdlVmFsdWUiLCJfZ2V0UmVsYXRpdmVFZGdlRGlmZmVyZW5jZSIsImhvc3RSZWN0IiwiX21vdmVFZGdlIiwibWFpbnRhaW5TaXplIiwiZGlmZmVyZW5jZSIsInJldHVyblJlY3QiLCJfYWxpZ25FZGdlcyIsImdhcCIsIl9pc0VkZ2VJbkJvdW5kcyIsImJvdW5kcyIsIl9nZXRPdXRPZkJvdW5kc0RlZ3JlZSIsInRvdGFsIiwiYnJlYWtpbmdFZGdlc18xIiwicG93IiwiX2FkanVzdEZpdFdpdGhpbkJvdW5kcyIsImJvdW5kaW5nIiwicG9zaXRpb25EYXRhIiwiZGlyZWN0aW9uYWxIaW50Rml4ZWQiLCJjb3ZlclRhcmdldCIsImFsaWduVGFyZ2V0RWRnZSIsImVsZW1lbnRFc3RpbWF0ZSIsImVsZW1lbnRSZWN0YW5nbGUiLCJkaXJlY3Rpb25zIiwib29iRGVncmVlIiwiY3VycmVudEVzdGltYXRlIiwiY3VycmVudEVkZ2UiLCJjdXJyZW50QWxpZ25tZW50IiwiYmVzdEVkZ2UiLCJiZXN0QWxpZ25tZW50IiwiY3VycmVudE9PQkRlZ3JlZSIsIl9lc3RpbWF0ZVBvc2l0aW9uIiwiX2ZsaXBUb0ZpdCIsImZpeGVkRWRnZSIsImZsaXBwZWRFbGVtZW50RXN0aW1hdGUiLCJvcHBvc2l0ZUVkZ2UiLCJfZmxpcEFsaWdubWVudEVkZ2UiLCJfYWxpZ25PdXRPZkJvdW5kc0VkZ2VzIiwib3V0T2ZCb3VuZHNFZGdlcyIsInByZXNlcnZlRWRnZSIsIm91dE9mQm91bmRzRWRnZXNfMSIsImVkZ2VBdHRlbXB0IiwiZm9yY2VkSW5Cb3VuZHMiLCJfY2VudGVyRWRnZVRvUG9pbnQiLCJlbGVtZW50VG9Qb3NpdGlvbiIsImVzdGltYXRlZEVsZW1lbnRQb3NpdGlvbiIsImVsZW1lbnRFZGdlIiwiYWRqdXN0ZWRHYXAiLCJfYWxpZ25PcHBvc2l0ZUVkZ2VzIiwiX2ZpbmFsaXplUmV0dXJuRWRnZSIsInJldHVybkVkZ2UiLCJfZmluYWxpemVFbGVtZW50UG9zaXRpb24iLCJob3N0RWxlbWVudCIsImRvTm90RmluYWxpemVSZXR1cm5FZGdlIiwiZm9yY2VXaXRoaW5Cb3VuZHMiLCJfZ2V0UmVjdGFuZ2xlRnJvbUVsZW1lbnQiLCJfaXNFZGdlT25Cb3VuZHMiLCJfY2FsY3VsYXRlQWN0dWFsQmVha1dpZHRoSW5QaXhlbHMiLCJiZWFrV2lkdGgiLCJzcXJ0IiwiX2dldFBvc2l0aW9uRGF0YSIsImRpcmVjdGlvbmFsSGludCIsImRpcmVjdGlvbmFsSGludEZvclJUTCIsInByZXZpb3VzUG9zaXRpb25zIiwicG9zaXRpb25JbmZvcm1hdGlvbiIsImdldENsb3Nlc3RFZGdlIiwidGFyZ2V0Q2VudGVyIiwiYm91bmRpbmdDZW50ZXIiLCJfcG9zaXRpb25FbGVtZW50V2l0aGluQm91bmRzIiwiX2ZpbmFsaXplQmVha1Bvc2l0aW9uIiwiZWxlbWVudFBvc2l0aW9uIiwicG9zaXRpb25lZEJlYWsiLCJhY3R1YWxFbGVtZW50Iiwic2hvd0JlYWsiLCJ0YXJnZXRSZWN0YW5nbGUiLCJjbG9zZXN0RWRnZSIsImhpZGVCZWFrIiwiX3Bvc2l0aW9uQmVhayIsImJlYWtUYXJnZXRQb2ludCIsImVsZW1lbnRCb3VuZHMiLCJiZWFrUG9zaXRpb24iLCJjbGllbnRSZWN0IiwiX2dldFJlY3RhbmdsZUZyb21JUmVjdCIsIl9wb3NpdGlvbkVsZW1lbnRSZWxhdGl2ZSIsImdhcFNwYWNlIiwicmVjdE9yUG9pbnQiLCJvdXRPZkJvdW5kc18xIiwiX2dldFRhcmdldFJlY3QiLCJfZ2V0QWxpZ25tZW50RGF0YSIsInBvc2l0aW9uZWRFbGVtZW50IiwiX2ZpbmFsaXplUG9zaXRpb25EYXRhIiwiX3Bvc2l0aW9uQ2FsbG91dCIsImNhbGxvdXQiLCJpc0JlYWtWaXNpYmxlIiwicG9zaXRpb25Qcm9wcyIsImlubmVyV2lkdGgiLCJpbm5lckhlaWdodCIsImZpbmFsaXplZEJlYWtQb3NpdGlvbiIsInBvc2l0aW9uQ2FyZCIsIl9wb3NpdGlvbkNhcmQiLCJ0YWdzVG9JZ25vcmUiLCJ1c2VDb25zdCIsInVzZUFzeW5jIiwiYXN5bmMiLCJ1c2VPbkV2ZW50IiwiY2FsbGJhY2tSZWYiLCJXaW5kb3dDb250ZXh0IiwidXNlV2luZG93IiwiZGVmYXVsdEZvY3VzUmVzdG9yZXIiLCJvcmlnaW5hbEVsZW1lbnQiLCJjb250YWluc0ZvY3VzIiwidXNlUmVzdG9yZUZvY3VzIiwib25SZXN0b3JlRm9jdXMiLCJvcmlnaW5hbEZvY3VzZWRFbGVtZW50IiwiY3VycmVudEFjdGl2ZUVsZW1lbnQiLCJkb2VzRWxlbWVudENvbnRhaW5Gb2N1cyIsImRvY3VtZW50Q29udGFpbnNGb2N1cyIsImhhc0ZvY3VzIiwidXNlSGlkZVNpYmxpbmdOb2RlcyIsInNob3VsZEhpZGVTaWJsaW5ncyIsImVuYWJsZUFyaWFIaWRkZW5TaWJsaW5ncyIsInRhcmdldERvY3VtZW50IiwiYWZmZWN0ZWROb2RlcyIsImFyaWFIaWRkZW4iLCJvcmlnaW5hbFZhbHVlIiwibW9kYWxpemUiLCJQb3B1cCIsIm1lcmdlZFJvb3RSZWYiLCJvbkRpc21pc3MiLCJuZWVkc1ZlcnRpY2FsU2Nyb2xsQmFyIiwibmVlZHNWZXJ0aWNhbFNjcm9sbEJhclN0YXRlIiwic2V0TmVlZHNWZXJ0aWNhbFNjcm9sbEJhciIsInJvb3RIZWlnaHQiLCJmaXJzdENoaWxkSGVpZ2h0IiwidXNlU2Nyb2xsYmFyQXN5bmMiLCJ1c2VUYXJnZXQiLCJwcmV2aW91c1RhcmdldFByb3AiLCJ0YXJnZXRSZWYiLCJ0YXJnZXRXaW5kb3ciLCJjdXJyZW50RG9jIiwiQU5JTUFUSU9OUyIsIkJFQUtfT1JJR0lOX1BPU0lUSU9OIiwiT0ZGX1NDUkVFTl9TVFlMRSIsIkFSSUFfUk9MRV9BVFRSSUJVVEVTIiwiREVGQVVMVF9QUk9QUyIsInByZXZlbnREaXNtaXNzT25Mb3N0Rm9jdXMiLCJwcmV2ZW50RGlzbWlzc09uU2Nyb2xsIiwicHJldmVudERpc21pc3NPblJlc2l6ZSIsIm1pblBhZ2VQYWRkaW5nIiwidXNlUG9zaXRpb25zIiwiY2FsbG91dEVsZW1lbnQiLCJnZXRCb3VuZHMiLCJwb3NpdGlvbnMiLCJzZXRQb3NpdGlvbnMiLCJwb3NpdGlvbkF0dGVtcHRzIiwicHJldmlvdXNUYXJnZXQiLCJoaWRkZW4iLCJmaW5hbEhlaWdodCIsImNhbGxvdXRNYXhIZWlnaHQiLCJvblBvc2l0aW9uZWQiLCJ0aW1lcklkXzEiLCJwcmV2RWxlbWVudFBvc2l0aW9ucyIsIm5ld0VsZW1lbnRQb3NpdGlvbiIsImR1cGVDYWxsb3V0RWxlbWVudCIsImNsb25lTm9kZSIsIm5ld1Bvc2l0aW9ucyIsInBvc2l0aW9uQ2FsbG91dCIsImNvbXBhcmVQb3NpdGlvbnMiLCJDYWxsb3V0Q29udGVudEJhc2UiLCJjYWxsb3V0V2lkdGgiLCJjYWxsb3V0TWF4V2lkdGgiLCJjYWxsb3V0TWluV2lkdGgiLCJkb05vdExheWVyIiwiaGlkZU92ZXJmbG93IiwiYmFja2dyb3VuZENvbG9yIiwib25TY3JvbGwiLCJvbkxheWVyTW91bnRlZCIsInNldENhbGxvdXRFbGVtZW50IiwiY2FsbG91dENhbGxiYWNrIiwiY2FsbG91dEVsIiwidGFyZ2V0V2luZG93UmVzaXplZCIsInNldFRhcmdldFdpbmRvd1Jlc2l6ZWQiLCJjYWNoZWRCb3VuZHMiLCJjdXJyZW50Qm91bmRzIiwic2VnbWVudHMiLCJnZXRXaW5kb3dTZWdtZW50cyIsInNlZ21lbnRzXzEiLCJzZWdtZW50IiwiX2dldEJvdW5kc0Zyb21UYXJnZXRXaW5kb3ciLCJnZXRCb3VuZHNGcm9tVGFyZ2V0V2luZG93IiwidXNlQm91bmRzIiwic2V0TWF4SGVpZ2h0IiwidG9wQm91bmRzIiwiYm90dG9tQm91bmRzIiwidXNlTWF4SGVpZ2h0IiwiZGlzbWlzc09uVGFyZ2V0Q2xpY2siLCJzaG91bGREaXNtaXNzT25XaW5kb3dGb2N1cyIsInByZXZlbnREaXNtaXNzT25FdmVudCIsImlzTW91c2VEb3duT25Qb3B1cCIsIm1vdXNlRG93bkhhbmRsZXJzIiwicG9zaXRpb25zRXhpc3RzIiwiZGlzbWlzc09uU2Nyb2xsIiwiZGlzbWlzc09uQ2xpY2tPclNjcm9sbCIsImRpc21pc3NPblJlc2l6ZSIsImRpc21pc3NPbkxvc3RGb2N1cyIsImV2ZW50UGF0aHMiLCJjb21wb3NlZFBhdGgiLCJpc0V2ZW50VGFyZ2V0T3V0c2lkZUNhbGxvdXQiLCJkaXNtaXNzT25UYXJnZXRXaW5kb3dCbHVyIiwiZGlzcG9zYWJsZXNQcm9taXNlIiwiZGlzcG9zYWJsZXNfMSIsInVzZURpc21pc3NIYW5kbGVycyIsIm1vdXNlRG93bk9uUG9wdXAiLCJtb3VzZVVwT25Qb3B1cCIsImlzRm9yY2VkSW5Cb3VuZHMiLCJjc3NQb3NpdGlvbnMiLCJzZXRJbml0aWFsRm9jdXMiLCJoYXNQb3NpdGlvbnMiLCJ0aW1lcklkXzIiLCJ1c2VBdXRvRm9jdXMiLCJvdmVyZmxvd1lIaWRkZW4iLCJiZWFrVmlzaWJsZSIsIm92ZXJmbG93U3R5bGUiLCJ2aXNpYmlsaXR5U3R5bGUiLCJjb250YWluZXIiLCJiZWFrIiwiZ2V0QmVha1Bvc2l0aW9uIiwiYmVha0N1cnRhaW4iLCJjYWxsb3V0TWFpbiIsIm9uTW91c2VEb3duIiwib25Nb3VzZVVwIiwicHJldmlvdXNQcm9wcyIsIm5leHRQcm9wcyIsInNob3VsZFVwZGF0ZVdoZW5IaWRkZW4iLCJiZWFrUG9zaXRpb25TdHlsZSIsIm5ld0VsZW1lbnRQb3NpdGlvbnMiLCJvbGRQb3NpdGlvbkVkZ2UiLCJuZXdQb3NpdGlvbkVkZ2UiLCJnZXRCZWFrU3R5bGUiLCJDYWxsb3V0Q29udGVudCIsImJveFNpemluZyIsImJvcmRlclJhZGl1cyIsImJveFNoYWRvdyIsImJvcmRlcldpZHRoIiwiYm9yZGVyU3R5bGUiLCJtaW5XaWR0aCIsIm92ZXJmbG93WCIsIm1lcmdlU2V0dGluZ3MiLCJvbGRTZXR0aW5ncyIsIm5ld1NldHRpbmdzIiwiX2lzU2V0dGluZ3NGdW5jdGlvbiIsIl9zZXR0aW5nc01lcmdlV2l0aCIsIm1lcmdlU2NvcGVkU2V0dGluZ3MiLCJzY29wZWRTZXR0aW5nc0Zyb21Qcm9wcyIsIm9sZFNjb3BlZFNldHRpbmdzIiwibmV3U2NvcGVkU2V0dGluZ3MiLCJfc2NvcGVkU2V0dGluZ3NNZXJnZVdpdGgiLCJDdXN0b21pemVyIiwiX29uQ3VzdG9taXphdGlvbkNoYW5nZSIsImNvbnRleHRUcmFuc2Zvcm0iLCJwYXJlbnRDb250ZXh0IiwibmV3Q29udGV4dCIsIm1lcmdlQ3VzdG9taXphdGlvbnMiLCJnZXRGYWJyaWNUaGVtZSIsIkZhYnJpY0Jhc2UiLCJhcHBseVRoZW1lIiwiYXBwbHlUaGVtZVRvQm9keSIsImJvZHlUaGVtZWQiLCJjdXJyZW50RG9jXzEiLCJ1c2VBcHBseVRoZW1lVG9Cb2R5IiwiUm9vdCIsImNvbnRleHREaXIiLCJwYWdlRGlyIiwiY29tcG9uZW50RGlyIiwicm9vdERpciIsIm5lZWRzVGhlbWUiLCJnZXREaXIiLCJyZW5kZXJlZENvbnRlbnQiLCJ1c2VSZW5kZXJlZENvbnRlbnQiLCJpbmhlcml0Rm9udCIsIkZhYnJpYyIsIl9sYXllcnNCeUhvc3RJZCIsIl9sYXllckhvc3RzQnlJZCIsIl9kZWZhdWx0SG9zdFNlbGVjdG9yIiwiZmlsdGVyZWRFdmVudFByb3BzIiwiTGF5ZXJCYXNlIiwibWVyZ2VkUmVmIiwibGF5ZXJSZWYiLCJuZWVkUmFpc2VMYXllck1vdW50Iiwic2V0TmVlZFJhaXNlTGF5ZXJNb3VudCIsInVzZURvY3VtZW50IiwiZXZlbnRCdWJibGluZ0VuYWJsZWQiLCJob3N0SWQiLCJvbkxheWVyRGlkTW91bnQiLCJvbkxheWVyV2lsbFVubW91bnQiLCJpbnNlcnRGaXJzdCIsImlzTm90SG9zdCIsImdldEhvc3QiLCJsYXllckhvc3QiLCJsYXllckhvc3RzIiwiZ2V0TGF5ZXJIb3N0IiwiZ2V0RWxlbWVudEJ5SWQiLCJkZWZhdWx0SG9zdFNlbGVjdG9yIiwiaG9zdCIsImNzc1RleHQiLCJjcmVhdGVEZWZhdWx0TGF5ZXJIb3N0IiwicmVtb3ZlTGF5ZXJFbGVtZW50IiwiZWxlbSIsImNyZWF0ZUxheWVyRWxlbWVudCIsInZpcnR1YWxDaGlsZCIsInZpcnR1YWxQYXJlbnQiLCJvbGRQYXJlbnQiLCJzZXRWaXJ0dWFsUGFyZW50IiwibGF5ZXJIb3N0c18xIiwibm90aWZ5TGF5ZXJzQ2hhbmdlZCIsInJlZ2lzdGVyTGF5ZXIiLCJsYXllcnMiLCJpZHgiLCJsYXllckhvc3RzXzIiLCJ1bnJlZ2lzdGVyTGF5ZXIiLCJvbkZpbHRlckV2ZW50IiwiZ2V0RmlsdGVyZWRFdmVudHMiLCJFdmVudCIsIkJVQkJMSU5HX1BIQVNFIiwicm9vdE5vSG9zdCIsIkNhbGxvdXQiLCJsYXllclByb3BzIiwiS2V5dGlwRXZlbnRzIiwiZGVmYXVsdEljb25SZW5kZXJlciIsImljb25Qcm9wcyIsInJlbmRlckl0ZW1JY29uIiwiaGFzSWNvbnMiLCJvblJlbmRlckljb24iLCJyZW5kZXJDaGVja01hcmtJY29uIiwib25DaGVja21hcmtDbGljayIsImlzSXRlbUNoZWNrZWQiLCJjaGVja21hcmtJY29uIiwicmVuZGVySXRlbU5hbWUiLCJsYWJlbCIsInJlbmRlclNlY29uZGFyeVRleHQiLCJzZWNvbmRhcnlUZXh0IiwicmVuZGVyU3ViTWVudUljb24iLCJzdWJtZW51SWNvblByb3BzIiwic3ViTWVudUljb24iLCJDb250ZXh0dWFsTWVudUl0ZW1CYXNlIiwib3BlblN1Yk1lbnUiLCJnZXRTdWJtZW51VGFyZ2V0Iiwic3VibWVudVRhcmdldCIsImRpc21pc3NTdWJNZW51IiwiZGlzbWlzc01lbnUiLCJkaXNtaXNzQWxsIiwicmVuZGVyQ29udGVudCIsIm9uUmVuZGVyQ29udGVudCIsIl9yZW5kZXJMYXlvdXQiLCJsaW5rQ29udGVudE1lbnUiLCJsaW5rQ29udGVudCIsImRlZmF1bHRSZW5kZXJzIiwid3JhcHBlciIsImFsaWduSXRlbXMiLCJkaXZpZGVyIiwiTWVkaXVtU2NyZWVuU2VsZWN0b3IiLCJTY3JlZW5XaWR0aE1pbkxhcmdlIiwiZ2V0TWVudUl0ZW1TdHlsZXMiLCJDb250ZXh0dWFsTWVudUl0ZW1CYWNrZ3JvdW5kSG92ZXJDb2xvciIsIkNvbnRleHR1YWxNZW51SXRlbVRleHRIb3ZlckNvbG9yIiwiQ29udGV4dHVhbE1lbnVJdGVtQmFja2dyb3VuZFNlbGVjdGVkQ29sb3IiLCJDb250ZXh0dWFsTWVudUl0ZW1EaXZpZGVyQ29sb3IiLCJjdXJzb3IiLCJ0ZXh0QWxpZ24iLCJyb290RGlzYWJsZWQiLCJmb3JjZWRDb2xvckFkanVzdCIsIk1zSGlnaENvbnRyYXN0QWRqdXN0Iiwicm9vdEhvdmVyZWQiLCJyb290Rm9jdXNlZCIsInJvb3RDaGVja2VkIiwicm9vdFByZXNzZWQiLCJyb290RXhwYW5kZWQiLCJhbmNob3JMaW5rIiwidGV4dFJlbmRlcmluZyIsImxldHRlclNwYWNpbmciLCJ3b3JkU3BhY2luZyIsInRleHRUcmFuc2Zvcm0iLCJ0ZXh0SW5kZW50IiwidGV4dFNoYWRvdyIsInRleHREZWNvcmF0aW9uIiwidmVydGljYWxBbGlnbiIsInRleHRPdmVyZmxvdyIsInBhZGRpbmdMZWZ0IiwibWluSGVpZ2h0IiwiaWNvbkNvbG9yIiwiaWNvbkRpc2FibGVkIiwic3BsaXRCdXR0b25GbGV4Q29udGFpbmVyIiwiZmxleFdyYXAiLCJqdXN0aWZ5Q29udGVudCIsImdldFNwbGl0QnV0dG9uVmVydGljYWxEaXZpZGVyQ2xhc3NOYW1lcyIsImlzRXhwYW5kZWQiLCJzcGxpdE1lbnUiLCJzY3JlZW5SZWFkZXJUZXh0IiwiZXhwYW5kZWQiLCJpc0FuY2hvckxpbmsiLCJrbm93bkljb24iLCJpdGVtQ2xhc3NOYW1lIiwiZGl2aWRlckNsYXNzTmFtZSIsInN1Yk1lbnVDbGFzc05hbWUiLCJwcmltYXJ5RGlzYWJsZWQiLCJiYWNrZ3JvdW5kIiwic3BsaXRQcmltYXJ5IiwiZmxleEJhc2lzIiwic3BsaXRDb250YWluZXIiLCJnZXRJdGVtU3R5bGVzIiwiQ29udGV4dHVhbE1lbnVJdGVtIiwiQ29udGV4dHVhbE1lbnVJdGVtV3JhcHBlciIsIl9vbkl0ZW1Nb3VzZUVudGVyIiwib25JdGVtTW91c2VFbnRlciIsIl9vbkl0ZW1DbGljayIsIm9uSXRlbUNsaWNrQmFzZSIsIl9vbkl0ZW1Nb3VzZUxlYXZlIiwib25JdGVtTW91c2VMZWF2ZSIsIl9vbkl0ZW1LZXlEb3duIiwib25JdGVtS2V5RG93biIsIl9vbkl0ZW1Nb3VzZU1vdmUiLCJvbkl0ZW1Nb3VzZU1vdmUiLCJfZ2V0U3VibWVudVRhcmdldCIsInVzZVByZXZpb3VzIiwiS0VZVElQX0FEREVEIiwiS0VZVElQX1JFTU9WRUQiLCJLRVlUSVBfVVBEQVRFRCIsIlBFUlNJU1RFRF9LRVlUSVBfQURERUQiLCJQRVJTSVNURURfS0VZVElQX1JFTU9WRUQiLCJQRVJTSVNURURfS0VZVElQX0VYRUNVVEUiLCJFTlRFUl9LRVlUSVBfTU9ERSIsIkVYSVRfS0VZVElQX01PREUiLCJLZXl0aXBNYW5hZ2VyIiwia2V5dGlwcyIsInBlcnNpc3RlZEtleXRpcHMiLCJzZXF1ZW5jZU1hcHBpbmciLCJpbktleXRpcE1vZGUiLCJzaG91bGRFbnRlcktleXRpcE1vZGUiLCJkZWxheVVwZGF0aW5nS2V5dGlwQ2hhbmdlIiwiX2luc3RhbmNlIiwiaW5pdCIsInJlZ2lzdGVyIiwia2V5dGlwUHJvcHMiLCJwZXJzaXN0ZWQiLCJhZGRQYXJlbnRPdmVyZmxvdyIsImtleVNlcXVlbmNlcyIsInVuaXF1ZUtleXRpcCIsIl9nZXRVbmlxdWVLdHAiLCJ1bmlxdWVJRCIsImV2ZW50XzEiLCJrZXl0aXAiLCJ1cGRhdGUiLCJuZXdLZXl0aXBQcm9wcyIsIm9sZEtleVRpcCIsInZpc2libGUiLCJ1bnJlZ2lzdGVyIiwia2V5dGlwVG9SZW1vdmUiLCJlbnRlcktleXRpcE1vZGUiLCJleGl0S2V5dGlwTW9kZSIsImdldEtleXRpcHMiLCJmdWxsU2VxdWVuY2UiLCJwYXJlbnRLZXl0aXAiLCJvdmVyZmxvd1NldFNlcXVlbmNlIiwibWVudUV4ZWN1dGUiLCJvdmVyZmxvd0J1dHRvblNlcXVlbmNlcyIsImtleXRpcFNlcXVlbmNlcyIsInNlcXVlbmNlc1RvSUQiLCJwcmV2VmFsdWUiLCJrZXlTZXF1ZW5jZSIsInVzZUtleXRpcERhdGEiLCJ1bmlxdWVJZCIsImtleXRpcE1hbmFnZXIiLCJwcmV2T3B0aW9ucyIsIm5hdGl2ZUtleXRpcFByb3BzIiwia2V5dGlwSWQiLCJkZXNjcmliZWRCeVByZXBlbmQiLCJkZXNjcmliZWRieSIsImdldEFyaWFEZXNjcmliZWRCeSIsIm92ZXJmbG93S2V5U2VxdWVuY2VzIiwiaXRlbVRvQWRkIiwiY29weSIsIm92ZXJmbG93U2VxdWVuY2VMZW4iLCJvdmVyZmxvd1NlcXVlbmNlIiwibmV3S2V5U2VxdWVuY2VzIiwibWVyZ2VPdmVyZmxvd3MiLCJnZXRLZXl0aXBEYXRhIiwiS2V5dGlwRGF0YSIsIkNvbnRleHR1YWxNZW51QW5jaG9yIiwiX2FuY2hvciIsIl9nZXRNZW1vaXplZE1lbnVCdXR0b25LZXl0aXBQcm9wcyIsImhhc01lbnUiLCJvbkl0ZW1DbGljayIsIl9yZW5kZXJBcmlhRGVzY3JpcHRpb24iLCJhcmlhRGVzY3JpcHRpb24iLCJfYXJpYURlc2NyaXB0aW9uSWQiLCJmb2N1c2FibGVFbGVtZW50SW5kZXgiLCJ0b3RhbEl0ZW1Db3VudCIsImhhc0NoZWNrbWFya3MiLCJjb250ZXh0dWFsTWVudUl0ZW1BcyIsIkNoaWxkcmVuUmVuZGVyZXIiLCJleHBhbmRlZE1lbnVJdGVtS2V5IiwiYW5jaG9yUmVsIiwicmVsIiwiaXRlbUhhc1N1Ym1lbnUiLCJpdGVtUHJvcHMiLCJhcmlhRGVzY3JpYmVkQnlJZHMiLCJhZGRpdGlvbmFsSXRlbVByb3BlcnRpZXMiLCJrZXl0aXBBdHRyaWJ1dGVzIiwib25Nb3VzZUVudGVyIiwib25Nb3VzZUxlYXZlIiwib25Nb3VzZU1vdmUiLCJWZXJ0aWNhbERpdmlkZXJCYXNlIiwiZGVwcmVjYXRlZEdldENsYXNzTmFtZXMiLCJnZXRDbGFzc05hbWVzIiwiVmVydGljYWxEaXZpZGVyIiwibmFtZXMiLCJDb250ZXh0dWFsTWVudVNwbGl0QnV0dG9uIiwiX2V4ZWN1dGVJdGVtQ2xpY2siLCJfc3BsaXRCdXR0b24iLCJfb25JdGVtTW91c2VFbnRlclByaW1hcnkiLCJfb25JdGVtTW91c2VFbnRlckljb24iLCJfb25JdGVtTW91c2VNb3ZlUHJpbWFyeSIsIl9vbkl0ZW1Nb3VzZU1vdmVJY29uIiwiX29uSWNvbkl0ZW1DbGljayIsImV4ZWN1dGVJdGVtQ2xpY2siLCJfcHJvY2Vzc2luZ1RvdWNoIiwiX29uVG91Y2hTdGFydCIsIl9oYW5kbGVUb3VjaEFuZFBvaW50ZXJFdmVudCIsInN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbiIsIl9hc3luYyIsInNwbGl0QnV0dG9uIiwib25Ub3VjaFN0YXJ0IiwiX3JlbmRlclNwbGl0UHJpbWFyeUJ1dHRvbiIsIl9yZW5kZXJTcGxpdERpdmlkZXIiLCJfcmVuZGVyU3BsaXRJY29uQnV0dG9uIiwiaXRlbUNvbXBvbmVudFByb3BzIiwiZ2V0RGl2aWRlckNsYXNzTmFtZXMiLCJvbkl0ZW1Nb3VzZURvd24iLCJidXR0b25Qcm9wcyIsIm9uVGFwIiwiX2xhc3RUb3VjaFRpbWVvdXRJZCIsIkNvbnRleHR1YWxNZW51QnV0dG9uIiwiX2J0biIsImRlZmF1bHRSb2xlIiwiYnV0dG9uTmF0aXZlUHJvcGVydGllcyIsIml0ZW1Sb2xlIiwiaXRlbUJ1dHRvblByb3BlcnRpZXMiLCJwcm92aWRlZElkIiwiUkVBQ1RfTElGRUNZQ0xFX0VYQ0xVU0lPTlMiLCJSZXNwb25zaXZlTW9kZSIsIkJhc2VEZWNvcmF0b3IiLCJfdXBkYXRlQ29tcG9zZWRDb21wb25lbnRSZWYiLCJjb21wb3NlZENvbXBvbmVudEluc3RhbmNlIiwiX2NvbXBvc2VkQ29tcG9uZW50SW5zdGFuY2UiLCJfaG9pc3RlZCIsImRlc3RpbmF0aW9uIiwiZXhjbHVzaW9ucyIsImhvaXN0ZWQiLCJob2lzdE1ldGhvZHMiLCJfZGVmYXVsdE1vZGUiLCJfbGFzdE1vZGUiLCJSRVNQT05TSVZFX01BWF9DT05TVFJBSU5UIiwiZ2V0SW5pdGlhbFJlc3BvbnNpdmVNb2RlIiwiZ2V0UmVzcG9uc2l2ZU1vZGUiLCJjdXJyZW50V2luZG93IiwicmVzcG9uc2l2ZU1vZGUiLCJNZW51Q29udGV4dCIsImdldENvbnRleHR1YWxNZW51SXRlbUNsYXNzTmFtZXMiLCJnZXRTdWJtZW51SXRlbXMiLCJvdmVycmlkZUl0ZW1zIiwic3ViSXRlbSIsInByZWZlck1lbnVUYXJnZXRBc0V2ZW50VGFyZ2V0IiwiY29udGV4dEl0ZW0iLCJnZXRPbkNsaWNrV2l0aE92ZXJyaWRlVGFyZ2V0IiwiX2dldE1lbnVJdGVtU3R5bGVzRnVuY3Rpb24iLCJ1c2VTdWJNZW51U3RhdGUiLCJkaXNtaXNzIiwibWVudVRhcmdldCIsInNldEV4cGFuZGVkTWVudUl0ZW1LZXkiLCJzZXRTdWJtZW51VGFyZ2V0Iiwic2hvdWxkRm9jdXNPbkNvbnRhaW5lciIsInNldFNob3VsZEZvY3VzT25Db250YWluZXIiLCJzdWJNZW51SWQiLCJjbG9zZVN1Yk1lbnUiLCJmb2N1c0NvbnRhaW5lciIsInN1Ym1lbnVJdGVtS2V5Iiwib25TdWJNZW51RGlzbWlzcyIsImlzTW91bnRlZFJlZiIsInVzZU9uU3VibWVudURpc21pc3MiLCJmaW5kSXRlbUJ5S2V5RnJvbUl0ZW1zIiwiaXRlbXNfMyIsIml0ZW1UeXBlIiwiU2VjdGlvbiIsInNlY3Rpb25Qcm9wcyIsInN1Ym1lbnVQcm9wcyIsImlzU3ViTWVudSIsInVzZUtleUhhbmRsZXJzIiwiZm9jdXNab25lUHJvcHMiLCJmb2N1c1pvbmVEaXJlY3Rpb24iLCJsYXN0S2V5RG93bldhc0FsdE9yTWV0YSIsImtleUhhbmRsZXIiLCJzaG91bGRIYW5kbGVLZXkiLCJkaXNtaXNzQWxsTWVudXMiLCJoYW5kbGVkIiwic2hvdWxkSGFuZGxlS2V5RG93biIsInN1Ym1lbnVDbG9zZUtleSIsInNob3VsZENsb3NlU3ViTWVudSIsImlzQWx0T3JNZXRhIiwic2hvdWxkSGFuZGxlS2V5VXAiLCJrZXlQcmVzc0lzQWx0T3JNZXRhQWxvbmUiLCJoYXNNb2RpZmllciIsImlzVXAiLCJpc0Rvd24iLCJnZXRGaXJzdEZvY3VzYWJsZSIsIm9wZW5LZXkiLCJDb250ZXh0dWFsTWVudUJhc2UiLCJhc3luY1RyYWNrZXIiLCJtZW51SWQiLCJ0cnlGb2N1c1ByZXZpb3VzQWN0aXZlRWxlbWVudCIsInVzZVByZXZpb3VzQWN0aXZlRWxlbWVudCIsImdldFN1Ym1lbnVQcm9wcyIsImRlbGF5VXBkYXRlRm9jdXNPbkhvdmVyIiwic2hvdWxkVXBkYXRlRm9jdXNPbk1vdXNlRXZlbnQiLCJnb3RNb3VzZU1vdmUiLCJvbk1lbnVGb2N1c0NhcHR1cmUiLCJ1c2VTaG91bGRVcGRhdGVGb2N1c09uTW91c2VNb3ZlIiwiaXNTY3JvbGxJZGxlIiwic2Nyb2xsSWRsZVRpbWVvdXRJZCIsInVzZVNjcm9sbEhhbmRsZXIiLCJzdWJNZW51SG92ZXJEZWxheSIsImVudGVyVGltZXJSZWYiLCJjYW5jZWxTdWJNZW51VGltZXIiLCJvblRpbWVyRXhwaXJlZCIsInVzZVN1Ym1lbnVFbnRlclRpbWVyIiwic3RhcnRTdWJtZW51VGltZXIiLCJzdWJNZW51RW50cnlUaW1lciIsIm92ZXJyaWRlUmVzcG9uc2l2ZU1vZGUiLCJsYXN0UmVzcG9uc2l2ZU1vZGUiLCJzZXRMYXN0UmVzcG9uc2l2ZU1vZGUiLCJvblJlc2l6ZSIsIm5ld1Jlc3BvbnNpdmVNb2RlIiwidXNlUmVzcG9uc2l2ZU1vZGUiLCJvbk1lbnVEaXNtaXNzZWQiLCJvbk1lbnVPcGVuZWQiLCJwcmV2aW91c0hpZGRlbiIsIm9uTWVudU9wZW5lZFJlZiIsIm9uTWVudUNsb3NlZFJlZiIsInByb3BzUmVmIiwidXNlVmlzaWJpbGl0eSIsIm9uS2V5VXAiLCJvbk1lbnVLZXlEb3duIiwiX2oiLCJzaG91bGRJZ25vcmVNb3VzZUV2ZW50IiwidXBkYXRlRm9jdXNPbk1vdXNlRXZlbnQiLCJvdmVycmlkZVRhcmdldCIsInNob3VsZERpc21pc3MiLCJzZXRBY3RpdmUiLCJ1c2VNb3VzZUhhbmRsZXJzIiwib25JdGVtTW91c2VFbnRlckJhc2UiLCJvbkl0ZW1Nb3VzZU1vdmVCYXNlIiwib25Nb3VzZUl0ZW1MZWF2ZSIsIm9uQW5jaG9yQ2xpY2siLCJvbkRlZmF1bHRSZW5kZXJNZW51TGlzdCIsIm1lbnVMaXN0UHJvcHMiLCJtZW51Q2xhc3NOYW1lcyIsImluZGV4Q29ycmVjdGlvbiIsImxpc3QiLCJtZW51SXRlbSIsInJlbmRlck1lbnVJdGVtIiwiRGl2aWRlciIsIkhlYWRlciIsImluZGV4SW5jcmVhc2UiLCJjdXN0b21PblJlbmRlckxpc3RMZW5ndGgiLCJpdGVtQ2xhc3NOYW1lcyIsInJlbmRlcmVkSXRlbXMiLCJnZXRJdGVtQ2xhc3NOYW1lcyIsInN1Yk1lbnVJY29uQ2xhc3NOYW1lIiwiaXRlbVN0eWxlUHJvcHMiLCJyZW5kZXJTZXBhcmF0b3IiLCJoZWFkZXJJdGVtIiwicmVuZGVySGVhZGVyTWVudUl0ZW0iLCJyZW5kZXJMaXN0SXRlbSIsInJlbmRlclNlY3Rpb25JdGVtIiwiZGVmYXVsdFJlbmRlck5vcm1hbEl0ZW0iLCJyZW5kZXJOb3JtYWxJdGVtIiwib25SZW5kZXJDb250ZXh0dWFsTWVudUl0ZW0iLCJzZWN0aW9uSXRlbSIsImdyb3VwUHJvcHMiLCJoZWFkZXJDb250ZXh0dWFsTWVudUl0ZW0iLCJhcmlhTGFiZWxsZWRieSIsImlkXzEiLCJpZF8yIiwidG9wRGl2aWRlciIsImNvbnRleHR1YWxNZW51SXRlbSIsIml0ZW1zSW5kZXgiLCJib3R0b21EaXZpZGVyIiwiZnJvbVNlY3Rpb24iLCJvblJlbmRlciIsImNvbW1vblByb3BzIiwiZGl2SHRtbFByb3BlcnRpZXMiLCJoZWFkZXIiLCJsYWJlbEVsZW1lbnRJZCIsInVzZVRhcmdldFdpZHRoIiwidXNlVGFyZ2V0QXNNaW5XaWR0aCIsImNhbGxvdXRQcm9wcyIsIl9rIiwib25SZW5kZXJTdWJNZW51Iiwib25EZWZhdWx0UmVuZGVyU3ViTWVudSIsIl9sIiwib25SZW5kZXJNZW51TGlzdCIsImdldE1lbnVDbGFzc05hbWVzIiwiaXRlbXNIYXZlSWNvbnMiLCJjb250ZXh0dWFsTWVudUl0ZW1zIiwiY29udGV4dHVhbE1lbnVJdGVtc18xIiwiY29udGV4dE1lbnVTdHlsZSIsImFkanVzdGVkRm9jdXNab25lUHJvcHMiLCJzb21lIiwic3VibWVudUl0ZW0iLCJjYW5BbnlNZW51SXRlbXNDaGVjayIsInRhcmdldEFzSHRtbEVsZW1lbnQiLCJ0YXJnZXRXaWR0aCIsInRvdGFsSXRlbUNvdW50XzEiLCJpdGVtc18yIiwiaXRlbUNvdW50IiwiY2FsbG91dFN0eWxlc18xIiwibWVudUNvbnRleHQiLCJvbkZvY3VzQ2FwdHVyZSIsImZvY3VzWm9uZUFzIiwicmVuZGVyRm9jdXNab25lIiwiZGVmYXVsdE1lbnVJdGVtUmVuZGVyZXIiLCJFbGVtZW50IiwiaXNvcGVuIiwiTG9jYWxDb250ZXh0dWFsTWVudSIsImxpc3RTdHlsZVR5cGUiLCJ1c2VyU2VsZWN0IiwicGFkZGluZ1JpZ2h0IiwicGFkZGluZ0JvdHRvbSIsInBhZGRpbmdUb3AiLCJDb250ZXh0dWFsTWVudSIsIkJ1dHRvbkdsb2JhbENsYXNzTmFtZXMiLCJtc0J1dHRvbiIsIm1zQnV0dG9uSGFzTWVudSIsIm1zQnV0dG9uSWNvbiIsIm1zQnV0dG9uTWVudUljb24iLCJtc0J1dHRvbkxhYmVsIiwibXNCdXR0b25EZXNjcmlwdGlvbiIsIm1zQnV0dG9uU2NyZWVuUmVhZGVyVGV4dCIsIm1zQnV0dG9uRmxleENvbnRhaW5lciIsIm1zQnV0dG9uVGV4dENvbnRhaW5lciIsImdldEJhc2VCdXR0b25DbGFzc05hbWVzIiwidmFyaWFudENsYXNzTmFtZSIsIm1lbnVJY29uQ2xhc3NOYW1lIiwiaXNTcGxpdCIsImljb25FeHBhbmRlZEhvdmVyZWQiLCJtZW51SWNvbkV4cGFuZGVkSG92ZXJlZCIsInJvb3RFeHBhbmRlZEhvdmVyZWQiLCJyb290SGFzTWVudSIsImxhYmVsSG92ZXJlZCIsImljb25Ib3ZlcmVkIiwiZGVzY3JpcHRpb25Ib3ZlcmVkIiwibWVudUljb25Ib3ZlcmVkIiwiaWNvblByZXNzZWQiLCJkZXNjcmlwdGlvblByZXNzZWQiLCJtZW51SWNvblByZXNzZWQiLCJyb290Q2hlY2tlZERpc2FibGVkIiwicm9vdENoZWNrZWRIb3ZlcmVkIiwicm9vdENoZWNrZWRQcmVzc2VkIiwiZmxleENvbnRhaW5lciIsInRleHRDb250YWluZXIiLCJpY29uRXhwYW5kZWQiLCJpY29uQ2hlY2tlZCIsImxhYmVsQ2hlY2tlZCIsImxhYmVsRGlzYWJsZWQiLCJtZW51SWNvbkNoZWNrZWQiLCJtZW51SWNvbkRpc2FibGVkIiwibWVudUljb25FeHBhbmRlZCIsImRlc2NyaXB0aW9uIiwiZGVzY3JpcHRpb25DaGVja2VkIiwiZGVzY3JpcHRpb25EaXNhYmxlZCIsInNwbGl0QnV0dG9uTWVudUJ1dHRvbiIsInNwbGl0QnV0dG9uTWVudUJ1dHRvbkV4cGFuZGVkIiwic3BsaXRCdXR0b25NZW51QnV0dG9uRGlzYWJsZWQiLCJzcGxpdEJ1dHRvbk1lbnVCdXR0b25DaGVja2VkIiwic3BsaXRCdXR0b25NZW51Rm9jdXNlZCIsInNwbGl0QnV0dG9uQ29udGFpbmVyIiwic3BsaXRCdXR0b25Db250YWluZXJDaGVja2VkIiwic3BsaXRCdXR0b25Db250YWluZXJDaGVja2VkSG92ZXJlZCIsInNwbGl0QnV0dG9uQ29udGFpbmVySG92ZXJlZCIsInNwbGl0QnV0dG9uQ29udGFpbmVyRm9jdXNlZCIsInNwbGl0QnV0dG9uQ29udGFpbmVyRGlzYWJsZWQiLCJzcGxpdEJ1dHRvbk1lbnVJY29uIiwic3BsaXRCdXR0b25NZW51SWNvbkRpc2FibGVkIiwic3BsaXRCdXR0b25EaXZpZGVyIiwic3BsaXRCdXR0b25EaXZpZGVyRGlzYWJsZWQiLCJjb21wb25lbnRBc01lbW9pemVyIiwiT3V0ZXIiLCJJbm5lciIsIkJhc2VCdXR0b24iLCJfYnV0dG9uRWxlbWVudCIsIl9zcGxpdEJ1dHRvbkNvbnRhaW5lciIsIl9yZW5kZXJlZFZpc2libGVNZW51IiwiX29uUmVuZGVySWNvbiIsIl9jbGFzc05hbWVzIiwiX29uUmVuZGVyVGV4dENvbnRlbnRzIiwib25SZW5kZXJUZXh0IiwiX29uUmVuZGVyVGV4dCIsIm9uUmVuZGVyRGVzY3JpcHRpb24iLCJfb25SZW5kZXJEZXNjcmlwdGlvbiIsIl9oYXNUZXh0IiwiX2xhYmVsSWQiLCJfb25SZW5kZXJDaGlsZHJlbiIsIl9kZXNjcmlwdGlvbklkIiwiX29uUmVuZGVyQXJpYURlc2NyaXB0aW9uIiwiX29uUmVuZGVyTWVudUljb24iLCJtZW51SWNvblByb3BzIiwiX29uUmVuZGVyTWVudSIsIm1lbnVQcm9wcyIsIk1lbnVUeXBlIiwibWVudUFzIiwiX29uRGlzbWlzc01lbnUiLCJfZGlzbWlzc01lbnUiLCJfbWVudVNob3VsZEZvY3VzT25Nb3VudCIsIl9tZW51U2hvdWxkRm9jdXNPbkNvbnRhaW5lciIsIm1lbnVIaWRkZW4iLCJfb3Blbk1lbnUiLCJfb25Ub2dnbGVNZW51IiwiX29uU3BsaXRDb250YWluZXJGb2N1c0NhcHR1cmUiLCJfb25TcGxpdEJ1dHRvblByaW1hcnlDbGljayIsIl9vbk1lbnVDbGljayIsIl9vbk1lbnVLZXlEb3duIiwiX29uS2V5VXAiLCJfb25LZXlQcmVzcyIsIm9uS2V5UHJlc3MiLCJfb25Nb3VzZVVwIiwiX29uQ2xpY2siLCJfb25TcGxpdEJ1dHRvbkNvbnRhaW5lcktleURvd24iLCJjbGljayIsIl9pc1ZhbGlkTWVudU9wZW5LZXkiLCJvbk1lbnVDbGljayIsIl9pc1NwbGl0QnV0dG9uIiwiYWxsb3dEaXNhYmxlZEZvY3VzIiwidG9nZ2xlIiwiaXNQcmltYXJ5QnV0dG9uRGlzYWJsZWQiLCJyZW5kZXJBc0FuY2hvciIsInJlc29sdmVkQXJpYUxhYmVsIiwiZGF0YUlzRm9jdXNhYmxlIiwiaXNDaGVja2JveFR5cGVSb2xlIiwiY2hlY2tlZE9yUHJlc3NlZFZhbHVlIiwiX29uUmVuZGVyU3BsaXRCdXR0b25Db250ZW50IiwiX29uUmVuZGVyQ29udGVudCIsIm9uUG9pbnRlclVwIiwib25BZnRlck1lbnVEaXNtaXNzIiwib3Blbk1lbnUiLCJvblJlbmRlckFyaWFEZXNjcmlwdGlvbiIsIm9uUmVuZGVyQ2hpbGRyZW4iLCJvblJlbmRlck1lbnUiLCJvblJlbmRlck1lbnVJY29uIiwiQnV0dG9uIiwiX3Nob3VsZFJlbmRlck1lbnUiLCJfZ2V0TWVudVByb3BzIiwiQ29udGVudCIsInBlcnNpc3RNZW51IiwicmVuZGVyUGVyc2lzdGVkTWVudUhpZGRlbk9uTW91bnQiLCJnZXRTcGxpdEJ1dHRvbkNsYXNzTmFtZXMiLCJwcmltYXJ5QWN0aW9uQnV0dG9uUHJvcHMiLCJvblBvaW50ZXJEb3duIiwiU3BsaXRCdXR0b24iLCJfb25SZW5kZXJTcGxpdEJ1dHRvbk1lbnVCdXR0b24iLCJfb25SZW5kZXJTcGxpdEJ1dHRvbkRpdmlkZXIiLCJzcGxpdEJ1dHRvbk1lbnVQcm9wcyIsInNwbGl0QnV0dG9uQXJpYUxhYmVsIiwic3BsaXRCdXR0b25Qcm9wcyIsIm1lbnVUcmlnZ2VyS2V5Q29kZSIsImJhc2VDbGFzc05hbWUiLCJub091dGxpbmUiLCJpY29uU3R5bGUiLCJidXR0b25IaWdoQ29udHJhc3RGb2N1cyIsImN1c3RvbVN0eWxlcyIsIl9tIiwiX28iLCJzcGxpdEJ1dHRvbkRpdmlkZXJCYXNlU3R5bGVzIiwiYm9yZGVyVG9wUmlnaHRSYWRpdXMiLCJib3JkZXJCb3R0b21SaWdodFJhZGl1cyIsImJvcmRlclJpZ2h0IiwiYm9yZGVyUmlnaHRXaWR0aCIsImJvcmRlckxlZnRXaWR0aCIsImJvcmRlckxlZnQiLCJtYXJnaW5MZWZ0IiwibWFyZ2luVG9wIiwibWFyZ2luUmlnaHQiLCJtYXJnaW5Cb3R0b20iLCJwcmltYXJ5IiwiYmFzZUJ1dHRvblN0eWxlcyIsInNwbGl0QnV0dG9uU3R5bGVzIiwicHJpbWFyeVN0eWxlcyIsInN0YW5kYXJkU3R5bGVzIiwiRGVmYXVsdEJ1dHRvbiIsIl9zZXRQcm90b3R5cGVPZiIsIlJlZmVyZW5jZUVycm9yIl0sIm1hcHBpbmdzIjoiO2FBQ0UsSUFBSUEsRUFBbUIsR0FHdkIsU0FBU0MsRUFBb0JDLEdBRzVCLEdBQUdGLEVBQWlCRSxHQUNuQixPQUFPRixFQUFpQkUsR0FBVUMsUUFHbkMsSUFBSUMsRUFBU0osRUFBaUJFLEdBQVksQ0FDekNHLEVBQUdILEVBQ0hJLEdBQUcsRUFDSEgsUUFBUyxJQVVWLE9BTkFJLEVBQVFMLEdBQVVNLEtBQUtKLEVBQU9ELFFBQVNDLEVBQVFBLEVBQU9ELFFBQVNGLEdBRy9ERyxFQUFPRSxHQUFJLEVBR0pGLEVB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QU9ELFFBQVUrRCxFQUFTOUQsRUFBT0QsUUFBUXNCLFlBQWEsRUFBTXJCLEVBQU9ELFFBQWlCLFFBQUlDLEVBQU9ELFMsY0NGL0ZDLEVBQU9ELFFBUlAsU0FBZ0NpRSxHQUM5QixRQUFhLElBQVRBLEVBQ0YsTUFBTSxJQUFJa2hILGVBQWUsNkRBRzNCLE9BQU9saEgsR0FHZ0NoRSxFQUFPRCxRQUFRc0IsWUFBYSxFQUFNckIsRUFBT0QsUUFBaUIsUUFBSUMsRUFBT0QiLCJmaWxlIjoiTWFpbjEuanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIndlYnBhY2svXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSA0MSk7XG4iLCIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gY2hlY2tEQ0UoKSB7XG4gIC8qIGdsb2JhbCBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18gKi9cbiAgaWYgKFxuICAgIHR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18gPT09ICd1bmRlZmluZWQnIHx8XG4gICAgdHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXy5jaGVja0RDRSAhPT0gJ2Z1bmN0aW9uJ1xuICApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAvLyBUaGlzIGJyYW5jaCBpcyB1bnJlYWNoYWJsZSBiZWNhdXNlIHRoaXMgZnVuY3Rpb24gaXMgb25seSBjYWxsZWRcbiAgICAvLyBpbiBwcm9kdWN0aW9uLCBidXQgdGhlIGNvbmRpdGlvbiBpcyB0cnVlIG9ubHkgaW4gZGV2ZWxvcG1lbnQuXG4gICAgLy8gVGhlcmVmb3JlIGlmIHRoZSBicmFuY2ggaXMgc3RpbGwgaGVyZSwgZGVhZCBjb2RlIGVsaW1pbmF0aW9uIHdhc24ndFxuICAgIC8vIHByb3Blcmx5IGFwcGxpZWQuXG4gICAgLy8gRG9uJ3QgY2hhbmdlIHRoZSBtZXNzYWdlLiBSZWFjdCBEZXZUb29scyByZWxpZXMgb24gaXQuIEFsc28gbWFrZSBzdXJlXG4gICAgLy8gdGhpcyBtZXNzYWdlIGRvZXNuJ3Qgb2NjdXIgZWxzZXdoZXJlIGluIHRoaXMgZnVuY3Rpb24sIG9yIGl0IHdpbGwgY2F1c2VcbiAgICAvLyBhIGZhbHNlIHBvc2l0aXZlLlxuICAgIHRocm93IG5ldyBFcnJvcignXl9eJyk7XG4gIH1cbiAgdHJ5IHtcbiAgICAvLyBWZXJpZnkgdGhhdCB0aGUgY29kZSBhYm92ZSBoYXMgYmVlbiBkZWFkIGNvZGUgZWxpbWluYXRlZCAoRENFJ2QpLlxuICAgIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXy5jaGVja0RDRShjaGVja0RDRSk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIC8vIERldlRvb2xzIHNob3VsZG4ndCBjcmFzaCBSZWFjdCwgbm8gbWF0dGVyIHdoYXQuXG4gICAgLy8gV2Ugc2hvdWxkIHN0aWxsIHJlcG9ydCBpbiBjYXNlIHdlIGJyZWFrIHRoaXMgY29kZS5cbiAgICBjb25zb2xlLmVycm9yKGVycik7XG4gIH1cbn1cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgLy8gRENFIGNoZWNrIHNob3VsZCBoYXBwZW4gYmVmb3JlIFJlYWN0RE9NIGJ1bmRsZSBleGVjdXRlcyBzbyB0aGF0XG4gIC8vIERldlRvb2xzIGNhbiByZXBvcnQgYmFkIG1pbmlmaWNhdGlvbiBkdXJpbmcgaW5qZWN0aW9uLlxuICBjaGVja0RDRSgpO1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWRvbS5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1kb20uZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsImZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHtcbiAgICByZXR1cm4gby5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKG8pO1xuICB9LCBtb2R1bGUuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZSwgbW9kdWxlLmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gbW9kdWxlLmV4cG9ydHM7XG4gIHJldHVybiBfZ2V0UHJvdG90eXBlT2Yobyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2dldFByb3RvdHlwZU9mLCBtb2R1bGUuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZSwgbW9kdWxlLmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gbW9kdWxlLmV4cG9ydHM7IiwiZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3Rvcikge1xuICBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfY2xhc3NDYWxsQ2hlY2ssIG1vZHVsZS5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlLCBtb2R1bGUuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBtb2R1bGUuZXhwb3J0czsiLCJmdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldO1xuICAgIGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTtcbiAgICBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7XG4gICAgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7XG4gIH1cbn1cblxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykge1xuICBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTtcbiAgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQ29uc3RydWN0b3IsIFwicHJvdG90eXBlXCIsIHtcbiAgICB3cml0YWJsZTogZmFsc2VcbiAgfSk7XG4gIHJldHVybiBDb25zdHJ1Y3Rvcjtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfY3JlYXRlQ2xhc3MsIG1vZHVsZS5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlLCBtb2R1bGUuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBtb2R1bGUuZXhwb3J0czsiLCJ2YXIgZztcblxuLy8gVGhpcyB3b3JrcyBpbiBub24tc3RyaWN0IG1vZGVcbmcgPSAoZnVuY3Rpb24oKSB7XG5cdHJldHVybiB0aGlzO1xufSkoKTtcblxudHJ5IHtcblx0Ly8gVGhpcyB3b3JrcyBpZiBldmFsIGlzIGFsbG93ZWQgKHNlZSBDU1ApXG5cdGcgPSBnIHx8IG5ldyBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCk7XG59IGNhdGNoIChlKSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgdGhlIHdpbmRvdyByZWZlcmVuY2UgaXMgYXZhaWxhYmxlXG5cdGlmICh0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiKSBnID0gd2luZG93O1xufVxuXG4vLyBnIGNhbiBzdGlsbCBiZSB1bmRlZmluZWQsIGJ1dCBub3RoaW5nIHRvIGRvIGFib3V0IGl0Li4uXG4vLyBXZSByZXR1cm4gdW5kZWZpbmVkLCBpbnN0ZWFkIG9mIG5vdGhpbmcgaGVyZSwgc28gaXQnc1xuLy8gZWFzaWVyIHRvIGhhbmRsZSB0aGlzIGNhc2UuIGlmKCFnbG9iYWwpIHsgLi4ufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGc7XG4iLCJ2YXIgc2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKFwiLi9zZXRQcm90b3R5cGVPZi5qc1wiKTtcblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7XG4gIGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7XG4gIH1cblxuICBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHtcbiAgICBjb25zdHJ1Y3Rvcjoge1xuICAgICAgdmFsdWU6IHN1YkNsYXNzLFxuICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9XG4gIH0pO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoc3ViQ2xhc3MsIFwicHJvdG90eXBlXCIsIHtcbiAgICB3cml0YWJsZTogZmFsc2VcbiAgfSk7XG4gIGlmIChzdXBlckNsYXNzKSBzZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2luaGVyaXRzLCBtb2R1bGUuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZSwgbW9kdWxlLmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gbW9kdWxlLmV4cG9ydHM7IiwidmFyIF90eXBlb2YgPSByZXF1aXJlKFwiLi90eXBlb2YuanNcIilbXCJkZWZhdWx0XCJdO1xuXG52YXIgYXNzZXJ0VGhpc0luaXRpYWxpemVkID0gcmVxdWlyZShcIi4vYXNzZXJ0VGhpc0luaXRpYWxpemVkLmpzXCIpO1xuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7XG4gIGlmIChjYWxsICYmIChfdHlwZW9mKGNhbGwpID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpKSB7XG4gICAgcmV0dXJuIGNhbGw7XG4gIH0gZWxzZSBpZiAoY2FsbCAhPT0gdm9pZCAwKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkRlcml2ZWQgY29uc3RydWN0b3JzIG1heSBvbmx5IHJldHVybiBvYmplY3Qgb3IgdW5kZWZpbmVkXCIpO1xuICB9XG5cbiAgcmV0dXJuIGFzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiwgbW9kdWxlLmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWUsIG1vZHVsZS5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IG1vZHVsZS5leHBvcnRzOyIsImltcG9ydCBSZWFjdERPTSBmcm9tIFwicmVhY3QtZG9tL2NsaWVudFwiO1xyXG5pbXBvcnQgUmVhY3RET00yIGZyb20gXCJyZWFjdC1kb21cIjtcclxuaW1wb3J0IHsgUHJpbWFyeUJ1dHRvbiB9IGZyb20gXCJAZmx1ZW50dWkvcmVhY3RcIjtcclxuY29uc3QgZGVmYXVsdERPTSA9IHsgUmVhY3RET00sIFJlYWN0RE9NMiwgUHJpbWFyeUJ1dHRvbiB9O1xyXG5leHBvcnQgZGVmYXVsdCBkZWZhdWx0RE9NO1xyXG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBtID0gcmVxdWlyZSgncmVhY3QtZG9tJyk7XG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBleHBvcnRzLmNyZWF0ZVJvb3QgPSBtLmNyZWF0ZVJvb3Q7XG4gIGV4cG9ydHMuaHlkcmF0ZVJvb3QgPSBtLmh5ZHJhdGVSb290O1xufSBlbHNlIHtcbiAgdmFyIGkgPSBtLl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEO1xuICBleHBvcnRzLmNyZWF0ZVJvb3QgPSBmdW5jdGlvbihjLCBvKSB7XG4gICAgaS51c2luZ0NsaWVudEVudHJ5UG9pbnQgPSB0cnVlO1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gbS5jcmVhdGVSb290KGMsIG8pO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBpLnVzaW5nQ2xpZW50RW50cnlQb2ludCA9IGZhbHNlO1xuICAgIH1cbiAgfTtcbiAgZXhwb3J0cy5oeWRyYXRlUm9vdCA9IGZ1bmN0aW9uKGMsIGgsIG8pIHtcbiAgICBpLnVzaW5nQ2xpZW50RW50cnlQb2ludCA9IHRydWU7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBtLmh5ZHJhdGVSb290KGMsIGgsIG8pO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBpLnVzaW5nQ2xpZW50RW50cnlQb2ludCA9IGZhbHNlO1xuICAgIH1cbiAgfTtcbn1cbiIsIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG4vLyBTZWUgTElDRU5TRSBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxudmFyIF9fYXNzaWduID0gKHRoaXMgJiYgdGhpcy5fX2Fzc2lnbikgfHwgZnVuY3Rpb24gKCkge1xuICAgIF9fYXNzaWduID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbih0KSB7XG4gICAgICAgIGZvciAodmFyIHMsIGkgPSAxLCBuID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IG47IGkrKykge1xuICAgICAgICAgICAgcyA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSlcbiAgICAgICAgICAgICAgICB0W3BdID0gc1twXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdDtcbiAgICB9O1xuICAgIHJldHVybiBfX2Fzc2lnbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufTtcbi8vIFN0b3JlIHRoZSB0aGVtaW5nIHN0YXRlIGluIF9fdGhlbWVTdGF0ZV9fIGdsb2JhbCBzY29wZSBmb3IgcmV1c2UgaW4gdGhlIGNhc2Ugb2YgZHVwbGljYXRlXG4vLyBsb2FkLXRoZW1lZC1zdHlsZXMgaG9zdGVkIG9uIHRoZSBwYWdlLlxudmFyIF9yb290ID0gdHlwZW9mIHdpbmRvdyA9PT0gJ3VuZGVmaW5lZCcgPyBnbG9iYWwgOiB3aW5kb3c7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuLy8gTm9uY2Ugc3RyaW5nIHRvIGluamVjdCBpbnRvIHNjcmlwdCB0YWcgaWYgb25lIHByb3ZpZGVkLiBUaGlzIGlzIHVzZWQgaW4gQ1NQIChDb250ZW50IFNlY3VyaXR5IFBvbGljeSkuXG52YXIgX3N0eWxlTm9uY2UgPSBfcm9vdCAmJiBfcm9vdC5DU1BTZXR0aW5ncyAmJiBfcm9vdC5DU1BTZXR0aW5ncy5ub25jZTtcbnZhciBfdGhlbWVTdGF0ZSA9IGluaXRpYWxpemVUaGVtZVN0YXRlKCk7XG4vKipcbiAqIE1hdGNoZXMgdGhlbWluZyB0b2tlbnMuIEZvciBleGFtcGxlLCBcIlt0aGVtZTogdGhlbWVTbG90TmFtZSwgZGVmYXVsdDogI0ZGRl1cIiAoaW5jbHVkaW5nIHRoZSBxdW90ZXMpLlxuICovXG52YXIgX3RoZW1lVG9rZW5SZWdleCA9IC9bXFwnXFxcIl1cXFt0aGVtZTpcXHMqKFxcdyspXFxzKig/OlxcLFxccypkZWZhdWx0OlxccyooW1xcXFxcIlxcJ10/W1xcLlxcLFxcKFxcKVxcI1xcLVxcc1xcd10qW1xcLlxcLFxcKFxcKVxcI1xcLVxcd11bXFxcIlxcJ10/KSk/XFxzKlxcXVtcXCdcXFwiXS9nO1xudmFyIG5vdyA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdHlwZW9mIHBlcmZvcm1hbmNlICE9PSAndW5kZWZpbmVkJyAmJiAhIXBlcmZvcm1hbmNlLm5vdyA/IHBlcmZvcm1hbmNlLm5vdygpIDogRGF0ZS5ub3coKTtcbn07XG5mdW5jdGlvbiBtZWFzdXJlKGZ1bmMpIHtcbiAgICB2YXIgc3RhcnQgPSBub3coKTtcbiAgICBmdW5jKCk7XG4gICAgdmFyIGVuZCA9IG5vdygpO1xuICAgIF90aGVtZVN0YXRlLnBlcmYuZHVyYXRpb24gKz0gZW5kIC0gc3RhcnQ7XG59XG4vKipcbiAqIGluaXRpYWxpemUgZ2xvYmFsIHN0YXRlIG9iamVjdFxuICovXG5mdW5jdGlvbiBpbml0aWFsaXplVGhlbWVTdGF0ZSgpIHtcbiAgICB2YXIgc3RhdGUgPSBfcm9vdC5fX3RoZW1lU3RhdGVfXyB8fCB7XG4gICAgICAgIHRoZW1lOiB1bmRlZmluZWQsXG4gICAgICAgIGxhc3RTdHlsZUVsZW1lbnQ6IHVuZGVmaW5lZCxcbiAgICAgICAgcmVnaXN0ZXJlZFN0eWxlczogW11cbiAgICB9O1xuICAgIGlmICghc3RhdGUucnVuU3RhdGUpIHtcbiAgICAgICAgc3RhdGUgPSBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgc3RhdGUpLCB7IHBlcmY6IHtcbiAgICAgICAgICAgICAgICBjb3VudDogMCxcbiAgICAgICAgICAgICAgICBkdXJhdGlvbjogMFxuICAgICAgICAgICAgfSwgcnVuU3RhdGU6IHtcbiAgICAgICAgICAgICAgICBmbHVzaFRpbWVyOiAwLFxuICAgICAgICAgICAgICAgIG1vZGU6IDAgLyogc3luYyAqLyxcbiAgICAgICAgICAgICAgICBidWZmZXI6IFtdXG4gICAgICAgICAgICB9IH0pO1xuICAgIH1cbiAgICBpZiAoIXN0YXRlLnJlZ2lzdGVyZWRUaGVtYWJsZVN0eWxlcykge1xuICAgICAgICBzdGF0ZSA9IF9fYXNzaWduKF9fYXNzaWduKHt9LCBzdGF0ZSksIHsgcmVnaXN0ZXJlZFRoZW1hYmxlU3R5bGVzOiBbXSB9KTtcbiAgICB9XG4gICAgX3Jvb3QuX190aGVtZVN0YXRlX18gPSBzdGF0ZTtcbiAgICByZXR1cm4gc3RhdGU7XG59XG4vKipcbiAqIExvYWRzIGEgc2V0IG9mIHN0eWxlIHRleHQuIElmIGl0IGlzIHJlZ2lzdGVyZWQgdG9vIGVhcmx5LCB3ZSB3aWxsIHJlZ2lzdGVyIGl0IHdoZW4gdGhlIHdpbmRvdy5sb2FkXG4gKiBldmVudCBpcyBmaXJlZC5cbiAqIEBwYXJhbSB7c3RyaW5nIHwgVGhlbWFibGVBcnJheX0gc3R5bGVzIFRoZW1hYmxlIHN0eWxlIHRleHQgdG8gcmVnaXN0ZXIuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGxvYWRBc3luYyBXaGVuIHRydWUsIGFsd2F5cyBsb2FkIHN0eWxlcyBpbiBhc3luYyBtb2RlLCBpcnJlc3BlY3RpdmUgb2YgY3VycmVudCBzeW5jIG1vZGUuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBsb2FkU3R5bGVzKHN0eWxlcywgbG9hZEFzeW5jKSB7XG4gICAgaWYgKGxvYWRBc3luYyA9PT0gdm9pZCAwKSB7IGxvYWRBc3luYyA9IGZhbHNlOyB9XG4gICAgbWVhc3VyZShmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBzdHlsZVBhcnRzID0gQXJyYXkuaXNBcnJheShzdHlsZXMpID8gc3R5bGVzIDogc3BsaXRTdHlsZXMoc3R5bGVzKTtcbiAgICAgICAgdmFyIF9hID0gX3RoZW1lU3RhdGUucnVuU3RhdGUsIG1vZGUgPSBfYS5tb2RlLCBidWZmZXIgPSBfYS5idWZmZXIsIGZsdXNoVGltZXIgPSBfYS5mbHVzaFRpbWVyO1xuICAgICAgICBpZiAobG9hZEFzeW5jIHx8IG1vZGUgPT09IDEgLyogYXN5bmMgKi8pIHtcbiAgICAgICAgICAgIGJ1ZmZlci5wdXNoKHN0eWxlUGFydHMpO1xuICAgICAgICAgICAgaWYgKCFmbHVzaFRpbWVyKSB7XG4gICAgICAgICAgICAgICAgX3RoZW1lU3RhdGUucnVuU3RhdGUuZmx1c2hUaW1lciA9IGFzeW5jTG9hZFN0eWxlcygpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgYXBwbHlUaGVtYWJsZVN0eWxlcyhzdHlsZVBhcnRzKTtcbiAgICAgICAgfVxuICAgIH0pO1xufVxuLyoqXG4gKiBBbGxvd3MgZm9yIGN1c3RvbWl6YWJsZSBsb2FkU3R5bGVzIGxvZ2ljLiBlLmcuIGZvciBzZXJ2ZXIgc2lkZSByZW5kZXJpbmcgYXBwbGljYXRpb25cbiAqIEBwYXJhbSB7KHByb2Nlc3NlZFN0eWxlczogc3RyaW5nLCByYXdTdHlsZXM/OiBzdHJpbmcgfCBUaGVtYWJsZUFycmF5KSA9PiB2b2lkfVxuICogYSBsb2FkU3R5bGVzIGNhbGxiYWNrIHRoYXQgZ2V0cyBjYWxsZWQgd2hlbiBzdHlsZXMgYXJlIGxvYWRlZCBvciByZWxvYWRlZFxuICovXG5leHBvcnQgZnVuY3Rpb24gY29uZmlndXJlTG9hZFN0eWxlcyhsb2FkU3R5bGVzRm4pIHtcbiAgICBfdGhlbWVTdGF0ZS5sb2FkU3R5bGVzID0gbG9hZFN0eWxlc0ZuO1xufVxuLyoqXG4gKiBDb25maWd1cmUgcnVuIG1vZGUgb2YgbG9hZC10aGVtYWJsZS1zdHlsZXNcbiAqIEBwYXJhbSBtb2RlIGxvYWQtdGhlbWFibGUtc3R5bGVzIHJ1biBtb2RlLCBhc3luYyBvciBzeW5jXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjb25maWd1cmVSdW5Nb2RlKG1vZGUpIHtcbiAgICBfdGhlbWVTdGF0ZS5ydW5TdGF0ZS5tb2RlID0gbW9kZTtcbn1cbi8qKlxuICogZXh0ZXJuYWwgY29kZSBjYW4gY2FsbCBmbHVzaCB0byBzeW5jaHJvbm91c2x5IGZvcmNlIHByb2Nlc3Npbmcgb2YgY3VycmVudGx5IGJ1ZmZlcmVkIHN0eWxlc1xuICovXG5leHBvcnQgZnVuY3Rpb24gZmx1c2goKSB7XG4gICAgbWVhc3VyZShmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBzdHlsZUFycmF5cyA9IF90aGVtZVN0YXRlLnJ1blN0YXRlLmJ1ZmZlci5zbGljZSgpO1xuICAgICAgICBfdGhlbWVTdGF0ZS5ydW5TdGF0ZS5idWZmZXIgPSBbXTtcbiAgICAgICAgdmFyIG1lcmdlZFN0eWxlQXJyYXkgPSBbXS5jb25jYXQuYXBwbHkoW10sIHN0eWxlQXJyYXlzKTtcbiAgICAgICAgaWYgKG1lcmdlZFN0eWxlQXJyYXkubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgYXBwbHlUaGVtYWJsZVN0eWxlcyhtZXJnZWRTdHlsZUFycmF5KTtcbiAgICAgICAgfVxuICAgIH0pO1xufVxuLyoqXG4gKiByZWdpc3RlciBhc3luYyBsb2FkU3R5bGVzXG4gKi9cbmZ1bmN0aW9uIGFzeW5jTG9hZFN0eWxlcygpIHtcbiAgICByZXR1cm4gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgIF90aGVtZVN0YXRlLnJ1blN0YXRlLmZsdXNoVGltZXIgPSAwO1xuICAgICAgICBmbHVzaCgpO1xuICAgIH0sIDApO1xufVxuLyoqXG4gKiBMb2FkcyBhIHNldCBvZiBzdHlsZSB0ZXh0LiBJZiBpdCBpcyByZWdpc3RlcmVkIHRvbyBlYXJseSwgd2Ugd2lsbCByZWdpc3RlciBpdCB3aGVuIHRoZSB3aW5kb3cubG9hZCBldmVudFxuICogaXMgZmlyZWQuXG4gKiBAcGFyYW0ge3N0cmluZ30gc3R5bGVUZXh0IFN0eWxlIHRvIHJlZ2lzdGVyLlxuICogQHBhcmFtIHtJU3R5bGVSZWNvcmR9IHN0eWxlUmVjb3JkIEV4aXN0aW5nIHN0eWxlIHJlY29yZCB0byByZS1hcHBseS5cbiAqL1xuZnVuY3Rpb24gYXBwbHlUaGVtYWJsZVN0eWxlcyhzdHlsZXNBcnJheSwgc3R5bGVSZWNvcmQpIHtcbiAgICBpZiAoX3RoZW1lU3RhdGUubG9hZFN0eWxlcykge1xuICAgICAgICBfdGhlbWVTdGF0ZS5sb2FkU3R5bGVzKHJlc29sdmVUaGVtYWJsZUFycmF5KHN0eWxlc0FycmF5KS5zdHlsZVN0cmluZywgc3R5bGVzQXJyYXkpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmVnaXN0ZXJTdHlsZXMoc3R5bGVzQXJyYXkpO1xuICAgIH1cbn1cbi8qKlxuICogUmVnaXN0ZXJzIGEgc2V0IHRoZW1lIHRva2VucyB0byBmaW5kIGFuZCByZXBsYWNlLiBJZiBzdHlsZXMgd2VyZSBhbHJlYWR5IHJlZ2lzdGVyZWQsIHRoZXkgd2lsbCBiZVxuICogcmVwbGFjZWQuXG4gKiBAcGFyYW0ge3RoZW1lfSB0aGVtZSBKU09OIG9iamVjdCBvZiB0aGVtZSB0b2tlbnMgdG8gdmFsdWVzLlxuICovXG5leHBvcnQgZnVuY3Rpb24gbG9hZFRoZW1lKHRoZW1lKSB7XG4gICAgX3RoZW1lU3RhdGUudGhlbWUgPSB0aGVtZTtcbiAgICAvLyByZWxvYWQgc3R5bGVzLlxuICAgIHJlbG9hZFN0eWxlcygpO1xufVxuLyoqXG4gKiBDbGVhciBhbHJlYWR5IHJlZ2lzdGVyZWQgc3R5bGUgZWxlbWVudHMgYW5kIHN0eWxlIHJlY29yZHMgaW4gdGhlbWVfU3RhdGUgb2JqZWN0XG4gKiBAcGFyYW0gb3B0aW9uIC0gc3BlY2lmeSB3aGljaCBncm91cCBvZiByZWdpc3RlcmVkIHN0eWxlcyBzaG91bGQgYmUgY2xlYXJlZC5cbiAqIERlZmF1bHQgdG8gYmUgYm90aCB0aGVtYWJsZSBhbmQgbm9uLXRoZW1hYmxlIHN0eWxlcyB3aWxsIGJlIGNsZWFyZWRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNsZWFyU3R5bGVzKG9wdGlvbikge1xuICAgIGlmIChvcHRpb24gPT09IHZvaWQgMCkgeyBvcHRpb24gPSAzIC8qIGFsbCAqLzsgfVxuICAgIGlmIChvcHRpb24gPT09IDMgLyogYWxsICovIHx8IG9wdGlvbiA9PT0gMiAvKiBvbmx5Tm9uVGhlbWFibGUgKi8pIHtcbiAgICAgICAgY2xlYXJTdHlsZXNJbnRlcm5hbChfdGhlbWVTdGF0ZS5yZWdpc3RlcmVkU3R5bGVzKTtcbiAgICAgICAgX3RoZW1lU3RhdGUucmVnaXN0ZXJlZFN0eWxlcyA9IFtdO1xuICAgIH1cbiAgICBpZiAob3B0aW9uID09PSAzIC8qIGFsbCAqLyB8fCBvcHRpb24gPT09IDEgLyogb25seVRoZW1hYmxlICovKSB7XG4gICAgICAgIGNsZWFyU3R5bGVzSW50ZXJuYWwoX3RoZW1lU3RhdGUucmVnaXN0ZXJlZFRoZW1hYmxlU3R5bGVzKTtcbiAgICAgICAgX3RoZW1lU3RhdGUucmVnaXN0ZXJlZFRoZW1hYmxlU3R5bGVzID0gW107XG4gICAgfVxufVxuZnVuY3Rpb24gY2xlYXJTdHlsZXNJbnRlcm5hbChyZWNvcmRzKSB7XG4gICAgcmVjb3Jkcy5mb3JFYWNoKGZ1bmN0aW9uIChzdHlsZVJlY29yZCkge1xuICAgICAgICB2YXIgc3R5bGVFbGVtZW50ID0gc3R5bGVSZWNvcmQgJiYgc3R5bGVSZWNvcmQuc3R5bGVFbGVtZW50O1xuICAgICAgICBpZiAoc3R5bGVFbGVtZW50ICYmIHN0eWxlRWxlbWVudC5wYXJlbnRFbGVtZW50KSB7XG4gICAgICAgICAgICBzdHlsZUVsZW1lbnQucGFyZW50RWxlbWVudC5yZW1vdmVDaGlsZChzdHlsZUVsZW1lbnQpO1xuICAgICAgICB9XG4gICAgfSk7XG59XG4vKipcbiAqIFJlbG9hZHMgc3R5bGVzLlxuICovXG5mdW5jdGlvbiByZWxvYWRTdHlsZXMoKSB7XG4gICAgaWYgKF90aGVtZVN0YXRlLnRoZW1lKSB7XG4gICAgICAgIHZhciB0aGVtYWJsZVN0eWxlcyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBfaSA9IDAsIF9hID0gX3RoZW1lU3RhdGUucmVnaXN0ZXJlZFRoZW1hYmxlU3R5bGVzOyBfaSA8IF9hLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgdmFyIHN0eWxlUmVjb3JkID0gX2FbX2ldO1xuICAgICAgICAgICAgdGhlbWFibGVTdHlsZXMucHVzaChzdHlsZVJlY29yZC50aGVtYWJsZVN0eWxlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhlbWFibGVTdHlsZXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgY2xlYXJTdHlsZXMoMSAvKiBvbmx5VGhlbWFibGUgKi8pO1xuICAgICAgICAgICAgYXBwbHlUaGVtYWJsZVN0eWxlcyhbXS5jb25jYXQuYXBwbHkoW10sIHRoZW1hYmxlU3R5bGVzKSk7XG4gICAgICAgIH1cbiAgICB9XG59XG4vKipcbiAqIEZpbmQgdGhlbWUgdG9rZW5zIGFuZCByZXBsYWNlcyB0aGVtIHdpdGggcHJvdmlkZWQgdGhlbWUgdmFsdWVzLlxuICogQHBhcmFtIHtzdHJpbmd9IHN0eWxlcyBUb2tlbml6ZWQgc3R5bGVzIHRvIGZpeC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRldG9rZW5pemUoc3R5bGVzKSB7XG4gICAgaWYgKHN0eWxlcykge1xuICAgICAgICBzdHlsZXMgPSByZXNvbHZlVGhlbWFibGVBcnJheShzcGxpdFN0eWxlcyhzdHlsZXMpKS5zdHlsZVN0cmluZztcbiAgICB9XG4gICAgcmV0dXJuIHN0eWxlcztcbn1cbi8qKlxuICogUmVzb2x2ZXMgVGhlbWluZ0luc3RydWN0aW9uIG9iamVjdHMgaW4gYW4gYXJyYXkgYW5kIGpvaW5zIHRoZSByZXN1bHQgaW50byBhIHN0cmluZy5cbiAqIEBwYXJhbSB7VGhlbWFibGVBcnJheX0gc3BsaXRTdHlsZUFycmF5IFRoZW1hYmxlQXJyYXkgdG8gcmVzb2x2ZSBhbmQgam9pbi5cbiAqL1xuZnVuY3Rpb24gcmVzb2x2ZVRoZW1hYmxlQXJyYXkoc3BsaXRTdHlsZUFycmF5KSB7XG4gICAgdmFyIHRoZW1lID0gX3RoZW1lU3RhdGUudGhlbWU7XG4gICAgdmFyIHRoZW1hYmxlID0gZmFsc2U7XG4gICAgLy8gUmVzb2x2ZSB0aGUgYXJyYXkgb2YgdGhlbWluZyBpbnN0cnVjdGlvbnMgdG8gYW4gYXJyYXkgb2Ygc3RyaW5ncy5cbiAgICAvLyBUaGVuIGpvaW4gdGhlIGFycmF5IHRvIHByb2R1Y2UgdGhlIGZpbmFsIENTUyBzdHJpbmcuXG4gICAgdmFyIHJlc29sdmVkQXJyYXkgPSAoc3BsaXRTdHlsZUFycmF5IHx8IFtdKS5tYXAoZnVuY3Rpb24gKGN1cnJlbnRWYWx1ZSkge1xuICAgICAgICB2YXIgdGhlbWVTbG90ID0gY3VycmVudFZhbHVlLnRoZW1lO1xuICAgICAgICBpZiAodGhlbWVTbG90KSB7XG4gICAgICAgICAgICB0aGVtYWJsZSA9IHRydWU7XG4gICAgICAgICAgICAvLyBBIHRoZW1pbmcgYW5ub3RhdGlvbi4gUmVzb2x2ZSBpdC5cbiAgICAgICAgICAgIHZhciB0aGVtZWRWYWx1ZSA9IHRoZW1lID8gdGhlbWVbdGhlbWVTbG90XSA6IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIHZhciBkZWZhdWx0VmFsdWUgPSBjdXJyZW50VmFsdWUuZGVmYXVsdFZhbHVlIHx8ICdpbmhlcml0JztcbiAgICAgICAgICAgIC8vIFdhcm4gdG8gY29uc29sZSBpZiB3ZSBoaXQgYW4gdW50aGVtZWQgdmFsdWUgZXZlbiB3aGVuIHRoZW1lcyBhcmUgcHJvdmlkZWQsIGJ1dCBvbmx5IGlmIFwiREVCVUdcIiBpcyB0cnVlLlxuICAgICAgICAgICAgLy8gQWxsb3cgdGhlIHRoZW1lZFZhbHVlIHRvIGJlIHVuZGVmaW5lZCB0byBleHBsaWNpdGx5IHJlcXVlc3QgdGhlIGRlZmF1bHQgdmFsdWUuXG4gICAgICAgICAgICBpZiAodGhlbWUgJiZcbiAgICAgICAgICAgICAgICAhdGhlbWVkVmFsdWUgJiZcbiAgICAgICAgICAgICAgICBjb25zb2xlICYmXG4gICAgICAgICAgICAgICAgISh0aGVtZVNsb3QgaW4gdGhlbWUpICYmXG4gICAgICAgICAgICAgICAgdHlwZW9mIERFQlVHICE9PSAndW5kZWZpbmVkJyAmJlxuICAgICAgICAgICAgICAgIERFQlVHKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKFwiVGhlbWluZyB2YWx1ZSBub3QgcHJvdmlkZWQgZm9yIFxcXCJcIi5jb25jYXQodGhlbWVTbG90LCBcIlxcXCIuIEZhbGxpbmcgYmFjayB0byBcXFwiXCIpLmNvbmNhdChkZWZhdWx0VmFsdWUsIFwiXFxcIi5cIikpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRoZW1lZFZhbHVlIHx8IGRlZmF1bHRWYWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIC8vIEEgbm9uLXRoZW1hYmxlIHN0cmluZy4gUHJlc2VydmUgaXQuXG4gICAgICAgICAgICByZXR1cm4gY3VycmVudFZhbHVlLnJhd1N0cmluZztcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiB7XG4gICAgICAgIHN0eWxlU3RyaW5nOiByZXNvbHZlZEFycmF5LmpvaW4oJycpLFxuICAgICAgICB0aGVtYWJsZTogdGhlbWFibGVcbiAgICB9O1xufVxuLyoqXG4gKiBTcGxpdCB0b2tlbml6ZWQgQ1NTIGludG8gYW4gYXJyYXkgb2Ygc3RyaW5ncyBhbmQgdGhlbWUgc3BlY2lmaWNhdGlvbiBvYmplY3RzXG4gKiBAcGFyYW0ge3N0cmluZ30gc3R5bGVzIFRva2VuaXplZCBzdHlsZXMgdG8gc3BsaXQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzcGxpdFN0eWxlcyhzdHlsZXMpIHtcbiAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgaWYgKHN0eWxlcykge1xuICAgICAgICB2YXIgcG9zID0gMDsgLy8gQ3VycmVudCBwb3NpdGlvbiBpbiBzdHlsZXMuXG4gICAgICAgIHZhciB0b2tlbk1hdGNoID0gdm9pZCAwO1xuICAgICAgICB3aGlsZSAoKHRva2VuTWF0Y2ggPSBfdGhlbWVUb2tlblJlZ2V4LmV4ZWMoc3R5bGVzKSkpIHtcbiAgICAgICAgICAgIHZhciBtYXRjaEluZGV4ID0gdG9rZW5NYXRjaC5pbmRleDtcbiAgICAgICAgICAgIGlmIChtYXRjaEluZGV4ID4gcG9zKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0LnB1c2goe1xuICAgICAgICAgICAgICAgICAgICByYXdTdHJpbmc6IHN0eWxlcy5zdWJzdHJpbmcocG9zLCBtYXRjaEluZGV4KVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVzdWx0LnB1c2goe1xuICAgICAgICAgICAgICAgIHRoZW1lOiB0b2tlbk1hdGNoWzFdLFxuICAgICAgICAgICAgICAgIGRlZmF1bHRWYWx1ZTogdG9rZW5NYXRjaFsyXSAvLyBNYXkgYmUgdW5kZWZpbmVkXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIC8vIGluZGV4IG9mIHRoZSBmaXJzdCBjaGFyYWN0ZXIgYWZ0ZXIgdGhlIGN1cnJlbnQgbWF0Y2hcbiAgICAgICAgICAgIHBvcyA9IF90aGVtZVRva2VuUmVnZXgubGFzdEluZGV4O1xuICAgICAgICB9XG4gICAgICAgIC8vIFB1c2ggdGhlIHJlc3Qgb2YgdGhlIHN0cmluZyBhZnRlciB0aGUgbGFzdCBtYXRjaC5cbiAgICAgICAgcmVzdWx0LnB1c2goe1xuICAgICAgICAgICAgcmF3U3RyaW5nOiBzdHlsZXMuc3Vic3RyaW5nKHBvcylcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59XG4vKipcbiAqIFJlZ2lzdGVycyBhIHNldCBvZiBzdHlsZSB0ZXh0LiBJZiBpdCBpcyByZWdpc3RlcmVkIHRvbyBlYXJseSwgd2Ugd2lsbCByZWdpc3RlciBpdCB3aGVuIHRoZVxuICogd2luZG93LmxvYWQgZXZlbnQgaXMgZmlyZWQuXG4gKiBAcGFyYW0ge1RoZW1hYmxlQXJyYXl9IHN0eWxlQXJyYXkgQXJyYXkgb2YgSVRoZW1pbmdJbnN0cnVjdGlvbiBvYmplY3RzIHRvIHJlZ2lzdGVyLlxuICogQHBhcmFtIHtJU3R5bGVSZWNvcmR9IHN0eWxlUmVjb3JkIE1heSBzcGVjaWZ5IGEgc3R5bGUgRWxlbWVudCB0byB1cGRhdGUuXG4gKi9cbmZ1bmN0aW9uIHJlZ2lzdGVyU3R5bGVzKHN0eWxlQXJyYXkpIHtcbiAgICBpZiAodHlwZW9mIGRvY3VtZW50ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciBoZWFkID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2hlYWQnKVswXTtcbiAgICB2YXIgc3R5bGVFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3R5bGUnKTtcbiAgICB2YXIgX2EgPSByZXNvbHZlVGhlbWFibGVBcnJheShzdHlsZUFycmF5KSwgc3R5bGVTdHJpbmcgPSBfYS5zdHlsZVN0cmluZywgdGhlbWFibGUgPSBfYS50aGVtYWJsZTtcbiAgICBzdHlsZUVsZW1lbnQuc2V0QXR0cmlidXRlKCdkYXRhLWxvYWQtdGhlbWVkLXN0eWxlcycsICd0cnVlJyk7XG4gICAgaWYgKF9zdHlsZU5vbmNlKSB7XG4gICAgICAgIHN0eWxlRWxlbWVudC5zZXRBdHRyaWJ1dGUoJ25vbmNlJywgX3N0eWxlTm9uY2UpO1xuICAgIH1cbiAgICBzdHlsZUVsZW1lbnQuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoc3R5bGVTdHJpbmcpKTtcbiAgICBfdGhlbWVTdGF0ZS5wZXJmLmNvdW50Kys7XG4gICAgaGVhZC5hcHBlbmRDaGlsZChzdHlsZUVsZW1lbnQpO1xuICAgIHZhciBldiA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50KCdIVE1MRXZlbnRzJyk7XG4gICAgZXYuaW5pdEV2ZW50KCdzdHlsZWluc2VydCcsIHRydWUgLyogYnViYmxlRXZlbnQgKi8sIGZhbHNlIC8qIGNhbmNlbGFibGUgKi8pO1xuICAgIGV2LmFyZ3MgPSB7XG4gICAgICAgIG5ld1N0eWxlOiBzdHlsZUVsZW1lbnRcbiAgICB9O1xuICAgIGRvY3VtZW50LmRpc3BhdGNoRXZlbnQoZXYpO1xuICAgIHZhciByZWNvcmQgPSB7XG4gICAgICAgIHN0eWxlRWxlbWVudDogc3R5bGVFbGVtZW50LFxuICAgICAgICB0aGVtYWJsZVN0eWxlOiBzdHlsZUFycmF5XG4gICAgfTtcbiAgICBpZiAodGhlbWFibGUpIHtcbiAgICAgICAgX3RoZW1lU3RhdGUucmVnaXN0ZXJlZFRoZW1hYmxlU3R5bGVzLnB1c2gocmVjb3JkKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIF90aGVtZVN0YXRlLnJlZ2lzdGVyZWRTdHlsZXMucHVzaChyZWNvcmQpO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCIsIi8vIEEgcGFja2FnZXMgY2FjaGUgdGhhdCBtYWtlcyBzdXJlIHRoYXQgd2UgZG9uJ3QgaW5qZWN0IHRoZSBzYW1lIHBhY2thZ2VOYW1lIHR3aWNlIGluIHRoZSBzYW1lIGJ1bmRsZSAtXG4vLyB0aGlzIGNhY2hlIGlzIGxvY2FsIHRvIHRoZSBtb2R1bGUgY2xvc3VyZSBpbnNpZGUgdGhpcyBidW5kbGVcbnZhciBwYWNrYWdlc0NhY2hlID0ge307XG4vLyBDYWNoZSBhY2Nlc3MgdG8gd2luZG93IHRvIGF2b2lkIElFMTEgbWVtb3J5IGxlYWsuXG52YXIgX3dpbiA9IHVuZGVmaW5lZDtcbnRyeSB7XG4gICAgX3dpbiA9IHdpbmRvdztcbn1cbmNhdGNoIChlKSB7XG4gICAgLyogbm8tb3AgKi9cbn1cbmV4cG9ydCBmdW5jdGlvbiBzZXRWZXJzaW9uKHBhY2thZ2VOYW1lLCBwYWNrYWdlVmVyc2lvbikge1xuICAgIGlmICh0eXBlb2YgX3dpbiAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICAgICAgdmFyIHBhY2thZ2VzID0gKF93aW4uX19wYWNrYWdlc19fID0gX3dpbi5fX3BhY2thZ2VzX18gfHwge30pO1xuICAgICAgICAvLyBXZSBhbGxvdyBlaXRoZXIgdGhlIGdsb2JhbCBwYWNrYWdlcyBvciBsb2NhbCBwYWNrYWdlcyBjYWNoZXMgdG8gaW52YWxpZGF0ZSBzbyB0ZXN0aW5nIGNhblxuICAgICAgICAvLyBqdXN0IGNsZWFyIHRoZSBnbG9iYWwgdG8gc2V0IHRoaXMgc3RhdGVcbiAgICAgICAgaWYgKCFwYWNrYWdlc1twYWNrYWdlTmFtZV0gfHwgIXBhY2thZ2VzQ2FjaGVbcGFja2FnZU5hbWVdKSB7XG4gICAgICAgICAgICBwYWNrYWdlc0NhY2hlW3BhY2thZ2VOYW1lXSA9IHBhY2thZ2VWZXJzaW9uO1xuICAgICAgICAgICAgdmFyIHZlcnNpb25zID0gKHBhY2thZ2VzW3BhY2thZ2VOYW1lXSA9IHBhY2thZ2VzW3BhY2thZ2VOYW1lXSB8fCBbXSk7XG4gICAgICAgICAgICB2ZXJzaW9ucy5wdXNoKHBhY2thZ2VWZXJzaW9uKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNldFZlcnNpb24uanMubWFwIiwiaW1wb3J0IHsgc2V0VmVyc2lvbiB9IGZyb20gJy4vc2V0VmVyc2lvbic7XG5leHBvcnQgeyBzZXRWZXJzaW9uIH07XG5zZXRWZXJzaW9uKCdAZmx1ZW50dWkvc2V0LXZlcnNpb24nLCAnNi4wLjAnKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCIsIi8vIHNoaW0gZm9yIHVzaW5nIHByb2Nlc3MgaW4gYnJvd3NlclxudmFyIHByb2Nlc3MgPSBtb2R1bGUuZXhwb3J0cyA9IHt9O1xuXG4vLyBjYWNoZWQgZnJvbSB3aGF0ZXZlciBnbG9iYWwgaXMgcHJlc2VudCBzbyB0aGF0IHRlc3QgcnVubmVycyB0aGF0IHN0dWIgaXRcbi8vIGRvbid0IGJyZWFrIHRoaW5ncy4gIEJ1dCB3ZSBuZWVkIHRvIHdyYXAgaXQgaW4gYSB0cnkgY2F0Y2ggaW4gY2FzZSBpdCBpc1xuLy8gd3JhcHBlZCBpbiBzdHJpY3QgbW9kZSBjb2RlIHdoaWNoIGRvZXNuJ3QgZGVmaW5lIGFueSBnbG9iYWxzLiAgSXQncyBpbnNpZGUgYVxuLy8gZnVuY3Rpb24gYmVjYXVzZSB0cnkvY2F0Y2hlcyBkZW9wdGltaXplIGluIGNlcnRhaW4gZW5naW5lcy5cblxudmFyIGNhY2hlZFNldFRpbWVvdXQ7XG52YXIgY2FjaGVkQ2xlYXJUaW1lb3V0O1xuXG5mdW5jdGlvbiBkZWZhdWx0U2V0VGltb3V0KCkge1xuICAgIHRocm93IG5ldyBFcnJvcignc2V0VGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZCcpO1xufVxuZnVuY3Rpb24gZGVmYXVsdENsZWFyVGltZW91dCAoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdjbGVhclRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWQnKTtcbn1cbihmdW5jdGlvbiAoKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBzZXRUaW1lb3V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBkZWZhdWx0U2V0VGltb3V0O1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gZGVmYXVsdFNldFRpbW91dDtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBjbGVhclRpbWVvdXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGNsZWFyVGltZW91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7XG4gICAgfVxufSAoKSlcbmZ1bmN0aW9uIHJ1blRpbWVvdXQoZnVuKSB7XG4gICAgaWYgKGNhY2hlZFNldFRpbWVvdXQgPT09IHNldFRpbWVvdXQpIHtcbiAgICAgICAgLy9ub3JtYWwgZW52aXJvbWVudHMgaW4gc2FuZSBzaXR1YXRpb25zXG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfVxuICAgIC8vIGlmIHNldFRpbWVvdXQgd2Fzbid0IGF2YWlsYWJsZSBidXQgd2FzIGxhdHRlciBkZWZpbmVkXG4gICAgaWYgKChjYWNoZWRTZXRUaW1lb3V0ID09PSBkZWZhdWx0U2V0VGltb3V0IHx8ICFjYWNoZWRTZXRUaW1lb3V0KSAmJiBzZXRUaW1lb3V0KSB7XG4gICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBzZXRUaW1lb3V0O1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW4sIDApO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICAvLyB3aGVuIHdoZW4gc29tZWJvZHkgaGFzIHNjcmV3ZWQgd2l0aCBzZXRUaW1lb3V0IGJ1dCBubyBJLkUuIG1hZGRuZXNzXG4gICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfSBjYXRjaChlKXtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFdoZW4gd2UgYXJlIGluIEkuRS4gYnV0IHRoZSBzY3JpcHQgaGFzIGJlZW4gZXZhbGVkIHNvIEkuRS4gZG9lc24ndCB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQuY2FsbChudWxsLCBmdW4sIDApO1xuICAgICAgICB9IGNhdGNoKGUpe1xuICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3JcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwodGhpcywgZnVuLCAwKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG59XG5mdW5jdGlvbiBydW5DbGVhclRpbWVvdXQobWFya2VyKSB7XG4gICAgaWYgKGNhY2hlZENsZWFyVGltZW91dCA9PT0gY2xlYXJUaW1lb3V0KSB7XG4gICAgICAgIC8vbm9ybWFsIGVudmlyb21lbnRzIGluIHNhbmUgc2l0dWF0aW9uc1xuICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfVxuICAgIC8vIGlmIGNsZWFyVGltZW91dCB3YXNuJ3QgYXZhaWxhYmxlIGJ1dCB3YXMgbGF0dGVyIGRlZmluZWRcbiAgICBpZiAoKGNhY2hlZENsZWFyVGltZW91dCA9PT0gZGVmYXVsdENsZWFyVGltZW91dCB8fCAhY2FjaGVkQ2xlYXJUaW1lb3V0KSAmJiBjbGVhclRpbWVvdXQpIHtcbiAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gY2xlYXJUaW1lb3V0O1xuICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIC8vIHdoZW4gd2hlbiBzb21lYm9keSBoYXMgc2NyZXdlZCB3aXRoIHNldFRpbWVvdXQgYnV0IG5vIEkuRS4gbWFkZG5lc3NcbiAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH0gY2F0Y2ggKGUpe1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gV2hlbiB3ZSBhcmUgaW4gSS5FLiBidXQgdGhlIHNjcmlwdCBoYXMgYmVlbiBldmFsZWQgc28gSS5FLiBkb2Vzbid0ICB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKG51bGwsIG1hcmtlcik7XG4gICAgICAgIH0gY2F0Y2ggKGUpe1xuICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3IuXG4gICAgICAgICAgICAvLyBTb21lIHZlcnNpb25zIG9mIEkuRS4gaGF2ZSBkaWZmZXJlbnQgcnVsZXMgZm9yIGNsZWFyVGltZW91dCB2cyBzZXRUaW1lb3V0XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0LmNhbGwodGhpcywgbWFya2VyKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG5cbn1cbnZhciBxdWV1ZSA9IFtdO1xudmFyIGRyYWluaW5nID0gZmFsc2U7XG52YXIgY3VycmVudFF1ZXVlO1xudmFyIHF1ZXVlSW5kZXggPSAtMTtcblxuZnVuY3Rpb24gY2xlYW5VcE5leHRUaWNrKCkge1xuICAgIGlmICghZHJhaW5pbmcgfHwgIWN1cnJlbnRRdWV1ZSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGRyYWluaW5nID0gZmFsc2U7XG4gICAgaWYgKGN1cnJlbnRRdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgcXVldWUgPSBjdXJyZW50UXVldWUuY29uY2F0KHF1ZXVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgfVxuICAgIGlmIChxdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgZHJhaW5RdWV1ZSgpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZHJhaW5RdWV1ZSgpIHtcbiAgICBpZiAoZHJhaW5pbmcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgdGltZW91dCA9IHJ1blRpbWVvdXQoY2xlYW5VcE5leHRUaWNrKTtcbiAgICBkcmFpbmluZyA9IHRydWU7XG5cbiAgICB2YXIgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIHdoaWxlKGxlbikge1xuICAgICAgICBjdXJyZW50UXVldWUgPSBxdWV1ZTtcbiAgICAgICAgcXVldWUgPSBbXTtcbiAgICAgICAgd2hpbGUgKCsrcXVldWVJbmRleCA8IGxlbikge1xuICAgICAgICAgICAgaWYgKGN1cnJlbnRRdWV1ZSkge1xuICAgICAgICAgICAgICAgIGN1cnJlbnRRdWV1ZVtxdWV1ZUluZGV4XS5ydW4oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgICAgIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB9XG4gICAgY3VycmVudFF1ZXVlID0gbnVsbDtcbiAgICBkcmFpbmluZyA9IGZhbHNlO1xuICAgIHJ1bkNsZWFyVGltZW91dCh0aW1lb3V0KTtcbn1cblxucHJvY2Vzcy5uZXh0VGljayA9IGZ1bmN0aW9uIChmdW4pIHtcbiAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoIC0gMSk7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBhcmdzW2kgLSAxXSA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBxdWV1ZS5wdXNoKG5ldyBJdGVtKGZ1biwgYXJncykpO1xuICAgIGlmIChxdWV1ZS5sZW5ndGggPT09IDEgJiYgIWRyYWluaW5nKSB7XG4gICAgICAgIHJ1blRpbWVvdXQoZHJhaW5RdWV1ZSk7XG4gICAgfVxufTtcblxuLy8gdjggbGlrZXMgcHJlZGljdGlibGUgb2JqZWN0c1xuZnVuY3Rpb24gSXRlbShmdW4sIGFycmF5KSB7XG4gICAgdGhpcy5mdW4gPSBmdW47XG4gICAgdGhpcy5hcnJheSA9IGFycmF5O1xufVxuSXRlbS5wcm90b3R5cGUucnVuID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuZnVuLmFwcGx5KG51bGwsIHRoaXMuYXJyYXkpO1xufTtcbnByb2Nlc3MudGl0bGUgPSAnYnJvd3Nlcic7XG5wcm9jZXNzLmJyb3dzZXIgPSB0cnVlO1xucHJvY2Vzcy5lbnYgPSB7fTtcbnByb2Nlc3MuYXJndiA9IFtdO1xucHJvY2Vzcy52ZXJzaW9uID0gJyc7IC8vIGVtcHR5IHN0cmluZyB0byBhdm9pZCByZWdleHAgaXNzdWVzXG5wcm9jZXNzLnZlcnNpb25zID0ge307XG5cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuXG5wcm9jZXNzLm9uID0gbm9vcDtcbnByb2Nlc3MuYWRkTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5vbmNlID0gbm9vcDtcbnByb2Nlc3Mub2ZmID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVBbGxMaXN0ZW5lcnMgPSBub29wO1xucHJvY2Vzcy5lbWl0ID0gbm9vcDtcbnByb2Nlc3MucHJlcGVuZExpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3MucHJlcGVuZE9uY2VMaXN0ZW5lciA9IG5vb3A7XG5cbnByb2Nlc3MubGlzdGVuZXJzID0gZnVuY3Rpb24gKG5hbWUpIHsgcmV0dXJuIFtdIH1cblxucHJvY2Vzcy5iaW5kaW5nID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuYmluZGluZyBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xuXG5wcm9jZXNzLmN3ZCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuICcvJyB9O1xucHJvY2Vzcy5jaGRpciA9IGZ1bmN0aW9uIChkaXIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuY2hkaXIgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcbnByb2Nlc3MudW1hc2sgPSBmdW5jdGlvbigpIHsgcmV0dXJuIDA7IH07XG4iLCIvKipcbiAqIEBsaWNlbnNlIFJlYWN0XG4gKiByZWFjdC5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG4ndXNlIHN0cmljdCc7dmFyIGw9U3ltYm9sLmZvcihcInJlYWN0LmVsZW1lbnRcIiksbj1TeW1ib2wuZm9yKFwicmVhY3QucG9ydGFsXCIpLHA9U3ltYm9sLmZvcihcInJlYWN0LmZyYWdtZW50XCIpLHE9U3ltYm9sLmZvcihcInJlYWN0LnN0cmljdF9tb2RlXCIpLHI9U3ltYm9sLmZvcihcInJlYWN0LnByb2ZpbGVyXCIpLHQ9U3ltYm9sLmZvcihcInJlYWN0LnByb3ZpZGVyXCIpLHU9U3ltYm9sLmZvcihcInJlYWN0LmNvbnRleHRcIiksdj1TeW1ib2wuZm9yKFwicmVhY3QuZm9yd2FyZF9yZWZcIiksdz1TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VcIikseD1TeW1ib2wuZm9yKFwicmVhY3QubWVtb1wiKSx5PVN5bWJvbC5mb3IoXCJyZWFjdC5sYXp5XCIpLHo9U3ltYm9sLml0ZXJhdG9yO2Z1bmN0aW9uIEEoYSl7aWYobnVsbD09PWF8fFwib2JqZWN0XCIhPT10eXBlb2YgYSlyZXR1cm4gbnVsbDthPXomJmFbel18fGFbXCJAQGl0ZXJhdG9yXCJdO3JldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBhP2E6bnVsbH1cbnZhciBCPXtpc01vdW50ZWQ6ZnVuY3Rpb24oKXtyZXR1cm4hMX0sZW5xdWV1ZUZvcmNlVXBkYXRlOmZ1bmN0aW9uKCl7fSxlbnF1ZXVlUmVwbGFjZVN0YXRlOmZ1bmN0aW9uKCl7fSxlbnF1ZXVlU2V0U3RhdGU6ZnVuY3Rpb24oKXt9fSxDPU9iamVjdC5hc3NpZ24sRD17fTtmdW5jdGlvbiBFKGEsYixlKXt0aGlzLnByb3BzPWE7dGhpcy5jb250ZXh0PWI7dGhpcy5yZWZzPUQ7dGhpcy51cGRhdGVyPWV8fEJ9RS5wcm90b3R5cGUuaXNSZWFjdENvbXBvbmVudD17fTtcbkUucHJvdG90eXBlLnNldFN0YXRlPWZ1bmN0aW9uKGEsYil7aWYoXCJvYmplY3RcIiE9PXR5cGVvZiBhJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYSYmbnVsbCE9YSl0aHJvdyBFcnJvcihcInNldFN0YXRlKC4uLik6IHRha2VzIGFuIG9iamVjdCBvZiBzdGF0ZSB2YXJpYWJsZXMgdG8gdXBkYXRlIG9yIGEgZnVuY3Rpb24gd2hpY2ggcmV0dXJucyBhbiBvYmplY3Qgb2Ygc3RhdGUgdmFyaWFibGVzLlwiKTt0aGlzLnVwZGF0ZXIuZW5xdWV1ZVNldFN0YXRlKHRoaXMsYSxiLFwic2V0U3RhdGVcIil9O0UucHJvdG90eXBlLmZvcmNlVXBkYXRlPWZ1bmN0aW9uKGEpe3RoaXMudXBkYXRlci5lbnF1ZXVlRm9yY2VVcGRhdGUodGhpcyxhLFwiZm9yY2VVcGRhdGVcIil9O2Z1bmN0aW9uIEYoKXt9Ri5wcm90b3R5cGU9RS5wcm90b3R5cGU7ZnVuY3Rpb24gRyhhLGIsZSl7dGhpcy5wcm9wcz1hO3RoaXMuY29udGV4dD1iO3RoaXMucmVmcz1EO3RoaXMudXBkYXRlcj1lfHxCfXZhciBIPUcucHJvdG90eXBlPW5ldyBGO1xuSC5jb25zdHJ1Y3Rvcj1HO0MoSCxFLnByb3RvdHlwZSk7SC5pc1B1cmVSZWFjdENvbXBvbmVudD0hMDt2YXIgST1BcnJheS5pc0FycmF5LEo9T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSxLPXtjdXJyZW50Om51bGx9LEw9e2tleTohMCxyZWY6ITAsX19zZWxmOiEwLF9fc291cmNlOiEwfTtcbmZ1bmN0aW9uIE0oYSxiLGUpe3ZhciBkLGM9e30saz1udWxsLGg9bnVsbDtpZihudWxsIT1iKWZvcihkIGluIHZvaWQgMCE9PWIucmVmJiYoaD1iLnJlZiksdm9pZCAwIT09Yi5rZXkmJihrPVwiXCIrYi5rZXkpLGIpSi5jYWxsKGIsZCkmJiFMLmhhc093blByb3BlcnR5KGQpJiYoY1tkXT1iW2RdKTt2YXIgZz1hcmd1bWVudHMubGVuZ3RoLTI7aWYoMT09PWcpYy5jaGlsZHJlbj1lO2Vsc2UgaWYoMTxnKXtmb3IodmFyIGY9QXJyYXkoZyksbT0wO208ZzttKyspZlttXT1hcmd1bWVudHNbbSsyXTtjLmNoaWxkcmVuPWZ9aWYoYSYmYS5kZWZhdWx0UHJvcHMpZm9yKGQgaW4gZz1hLmRlZmF1bHRQcm9wcyxnKXZvaWQgMD09PWNbZF0mJihjW2RdPWdbZF0pO3JldHVybnskJHR5cGVvZjpsLHR5cGU6YSxrZXk6ayxyZWY6aCxwcm9wczpjLF9vd25lcjpLLmN1cnJlbnR9fVxuZnVuY3Rpb24gTihhLGIpe3JldHVybnskJHR5cGVvZjpsLHR5cGU6YS50eXBlLGtleTpiLHJlZjphLnJlZixwcm9wczphLnByb3BzLF9vd25lcjphLl9vd25lcn19ZnVuY3Rpb24gTyhhKXtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiZhLiQkdHlwZW9mPT09bH1mdW5jdGlvbiBlc2NhcGUoYSl7dmFyIGI9e1wiPVwiOlwiPTBcIixcIjpcIjpcIj0yXCJ9O3JldHVyblwiJFwiK2EucmVwbGFjZSgvWz06XS9nLGZ1bmN0aW9uKGEpe3JldHVybiBiW2FdfSl9dmFyIFA9L1xcLysvZztmdW5jdGlvbiBRKGEsYil7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmbnVsbCE9YS5rZXk/ZXNjYXBlKFwiXCIrYS5rZXkpOmIudG9TdHJpbmcoMzYpfVxuZnVuY3Rpb24gUihhLGIsZSxkLGMpe3ZhciBrPXR5cGVvZiBhO2lmKFwidW5kZWZpbmVkXCI9PT1rfHxcImJvb2xlYW5cIj09PWspYT1udWxsO3ZhciBoPSExO2lmKG51bGw9PT1hKWg9ITA7ZWxzZSBzd2l0Y2goayl7Y2FzZSBcInN0cmluZ1wiOmNhc2UgXCJudW1iZXJcIjpoPSEwO2JyZWFrO2Nhc2UgXCJvYmplY3RcIjpzd2l0Y2goYS4kJHR5cGVvZil7Y2FzZSBsOmNhc2UgbjpoPSEwfX1pZihoKXJldHVybiBoPWEsYz1jKGgpLGE9XCJcIj09PWQ/XCIuXCIrUShoLDApOmQsSShjKT8oZT1cIlwiLG51bGwhPWEmJihlPWEucmVwbGFjZShQLFwiJCYvXCIpK1wiL1wiKSxSKGMsYixlLFwiXCIsZnVuY3Rpb24oYSl7cmV0dXJuIGF9KSk6bnVsbCE9YyYmKE8oYykmJihjPU4oYyxlKyghYy5rZXl8fGgmJmgua2V5PT09Yy5rZXk/XCJcIjooXCJcIitjLmtleSkucmVwbGFjZShQLFwiJCYvXCIpK1wiL1wiKSthKSksYi5wdXNoKGMpKSwxO2g9MDtkPVwiXCI9PT1kP1wiLlwiOmQrXCI6XCI7aWYoSShhKSlmb3IodmFyIGc9MDtnPGEubGVuZ3RoO2crKyl7az1cbmFbZ107dmFyIGY9ZCtRKGssZyk7aCs9UihrLGIsZSxmLGMpfWVsc2UgaWYoZj1BKGEpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBmKWZvcihhPWYuY2FsbChhKSxnPTA7IShrPWEubmV4dCgpKS5kb25lOylrPWsudmFsdWUsZj1kK1EoayxnKyspLGgrPVIoayxiLGUsZixjKTtlbHNlIGlmKFwib2JqZWN0XCI9PT1rKXRocm93IGI9U3RyaW5nKGEpLEVycm9yKFwiT2JqZWN0cyBhcmUgbm90IHZhbGlkIGFzIGEgUmVhY3QgY2hpbGQgKGZvdW5kOiBcIisoXCJbb2JqZWN0IE9iamVjdF1cIj09PWI/XCJvYmplY3Qgd2l0aCBrZXlzIHtcIitPYmplY3Qua2V5cyhhKS5qb2luKFwiLCBcIikrXCJ9XCI6YikrXCIpLiBJZiB5b3UgbWVhbnQgdG8gcmVuZGVyIGEgY29sbGVjdGlvbiBvZiBjaGlsZHJlbiwgdXNlIGFuIGFycmF5IGluc3RlYWQuXCIpO3JldHVybiBofVxuZnVuY3Rpb24gUyhhLGIsZSl7aWYobnVsbD09YSlyZXR1cm4gYTt2YXIgZD1bXSxjPTA7UihhLGQsXCJcIixcIlwiLGZ1bmN0aW9uKGEpe3JldHVybiBiLmNhbGwoZSxhLGMrKyl9KTtyZXR1cm4gZH1mdW5jdGlvbiBUKGEpe2lmKC0xPT09YS5fc3RhdHVzKXt2YXIgYj1hLl9yZXN1bHQ7Yj1iKCk7Yi50aGVuKGZ1bmN0aW9uKGIpe2lmKDA9PT1hLl9zdGF0dXN8fC0xPT09YS5fc3RhdHVzKWEuX3N0YXR1cz0xLGEuX3Jlc3VsdD1ifSxmdW5jdGlvbihiKXtpZigwPT09YS5fc3RhdHVzfHwtMT09PWEuX3N0YXR1cylhLl9zdGF0dXM9MixhLl9yZXN1bHQ9Yn0pOy0xPT09YS5fc3RhdHVzJiYoYS5fc3RhdHVzPTAsYS5fcmVzdWx0PWIpfWlmKDE9PT1hLl9zdGF0dXMpcmV0dXJuIGEuX3Jlc3VsdC5kZWZhdWx0O3Rocm93IGEuX3Jlc3VsdDt9XG52YXIgVT17Y3VycmVudDpudWxsfSxWPXt0cmFuc2l0aW9uOm51bGx9LFc9e1JlYWN0Q3VycmVudERpc3BhdGNoZXI6VSxSZWFjdEN1cnJlbnRCYXRjaENvbmZpZzpWLFJlYWN0Q3VycmVudE93bmVyOkt9O2V4cG9ydHMuQ2hpbGRyZW49e21hcDpTLGZvckVhY2g6ZnVuY3Rpb24oYSxiLGUpe1MoYSxmdW5jdGlvbigpe2IuYXBwbHkodGhpcyxhcmd1bWVudHMpfSxlKX0sY291bnQ6ZnVuY3Rpb24oYSl7dmFyIGI9MDtTKGEsZnVuY3Rpb24oKXtiKyt9KTtyZXR1cm4gYn0sdG9BcnJheTpmdW5jdGlvbihhKXtyZXR1cm4gUyhhLGZ1bmN0aW9uKGEpe3JldHVybiBhfSl8fFtdfSxvbmx5OmZ1bmN0aW9uKGEpe2lmKCFPKGEpKXRocm93IEVycm9yKFwiUmVhY3QuQ2hpbGRyZW4ub25seSBleHBlY3RlZCB0byByZWNlaXZlIGEgc2luZ2xlIFJlYWN0IGVsZW1lbnQgY2hpbGQuXCIpO3JldHVybiBhfX07ZXhwb3J0cy5Db21wb25lbnQ9RTtleHBvcnRzLkZyYWdtZW50PXA7XG5leHBvcnRzLlByb2ZpbGVyPXI7ZXhwb3J0cy5QdXJlQ29tcG9uZW50PUc7ZXhwb3J0cy5TdHJpY3RNb2RlPXE7ZXhwb3J0cy5TdXNwZW5zZT13O2V4cG9ydHMuX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQ9VztcbmV4cG9ydHMuY2xvbmVFbGVtZW50PWZ1bmN0aW9uKGEsYixlKXtpZihudWxsPT09YXx8dm9pZCAwPT09YSl0aHJvdyBFcnJvcihcIlJlYWN0LmNsb25lRWxlbWVudCguLi4pOiBUaGUgYXJndW1lbnQgbXVzdCBiZSBhIFJlYWN0IGVsZW1lbnQsIGJ1dCB5b3UgcGFzc2VkIFwiK2ErXCIuXCIpO3ZhciBkPUMoe30sYS5wcm9wcyksYz1hLmtleSxrPWEucmVmLGg9YS5fb3duZXI7aWYobnVsbCE9Yil7dm9pZCAwIT09Yi5yZWYmJihrPWIucmVmLGg9Sy5jdXJyZW50KTt2b2lkIDAhPT1iLmtleSYmKGM9XCJcIitiLmtleSk7aWYoYS50eXBlJiZhLnR5cGUuZGVmYXVsdFByb3BzKXZhciBnPWEudHlwZS5kZWZhdWx0UHJvcHM7Zm9yKGYgaW4gYilKLmNhbGwoYixmKSYmIUwuaGFzT3duUHJvcGVydHkoZikmJihkW2ZdPXZvaWQgMD09PWJbZl0mJnZvaWQgMCE9PWc/Z1tmXTpiW2ZdKX12YXIgZj1hcmd1bWVudHMubGVuZ3RoLTI7aWYoMT09PWYpZC5jaGlsZHJlbj1lO2Vsc2UgaWYoMTxmKXtnPUFycmF5KGYpO1xuZm9yKHZhciBtPTA7bTxmO20rKylnW21dPWFyZ3VtZW50c1ttKzJdO2QuY2hpbGRyZW49Z31yZXR1cm57JCR0eXBlb2Y6bCx0eXBlOmEudHlwZSxrZXk6YyxyZWY6ayxwcm9wczpkLF9vd25lcjpofX07ZXhwb3J0cy5jcmVhdGVDb250ZXh0PWZ1bmN0aW9uKGEpe2E9eyQkdHlwZW9mOnUsX2N1cnJlbnRWYWx1ZTphLF9jdXJyZW50VmFsdWUyOmEsX3RocmVhZENvdW50OjAsUHJvdmlkZXI6bnVsbCxDb25zdW1lcjpudWxsLF9kZWZhdWx0VmFsdWU6bnVsbCxfZ2xvYmFsTmFtZTpudWxsfTthLlByb3ZpZGVyPXskJHR5cGVvZjp0LF9jb250ZXh0OmF9O3JldHVybiBhLkNvbnN1bWVyPWF9O2V4cG9ydHMuY3JlYXRlRWxlbWVudD1NO2V4cG9ydHMuY3JlYXRlRmFjdG9yeT1mdW5jdGlvbihhKXt2YXIgYj1NLmJpbmQobnVsbCxhKTtiLnR5cGU9YTtyZXR1cm4gYn07ZXhwb3J0cy5jcmVhdGVSZWY9ZnVuY3Rpb24oKXtyZXR1cm57Y3VycmVudDpudWxsfX07XG5leHBvcnRzLmZvcndhcmRSZWY9ZnVuY3Rpb24oYSl7cmV0dXJueyQkdHlwZW9mOnYscmVuZGVyOmF9fTtleHBvcnRzLmlzVmFsaWRFbGVtZW50PU87ZXhwb3J0cy5sYXp5PWZ1bmN0aW9uKGEpe3JldHVybnskJHR5cGVvZjp5LF9wYXlsb2FkOntfc3RhdHVzOi0xLF9yZXN1bHQ6YX0sX2luaXQ6VH19O2V4cG9ydHMubWVtbz1mdW5jdGlvbihhLGIpe3JldHVybnskJHR5cGVvZjp4LHR5cGU6YSxjb21wYXJlOnZvaWQgMD09PWI/bnVsbDpifX07ZXhwb3J0cy5zdGFydFRyYW5zaXRpb249ZnVuY3Rpb24oYSl7dmFyIGI9Vi50cmFuc2l0aW9uO1YudHJhbnNpdGlvbj17fTt0cnl7YSgpfWZpbmFsbHl7Vi50cmFuc2l0aW9uPWJ9fTtleHBvcnRzLnVuc3RhYmxlX2FjdD1mdW5jdGlvbigpe3Rocm93IEVycm9yKFwiYWN0KC4uLikgaXMgbm90IHN1cHBvcnRlZCBpbiBwcm9kdWN0aW9uIGJ1aWxkcyBvZiBSZWFjdC5cIik7fTtcbmV4cG9ydHMudXNlQ2FsbGJhY2s9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gVS5jdXJyZW50LnVzZUNhbGxiYWNrKGEsYil9O2V4cG9ydHMudXNlQ29udGV4dD1mdW5jdGlvbihhKXtyZXR1cm4gVS5jdXJyZW50LnVzZUNvbnRleHQoYSl9O2V4cG9ydHMudXNlRGVidWdWYWx1ZT1mdW5jdGlvbigpe307ZXhwb3J0cy51c2VEZWZlcnJlZFZhbHVlPWZ1bmN0aW9uKGEpe3JldHVybiBVLmN1cnJlbnQudXNlRGVmZXJyZWRWYWx1ZShhKX07ZXhwb3J0cy51c2VFZmZlY3Q9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gVS5jdXJyZW50LnVzZUVmZmVjdChhLGIpfTtleHBvcnRzLnVzZUlkPWZ1bmN0aW9uKCl7cmV0dXJuIFUuY3VycmVudC51c2VJZCgpfTtleHBvcnRzLnVzZUltcGVyYXRpdmVIYW5kbGU9ZnVuY3Rpb24oYSxiLGUpe3JldHVybiBVLmN1cnJlbnQudXNlSW1wZXJhdGl2ZUhhbmRsZShhLGIsZSl9O1xuZXhwb3J0cy51c2VJbnNlcnRpb25FZmZlY3Q9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gVS5jdXJyZW50LnVzZUluc2VydGlvbkVmZmVjdChhLGIpfTtleHBvcnRzLnVzZUxheW91dEVmZmVjdD1mdW5jdGlvbihhLGIpe3JldHVybiBVLmN1cnJlbnQudXNlTGF5b3V0RWZmZWN0KGEsYil9O2V4cG9ydHMudXNlTWVtbz1mdW5jdGlvbihhLGIpe3JldHVybiBVLmN1cnJlbnQudXNlTWVtbyhhLGIpfTtleHBvcnRzLnVzZVJlZHVjZXI9ZnVuY3Rpb24oYSxiLGUpe3JldHVybiBVLmN1cnJlbnQudXNlUmVkdWNlcihhLGIsZSl9O2V4cG9ydHMudXNlUmVmPWZ1bmN0aW9uKGEpe3JldHVybiBVLmN1cnJlbnQudXNlUmVmKGEpfTtleHBvcnRzLnVzZVN0YXRlPWZ1bmN0aW9uKGEpe3JldHVybiBVLmN1cnJlbnQudXNlU3RhdGUoYSl9O2V4cG9ydHMudXNlU3luY0V4dGVybmFsU3RvcmU9ZnVuY3Rpb24oYSxiLGUpe3JldHVybiBVLmN1cnJlbnQudXNlU3luY0V4dGVybmFsU3RvcmUoYSxiLGUpfTtcbmV4cG9ydHMudXNlVHJhbnNpdGlvbj1mdW5jdGlvbigpe3JldHVybiBVLmN1cnJlbnQudXNlVHJhbnNpdGlvbigpfTtleHBvcnRzLnZlcnNpb249XCIxOC4wLjAtZmM0NmRiYTY3LTIwMjIwMzI5XCI7XG4iLCIvKipcbiAqIEBsaWNlbnNlIFJlYWN0XG4gKiByZWFjdC1kb20ucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuLypcbiBNb2Rlcm5penIgMy4wLjBwcmUgKEN1c3RvbSBCdWlsZCkgfCBNSVRcbiovXG4ndXNlIHN0cmljdCc7dmFyIGFhPXJlcXVpcmUoXCJyZWFjdFwiKSxiYT1yZXF1aXJlKFwic2NoZWR1bGVyXCIpO2Z1bmN0aW9uIHAoYSl7Zm9yKHZhciBiPVwiaHR0cHM6Ly9yZWFjdGpzLm9yZy9kb2NzL2Vycm9yLWRlY29kZXIuaHRtbD9pbnZhcmlhbnQ9XCIrYSxjPTE7Yzxhcmd1bWVudHMubGVuZ3RoO2MrKyliKz1cIiZhcmdzW109XCIrZW5jb2RlVVJJQ29tcG9uZW50KGFyZ3VtZW50c1tjXSk7cmV0dXJuXCJNaW5pZmllZCBSZWFjdCBlcnJvciAjXCIrYStcIjsgdmlzaXQgXCIrYitcIiBmb3IgdGhlIGZ1bGwgbWVzc2FnZSBvciB1c2UgdGhlIG5vbi1taW5pZmllZCBkZXYgZW52aXJvbm1lbnQgZm9yIGZ1bGwgZXJyb3JzIGFuZCBhZGRpdGlvbmFsIGhlbHBmdWwgd2FybmluZ3MuXCJ9dmFyIGNhPW5ldyBTZXQsZGE9e307ZnVuY3Rpb24gZWEoYSxiKXtmYShhLGIpO2ZhKGErXCJDYXB0dXJlXCIsYil9XG5mdW5jdGlvbiBmYShhLGIpe2RhW2FdPWI7Zm9yKGE9MDthPGIubGVuZ3RoO2ErKyljYS5hZGQoYlthXSl9XG52YXIgaGE9IShcInVuZGVmaW5lZFwiPT09dHlwZW9mIHdpbmRvd3x8XCJ1bmRlZmluZWRcIj09PXR5cGVvZiB3aW5kb3cuZG9jdW1lbnR8fFwidW5kZWZpbmVkXCI9PT10eXBlb2Ygd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQpLGlhPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHksamE9L15bOkEtWl9hLXpcXHUwMEMwLVxcdTAwRDZcXHUwMEQ4LVxcdTAwRjZcXHUwMEY4LVxcdTAyRkZcXHUwMzcwLVxcdTAzN0RcXHUwMzdGLVxcdTFGRkZcXHUyMDBDLVxcdTIwMERcXHUyMDcwLVxcdTIxOEZcXHUyQzAwLVxcdTJGRUZcXHUzMDAxLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRkRdWzpBLVpfYS16XFx1MDBDMC1cXHUwMEQ2XFx1MDBEOC1cXHUwMEY2XFx1MDBGOC1cXHUwMkZGXFx1MDM3MC1cXHUwMzdEXFx1MDM3Ri1cXHUxRkZGXFx1MjAwQy1cXHUyMDBEXFx1MjA3MC1cXHUyMThGXFx1MkMwMC1cXHUyRkVGXFx1MzAwMS1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkZEXFwtLjAtOVxcdTAwQjdcXHUwMzAwLVxcdTAzNkZcXHUyMDNGLVxcdTIwNDBdKiQvLGthPVxue30sbGE9e307ZnVuY3Rpb24gbWEoYSl7aWYoaWEuY2FsbChsYSxhKSlyZXR1cm4hMDtpZihpYS5jYWxsKGthLGEpKXJldHVybiExO2lmKGphLnRlc3QoYSkpcmV0dXJuIGxhW2FdPSEwO2thW2FdPSEwO3JldHVybiExfWZ1bmN0aW9uIG5hKGEsYixjLGQpe2lmKG51bGwhPT1jJiYwPT09Yy50eXBlKXJldHVybiExO3N3aXRjaCh0eXBlb2YgYil7Y2FzZSBcImZ1bmN0aW9uXCI6Y2FzZSBcInN5bWJvbFwiOnJldHVybiEwO2Nhc2UgXCJib29sZWFuXCI6aWYoZClyZXR1cm4hMTtpZihudWxsIT09YylyZXR1cm4hYy5hY2NlcHRzQm9vbGVhbnM7YT1hLnRvTG93ZXJDYXNlKCkuc2xpY2UoMCw1KTtyZXR1cm5cImRhdGEtXCIhPT1hJiZcImFyaWEtXCIhPT1hO2RlZmF1bHQ6cmV0dXJuITF9fVxuZnVuY3Rpb24gb2EoYSxiLGMsZCl7aWYobnVsbD09PWJ8fFwidW5kZWZpbmVkXCI9PT10eXBlb2YgYnx8bmEoYSxiLGMsZCkpcmV0dXJuITA7aWYoZClyZXR1cm4hMTtpZihudWxsIT09Yylzd2l0Y2goYy50eXBlKXtjYXNlIDM6cmV0dXJuIWI7Y2FzZSA0OnJldHVybiExPT09YjtjYXNlIDU6cmV0dXJuIGlzTmFOKGIpO2Nhc2UgNjpyZXR1cm4gaXNOYU4oYil8fDE+Yn1yZXR1cm4hMX1mdW5jdGlvbiBxKGEsYixjLGQsZSxmLGcpe3RoaXMuYWNjZXB0c0Jvb2xlYW5zPTI9PT1ifHwzPT09Ynx8ND09PWI7dGhpcy5hdHRyaWJ1dGVOYW1lPWQ7dGhpcy5hdHRyaWJ1dGVOYW1lc3BhY2U9ZTt0aGlzLm11c3RVc2VQcm9wZXJ0eT1jO3RoaXMucHJvcGVydHlOYW1lPWE7dGhpcy50eXBlPWI7dGhpcy5zYW5pdGl6ZVVSTD1mO3RoaXMucmVtb3ZlRW1wdHlTdHJpbmc9Z312YXIgej17fTtcblwiY2hpbGRyZW4gZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwgZGVmYXVsdFZhbHVlIGRlZmF1bHRDaGVja2VkIGlubmVySFRNTCBzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmcgc3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nIHN0eWxlXCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7elthXT1uZXcgcShhLDAsITEsYSxudWxsLCExLCExKX0pO1tbXCJhY2NlcHRDaGFyc2V0XCIsXCJhY2NlcHQtY2hhcnNldFwiXSxbXCJjbGFzc05hbWVcIixcImNsYXNzXCJdLFtcImh0bWxGb3JcIixcImZvclwiXSxbXCJodHRwRXF1aXZcIixcImh0dHAtZXF1aXZcIl1dLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YVswXTt6W2JdPW5ldyBxKGIsMSwhMSxhWzFdLG51bGwsITEsITEpfSk7W1wiY29udGVudEVkaXRhYmxlXCIsXCJkcmFnZ2FibGVcIixcInNwZWxsQ2hlY2tcIixcInZhbHVlXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7elthXT1uZXcgcShhLDIsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwsITEsITEpfSk7XG5bXCJhdXRvUmV2ZXJzZVwiLFwiZXh0ZXJuYWxSZXNvdXJjZXNSZXF1aXJlZFwiLFwiZm9jdXNhYmxlXCIsXCJwcmVzZXJ2ZUFscGhhXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7elthXT1uZXcgcShhLDIsITEsYSxudWxsLCExLCExKX0pO1wiYWxsb3dGdWxsU2NyZWVuIGFzeW5jIGF1dG9Gb2N1cyBhdXRvUGxheSBjb250cm9scyBkZWZhdWx0IGRlZmVyIGRpc2FibGVkIGRpc2FibGVQaWN0dXJlSW5QaWN0dXJlIGRpc2FibGVSZW1vdGVQbGF5YmFjayBmb3JtTm9WYWxpZGF0ZSBoaWRkZW4gbG9vcCBub01vZHVsZSBub1ZhbGlkYXRlIG9wZW4gcGxheXNJbmxpbmUgcmVhZE9ubHkgcmVxdWlyZWQgcmV2ZXJzZWQgc2NvcGVkIHNlYW1sZXNzIGl0ZW1TY29wZVwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3pbYV09bmV3IHEoYSwzLCExLGEudG9Mb3dlckNhc2UoKSxudWxsLCExLCExKX0pO1xuW1wiY2hlY2tlZFwiLFwibXVsdGlwbGVcIixcIm11dGVkXCIsXCJzZWxlY3RlZFwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3pbYV09bmV3IHEoYSwzLCEwLGEsbnVsbCwhMSwhMSl9KTtbXCJjYXB0dXJlXCIsXCJkb3dubG9hZFwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3pbYV09bmV3IHEoYSw0LCExLGEsbnVsbCwhMSwhMSl9KTtbXCJjb2xzXCIsXCJyb3dzXCIsXCJzaXplXCIsXCJzcGFuXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7elthXT1uZXcgcShhLDYsITEsYSxudWxsLCExLCExKX0pO1tcInJvd1NwYW5cIixcInN0YXJ0XCJdLmZvckVhY2goZnVuY3Rpb24oYSl7elthXT1uZXcgcShhLDUsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwsITEsITEpfSk7dmFyIHBhPS9bXFwtOl0oW2Etel0pL2c7ZnVuY3Rpb24gcWEoYSl7cmV0dXJuIGFbMV0udG9VcHBlckNhc2UoKX1cblwiYWNjZW50LWhlaWdodCBhbGlnbm1lbnQtYmFzZWxpbmUgYXJhYmljLWZvcm0gYmFzZWxpbmUtc2hpZnQgY2FwLWhlaWdodCBjbGlwLXBhdGggY2xpcC1ydWxlIGNvbG9yLWludGVycG9sYXRpb24gY29sb3ItaW50ZXJwb2xhdGlvbi1maWx0ZXJzIGNvbG9yLXByb2ZpbGUgY29sb3ItcmVuZGVyaW5nIGRvbWluYW50LWJhc2VsaW5lIGVuYWJsZS1iYWNrZ3JvdW5kIGZpbGwtb3BhY2l0eSBmaWxsLXJ1bGUgZmxvb2QtY29sb3IgZmxvb2Qtb3BhY2l0eSBmb250LWZhbWlseSBmb250LXNpemUgZm9udC1zaXplLWFkanVzdCBmb250LXN0cmV0Y2ggZm9udC1zdHlsZSBmb250LXZhcmlhbnQgZm9udC13ZWlnaHQgZ2x5cGgtbmFtZSBnbHlwaC1vcmllbnRhdGlvbi1ob3Jpem9udGFsIGdseXBoLW9yaWVudGF0aW9uLXZlcnRpY2FsIGhvcml6LWFkdi14IGhvcml6LW9yaWdpbi14IGltYWdlLXJlbmRlcmluZyBsZXR0ZXItc3BhY2luZyBsaWdodGluZy1jb2xvciBtYXJrZXItZW5kIG1hcmtlci1taWQgbWFya2VyLXN0YXJ0IG92ZXJsaW5lLXBvc2l0aW9uIG92ZXJsaW5lLXRoaWNrbmVzcyBwYWludC1vcmRlciBwYW5vc2UtMSBwb2ludGVyLWV2ZW50cyByZW5kZXJpbmctaW50ZW50IHNoYXBlLXJlbmRlcmluZyBzdG9wLWNvbG9yIHN0b3Atb3BhY2l0eSBzdHJpa2V0aHJvdWdoLXBvc2l0aW9uIHN0cmlrZXRocm91Z2gtdGhpY2tuZXNzIHN0cm9rZS1kYXNoYXJyYXkgc3Ryb2tlLWRhc2hvZmZzZXQgc3Ryb2tlLWxpbmVjYXAgc3Ryb2tlLWxpbmVqb2luIHN0cm9rZS1taXRlcmxpbWl0IHN0cm9rZS1vcGFjaXR5IHN0cm9rZS13aWR0aCB0ZXh0LWFuY2hvciB0ZXh0LWRlY29yYXRpb24gdGV4dC1yZW5kZXJpbmcgdW5kZXJsaW5lLXBvc2l0aW9uIHVuZGVybGluZS10aGlja25lc3MgdW5pY29kZS1iaWRpIHVuaWNvZGUtcmFuZ2UgdW5pdHMtcGVyLWVtIHYtYWxwaGFiZXRpYyB2LWhhbmdpbmcgdi1pZGVvZ3JhcGhpYyB2LW1hdGhlbWF0aWNhbCB2ZWN0b3ItZWZmZWN0IHZlcnQtYWR2LXkgdmVydC1vcmlnaW4teCB2ZXJ0LW9yaWdpbi15IHdvcmQtc3BhY2luZyB3cml0aW5nLW1vZGUgeG1sbnM6eGxpbmsgeC1oZWlnaHRcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hLnJlcGxhY2UocGEsXG5xYSk7eltiXT1uZXcgcShiLDEsITEsYSxudWxsLCExLCExKX0pO1wieGxpbms6YWN0dWF0ZSB4bGluazphcmNyb2xlIHhsaW5rOnJvbGUgeGxpbms6c2hvdyB4bGluazp0aXRsZSB4bGluazp0eXBlXCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YS5yZXBsYWNlKHBhLHFhKTt6W2JdPW5ldyBxKGIsMSwhMSxhLFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1wiLCExLCExKX0pO1tcInhtbDpiYXNlXCIsXCJ4bWw6bGFuZ1wiLFwieG1sOnNwYWNlXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YS5yZXBsYWNlKHBhLHFhKTt6W2JdPW5ldyBxKGIsMSwhMSxhLFwiaHR0cDovL3d3dy53My5vcmcvWE1MLzE5OTgvbmFtZXNwYWNlXCIsITEsITEpfSk7W1widGFiSW5kZXhcIixcImNyb3NzT3JpZ2luXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7elthXT1uZXcgcShhLDEsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwsITEsITEpfSk7XG56LnhsaW5rSHJlZj1uZXcgcShcInhsaW5rSHJlZlwiLDEsITEsXCJ4bGluazpocmVmXCIsXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCIsITAsITEpO1tcInNyY1wiLFwiaHJlZlwiLFwiYWN0aW9uXCIsXCJmb3JtQWN0aW9uXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7elthXT1uZXcgcShhLDEsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwsITAsITApfSk7XG5mdW5jdGlvbiByYShhLGIsYyxkKXt2YXIgZT16Lmhhc093blByb3BlcnR5KGIpP3pbYl06bnVsbDtpZihudWxsIT09ZT8wIT09ZS50eXBlOmR8fCEoMjxiLmxlbmd0aCl8fFwib1wiIT09YlswXSYmXCJPXCIhPT1iWzBdfHxcIm5cIiE9PWJbMV0mJlwiTlwiIT09YlsxXSlvYShiLGMsZSxkKSYmKGM9bnVsbCksZHx8bnVsbD09PWU/bWEoYikmJihudWxsPT09Yz9hLnJlbW92ZUF0dHJpYnV0ZShiKTphLnNldEF0dHJpYnV0ZShiLFwiXCIrYykpOmUubXVzdFVzZVByb3BlcnR5P2FbZS5wcm9wZXJ0eU5hbWVdPW51bGw9PT1jPzM9PT1lLnR5cGU/ITE6XCJcIjpjOihiPWUuYXR0cmlidXRlTmFtZSxkPWUuYXR0cmlidXRlTmFtZXNwYWNlLG51bGw9PT1jP2EucmVtb3ZlQXR0cmlidXRlKGIpOihlPWUudHlwZSxjPTM9PT1lfHw0PT09ZSYmITA9PT1jP1wiXCI6XCJcIitjLGQ/YS5zZXRBdHRyaWJ1dGVOUyhkLGIsYyk6YS5zZXRBdHRyaWJ1dGUoYixjKSkpfVxudmFyIHNhPWFhLl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVELHRhPVN5bWJvbC5mb3IoXCJyZWFjdC5lbGVtZW50XCIpLHVhPVN5bWJvbC5mb3IoXCJyZWFjdC5wb3J0YWxcIiksdmE9U3ltYm9sLmZvcihcInJlYWN0LmZyYWdtZW50XCIpLHdhPVN5bWJvbC5mb3IoXCJyZWFjdC5zdHJpY3RfbW9kZVwiKSx4YT1TeW1ib2wuZm9yKFwicmVhY3QucHJvZmlsZXJcIikseWE9U3ltYm9sLmZvcihcInJlYWN0LnByb3ZpZGVyXCIpLEFhPVN5bWJvbC5mb3IoXCJyZWFjdC5jb250ZXh0XCIpLEJhPVN5bWJvbC5mb3IoXCJyZWFjdC5mb3J3YXJkX3JlZlwiKSxDYT1TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VcIiksRGE9U3ltYm9sLmZvcihcInJlYWN0LnN1c3BlbnNlX2xpc3RcIiksRWE9U3ltYm9sLmZvcihcInJlYWN0Lm1lbW9cIiksRmE9U3ltYm9sLmZvcihcInJlYWN0LmxhenlcIik7U3ltYm9sLmZvcihcInJlYWN0LnNjb3BlXCIpO1N5bWJvbC5mb3IoXCJyZWFjdC5kZWJ1Z190cmFjZV9tb2RlXCIpO1xudmFyIEdhPVN5bWJvbC5mb3IoXCJyZWFjdC5vZmZzY3JlZW5cIik7U3ltYm9sLmZvcihcInJlYWN0LmxlZ2FjeV9oaWRkZW5cIik7U3ltYm9sLmZvcihcInJlYWN0LmNhY2hlXCIpO1N5bWJvbC5mb3IoXCJyZWFjdC50cmFjaW5nX21hcmtlclwiKTt2YXIgSGE9U3ltYm9sLml0ZXJhdG9yO2Z1bmN0aW9uIElhKGEpe2lmKG51bGw9PT1hfHxcIm9iamVjdFwiIT09dHlwZW9mIGEpcmV0dXJuIG51bGw7YT1IYSYmYVtIYV18fGFbXCJAQGl0ZXJhdG9yXCJdO3JldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBhP2E6bnVsbH12YXIgQT1PYmplY3QuYXNzaWduLEphO2Z1bmN0aW9uIEthKGEpe2lmKHZvaWQgMD09PUphKXRyeXt0aHJvdyBFcnJvcigpO31jYXRjaChjKXt2YXIgYj1jLnN0YWNrLnRyaW0oKS5tYXRjaCgvXFxuKCAqKGF0ICk/KS8pO0phPWImJmJbMV18fFwiXCJ9cmV0dXJuXCJcXG5cIitKYSthfXZhciBMYT0hMTtcbmZ1bmN0aW9uIE1hKGEsYil7aWYoIWF8fExhKXJldHVyblwiXCI7TGE9ITA7dmFyIGM9RXJyb3IucHJlcGFyZVN0YWNrVHJhY2U7RXJyb3IucHJlcGFyZVN0YWNrVHJhY2U9dm9pZCAwO3RyeXtpZihiKWlmKGI9ZnVuY3Rpb24oKXt0aHJvdyBFcnJvcigpO30sT2JqZWN0LmRlZmluZVByb3BlcnR5KGIucHJvdG90eXBlLFwicHJvcHNcIix7c2V0OmZ1bmN0aW9uKCl7dGhyb3cgRXJyb3IoKTt9fSksXCJvYmplY3RcIj09PXR5cGVvZiBSZWZsZWN0JiZSZWZsZWN0LmNvbnN0cnVjdCl7dHJ5e1JlZmxlY3QuY29uc3RydWN0KGIsW10pfWNhdGNoKGwpe3ZhciBkPWx9UmVmbGVjdC5jb25zdHJ1Y3QoYSxbXSxiKX1lbHNle3RyeXtiLmNhbGwoKX1jYXRjaChsKXtkPWx9YS5jYWxsKGIucHJvdG90eXBlKX1lbHNle3RyeXt0aHJvdyBFcnJvcigpO31jYXRjaChsKXtkPWx9YSgpfX1jYXRjaChsKXtpZihsJiZkJiZcInN0cmluZ1wiPT09dHlwZW9mIGwuc3RhY2spe2Zvcih2YXIgZT1sLnN0YWNrLnNwbGl0KFwiXFxuXCIpLFxuZj1kLnN0YWNrLnNwbGl0KFwiXFxuXCIpLGc9ZS5sZW5ndGgtMSxoPWYubGVuZ3RoLTE7MTw9ZyYmMDw9aCYmZVtnXSE9PWZbaF07KWgtLTtmb3IoOzE8PWcmJjA8PWg7Zy0tLGgtLSlpZihlW2ddIT09ZltoXSl7aWYoMSE9PWd8fDEhPT1oKXtkbyBpZihnLS0saC0tLDA+aHx8ZVtnXSE9PWZbaF0pe3ZhciBrPVwiXFxuXCIrZVtnXS5yZXBsYWNlKFwiIGF0IG5ldyBcIixcIiBhdCBcIik7YS5kaXNwbGF5TmFtZSYmay5pbmNsdWRlcyhcIjxhbm9ueW1vdXM+XCIpJiYoaz1rLnJlcGxhY2UoXCI8YW5vbnltb3VzPlwiLGEuZGlzcGxheU5hbWUpKTtyZXR1cm4ga313aGlsZSgxPD1nJiYwPD1oKX1icmVha319fWZpbmFsbHl7TGE9ITEsRXJyb3IucHJlcGFyZVN0YWNrVHJhY2U9Y31yZXR1cm4oYT1hP2EuZGlzcGxheU5hbWV8fGEubmFtZTpcIlwiKT9LYShhKTpcIlwifVxuZnVuY3Rpb24gTmEoYSl7c3dpdGNoKGEudGFnKXtjYXNlIDU6cmV0dXJuIEthKGEudHlwZSk7Y2FzZSAxNjpyZXR1cm4gS2EoXCJMYXp5XCIpO2Nhc2UgMTM6cmV0dXJuIEthKFwiU3VzcGVuc2VcIik7Y2FzZSAxOTpyZXR1cm4gS2EoXCJTdXNwZW5zZUxpc3RcIik7Y2FzZSAwOmNhc2UgMjpjYXNlIDE1OnJldHVybiBhPU1hKGEudHlwZSwhMSksYTtjYXNlIDExOnJldHVybiBhPU1hKGEudHlwZS5yZW5kZXIsITEpLGE7Y2FzZSAxOnJldHVybiBhPU1hKGEudHlwZSwhMCksYTtkZWZhdWx0OnJldHVyblwiXCJ9fVxuZnVuY3Rpb24gT2EoYSl7aWYobnVsbD09YSlyZXR1cm4gbnVsbDtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSlyZXR1cm4gYS5kaXNwbGF5TmFtZXx8YS5uYW1lfHxudWxsO2lmKFwic3RyaW5nXCI9PT10eXBlb2YgYSlyZXR1cm4gYTtzd2l0Y2goYSl7Y2FzZSB2YTpyZXR1cm5cIkZyYWdtZW50XCI7Y2FzZSB1YTpyZXR1cm5cIlBvcnRhbFwiO2Nhc2UgeGE6cmV0dXJuXCJQcm9maWxlclwiO2Nhc2Ugd2E6cmV0dXJuXCJTdHJpY3RNb2RlXCI7Y2FzZSBDYTpyZXR1cm5cIlN1c3BlbnNlXCI7Y2FzZSBEYTpyZXR1cm5cIlN1c3BlbnNlTGlzdFwifWlmKFwib2JqZWN0XCI9PT10eXBlb2YgYSlzd2l0Y2goYS4kJHR5cGVvZil7Y2FzZSBBYTpyZXR1cm4oYS5kaXNwbGF5TmFtZXx8XCJDb250ZXh0XCIpK1wiLkNvbnN1bWVyXCI7Y2FzZSB5YTpyZXR1cm4oYS5fY29udGV4dC5kaXNwbGF5TmFtZXx8XCJDb250ZXh0XCIpK1wiLlByb3ZpZGVyXCI7Y2FzZSBCYTp2YXIgYj1hLnJlbmRlcjthPWEuZGlzcGxheU5hbWU7YXx8KGE9Yi5kaXNwbGF5TmFtZXx8XG5iLm5hbWV8fFwiXCIsYT1cIlwiIT09YT9cIkZvcndhcmRSZWYoXCIrYStcIilcIjpcIkZvcndhcmRSZWZcIik7cmV0dXJuIGE7Y2FzZSBFYTpyZXR1cm4gYj1hLmRpc3BsYXlOYW1lfHxudWxsLG51bGwhPT1iP2I6T2EoYS50eXBlKXx8XCJNZW1vXCI7Y2FzZSBGYTpiPWEuX3BheWxvYWQ7YT1hLl9pbml0O3RyeXtyZXR1cm4gT2EoYShiKSl9Y2F0Y2goYyl7fX1yZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIFBhKGEpe3ZhciBiPWEudHlwZTtzd2l0Y2goYS50YWcpe2Nhc2UgMjQ6cmV0dXJuXCJDYWNoZVwiO2Nhc2UgOTpyZXR1cm4oYi5kaXNwbGF5TmFtZXx8XCJDb250ZXh0XCIpK1wiLkNvbnN1bWVyXCI7Y2FzZSAxMDpyZXR1cm4oYi5fY29udGV4dC5kaXNwbGF5TmFtZXx8XCJDb250ZXh0XCIpK1wiLlByb3ZpZGVyXCI7Y2FzZSAxODpyZXR1cm5cIkRlaHlkcmF0ZWRGcmFnbWVudFwiO2Nhc2UgMTE6cmV0dXJuIGE9Yi5yZW5kZXIsYT1hLmRpc3BsYXlOYW1lfHxhLm5hbWV8fFwiXCIsYi5kaXNwbGF5TmFtZXx8KFwiXCIhPT1hP1wiRm9yd2FyZFJlZihcIithK1wiKVwiOlwiRm9yd2FyZFJlZlwiKTtjYXNlIDc6cmV0dXJuXCJGcmFnbWVudFwiO2Nhc2UgNTpyZXR1cm4gYjtjYXNlIDQ6cmV0dXJuXCJQb3J0YWxcIjtjYXNlIDM6cmV0dXJuXCJSb290XCI7Y2FzZSA2OnJldHVyblwiVGV4dFwiO2Nhc2UgMTY6cmV0dXJuIE9hKGIpO2Nhc2UgODpyZXR1cm4gYj09PXdhP1wiU3RyaWN0TW9kZVwiOlwiTW9kZVwiO2Nhc2UgMjI6cmV0dXJuXCJPZmZzY3JlZW5cIjtcbmNhc2UgMTI6cmV0dXJuXCJQcm9maWxlclwiO2Nhc2UgMjE6cmV0dXJuXCJTY29wZVwiO2Nhc2UgMTM6cmV0dXJuXCJTdXNwZW5zZVwiO2Nhc2UgMTk6cmV0dXJuXCJTdXNwZW5zZUxpc3RcIjtjYXNlIDI1OnJldHVyblwiVHJhY2luZ01hcmtlclwiO2Nhc2UgMTpjYXNlIDA6Y2FzZSAxNzpjYXNlIDI6Y2FzZSAxNDpjYXNlIDE1OmlmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBiKXJldHVybiBiLmRpc3BsYXlOYW1lfHxiLm5hbWV8fG51bGw7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBiKXJldHVybiBifXJldHVybiBudWxsfWZ1bmN0aW9uIFFhKGEpe3N3aXRjaCh0eXBlb2YgYSl7Y2FzZSBcImJvb2xlYW5cIjpjYXNlIFwibnVtYmVyXCI6Y2FzZSBcInN0cmluZ1wiOmNhc2UgXCJ1bmRlZmluZWRcIjpyZXR1cm4gYTtjYXNlIFwib2JqZWN0XCI6cmV0dXJuIGE7ZGVmYXVsdDpyZXR1cm5cIlwifX1cbmZ1bmN0aW9uIFJhKGEpe3ZhciBiPWEudHlwZTtyZXR1cm4oYT1hLm5vZGVOYW1lKSYmXCJpbnB1dFwiPT09YS50b0xvd2VyQ2FzZSgpJiYoXCJjaGVja2JveFwiPT09Ynx8XCJyYWRpb1wiPT09Yil9XG5mdW5jdGlvbiBTYShhKXt2YXIgYj1SYShhKT9cImNoZWNrZWRcIjpcInZhbHVlXCIsYz1PYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGEuY29uc3RydWN0b3IucHJvdG90eXBlLGIpLGQ9XCJcIithW2JdO2lmKCFhLmhhc093blByb3BlcnR5KGIpJiZcInVuZGVmaW5lZFwiIT09dHlwZW9mIGMmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBjLmdldCYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGMuc2V0KXt2YXIgZT1jLmdldCxmPWMuc2V0O09iamVjdC5kZWZpbmVQcm9wZXJ0eShhLGIse2NvbmZpZ3VyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gZS5jYWxsKHRoaXMpfSxzZXQ6ZnVuY3Rpb24oYSl7ZD1cIlwiK2E7Zi5jYWxsKHRoaXMsYSl9fSk7T2JqZWN0LmRlZmluZVByb3BlcnR5KGEsYix7ZW51bWVyYWJsZTpjLmVudW1lcmFibGV9KTtyZXR1cm57Z2V0VmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gZH0sc2V0VmFsdWU6ZnVuY3Rpb24oYSl7ZD1cIlwiK2F9LHN0b3BUcmFja2luZzpmdW5jdGlvbigpe2EuX3ZhbHVlVHJhY2tlcj1cbm51bGw7ZGVsZXRlIGFbYl19fX19ZnVuY3Rpb24gVGEoYSl7YS5fdmFsdWVUcmFja2VyfHwoYS5fdmFsdWVUcmFja2VyPVNhKGEpKX1mdW5jdGlvbiBVYShhKXtpZighYSlyZXR1cm4hMTt2YXIgYj1hLl92YWx1ZVRyYWNrZXI7aWYoIWIpcmV0dXJuITA7dmFyIGM9Yi5nZXRWYWx1ZSgpO3ZhciBkPVwiXCI7YSYmKGQ9UmEoYSk/YS5jaGVja2VkP1widHJ1ZVwiOlwiZmFsc2VcIjphLnZhbHVlKTthPWQ7cmV0dXJuIGEhPT1jPyhiLnNldFZhbHVlKGEpLCEwKTohMX1mdW5jdGlvbiBWYShhKXthPWF8fChcInVuZGVmaW5lZFwiIT09dHlwZW9mIGRvY3VtZW50P2RvY3VtZW50OnZvaWQgMCk7aWYoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiBhKXJldHVybiBudWxsO3RyeXtyZXR1cm4gYS5hY3RpdmVFbGVtZW50fHxhLmJvZHl9Y2F0Y2goYil7cmV0dXJuIGEuYm9keX19XG5mdW5jdGlvbiBXYShhLGIpe3ZhciBjPWIuY2hlY2tlZDtyZXR1cm4gQSh7fSxiLHtkZWZhdWx0Q2hlY2tlZDp2b2lkIDAsZGVmYXVsdFZhbHVlOnZvaWQgMCx2YWx1ZTp2b2lkIDAsY2hlY2tlZDpudWxsIT1jP2M6YS5fd3JhcHBlclN0YXRlLmluaXRpYWxDaGVja2VkfSl9ZnVuY3Rpb24gWGEoYSxiKXt2YXIgYz1udWxsPT1iLmRlZmF1bHRWYWx1ZT9cIlwiOmIuZGVmYXVsdFZhbHVlLGQ9bnVsbCE9Yi5jaGVja2VkP2IuY2hlY2tlZDpiLmRlZmF1bHRDaGVja2VkO2M9UWEobnVsbCE9Yi52YWx1ZT9iLnZhbHVlOmMpO2EuX3dyYXBwZXJTdGF0ZT17aW5pdGlhbENoZWNrZWQ6ZCxpbml0aWFsVmFsdWU6Yyxjb250cm9sbGVkOlwiY2hlY2tib3hcIj09PWIudHlwZXx8XCJyYWRpb1wiPT09Yi50eXBlP251bGwhPWIuY2hlY2tlZDpudWxsIT1iLnZhbHVlfX1mdW5jdGlvbiBZYShhLGIpe2I9Yi5jaGVja2VkO251bGwhPWImJnJhKGEsXCJjaGVja2VkXCIsYiwhMSl9XG5mdW5jdGlvbiBaYShhLGIpe1lhKGEsYik7dmFyIGM9UWEoYi52YWx1ZSksZD1iLnR5cGU7aWYobnVsbCE9YylpZihcIm51bWJlclwiPT09ZCl7aWYoMD09PWMmJlwiXCI9PT1hLnZhbHVlfHxhLnZhbHVlIT1jKWEudmFsdWU9XCJcIitjfWVsc2UgYS52YWx1ZSE9PVwiXCIrYyYmKGEudmFsdWU9XCJcIitjKTtlbHNlIGlmKFwic3VibWl0XCI9PT1kfHxcInJlc2V0XCI9PT1kKXthLnJlbW92ZUF0dHJpYnV0ZShcInZhbHVlXCIpO3JldHVybn1iLmhhc093blByb3BlcnR5KFwidmFsdWVcIik/JGEoYSxiLnR5cGUsYyk6Yi5oYXNPd25Qcm9wZXJ0eShcImRlZmF1bHRWYWx1ZVwiKSYmJGEoYSxiLnR5cGUsUWEoYi5kZWZhdWx0VmFsdWUpKTtudWxsPT1iLmNoZWNrZWQmJm51bGwhPWIuZGVmYXVsdENoZWNrZWQmJihhLmRlZmF1bHRDaGVja2VkPSEhYi5kZWZhdWx0Q2hlY2tlZCl9XG5mdW5jdGlvbiBhYihhLGIsYyl7aWYoYi5oYXNPd25Qcm9wZXJ0eShcInZhbHVlXCIpfHxiLmhhc093blByb3BlcnR5KFwiZGVmYXVsdFZhbHVlXCIpKXt2YXIgZD1iLnR5cGU7aWYoIShcInN1Ym1pdFwiIT09ZCYmXCJyZXNldFwiIT09ZHx8dm9pZCAwIT09Yi52YWx1ZSYmbnVsbCE9PWIudmFsdWUpKXJldHVybjtiPVwiXCIrYS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZTtjfHxiPT09YS52YWx1ZXx8KGEudmFsdWU9Yik7YS5kZWZhdWx0VmFsdWU9Yn1jPWEubmFtZTtcIlwiIT09YyYmKGEubmFtZT1cIlwiKTthLmRlZmF1bHRDaGVja2VkPSEhYS5fd3JhcHBlclN0YXRlLmluaXRpYWxDaGVja2VkO1wiXCIhPT1jJiYoYS5uYW1lPWMpfVxuZnVuY3Rpb24gJGEoYSxiLGMpe2lmKFwibnVtYmVyXCIhPT1ifHxWYShhLm93bmVyRG9jdW1lbnQpIT09YSludWxsPT1jP2EuZGVmYXVsdFZhbHVlPVwiXCIrYS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZTphLmRlZmF1bHRWYWx1ZSE9PVwiXCIrYyYmKGEuZGVmYXVsdFZhbHVlPVwiXCIrYyl9dmFyIGJiPUFycmF5LmlzQXJyYXk7XG5mdW5jdGlvbiBjYihhLGIsYyxkKXthPWEub3B0aW9ucztpZihiKXtiPXt9O2Zvcih2YXIgZT0wO2U8Yy5sZW5ndGg7ZSsrKWJbXCIkXCIrY1tlXV09ITA7Zm9yKGM9MDtjPGEubGVuZ3RoO2MrKyllPWIuaGFzT3duUHJvcGVydHkoXCIkXCIrYVtjXS52YWx1ZSksYVtjXS5zZWxlY3RlZCE9PWUmJihhW2NdLnNlbGVjdGVkPWUpLGUmJmQmJihhW2NdLmRlZmF1bHRTZWxlY3RlZD0hMCl9ZWxzZXtjPVwiXCIrUWEoYyk7Yj1udWxsO2ZvcihlPTA7ZTxhLmxlbmd0aDtlKyspe2lmKGFbZV0udmFsdWU9PT1jKXthW2VdLnNlbGVjdGVkPSEwO2QmJihhW2VdLmRlZmF1bHRTZWxlY3RlZD0hMCk7cmV0dXJufW51bGwhPT1ifHxhW2VdLmRpc2FibGVkfHwoYj1hW2VdKX1udWxsIT09YiYmKGIuc2VsZWN0ZWQ9ITApfX1cbmZ1bmN0aW9uIGRiKGEsYil7aWYobnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTCl0aHJvdyBFcnJvcihwKDkxKSk7cmV0dXJuIEEoe30sYix7dmFsdWU6dm9pZCAwLGRlZmF1bHRWYWx1ZTp2b2lkIDAsY2hpbGRyZW46XCJcIithLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlfSl9ZnVuY3Rpb24gZWIoYSxiKXt2YXIgYz1iLnZhbHVlO2lmKG51bGw9PWMpe2M9Yi5jaGlsZHJlbjtiPWIuZGVmYXVsdFZhbHVlO2lmKG51bGwhPWMpe2lmKG51bGwhPWIpdGhyb3cgRXJyb3IocCg5MikpO2lmKGJiKGMpKXtpZigxPGMubGVuZ3RoKXRocm93IEVycm9yKHAoOTMpKTtjPWNbMF19Yj1jfW51bGw9PWImJihiPVwiXCIpO2M9Yn1hLl93cmFwcGVyU3RhdGU9e2luaXRpYWxWYWx1ZTpRYShjKX19XG5mdW5jdGlvbiBmYihhLGIpe3ZhciBjPVFhKGIudmFsdWUpLGQ9UWEoYi5kZWZhdWx0VmFsdWUpO251bGwhPWMmJihjPVwiXCIrYyxjIT09YS52YWx1ZSYmKGEudmFsdWU9YyksbnVsbD09Yi5kZWZhdWx0VmFsdWUmJmEuZGVmYXVsdFZhbHVlIT09YyYmKGEuZGVmYXVsdFZhbHVlPWMpKTtudWxsIT1kJiYoYS5kZWZhdWx0VmFsdWU9XCJcIitkKX1mdW5jdGlvbiBnYihhKXt2YXIgYj1hLnRleHRDb250ZW50O2I9PT1hLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlJiZcIlwiIT09YiYmbnVsbCE9PWImJihhLnZhbHVlPWIpfWZ1bmN0aW9uIGhiKGEpe3N3aXRjaChhKXtjYXNlIFwic3ZnXCI6cmV0dXJuXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiO2Nhc2UgXCJtYXRoXCI6cmV0dXJuXCJodHRwOi8vd3d3LnczLm9yZy8xOTk4L01hdGgvTWF0aE1MXCI7ZGVmYXVsdDpyZXR1cm5cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIn19XG5mdW5jdGlvbiBpYihhLGIpe3JldHVybiBudWxsPT1hfHxcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIj09PWE/aGIoYik6XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiPT09YSYmXCJmb3JlaWduT2JqZWN0XCI9PT1iP1wiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiOmF9XG52YXIgamIsa2I9ZnVuY3Rpb24oYSl7cmV0dXJuXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBNU0FwcCYmTVNBcHAuZXhlY1Vuc2FmZUxvY2FsRnVuY3Rpb24/ZnVuY3Rpb24oYixjLGQsZSl7TVNBcHAuZXhlY1Vuc2FmZUxvY2FsRnVuY3Rpb24oZnVuY3Rpb24oKXtyZXR1cm4gYShiLGMsZCxlKX0pfTphfShmdW5jdGlvbihhLGIpe2lmKFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiE9PWEubmFtZXNwYWNlVVJJfHxcImlubmVySFRNTFwiaW4gYSlhLmlubmVySFRNTD1iO2Vsc2V7amI9amJ8fGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7amIuaW5uZXJIVE1MPVwiPHN2Zz5cIitiLnZhbHVlT2YoKS50b1N0cmluZygpK1wiPC9zdmc+XCI7Zm9yKGI9amIuZmlyc3RDaGlsZDthLmZpcnN0Q2hpbGQ7KWEucmVtb3ZlQ2hpbGQoYS5maXJzdENoaWxkKTtmb3IoO2IuZmlyc3RDaGlsZDspYS5hcHBlbmRDaGlsZChiLmZpcnN0Q2hpbGQpfX0pO1xuZnVuY3Rpb24gbGIoYSxiKXtpZihiKXt2YXIgYz1hLmZpcnN0Q2hpbGQ7aWYoYyYmYz09PWEubGFzdENoaWxkJiYzPT09Yy5ub2RlVHlwZSl7Yy5ub2RlVmFsdWU9YjtyZXR1cm59fWEudGV4dENvbnRlbnQ9Yn1cbnZhciBtYj17YW5pbWF0aW9uSXRlcmF0aW9uQ291bnQ6ITAsYXNwZWN0UmF0aW86ITAsYm9yZGVySW1hZ2VPdXRzZXQ6ITAsYm9yZGVySW1hZ2VTbGljZTohMCxib3JkZXJJbWFnZVdpZHRoOiEwLGJveEZsZXg6ITAsYm94RmxleEdyb3VwOiEwLGJveE9yZGluYWxHcm91cDohMCxjb2x1bW5Db3VudDohMCxjb2x1bW5zOiEwLGZsZXg6ITAsZmxleEdyb3c6ITAsZmxleFBvc2l0aXZlOiEwLGZsZXhTaHJpbms6ITAsZmxleE5lZ2F0aXZlOiEwLGZsZXhPcmRlcjohMCxncmlkQXJlYTohMCxncmlkUm93OiEwLGdyaWRSb3dFbmQ6ITAsZ3JpZFJvd1NwYW46ITAsZ3JpZFJvd1N0YXJ0OiEwLGdyaWRDb2x1bW46ITAsZ3JpZENvbHVtbkVuZDohMCxncmlkQ29sdW1uU3BhbjohMCxncmlkQ29sdW1uU3RhcnQ6ITAsZm9udFdlaWdodDohMCxsaW5lQ2xhbXA6ITAsbGluZUhlaWdodDohMCxvcGFjaXR5OiEwLG9yZGVyOiEwLG9ycGhhbnM6ITAsdGFiU2l6ZTohMCx3aWRvd3M6ITAsekluZGV4OiEwLFxuem9vbTohMCxmaWxsT3BhY2l0eTohMCxmbG9vZE9wYWNpdHk6ITAsc3RvcE9wYWNpdHk6ITAsc3Ryb2tlRGFzaGFycmF5OiEwLHN0cm9rZURhc2hvZmZzZXQ6ITAsc3Ryb2tlTWl0ZXJsaW1pdDohMCxzdHJva2VPcGFjaXR5OiEwLHN0cm9rZVdpZHRoOiEwfSxuYj1bXCJXZWJraXRcIixcIm1zXCIsXCJNb3pcIixcIk9cIl07T2JqZWN0LmtleXMobWIpLmZvckVhY2goZnVuY3Rpb24oYSl7bmIuZm9yRWFjaChmdW5jdGlvbihiKXtiPWIrYS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSthLnN1YnN0cmluZygxKTttYltiXT1tYlthXX0pfSk7ZnVuY3Rpb24gb2IoYSxiLGMpe3JldHVybiBudWxsPT1ifHxcImJvb2xlYW5cIj09PXR5cGVvZiBifHxcIlwiPT09Yj9cIlwiOmN8fFwibnVtYmVyXCIhPT10eXBlb2YgYnx8MD09PWJ8fG1iLmhhc093blByb3BlcnR5KGEpJiZtYlthXT8oXCJcIitiKS50cmltKCk6YitcInB4XCJ9XG5mdW5jdGlvbiBwYihhLGIpe2E9YS5zdHlsZTtmb3IodmFyIGMgaW4gYilpZihiLmhhc093blByb3BlcnR5KGMpKXt2YXIgZD0wPT09Yy5pbmRleE9mKFwiLS1cIiksZT1vYihjLGJbY10sZCk7XCJmbG9hdFwiPT09YyYmKGM9XCJjc3NGbG9hdFwiKTtkP2Euc2V0UHJvcGVydHkoYyxlKTphW2NdPWV9fXZhciBxYj1BKHttZW51aXRlbTohMH0se2FyZWE6ITAsYmFzZTohMCxicjohMCxjb2w6ITAsZW1iZWQ6ITAsaHI6ITAsaW1nOiEwLGlucHV0OiEwLGtleWdlbjohMCxsaW5rOiEwLG1ldGE6ITAscGFyYW06ITAsc291cmNlOiEwLHRyYWNrOiEwLHdicjohMH0pO1xuZnVuY3Rpb24gcmIoYSxiKXtpZihiKXtpZihxYlthXSYmKG51bGwhPWIuY2hpbGRyZW58fG51bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwpKXRocm93IEVycm9yKHAoMTM3LGEpKTtpZihudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MKXtpZihudWxsIT1iLmNoaWxkcmVuKXRocm93IEVycm9yKHAoNjApKTtpZihcIm9iamVjdFwiIT09dHlwZW9mIGIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUx8fCEoXCJfX2h0bWxcImluIGIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwpKXRocm93IEVycm9yKHAoNjEpKTt9aWYobnVsbCE9Yi5zdHlsZSYmXCJvYmplY3RcIiE9PXR5cGVvZiBiLnN0eWxlKXRocm93IEVycm9yKHAoNjIpKTt9fVxuZnVuY3Rpb24gc2IoYSxiKXtpZigtMT09PWEuaW5kZXhPZihcIi1cIikpcmV0dXJuXCJzdHJpbmdcIj09PXR5cGVvZiBiLmlzO3N3aXRjaChhKXtjYXNlIFwiYW5ub3RhdGlvbi14bWxcIjpjYXNlIFwiY29sb3ItcHJvZmlsZVwiOmNhc2UgXCJmb250LWZhY2VcIjpjYXNlIFwiZm9udC1mYWNlLXNyY1wiOmNhc2UgXCJmb250LWZhY2UtdXJpXCI6Y2FzZSBcImZvbnQtZmFjZS1mb3JtYXRcIjpjYXNlIFwiZm9udC1mYWNlLW5hbWVcIjpjYXNlIFwibWlzc2luZy1nbHlwaFwiOnJldHVybiExO2RlZmF1bHQ6cmV0dXJuITB9fXZhciB0Yj1udWxsO2Z1bmN0aW9uIHViKGEpe2E9YS50YXJnZXR8fGEuc3JjRWxlbWVudHx8d2luZG93O2EuY29ycmVzcG9uZGluZ1VzZUVsZW1lbnQmJihhPWEuY29ycmVzcG9uZGluZ1VzZUVsZW1lbnQpO3JldHVybiAzPT09YS5ub2RlVHlwZT9hLnBhcmVudE5vZGU6YX12YXIgdmI9bnVsbCx3Yj1udWxsLHhiPW51bGw7XG5mdW5jdGlvbiB5YihhKXtpZihhPXpiKGEpKXtpZihcImZ1bmN0aW9uXCIhPT10eXBlb2YgdmIpdGhyb3cgRXJyb3IocCgyODApKTt2YXIgYj1hLnN0YXRlTm9kZTtiJiYoYj1BYihiKSx2YihhLnN0YXRlTm9kZSxhLnR5cGUsYikpfX1mdW5jdGlvbiBCYihhKXt3Yj94Yj94Yi5wdXNoKGEpOnhiPVthXTp3Yj1hfWZ1bmN0aW9uIENiKCl7aWYod2Ipe3ZhciBhPXdiLGI9eGI7eGI9d2I9bnVsbDt5YihhKTtpZihiKWZvcihhPTA7YTxiLmxlbmd0aDthKyspeWIoYlthXSl9fWZ1bmN0aW9uIERiKGEsYil7cmV0dXJuIGEoYil9ZnVuY3Rpb24gRWIoKXt9dmFyIEZiPSExO2Z1bmN0aW9uIEdiKGEsYixjKXtpZihGYilyZXR1cm4gYShiLGMpO0ZiPSEwO3RyeXtyZXR1cm4gRGIoYSxiLGMpfWZpbmFsbHl7aWYoRmI9ITEsbnVsbCE9PXdifHxudWxsIT09eGIpRWIoKSxDYigpfX1cbmZ1bmN0aW9uIEhiKGEsYil7dmFyIGM9YS5zdGF0ZU5vZGU7aWYobnVsbD09PWMpcmV0dXJuIG51bGw7dmFyIGQ9QWIoYyk7aWYobnVsbD09PWQpcmV0dXJuIG51bGw7Yz1kW2JdO2E6c3dpdGNoKGIpe2Nhc2UgXCJvbkNsaWNrXCI6Y2FzZSBcIm9uQ2xpY2tDYXB0dXJlXCI6Y2FzZSBcIm9uRG91YmxlQ2xpY2tcIjpjYXNlIFwib25Eb3VibGVDbGlja0NhcHR1cmVcIjpjYXNlIFwib25Nb3VzZURvd25cIjpjYXNlIFwib25Nb3VzZURvd25DYXB0dXJlXCI6Y2FzZSBcIm9uTW91c2VNb3ZlXCI6Y2FzZSBcIm9uTW91c2VNb3ZlQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlVXBcIjpjYXNlIFwib25Nb3VzZVVwQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlRW50ZXJcIjooZD0hZC5kaXNhYmxlZCl8fChhPWEudHlwZSxkPSEoXCJidXR0b25cIj09PWF8fFwiaW5wdXRcIj09PWF8fFwic2VsZWN0XCI9PT1hfHxcInRleHRhcmVhXCI9PT1hKSk7YT0hZDticmVhayBhO2RlZmF1bHQ6YT0hMX1pZihhKXJldHVybiBudWxsO2lmKGMmJlwiZnVuY3Rpb25cIiE9PVxudHlwZW9mIGMpdGhyb3cgRXJyb3IocCgyMzEsYix0eXBlb2YgYykpO3JldHVybiBjfXZhciBJYj0hMTtpZihoYSl0cnl7dmFyIEpiPXt9O09iamVjdC5kZWZpbmVQcm9wZXJ0eShKYixcInBhc3NpdmVcIix7Z2V0OmZ1bmN0aW9uKCl7SWI9ITB9fSk7d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJ0ZXN0XCIsSmIsSmIpO3dpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwidGVzdFwiLEpiLEpiKX1jYXRjaChhKXtJYj0hMX1mdW5jdGlvbiBLYihhLGIsYyxkLGUsZixnLGgsayl7dmFyIGw9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLDMpO3RyeXtiLmFwcGx5KGMsbCl9Y2F0Y2gobSl7dGhpcy5vbkVycm9yKG0pfX12YXIgTGI9ITEsTWI9bnVsbCxOYj0hMSxPYj1udWxsLFBiPXtvbkVycm9yOmZ1bmN0aW9uKGEpe0xiPSEwO01iPWF9fTtmdW5jdGlvbiBRYihhLGIsYyxkLGUsZixnLGgsayl7TGI9ITE7TWI9bnVsbDtLYi5hcHBseShQYixhcmd1bWVudHMpfVxuZnVuY3Rpb24gUmIoYSxiLGMsZCxlLGYsZyxoLGspe1FiLmFwcGx5KHRoaXMsYXJndW1lbnRzKTtpZihMYil7aWYoTGIpe3ZhciBsPU1iO0xiPSExO01iPW51bGx9ZWxzZSB0aHJvdyBFcnJvcihwKDE5OCkpO05ifHwoTmI9ITAsT2I9bCl9fWZ1bmN0aW9uIFNiKGEpe3ZhciBiPWEsYz1hO2lmKGEuYWx0ZXJuYXRlKWZvcig7Yi5yZXR1cm47KWI9Yi5yZXR1cm47ZWxzZXthPWI7ZG8gYj1hLDAhPT0oYi5mbGFncyY0MDk4KSYmKGM9Yi5yZXR1cm4pLGE9Yi5yZXR1cm47d2hpbGUoYSl9cmV0dXJuIDM9PT1iLnRhZz9jOm51bGx9ZnVuY3Rpb24gVGIoYSl7aWYoMTM9PT1hLnRhZyl7dmFyIGI9YS5tZW1vaXplZFN0YXRlO251bGw9PT1iJiYoYT1hLmFsdGVybmF0ZSxudWxsIT09YSYmKGI9YS5tZW1vaXplZFN0YXRlKSk7aWYobnVsbCE9PWIpcmV0dXJuIGIuZGVoeWRyYXRlZH1yZXR1cm4gbnVsbH1mdW5jdGlvbiBVYihhKXtpZihTYihhKSE9PWEpdGhyb3cgRXJyb3IocCgxODgpKTt9XG5mdW5jdGlvbiBWYihhKXt2YXIgYj1hLmFsdGVybmF0ZTtpZighYil7Yj1TYihhKTtpZihudWxsPT09Yil0aHJvdyBFcnJvcihwKDE4OCkpO3JldHVybiBiIT09YT9udWxsOmF9Zm9yKHZhciBjPWEsZD1iOzspe3ZhciBlPWMucmV0dXJuO2lmKG51bGw9PT1lKWJyZWFrO3ZhciBmPWUuYWx0ZXJuYXRlO2lmKG51bGw9PT1mKXtkPWUucmV0dXJuO2lmKG51bGwhPT1kKXtjPWQ7Y29udGludWV9YnJlYWt9aWYoZS5jaGlsZD09PWYuY2hpbGQpe2ZvcihmPWUuY2hpbGQ7Zjspe2lmKGY9PT1jKXJldHVybiBVYihlKSxhO2lmKGY9PT1kKXJldHVybiBVYihlKSxiO2Y9Zi5zaWJsaW5nfXRocm93IEVycm9yKHAoMTg4KSk7fWlmKGMucmV0dXJuIT09ZC5yZXR1cm4pYz1lLGQ9ZjtlbHNle2Zvcih2YXIgZz0hMSxoPWUuY2hpbGQ7aDspe2lmKGg9PT1jKXtnPSEwO2M9ZTtkPWY7YnJlYWt9aWYoaD09PWQpe2c9ITA7ZD1lO2M9ZjticmVha31oPWguc2libGluZ31pZighZyl7Zm9yKGg9Zi5jaGlsZDtoOyl7aWYoaD09PVxuYyl7Zz0hMDtjPWY7ZD1lO2JyZWFrfWlmKGg9PT1kKXtnPSEwO2Q9ZjtjPWU7YnJlYWt9aD1oLnNpYmxpbmd9aWYoIWcpdGhyb3cgRXJyb3IocCgxODkpKTt9fWlmKGMuYWx0ZXJuYXRlIT09ZCl0aHJvdyBFcnJvcihwKDE5MCkpO31pZigzIT09Yy50YWcpdGhyb3cgRXJyb3IocCgxODgpKTtyZXR1cm4gYy5zdGF0ZU5vZGUuY3VycmVudD09PWM/YTpifWZ1bmN0aW9uIFdiKGEpe2E9VmIoYSk7cmV0dXJuIG51bGwhPT1hP1hiKGEpOm51bGx9ZnVuY3Rpb24gWGIoYSl7aWYoNT09PWEudGFnfHw2PT09YS50YWcpcmV0dXJuIGE7Zm9yKGE9YS5jaGlsZDtudWxsIT09YTspe3ZhciBiPVhiKGEpO2lmKG51bGwhPT1iKXJldHVybiBiO2E9YS5zaWJsaW5nfXJldHVybiBudWxsfVxudmFyIFliPWJhLnVuc3RhYmxlX3NjaGVkdWxlQ2FsbGJhY2ssWmI9YmEudW5zdGFibGVfY2FuY2VsQ2FsbGJhY2ssJGI9YmEudW5zdGFibGVfc2hvdWxkWWllbGQsYWM9YmEudW5zdGFibGVfcmVxdWVzdFBhaW50LEQ9YmEudW5zdGFibGVfbm93LGJjPWJhLnVuc3RhYmxlX2dldEN1cnJlbnRQcmlvcml0eUxldmVsLGNjPWJhLnVuc3RhYmxlX0ltbWVkaWF0ZVByaW9yaXR5LGRjPWJhLnVuc3RhYmxlX1VzZXJCbG9ja2luZ1ByaW9yaXR5LGVjPWJhLnVuc3RhYmxlX05vcm1hbFByaW9yaXR5LGZjPWJhLnVuc3RhYmxlX0xvd1ByaW9yaXR5LGdjPWJhLnVuc3RhYmxlX0lkbGVQcmlvcml0eSxoYz1udWxsLGljPW51bGw7ZnVuY3Rpb24gamMoYSl7aWYoaWMmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBpYy5vbkNvbW1pdEZpYmVyUm9vdCl0cnl7aWMub25Db21taXRGaWJlclJvb3QoaGMsYSx2b2lkIDAsMTI4PT09KGEuY3VycmVudC5mbGFncyYxMjgpKX1jYXRjaChiKXt9fVxudmFyIGxjPU1hdGguY2x6MzI/TWF0aC5jbHozMjprYyxtYz1NYXRoLmxvZyxuYz1NYXRoLkxOMjtmdW5jdGlvbiBrYyhhKXthPj4+PTA7cmV0dXJuIDA9PT1hPzMyOjMxLShtYyhhKS9uY3wwKXwwfXZhciBvYz02NCxwYz00MTk0MzA0O1xuZnVuY3Rpb24gcWMoYSl7c3dpdGNoKGEmLWEpe2Nhc2UgMTpyZXR1cm4gMTtjYXNlIDI6cmV0dXJuIDI7Y2FzZSA0OnJldHVybiA0O2Nhc2UgODpyZXR1cm4gODtjYXNlIDE2OnJldHVybiAxNjtjYXNlIDMyOnJldHVybiAzMjtjYXNlIDY0OmNhc2UgMTI4OmNhc2UgMjU2OmNhc2UgNTEyOmNhc2UgMTAyNDpjYXNlIDIwNDg6Y2FzZSA0MDk2OmNhc2UgODE5MjpjYXNlIDE2Mzg0OmNhc2UgMzI3Njg6Y2FzZSA2NTUzNjpjYXNlIDEzMTA3MjpjYXNlIDI2MjE0NDpjYXNlIDUyNDI4ODpjYXNlIDEwNDg1NzY6Y2FzZSAyMDk3MTUyOnJldHVybiBhJjQxOTQyNDA7Y2FzZSA0MTk0MzA0OmNhc2UgODM4ODYwODpjYXNlIDE2Nzc3MjE2OmNhc2UgMzM1NTQ0MzI6Y2FzZSA2NzEwODg2NDpyZXR1cm4gYSYxMzAwMjM0MjQ7Y2FzZSAxMzQyMTc3Mjg6cmV0dXJuIDEzNDIxNzcyODtjYXNlIDI2ODQzNTQ1NjpyZXR1cm4gMjY4NDM1NDU2O2Nhc2UgNTM2ODcwOTEyOnJldHVybiA1MzY4NzA5MTI7Y2FzZSAxMDczNzQxODI0OnJldHVybiAxMDczNzQxODI0O1xuZGVmYXVsdDpyZXR1cm4gYX19ZnVuY3Rpb24gcmMoYSxiKXt2YXIgYz1hLnBlbmRpbmdMYW5lcztpZigwPT09YylyZXR1cm4gMDt2YXIgZD0wLGU9YS5zdXNwZW5kZWRMYW5lcyxmPWEucGluZ2VkTGFuZXMsZz1jJjI2ODQzNTQ1NTtpZigwIT09Zyl7dmFyIGg9ZyZ+ZTswIT09aD9kPXFjKGgpOihmJj1nLDAhPT1mJiYoZD1xYyhmKSkpfWVsc2UgZz1jJn5lLDAhPT1nP2Q9cWMoZyk6MCE9PWYmJihkPXFjKGYpKTtpZigwPT09ZClyZXR1cm4gMDtpZigwIT09YiYmYiE9PWQmJjA9PT0oYiZlKSYmKGU9ZCYtZCxmPWImLWIsZT49Znx8MTY9PT1lJiYwIT09KGYmNDE5NDI0MCkpKXJldHVybiBiOzAhPT0oZCY0KSYmKGR8PWMmMTYpO2I9YS5lbnRhbmdsZWRMYW5lcztpZigwIT09Yilmb3IoYT1hLmVudGFuZ2xlbWVudHMsYiY9ZDswPGI7KWM9MzEtbGMoYiksZT0xPDxjLGR8PWFbY10sYiY9fmU7cmV0dXJuIGR9XG5mdW5jdGlvbiBzYyhhLGIpe3N3aXRjaChhKXtjYXNlIDE6Y2FzZSAyOmNhc2UgNDpyZXR1cm4gYisyNTA7Y2FzZSA4OmNhc2UgMTY6Y2FzZSAzMjpjYXNlIDY0OmNhc2UgMTI4OmNhc2UgMjU2OmNhc2UgNTEyOmNhc2UgMTAyNDpjYXNlIDIwNDg6Y2FzZSA0MDk2OmNhc2UgODE5MjpjYXNlIDE2Mzg0OmNhc2UgMzI3Njg6Y2FzZSA2NTUzNjpjYXNlIDEzMTA3MjpjYXNlIDI2MjE0NDpjYXNlIDUyNDI4ODpjYXNlIDEwNDg1NzY6Y2FzZSAyMDk3MTUyOnJldHVybiBiKzVFMztjYXNlIDQxOTQzMDQ6Y2FzZSA4Mzg4NjA4OmNhc2UgMTY3NzcyMTY6Y2FzZSAzMzU1NDQzMjpjYXNlIDY3MTA4ODY0OnJldHVybi0xO2Nhc2UgMTM0MjE3NzI4OmNhc2UgMjY4NDM1NDU2OmNhc2UgNTM2ODcwOTEyOmNhc2UgMTA3Mzc0MTgyNDpyZXR1cm4tMTtkZWZhdWx0OnJldHVybi0xfX1cbmZ1bmN0aW9uIHRjKGEsYil7Zm9yKHZhciBjPWEuc3VzcGVuZGVkTGFuZXMsZD1hLnBpbmdlZExhbmVzLGU9YS5leHBpcmF0aW9uVGltZXMsZj1hLnBlbmRpbmdMYW5lczswPGY7KXt2YXIgZz0zMS1sYyhmKSxoPTE8PGcsaz1lW2ddO2lmKC0xPT09ayl7aWYoMD09PShoJmMpfHwwIT09KGgmZCkpZVtnXT1zYyhoLGIpfWVsc2Ugazw9YiYmKGEuZXhwaXJlZExhbmVzfD1oKTtmJj1+aH19ZnVuY3Rpb24gdWMoYSl7YT1hLnBlbmRpbmdMYW5lcyYtMTA3Mzc0MTgyNTtyZXR1cm4gMCE9PWE/YTphJjEwNzM3NDE4MjQ/MTA3Mzc0MTgyNDowfWZ1bmN0aW9uIHZjKGEpe2Zvcih2YXIgYj1bXSxjPTA7MzE+YztjKyspYi5wdXNoKGEpO3JldHVybiBifWZ1bmN0aW9uIHdjKGEsYixjKXthLnBlbmRpbmdMYW5lc3w9Yjs1MzY4NzA5MTIhPT1iJiYoYS5zdXNwZW5kZWRMYW5lcz0wLGEucGluZ2VkTGFuZXM9MCk7YT1hLmV2ZW50VGltZXM7Yj0zMS1sYyhiKTthW2JdPWN9XG5mdW5jdGlvbiB4YyhhLGIpe3ZhciBjPWEucGVuZGluZ0xhbmVzJn5iO2EucGVuZGluZ0xhbmVzPWI7YS5zdXNwZW5kZWRMYW5lcz0wO2EucGluZ2VkTGFuZXM9MDthLmV4cGlyZWRMYW5lcyY9YjthLm11dGFibGVSZWFkTGFuZXMmPWI7YS5lbnRhbmdsZWRMYW5lcyY9YjtiPWEuZW50YW5nbGVtZW50czt2YXIgZD1hLmV2ZW50VGltZXM7Zm9yKGE9YS5leHBpcmF0aW9uVGltZXM7MDxjOyl7dmFyIGU9MzEtbGMoYyksZj0xPDxlO2JbZV09MDtkW2VdPS0xO2FbZV09LTE7YyY9fmZ9fWZ1bmN0aW9uIHljKGEsYil7dmFyIGM9YS5lbnRhbmdsZWRMYW5lc3w9Yjtmb3IoYT1hLmVudGFuZ2xlbWVudHM7Yzspe3ZhciBkPTMxLWxjKGMpLGU9MTw8ZDtlJmJ8YVtkXSZiJiYoYVtkXXw9Yik7YyY9fmV9fXZhciBFPTA7ZnVuY3Rpb24gemMoYSl7YSY9LWE7cmV0dXJuIDE8YT80PGE/MCE9PShhJjI2ODQzNTQ1NSk/MTY6NTM2ODcwOTEyOjQ6MX1cbnZhciBBYyxCYyxDYyxEYyxFYyxGYz0hMSxHYz1bXSxIYz1udWxsLEljPW51bGwsSmM9bnVsbCxLYz1uZXcgTWFwLExjPW5ldyBNYXAsTWM9W10sTmM9XCJtb3VzZWRvd24gbW91c2V1cCB0b3VjaGNhbmNlbCB0b3VjaGVuZCB0b3VjaHN0YXJ0IGF1eGNsaWNrIGRibGNsaWNrIHBvaW50ZXJjYW5jZWwgcG9pbnRlcmRvd24gcG9pbnRlcnVwIGRyYWdlbmQgZHJhZ3N0YXJ0IGRyb3AgY29tcG9zaXRpb25lbmQgY29tcG9zaXRpb25zdGFydCBrZXlkb3duIGtleXByZXNzIGtleXVwIGlucHV0IHRleHRJbnB1dCBjb3B5IGN1dCBwYXN0ZSBjbGljayBjaGFuZ2UgY29udGV4dG1lbnUgcmVzZXQgc3VibWl0XCIuc3BsaXQoXCIgXCIpO1xuZnVuY3Rpb24gT2MoYSxiKXtzd2l0Y2goYSl7Y2FzZSBcImZvY3VzaW5cIjpjYXNlIFwiZm9jdXNvdXRcIjpIYz1udWxsO2JyZWFrO2Nhc2UgXCJkcmFnZW50ZXJcIjpjYXNlIFwiZHJhZ2xlYXZlXCI6SWM9bnVsbDticmVhaztjYXNlIFwibW91c2VvdmVyXCI6Y2FzZSBcIm1vdXNlb3V0XCI6SmM9bnVsbDticmVhaztjYXNlIFwicG9pbnRlcm92ZXJcIjpjYXNlIFwicG9pbnRlcm91dFwiOktjLmRlbGV0ZShiLnBvaW50ZXJJZCk7YnJlYWs7Y2FzZSBcImdvdHBvaW50ZXJjYXB0dXJlXCI6Y2FzZSBcImxvc3Rwb2ludGVyY2FwdHVyZVwiOkxjLmRlbGV0ZShiLnBvaW50ZXJJZCl9fVxuZnVuY3Rpb24gUGMoYSxiLGMsZCxlLGYpe2lmKG51bGw9PT1hfHxhLm5hdGl2ZUV2ZW50IT09ZilyZXR1cm4gYT17YmxvY2tlZE9uOmIsZG9tRXZlbnROYW1lOmMsZXZlbnRTeXN0ZW1GbGFnczpkLG5hdGl2ZUV2ZW50OmYsdGFyZ2V0Q29udGFpbmVyczpbZV19LG51bGwhPT1iJiYoYj16YihiKSxudWxsIT09YiYmQmMoYikpLGE7YS5ldmVudFN5c3RlbUZsYWdzfD1kO2I9YS50YXJnZXRDb250YWluZXJzO251bGwhPT1lJiYtMT09PWIuaW5kZXhPZihlKSYmYi5wdXNoKGUpO3JldHVybiBhfVxuZnVuY3Rpb24gUWMoYSxiLGMsZCxlKXtzd2l0Y2goYil7Y2FzZSBcImZvY3VzaW5cIjpyZXR1cm4gSGM9UGMoSGMsYSxiLGMsZCxlKSwhMDtjYXNlIFwiZHJhZ2VudGVyXCI6cmV0dXJuIEljPVBjKEljLGEsYixjLGQsZSksITA7Y2FzZSBcIm1vdXNlb3ZlclwiOnJldHVybiBKYz1QYyhKYyxhLGIsYyxkLGUpLCEwO2Nhc2UgXCJwb2ludGVyb3ZlclwiOnZhciBmPWUucG9pbnRlcklkO0tjLnNldChmLFBjKEtjLmdldChmKXx8bnVsbCxhLGIsYyxkLGUpKTtyZXR1cm4hMDtjYXNlIFwiZ290cG9pbnRlcmNhcHR1cmVcIjpyZXR1cm4gZj1lLnBvaW50ZXJJZCxMYy5zZXQoZixQYyhMYy5nZXQoZil8fG51bGwsYSxiLGMsZCxlKSksITB9cmV0dXJuITF9XG5mdW5jdGlvbiBSYyhhKXt2YXIgYj1TYyhhLnRhcmdldCk7aWYobnVsbCE9PWIpe3ZhciBjPVNiKGIpO2lmKG51bGwhPT1jKWlmKGI9Yy50YWcsMTM9PT1iKXtpZihiPVRiKGMpLG51bGwhPT1iKXthLmJsb2NrZWRPbj1iO0VjKGEucHJpb3JpdHksZnVuY3Rpb24oKXtDYyhjKX0pO3JldHVybn19ZWxzZSBpZigzPT09YiYmYy5zdGF0ZU5vZGUuY3VycmVudC5tZW1vaXplZFN0YXRlLmlzRGVoeWRyYXRlZCl7YS5ibG9ja2VkT249Mz09PWMudGFnP2Muc3RhdGVOb2RlLmNvbnRhaW5lckluZm86bnVsbDtyZXR1cm59fWEuYmxvY2tlZE9uPW51bGx9XG5mdW5jdGlvbiBUYyhhKXtpZihudWxsIT09YS5ibG9ja2VkT24pcmV0dXJuITE7Zm9yKHZhciBiPWEudGFyZ2V0Q29udGFpbmVyczswPGIubGVuZ3RoOyl7dmFyIGM9VWMoYS5kb21FdmVudE5hbWUsYS5ldmVudFN5c3RlbUZsYWdzLGJbMF0sYS5uYXRpdmVFdmVudCk7aWYobnVsbD09PWMpe2M9YS5uYXRpdmVFdmVudDt2YXIgZD1uZXcgYy5jb25zdHJ1Y3RvcihjLnR5cGUsYyk7dGI9ZDtjLnRhcmdldC5kaXNwYXRjaEV2ZW50KGQpO3RiPW51bGx9ZWxzZSByZXR1cm4gYj16YihjKSxudWxsIT09YiYmQmMoYiksYS5ibG9ja2VkT249YywhMTtiLnNoaWZ0KCl9cmV0dXJuITB9ZnVuY3Rpb24gVmMoYSxiLGMpe1RjKGEpJiZjLmRlbGV0ZShiKX1mdW5jdGlvbiBXYygpe0ZjPSExO251bGwhPT1IYyYmVGMoSGMpJiYoSGM9bnVsbCk7bnVsbCE9PUljJiZUYyhJYykmJihJYz1udWxsKTtudWxsIT09SmMmJlRjKEpjKSYmKEpjPW51bGwpO0tjLmZvckVhY2goVmMpO0xjLmZvckVhY2goVmMpfVxuZnVuY3Rpb24gWGMoYSxiKXthLmJsb2NrZWRPbj09PWImJihhLmJsb2NrZWRPbj1udWxsLEZjfHwoRmM9ITAsYmEudW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjayhiYS51bnN0YWJsZV9Ob3JtYWxQcmlvcml0eSxXYykpKX1cbmZ1bmN0aW9uIFljKGEpe2Z1bmN0aW9uIGIoYil7cmV0dXJuIFhjKGIsYSl9aWYoMDxHYy5sZW5ndGgpe1hjKEdjWzBdLGEpO2Zvcih2YXIgYz0xO2M8R2MubGVuZ3RoO2MrKyl7dmFyIGQ9R2NbY107ZC5ibG9ja2VkT249PT1hJiYoZC5ibG9ja2VkT249bnVsbCl9fW51bGwhPT1IYyYmWGMoSGMsYSk7bnVsbCE9PUljJiZYYyhJYyxhKTtudWxsIT09SmMmJlhjKEpjLGEpO0tjLmZvckVhY2goYik7TGMuZm9yRWFjaChiKTtmb3IoYz0wO2M8TWMubGVuZ3RoO2MrKylkPU1jW2NdLGQuYmxvY2tlZE9uPT09YSYmKGQuYmxvY2tlZE9uPW51bGwpO2Zvcig7MDxNYy5sZW5ndGgmJihjPU1jWzBdLG51bGw9PT1jLmJsb2NrZWRPbik7KVJjKGMpLG51bGw9PT1jLmJsb2NrZWRPbiYmTWMuc2hpZnQoKX12YXIgWmM9c2EuUmVhY3RDdXJyZW50QmF0Y2hDb25maWc7XG5mdW5jdGlvbiAkYyhhLGIsYyxkKXt2YXIgZT1FLGY9WmMudHJhbnNpdGlvbjtaYy50cmFuc2l0aW9uPW51bGw7dHJ5e0U9MSxhZChhLGIsYyxkKX1maW5hbGx5e0U9ZSxaYy50cmFuc2l0aW9uPWZ9fWZ1bmN0aW9uIGJkKGEsYixjLGQpe3ZhciBlPUUsZj1aYy50cmFuc2l0aW9uO1pjLnRyYW5zaXRpb249bnVsbDt0cnl7RT00LGFkKGEsYixjLGQpfWZpbmFsbHl7RT1lLFpjLnRyYW5zaXRpb249Zn19XG5mdW5jdGlvbiBhZChhLGIsYyxkKXt2YXIgZT1VYyhhLGIsYyxkKTtpZihudWxsPT09ZSljZChhLGIsZCxkZCxjKSxPYyhhLGQpO2Vsc2UgaWYoUWMoZSxhLGIsYyxkKSlkLnN0b3BQcm9wYWdhdGlvbigpO2Vsc2UgaWYoT2MoYSxkKSxiJjQmJi0xPE5jLmluZGV4T2YoYSkpe2Zvcig7bnVsbCE9PWU7KXt2YXIgZj16YihlKTtudWxsIT09ZiYmQWMoZik7Zj1VYyhhLGIsYyxkKTtudWxsPT09ZiYmY2QoYSxiLGQsZGQsYyk7aWYoZj09PWUpYnJlYWs7ZT1mfW51bGwhPT1lJiZkLnN0b3BQcm9wYWdhdGlvbigpfWVsc2UgY2QoYSxiLGQsbnVsbCxjKX12YXIgZGQ9bnVsbDtcbmZ1bmN0aW9uIFVjKGEsYixjLGQpe2RkPW51bGw7YT11YihkKTthPVNjKGEpO2lmKG51bGwhPT1hKWlmKGI9U2IoYSksbnVsbD09PWIpYT1udWxsO2Vsc2UgaWYoYz1iLnRhZywxMz09PWMpe2E9VGIoYik7aWYobnVsbCE9PWEpcmV0dXJuIGE7YT1udWxsfWVsc2UgaWYoMz09PWMpe2lmKGIuc3RhdGVOb2RlLmN1cnJlbnQubWVtb2l6ZWRTdGF0ZS5pc0RlaHlkcmF0ZWQpcmV0dXJuIDM9PT1iLnRhZz9iLnN0YXRlTm9kZS5jb250YWluZXJJbmZvOm51bGw7YT1udWxsfWVsc2UgYiE9PWEmJihhPW51bGwpO2RkPWE7cmV0dXJuIG51bGx9XG5mdW5jdGlvbiBlZChhKXtzd2l0Y2goYSl7Y2FzZSBcImNhbmNlbFwiOmNhc2UgXCJjbGlja1wiOmNhc2UgXCJjbG9zZVwiOmNhc2UgXCJjb250ZXh0bWVudVwiOmNhc2UgXCJjb3B5XCI6Y2FzZSBcImN1dFwiOmNhc2UgXCJhdXhjbGlja1wiOmNhc2UgXCJkYmxjbGlja1wiOmNhc2UgXCJkcmFnZW5kXCI6Y2FzZSBcImRyYWdzdGFydFwiOmNhc2UgXCJkcm9wXCI6Y2FzZSBcImZvY3VzaW5cIjpjYXNlIFwiZm9jdXNvdXRcIjpjYXNlIFwiaW5wdXRcIjpjYXNlIFwiaW52YWxpZFwiOmNhc2UgXCJrZXlkb3duXCI6Y2FzZSBcImtleXByZXNzXCI6Y2FzZSBcImtleXVwXCI6Y2FzZSBcIm1vdXNlZG93blwiOmNhc2UgXCJtb3VzZXVwXCI6Y2FzZSBcInBhc3RlXCI6Y2FzZSBcInBhdXNlXCI6Y2FzZSBcInBsYXlcIjpjYXNlIFwicG9pbnRlcmNhbmNlbFwiOmNhc2UgXCJwb2ludGVyZG93blwiOmNhc2UgXCJwb2ludGVydXBcIjpjYXNlIFwicmF0ZWNoYW5nZVwiOmNhc2UgXCJyZXNldFwiOmNhc2UgXCJyZXNpemVcIjpjYXNlIFwic2Vla2VkXCI6Y2FzZSBcInN1Ym1pdFwiOmNhc2UgXCJ0b3VjaGNhbmNlbFwiOmNhc2UgXCJ0b3VjaGVuZFwiOmNhc2UgXCJ0b3VjaHN0YXJ0XCI6Y2FzZSBcInZvbHVtZWNoYW5nZVwiOmNhc2UgXCJjaGFuZ2VcIjpjYXNlIFwic2VsZWN0aW9uY2hhbmdlXCI6Y2FzZSBcInRleHRJbnB1dFwiOmNhc2UgXCJjb21wb3NpdGlvbnN0YXJ0XCI6Y2FzZSBcImNvbXBvc2l0aW9uZW5kXCI6Y2FzZSBcImNvbXBvc2l0aW9udXBkYXRlXCI6Y2FzZSBcImJlZm9yZWJsdXJcIjpjYXNlIFwiYWZ0ZXJibHVyXCI6Y2FzZSBcImJlZm9yZWlucHV0XCI6Y2FzZSBcImJsdXJcIjpjYXNlIFwiZnVsbHNjcmVlbmNoYW5nZVwiOmNhc2UgXCJmb2N1c1wiOmNhc2UgXCJoYXNoY2hhbmdlXCI6Y2FzZSBcInBvcHN0YXRlXCI6Y2FzZSBcInNlbGVjdFwiOmNhc2UgXCJzZWxlY3RzdGFydFwiOnJldHVybiAxO2Nhc2UgXCJkcmFnXCI6Y2FzZSBcImRyYWdlbnRlclwiOmNhc2UgXCJkcmFnZXhpdFwiOmNhc2UgXCJkcmFnbGVhdmVcIjpjYXNlIFwiZHJhZ292ZXJcIjpjYXNlIFwibW91c2Vtb3ZlXCI6Y2FzZSBcIm1vdXNlb3V0XCI6Y2FzZSBcIm1vdXNlb3ZlclwiOmNhc2UgXCJwb2ludGVybW92ZVwiOmNhc2UgXCJwb2ludGVyb3V0XCI6Y2FzZSBcInBvaW50ZXJvdmVyXCI6Y2FzZSBcInNjcm9sbFwiOmNhc2UgXCJ0b2dnbGVcIjpjYXNlIFwidG91Y2htb3ZlXCI6Y2FzZSBcIndoZWVsXCI6Y2FzZSBcIm1vdXNlZW50ZXJcIjpjYXNlIFwibW91c2VsZWF2ZVwiOmNhc2UgXCJwb2ludGVyZW50ZXJcIjpjYXNlIFwicG9pbnRlcmxlYXZlXCI6cmV0dXJuIDQ7XG5jYXNlIFwibWVzc2FnZVwiOnN3aXRjaChiYygpKXtjYXNlIGNjOnJldHVybiAxO2Nhc2UgZGM6cmV0dXJuIDQ7Y2FzZSBlYzpjYXNlIGZjOnJldHVybiAxNjtjYXNlIGdjOnJldHVybiA1MzY4NzA5MTI7ZGVmYXVsdDpyZXR1cm4gMTZ9ZGVmYXVsdDpyZXR1cm4gMTZ9fXZhciBmZD1udWxsLGdkPW51bGwsaGQ9bnVsbDtmdW5jdGlvbiBpZCgpe2lmKGhkKXJldHVybiBoZDt2YXIgYSxiPWdkLGM9Yi5sZW5ndGgsZCxlPVwidmFsdWVcImluIGZkP2ZkLnZhbHVlOmZkLnRleHRDb250ZW50LGY9ZS5sZW5ndGg7Zm9yKGE9MDthPGMmJmJbYV09PT1lW2FdO2ErKyk7dmFyIGc9Yy1hO2ZvcihkPTE7ZDw9ZyYmYltjLWRdPT09ZVtmLWRdO2QrKyk7cmV0dXJuIGhkPWUuc2xpY2UoYSwxPGQ/MS1kOnZvaWQgMCl9XG5mdW5jdGlvbiBqZChhKXt2YXIgYj1hLmtleUNvZGU7XCJjaGFyQ29kZVwiaW4gYT8oYT1hLmNoYXJDb2RlLDA9PT1hJiYxMz09PWImJihhPTEzKSk6YT1iOzEwPT09YSYmKGE9MTMpO3JldHVybiAzMjw9YXx8MTM9PT1hP2E6MH1mdW5jdGlvbiBrZCgpe3JldHVybiEwfWZ1bmN0aW9uIGxkKCl7cmV0dXJuITF9XG5mdW5jdGlvbiBtZChhKXtmdW5jdGlvbiBiKGIsZCxlLGYsZyl7dGhpcy5fcmVhY3ROYW1lPWI7dGhpcy5fdGFyZ2V0SW5zdD1lO3RoaXMudHlwZT1kO3RoaXMubmF0aXZlRXZlbnQ9Zjt0aGlzLnRhcmdldD1nO3RoaXMuY3VycmVudFRhcmdldD1udWxsO2Zvcih2YXIgYyBpbiBhKWEuaGFzT3duUHJvcGVydHkoYykmJihiPWFbY10sdGhpc1tjXT1iP2IoZik6ZltjXSk7dGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQ9KG51bGwhPWYuZGVmYXVsdFByZXZlbnRlZD9mLmRlZmF1bHRQcmV2ZW50ZWQ6ITE9PT1mLnJldHVyblZhbHVlKT9rZDpsZDt0aGlzLmlzUHJvcGFnYXRpb25TdG9wcGVkPWxkO3JldHVybiB0aGlzfUEoYi5wcm90b3R5cGUse3ByZXZlbnREZWZhdWx0OmZ1bmN0aW9uKCl7dGhpcy5kZWZhdWx0UHJldmVudGVkPSEwO3ZhciBhPXRoaXMubmF0aXZlRXZlbnQ7YSYmKGEucHJldmVudERlZmF1bHQ/YS5wcmV2ZW50RGVmYXVsdCgpOlwidW5rbm93blwiIT09dHlwZW9mIGEucmV0dXJuVmFsdWUmJlxuKGEucmV0dXJuVmFsdWU9ITEpLHRoaXMuaXNEZWZhdWx0UHJldmVudGVkPWtkKX0sc3RvcFByb3BhZ2F0aW9uOmZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5uYXRpdmVFdmVudDthJiYoYS5zdG9wUHJvcGFnYXRpb24/YS5zdG9wUHJvcGFnYXRpb24oKTpcInVua25vd25cIiE9PXR5cGVvZiBhLmNhbmNlbEJ1YmJsZSYmKGEuY2FuY2VsQnViYmxlPSEwKSx0aGlzLmlzUHJvcGFnYXRpb25TdG9wcGVkPWtkKX0scGVyc2lzdDpmdW5jdGlvbigpe30saXNQZXJzaXN0ZW50OmtkfSk7cmV0dXJuIGJ9XG52YXIgbmQ9e2V2ZW50UGhhc2U6MCxidWJibGVzOjAsY2FuY2VsYWJsZTowLHRpbWVTdGFtcDpmdW5jdGlvbihhKXtyZXR1cm4gYS50aW1lU3RhbXB8fERhdGUubm93KCl9LGRlZmF1bHRQcmV2ZW50ZWQ6MCxpc1RydXN0ZWQ6MH0sb2Q9bWQobmQpLHBkPUEoe30sbmQse3ZpZXc6MCxkZXRhaWw6MH0pLHFkPW1kKHBkKSxyZCxzZCx0ZCx2ZD1BKHt9LHBkLHtzY3JlZW5YOjAsc2NyZWVuWTowLGNsaWVudFg6MCxjbGllbnRZOjAscGFnZVg6MCxwYWdlWTowLGN0cmxLZXk6MCxzaGlmdEtleTowLGFsdEtleTowLG1ldGFLZXk6MCxnZXRNb2RpZmllclN0YXRlOnVkLGJ1dHRvbjowLGJ1dHRvbnM6MCxyZWxhdGVkVGFyZ2V0OmZ1bmN0aW9uKGEpe3JldHVybiB2b2lkIDA9PT1hLnJlbGF0ZWRUYXJnZXQ/YS5mcm9tRWxlbWVudD09PWEuc3JjRWxlbWVudD9hLnRvRWxlbWVudDphLmZyb21FbGVtZW50OmEucmVsYXRlZFRhcmdldH0sbW92ZW1lbnRYOmZ1bmN0aW9uKGEpe2lmKFwibW92ZW1lbnRYXCJpblxuYSlyZXR1cm4gYS5tb3ZlbWVudFg7YSE9PXRkJiYodGQmJlwibW91c2Vtb3ZlXCI9PT1hLnR5cGU/KHJkPWEuc2NyZWVuWC10ZC5zY3JlZW5YLHNkPWEuc2NyZWVuWS10ZC5zY3JlZW5ZKTpzZD1yZD0wLHRkPWEpO3JldHVybiByZH0sbW92ZW1lbnRZOmZ1bmN0aW9uKGEpe3JldHVyblwibW92ZW1lbnRZXCJpbiBhP2EubW92ZW1lbnRZOnNkfX0pLHdkPW1kKHZkKSx4ZD1BKHt9LHZkLHtkYXRhVHJhbnNmZXI6MH0pLHlkPW1kKHhkKSx6ZD1BKHt9LHBkLHtyZWxhdGVkVGFyZ2V0OjB9KSxBZD1tZCh6ZCksQmQ9QSh7fSxuZCx7YW5pbWF0aW9uTmFtZTowLGVsYXBzZWRUaW1lOjAscHNldWRvRWxlbWVudDowfSksQ2Q9bWQoQmQpLERkPUEoe30sbmQse2NsaXBib2FyZERhdGE6ZnVuY3Rpb24oYSl7cmV0dXJuXCJjbGlwYm9hcmREYXRhXCJpbiBhP2EuY2xpcGJvYXJkRGF0YTp3aW5kb3cuY2xpcGJvYXJkRGF0YX19KSxFZD1tZChEZCksRmQ9QSh7fSxuZCx7ZGF0YTowfSksR2Q9bWQoRmQpLEhkPXtFc2M6XCJFc2NhcGVcIixcblNwYWNlYmFyOlwiIFwiLExlZnQ6XCJBcnJvd0xlZnRcIixVcDpcIkFycm93VXBcIixSaWdodDpcIkFycm93UmlnaHRcIixEb3duOlwiQXJyb3dEb3duXCIsRGVsOlwiRGVsZXRlXCIsV2luOlwiT1NcIixNZW51OlwiQ29udGV4dE1lbnVcIixBcHBzOlwiQ29udGV4dE1lbnVcIixTY3JvbGw6XCJTY3JvbGxMb2NrXCIsTW96UHJpbnRhYmxlS2V5OlwiVW5pZGVudGlmaWVkXCJ9LElkPXs4OlwiQmFja3NwYWNlXCIsOTpcIlRhYlwiLDEyOlwiQ2xlYXJcIiwxMzpcIkVudGVyXCIsMTY6XCJTaGlmdFwiLDE3OlwiQ29udHJvbFwiLDE4OlwiQWx0XCIsMTk6XCJQYXVzZVwiLDIwOlwiQ2Fwc0xvY2tcIiwyNzpcIkVzY2FwZVwiLDMyOlwiIFwiLDMzOlwiUGFnZVVwXCIsMzQ6XCJQYWdlRG93blwiLDM1OlwiRW5kXCIsMzY6XCJIb21lXCIsMzc6XCJBcnJvd0xlZnRcIiwzODpcIkFycm93VXBcIiwzOTpcIkFycm93UmlnaHRcIiw0MDpcIkFycm93RG93blwiLDQ1OlwiSW5zZXJ0XCIsNDY6XCJEZWxldGVcIiwxMTI6XCJGMVwiLDExMzpcIkYyXCIsMTE0OlwiRjNcIiwxMTU6XCJGNFwiLDExNjpcIkY1XCIsMTE3OlwiRjZcIiwxMTg6XCJGN1wiLFxuMTE5OlwiRjhcIiwxMjA6XCJGOVwiLDEyMTpcIkYxMFwiLDEyMjpcIkYxMVwiLDEyMzpcIkYxMlwiLDE0NDpcIk51bUxvY2tcIiwxNDU6XCJTY3JvbGxMb2NrXCIsMjI0OlwiTWV0YVwifSxKZD17QWx0OlwiYWx0S2V5XCIsQ29udHJvbDpcImN0cmxLZXlcIixNZXRhOlwibWV0YUtleVwiLFNoaWZ0Olwic2hpZnRLZXlcIn07ZnVuY3Rpb24gS2QoYSl7dmFyIGI9dGhpcy5uYXRpdmVFdmVudDtyZXR1cm4gYi5nZXRNb2RpZmllclN0YXRlP2IuZ2V0TW9kaWZpZXJTdGF0ZShhKTooYT1KZFthXSk/ISFiW2FdOiExfWZ1bmN0aW9uIHVkKCl7cmV0dXJuIEtkfVxudmFyIExkPUEoe30scGQse2tleTpmdW5jdGlvbihhKXtpZihhLmtleSl7dmFyIGI9SGRbYS5rZXldfHxhLmtleTtpZihcIlVuaWRlbnRpZmllZFwiIT09YilyZXR1cm4gYn1yZXR1cm5cImtleXByZXNzXCI9PT1hLnR5cGU/KGE9amQoYSksMTM9PT1hP1wiRW50ZXJcIjpTdHJpbmcuZnJvbUNoYXJDb2RlKGEpKTpcImtleWRvd25cIj09PWEudHlwZXx8XCJrZXl1cFwiPT09YS50eXBlP0lkW2Eua2V5Q29kZV18fFwiVW5pZGVudGlmaWVkXCI6XCJcIn0sY29kZTowLGxvY2F0aW9uOjAsY3RybEtleTowLHNoaWZ0S2V5OjAsYWx0S2V5OjAsbWV0YUtleTowLHJlcGVhdDowLGxvY2FsZTowLGdldE1vZGlmaWVyU3RhdGU6dWQsY2hhckNvZGU6ZnVuY3Rpb24oYSl7cmV0dXJuXCJrZXlwcmVzc1wiPT09YS50eXBlP2pkKGEpOjB9LGtleUNvZGU6ZnVuY3Rpb24oYSl7cmV0dXJuXCJrZXlkb3duXCI9PT1hLnR5cGV8fFwia2V5dXBcIj09PWEudHlwZT9hLmtleUNvZGU6MH0sd2hpY2g6ZnVuY3Rpb24oYSl7cmV0dXJuXCJrZXlwcmVzc1wiPT09XG5hLnR5cGU/amQoYSk6XCJrZXlkb3duXCI9PT1hLnR5cGV8fFwia2V5dXBcIj09PWEudHlwZT9hLmtleUNvZGU6MH19KSxNZD1tZChMZCksTmQ9QSh7fSx2ZCx7cG9pbnRlcklkOjAsd2lkdGg6MCxoZWlnaHQ6MCxwcmVzc3VyZTowLHRhbmdlbnRpYWxQcmVzc3VyZTowLHRpbHRYOjAsdGlsdFk6MCx0d2lzdDowLHBvaW50ZXJUeXBlOjAsaXNQcmltYXJ5OjB9KSxPZD1tZChOZCksUGQ9QSh7fSxwZCx7dG91Y2hlczowLHRhcmdldFRvdWNoZXM6MCxjaGFuZ2VkVG91Y2hlczowLGFsdEtleTowLG1ldGFLZXk6MCxjdHJsS2V5OjAsc2hpZnRLZXk6MCxnZXRNb2RpZmllclN0YXRlOnVkfSksUWQ9bWQoUGQpLFJkPUEoe30sbmQse3Byb3BlcnR5TmFtZTowLGVsYXBzZWRUaW1lOjAscHNldWRvRWxlbWVudDowfSksU2Q9bWQoUmQpLFRkPUEoe30sdmQse2RlbHRhWDpmdW5jdGlvbihhKXtyZXR1cm5cImRlbHRhWFwiaW4gYT9hLmRlbHRhWDpcIndoZWVsRGVsdGFYXCJpbiBhPy1hLndoZWVsRGVsdGFYOjB9LFxuZGVsdGFZOmZ1bmN0aW9uKGEpe3JldHVyblwiZGVsdGFZXCJpbiBhP2EuZGVsdGFZOlwid2hlZWxEZWx0YVlcImluIGE/LWEud2hlZWxEZWx0YVk6XCJ3aGVlbERlbHRhXCJpbiBhPy1hLndoZWVsRGVsdGE6MH0sZGVsdGFaOjAsZGVsdGFNb2RlOjB9KSxVZD1tZChUZCksVmQ9WzksMTMsMjcsMzJdLFdkPWhhJiZcIkNvbXBvc2l0aW9uRXZlbnRcImluIHdpbmRvdyxYZD1udWxsO2hhJiZcImRvY3VtZW50TW9kZVwiaW4gZG9jdW1lbnQmJihYZD1kb2N1bWVudC5kb2N1bWVudE1vZGUpO3ZhciBZZD1oYSYmXCJUZXh0RXZlbnRcImluIHdpbmRvdyYmIVhkLFpkPWhhJiYoIVdkfHxYZCYmODxYZCYmMTE+PVhkKSwkZD1TdHJpbmcuZnJvbUNoYXJDb2RlKDMyKSxhZT0hMTtcbmZ1bmN0aW9uIGJlKGEsYil7c3dpdGNoKGEpe2Nhc2UgXCJrZXl1cFwiOnJldHVybi0xIT09VmQuaW5kZXhPZihiLmtleUNvZGUpO2Nhc2UgXCJrZXlkb3duXCI6cmV0dXJuIDIyOSE9PWIua2V5Q29kZTtjYXNlIFwia2V5cHJlc3NcIjpjYXNlIFwibW91c2Vkb3duXCI6Y2FzZSBcImZvY3Vzb3V0XCI6cmV0dXJuITA7ZGVmYXVsdDpyZXR1cm4hMX19ZnVuY3Rpb24gY2UoYSl7YT1hLmRldGFpbDtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJlwiZGF0YVwiaW4gYT9hLmRhdGE6bnVsbH12YXIgZGU9ITE7ZnVuY3Rpb24gZWUoYSxiKXtzd2l0Y2goYSl7Y2FzZSBcImNvbXBvc2l0aW9uZW5kXCI6cmV0dXJuIGNlKGIpO2Nhc2UgXCJrZXlwcmVzc1wiOmlmKDMyIT09Yi53aGljaClyZXR1cm4gbnVsbDthZT0hMDtyZXR1cm4gJGQ7Y2FzZSBcInRleHRJbnB1dFwiOnJldHVybiBhPWIuZGF0YSxhPT09JGQmJmFlP251bGw6YTtkZWZhdWx0OnJldHVybiBudWxsfX1cbmZ1bmN0aW9uIGZlKGEsYil7aWYoZGUpcmV0dXJuXCJjb21wb3NpdGlvbmVuZFwiPT09YXx8IVdkJiZiZShhLGIpPyhhPWlkKCksaGQ9Z2Q9ZmQ9bnVsbCxkZT0hMSxhKTpudWxsO3N3aXRjaChhKXtjYXNlIFwicGFzdGVcIjpyZXR1cm4gbnVsbDtjYXNlIFwia2V5cHJlc3NcIjppZighKGIuY3RybEtleXx8Yi5hbHRLZXl8fGIubWV0YUtleSl8fGIuY3RybEtleSYmYi5hbHRLZXkpe2lmKGIuY2hhciYmMTxiLmNoYXIubGVuZ3RoKXJldHVybiBiLmNoYXI7aWYoYi53aGljaClyZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZShiLndoaWNoKX1yZXR1cm4gbnVsbDtjYXNlIFwiY29tcG9zaXRpb25lbmRcIjpyZXR1cm4gWmQmJlwia29cIiE9PWIubG9jYWxlP251bGw6Yi5kYXRhO2RlZmF1bHQ6cmV0dXJuIG51bGx9fVxudmFyIGdlPXtjb2xvcjohMCxkYXRlOiEwLGRhdGV0aW1lOiEwLFwiZGF0ZXRpbWUtbG9jYWxcIjohMCxlbWFpbDohMCxtb250aDohMCxudW1iZXI6ITAscGFzc3dvcmQ6ITAscmFuZ2U6ITAsc2VhcmNoOiEwLHRlbDohMCx0ZXh0OiEwLHRpbWU6ITAsdXJsOiEwLHdlZWs6ITB9O2Z1bmN0aW9uIGhlKGEpe3ZhciBiPWEmJmEubm9kZU5hbWUmJmEubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtyZXR1cm5cImlucHV0XCI9PT1iPyEhZ2VbYS50eXBlXTpcInRleHRhcmVhXCI9PT1iPyEwOiExfWZ1bmN0aW9uIGllKGEsYixjLGQpe0JiKGQpO2I9amUoYixcIm9uQ2hhbmdlXCIpOzA8Yi5sZW5ndGgmJihjPW5ldyBvZChcIm9uQ2hhbmdlXCIsXCJjaGFuZ2VcIixudWxsLGMsZCksYS5wdXNoKHtldmVudDpjLGxpc3RlbmVyczpifSkpfXZhciBrZT1udWxsLGxlPW51bGw7ZnVuY3Rpb24gbWUoYSl7bmUoYSwwKX1mdW5jdGlvbiBvZShhKXt2YXIgYj1wZShhKTtpZihVYShiKSlyZXR1cm4gYX1cbmZ1bmN0aW9uIHFlKGEsYil7aWYoXCJjaGFuZ2VcIj09PWEpcmV0dXJuIGJ9dmFyIHJlPSExO2lmKGhhKXt2YXIgc2U7aWYoaGEpe3ZhciB0ZT1cIm9uaW5wdXRcImluIGRvY3VtZW50O2lmKCF0ZSl7dmFyIHVlPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7dWUuc2V0QXR0cmlidXRlKFwib25pbnB1dFwiLFwicmV0dXJuO1wiKTt0ZT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgdWUub25pbnB1dH1zZT10ZX1lbHNlIHNlPSExO3JlPXNlJiYoIWRvY3VtZW50LmRvY3VtZW50TW9kZXx8OTxkb2N1bWVudC5kb2N1bWVudE1vZGUpfWZ1bmN0aW9uIHZlKCl7a2UmJihrZS5kZXRhY2hFdmVudChcIm9ucHJvcGVydHljaGFuZ2VcIix3ZSksbGU9a2U9bnVsbCl9ZnVuY3Rpb24gd2UoYSl7aWYoXCJ2YWx1ZVwiPT09YS5wcm9wZXJ0eU5hbWUmJm9lKGxlKSl7dmFyIGI9W107aWUoYixsZSxhLHViKGEpKTtHYihtZSxiKX19XG5mdW5jdGlvbiB4ZShhLGIsYyl7XCJmb2N1c2luXCI9PT1hPyh2ZSgpLGtlPWIsbGU9YyxrZS5hdHRhY2hFdmVudChcIm9ucHJvcGVydHljaGFuZ2VcIix3ZSkpOlwiZm9jdXNvdXRcIj09PWEmJnZlKCl9ZnVuY3Rpb24geWUoYSl7aWYoXCJzZWxlY3Rpb25jaGFuZ2VcIj09PWF8fFwia2V5dXBcIj09PWF8fFwia2V5ZG93blwiPT09YSlyZXR1cm4gb2UobGUpfWZ1bmN0aW9uIHplKGEsYil7aWYoXCJjbGlja1wiPT09YSlyZXR1cm4gb2UoYil9ZnVuY3Rpb24gQWUoYSxiKXtpZihcImlucHV0XCI9PT1hfHxcImNoYW5nZVwiPT09YSlyZXR1cm4gb2UoYil9ZnVuY3Rpb24gQmUoYSxiKXtyZXR1cm4gYT09PWImJigwIT09YXx8MS9hPT09MS9iKXx8YSE9PWEmJmIhPT1ifXZhciBDZT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgT2JqZWN0LmlzP09iamVjdC5pczpCZTtcbmZ1bmN0aW9uIERlKGEsYil7aWYoQ2UoYSxiKSlyZXR1cm4hMDtpZihcIm9iamVjdFwiIT09dHlwZW9mIGF8fG51bGw9PT1hfHxcIm9iamVjdFwiIT09dHlwZW9mIGJ8fG51bGw9PT1iKXJldHVybiExO3ZhciBjPU9iamVjdC5rZXlzKGEpLGQ9T2JqZWN0LmtleXMoYik7aWYoYy5sZW5ndGghPT1kLmxlbmd0aClyZXR1cm4hMTtmb3IoZD0wO2Q8Yy5sZW5ndGg7ZCsrKXt2YXIgZT1jW2RdO2lmKCFpYS5jYWxsKGIsZSl8fCFDZShhW2VdLGJbZV0pKXJldHVybiExfXJldHVybiEwfWZ1bmN0aW9uIEVlKGEpe2Zvcig7YSYmYS5maXJzdENoaWxkOylhPWEuZmlyc3RDaGlsZDtyZXR1cm4gYX1cbmZ1bmN0aW9uIEZlKGEsYil7dmFyIGM9RWUoYSk7YT0wO2Zvcih2YXIgZDtjOyl7aWYoMz09PWMubm9kZVR5cGUpe2Q9YStjLnRleHRDb250ZW50Lmxlbmd0aDtpZihhPD1iJiZkPj1iKXJldHVybntub2RlOmMsb2Zmc2V0OmItYX07YT1kfWE6e2Zvcig7Yzspe2lmKGMubmV4dFNpYmxpbmcpe2M9Yy5uZXh0U2libGluZzticmVhayBhfWM9Yy5wYXJlbnROb2RlfWM9dm9pZCAwfWM9RWUoYyl9fWZ1bmN0aW9uIEdlKGEsYil7cmV0dXJuIGEmJmI/YT09PWI/ITA6YSYmMz09PWEubm9kZVR5cGU/ITE6YiYmMz09PWIubm9kZVR5cGU/R2UoYSxiLnBhcmVudE5vZGUpOlwiY29udGFpbnNcImluIGE/YS5jb250YWlucyhiKTphLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uPyEhKGEuY29tcGFyZURvY3VtZW50UG9zaXRpb24oYikmMTYpOiExOiExfVxuZnVuY3Rpb24gSGUoKXtmb3IodmFyIGE9d2luZG93LGI9VmEoKTtiIGluc3RhbmNlb2YgYS5IVE1MSUZyYW1lRWxlbWVudDspe3RyeXt2YXIgYz1cInN0cmluZ1wiPT09dHlwZW9mIGIuY29udGVudFdpbmRvdy5sb2NhdGlvbi5ocmVmfWNhdGNoKGQpe2M9ITF9aWYoYylhPWIuY29udGVudFdpbmRvdztlbHNlIGJyZWFrO2I9VmEoYS5kb2N1bWVudCl9cmV0dXJuIGJ9ZnVuY3Rpb24gSWUoYSl7dmFyIGI9YSYmYS5ub2RlTmFtZSYmYS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO3JldHVybiBiJiYoXCJpbnB1dFwiPT09YiYmKFwidGV4dFwiPT09YS50eXBlfHxcInNlYXJjaFwiPT09YS50eXBlfHxcInRlbFwiPT09YS50eXBlfHxcInVybFwiPT09YS50eXBlfHxcInBhc3N3b3JkXCI9PT1hLnR5cGUpfHxcInRleHRhcmVhXCI9PT1ifHxcInRydWVcIj09PWEuY29udGVudEVkaXRhYmxlKX1cbmZ1bmN0aW9uIEplKGEpe3ZhciBiPUhlKCksYz1hLmZvY3VzZWRFbGVtLGQ9YS5zZWxlY3Rpb25SYW5nZTtpZihiIT09YyYmYyYmYy5vd25lckRvY3VtZW50JiZHZShjLm93bmVyRG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LGMpKXtpZihudWxsIT09ZCYmSWUoYykpaWYoYj1kLnN0YXJ0LGE9ZC5lbmQsdm9pZCAwPT09YSYmKGE9YiksXCJzZWxlY3Rpb25TdGFydFwiaW4gYyljLnNlbGVjdGlvblN0YXJ0PWIsYy5zZWxlY3Rpb25FbmQ9TWF0aC5taW4oYSxjLnZhbHVlLmxlbmd0aCk7ZWxzZSBpZihhPShiPWMub3duZXJEb2N1bWVudHx8ZG9jdW1lbnQpJiZiLmRlZmF1bHRWaWV3fHx3aW5kb3csYS5nZXRTZWxlY3Rpb24pe2E9YS5nZXRTZWxlY3Rpb24oKTt2YXIgZT1jLnRleHRDb250ZW50Lmxlbmd0aCxmPU1hdGgubWluKGQuc3RhcnQsZSk7ZD12b2lkIDA9PT1kLmVuZD9mOk1hdGgubWluKGQuZW5kLGUpOyFhLmV4dGVuZCYmZj5kJiYoZT1kLGQ9ZixmPWUpO2U9RmUoYyxmKTt2YXIgZz1GZShjLFxuZCk7ZSYmZyYmKDEhPT1hLnJhbmdlQ291bnR8fGEuYW5jaG9yTm9kZSE9PWUubm9kZXx8YS5hbmNob3JPZmZzZXQhPT1lLm9mZnNldHx8YS5mb2N1c05vZGUhPT1nLm5vZGV8fGEuZm9jdXNPZmZzZXQhPT1nLm9mZnNldCkmJihiPWIuY3JlYXRlUmFuZ2UoKSxiLnNldFN0YXJ0KGUubm9kZSxlLm9mZnNldCksYS5yZW1vdmVBbGxSYW5nZXMoKSxmPmQ/KGEuYWRkUmFuZ2UoYiksYS5leHRlbmQoZy5ub2RlLGcub2Zmc2V0KSk6KGIuc2V0RW5kKGcubm9kZSxnLm9mZnNldCksYS5hZGRSYW5nZShiKSkpfWI9W107Zm9yKGE9YzthPWEucGFyZW50Tm9kZTspMT09PWEubm9kZVR5cGUmJmIucHVzaCh7ZWxlbWVudDphLGxlZnQ6YS5zY3JvbGxMZWZ0LHRvcDphLnNjcm9sbFRvcH0pO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBjLmZvY3VzJiZjLmZvY3VzKCk7Zm9yKGM9MDtjPGIubGVuZ3RoO2MrKylhPWJbY10sYS5lbGVtZW50LnNjcm9sbExlZnQ9YS5sZWZ0LGEuZWxlbWVudC5zY3JvbGxUb3A9YS50b3B9fVxudmFyIEtlPWhhJiZcImRvY3VtZW50TW9kZVwiaW4gZG9jdW1lbnQmJjExPj1kb2N1bWVudC5kb2N1bWVudE1vZGUsTGU9bnVsbCxNZT1udWxsLE5lPW51bGwsT2U9ITE7XG5mdW5jdGlvbiBQZShhLGIsYyl7dmFyIGQ9Yy53aW5kb3c9PT1jP2MuZG9jdW1lbnQ6OT09PWMubm9kZVR5cGU/YzpjLm93bmVyRG9jdW1lbnQ7T2V8fG51bGw9PUxlfHxMZSE9PVZhKGQpfHwoZD1MZSxcInNlbGVjdGlvblN0YXJ0XCJpbiBkJiZJZShkKT9kPXtzdGFydDpkLnNlbGVjdGlvblN0YXJ0LGVuZDpkLnNlbGVjdGlvbkVuZH06KGQ9KGQub3duZXJEb2N1bWVudCYmZC5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3fHx3aW5kb3cpLmdldFNlbGVjdGlvbigpLGQ9e2FuY2hvck5vZGU6ZC5hbmNob3JOb2RlLGFuY2hvck9mZnNldDpkLmFuY2hvck9mZnNldCxmb2N1c05vZGU6ZC5mb2N1c05vZGUsZm9jdXNPZmZzZXQ6ZC5mb2N1c09mZnNldH0pLE5lJiZEZShOZSxkKXx8KE5lPWQsZD1qZShNZSxcIm9uU2VsZWN0XCIpLDA8ZC5sZW5ndGgmJihiPW5ldyBvZChcIm9uU2VsZWN0XCIsXCJzZWxlY3RcIixudWxsLGIsYyksYS5wdXNoKHtldmVudDpiLGxpc3RlbmVyczpkfSksYi50YXJnZXQ9TGUpKSl9XG5mdW5jdGlvbiBRZShhLGIpe3ZhciBjPXt9O2NbYS50b0xvd2VyQ2FzZSgpXT1iLnRvTG93ZXJDYXNlKCk7Y1tcIldlYmtpdFwiK2FdPVwid2Via2l0XCIrYjtjW1wiTW96XCIrYV09XCJtb3pcIitiO3JldHVybiBjfXZhciBSZT17YW5pbWF0aW9uZW5kOlFlKFwiQW5pbWF0aW9uXCIsXCJBbmltYXRpb25FbmRcIiksYW5pbWF0aW9uaXRlcmF0aW9uOlFlKFwiQW5pbWF0aW9uXCIsXCJBbmltYXRpb25JdGVyYXRpb25cIiksYW5pbWF0aW9uc3RhcnQ6UWUoXCJBbmltYXRpb25cIixcIkFuaW1hdGlvblN0YXJ0XCIpLHRyYW5zaXRpb25lbmQ6UWUoXCJUcmFuc2l0aW9uXCIsXCJUcmFuc2l0aW9uRW5kXCIpfSxTZT17fSxUZT17fTtcbmhhJiYoVGU9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKS5zdHlsZSxcIkFuaW1hdGlvbkV2ZW50XCJpbiB3aW5kb3d8fChkZWxldGUgUmUuYW5pbWF0aW9uZW5kLmFuaW1hdGlvbixkZWxldGUgUmUuYW5pbWF0aW9uaXRlcmF0aW9uLmFuaW1hdGlvbixkZWxldGUgUmUuYW5pbWF0aW9uc3RhcnQuYW5pbWF0aW9uKSxcIlRyYW5zaXRpb25FdmVudFwiaW4gd2luZG93fHxkZWxldGUgUmUudHJhbnNpdGlvbmVuZC50cmFuc2l0aW9uKTtmdW5jdGlvbiBVZShhKXtpZihTZVthXSlyZXR1cm4gU2VbYV07aWYoIVJlW2FdKXJldHVybiBhO3ZhciBiPVJlW2FdLGM7Zm9yKGMgaW4gYilpZihiLmhhc093blByb3BlcnR5KGMpJiZjIGluIFRlKXJldHVybiBTZVthXT1iW2NdO3JldHVybiBhfXZhciBWZT1VZShcImFuaW1hdGlvbmVuZFwiKSxXZT1VZShcImFuaW1hdGlvbml0ZXJhdGlvblwiKSxYZT1VZShcImFuaW1hdGlvbnN0YXJ0XCIpLFllPVVlKFwidHJhbnNpdGlvbmVuZFwiKSxaZT1uZXcgTWFwLCRlPVwiYWJvcnQgYXV4Q2xpY2sgY2FuY2VsIGNhblBsYXkgY2FuUGxheVRocm91Z2ggY2xpY2sgY2xvc2UgY29udGV4dE1lbnUgY29weSBjdXQgZHJhZyBkcmFnRW5kIGRyYWdFbnRlciBkcmFnRXhpdCBkcmFnTGVhdmUgZHJhZ092ZXIgZHJhZ1N0YXJ0IGRyb3AgZHVyYXRpb25DaGFuZ2UgZW1wdGllZCBlbmNyeXB0ZWQgZW5kZWQgZXJyb3IgZ290UG9pbnRlckNhcHR1cmUgaW5wdXQgaW52YWxpZCBrZXlEb3duIGtleVByZXNzIGtleVVwIGxvYWQgbG9hZGVkRGF0YSBsb2FkZWRNZXRhZGF0YSBsb2FkU3RhcnQgbG9zdFBvaW50ZXJDYXB0dXJlIG1vdXNlRG93biBtb3VzZU1vdmUgbW91c2VPdXQgbW91c2VPdmVyIG1vdXNlVXAgcGFzdGUgcGF1c2UgcGxheSBwbGF5aW5nIHBvaW50ZXJDYW5jZWwgcG9pbnRlckRvd24gcG9pbnRlck1vdmUgcG9pbnRlck91dCBwb2ludGVyT3ZlciBwb2ludGVyVXAgcHJvZ3Jlc3MgcmF0ZUNoYW5nZSByZXNldCByZXNpemUgc2Vla2VkIHNlZWtpbmcgc3RhbGxlZCBzdWJtaXQgc3VzcGVuZCB0aW1lVXBkYXRlIHRvdWNoQ2FuY2VsIHRvdWNoRW5kIHRvdWNoU3RhcnQgdm9sdW1lQ2hhbmdlIHNjcm9sbCB0b2dnbGUgdG91Y2hNb3ZlIHdhaXRpbmcgd2hlZWxcIi5zcGxpdChcIiBcIik7XG5mdW5jdGlvbiBhZihhLGIpe1plLnNldChhLGIpO2VhKGIsW2FdKX1mb3IodmFyIGJmPTA7YmY8JGUubGVuZ3RoO2JmKyspe3ZhciBjZj0kZVtiZl0sZGY9Y2YudG9Mb3dlckNhc2UoKSxlZj1jZlswXS50b1VwcGVyQ2FzZSgpK2NmLnNsaWNlKDEpO2FmKGRmLFwib25cIitlZil9YWYoVmUsXCJvbkFuaW1hdGlvbkVuZFwiKTthZihXZSxcIm9uQW5pbWF0aW9uSXRlcmF0aW9uXCIpO2FmKFhlLFwib25BbmltYXRpb25TdGFydFwiKTthZihcImRibGNsaWNrXCIsXCJvbkRvdWJsZUNsaWNrXCIpO2FmKFwiZm9jdXNpblwiLFwib25Gb2N1c1wiKTthZihcImZvY3Vzb3V0XCIsXCJvbkJsdXJcIik7YWYoWWUsXCJvblRyYW5zaXRpb25FbmRcIik7ZmEoXCJvbk1vdXNlRW50ZXJcIixbXCJtb3VzZW91dFwiLFwibW91c2VvdmVyXCJdKTtmYShcIm9uTW91c2VMZWF2ZVwiLFtcIm1vdXNlb3V0XCIsXCJtb3VzZW92ZXJcIl0pO2ZhKFwib25Qb2ludGVyRW50ZXJcIixbXCJwb2ludGVyb3V0XCIsXCJwb2ludGVyb3ZlclwiXSk7XG5mYShcIm9uUG9pbnRlckxlYXZlXCIsW1wicG9pbnRlcm91dFwiLFwicG9pbnRlcm92ZXJcIl0pO2VhKFwib25DaGFuZ2VcIixcImNoYW5nZSBjbGljayBmb2N1c2luIGZvY3Vzb3V0IGlucHV0IGtleWRvd24ga2V5dXAgc2VsZWN0aW9uY2hhbmdlXCIuc3BsaXQoXCIgXCIpKTtlYShcIm9uU2VsZWN0XCIsXCJmb2N1c291dCBjb250ZXh0bWVudSBkcmFnZW5kIGZvY3VzaW4ga2V5ZG93biBrZXl1cCBtb3VzZWRvd24gbW91c2V1cCBzZWxlY3Rpb25jaGFuZ2VcIi5zcGxpdChcIiBcIikpO2VhKFwib25CZWZvcmVJbnB1dFwiLFtcImNvbXBvc2l0aW9uZW5kXCIsXCJrZXlwcmVzc1wiLFwidGV4dElucHV0XCIsXCJwYXN0ZVwiXSk7ZWEoXCJvbkNvbXBvc2l0aW9uRW5kXCIsXCJjb21wb3NpdGlvbmVuZCBmb2N1c291dCBrZXlkb3duIGtleXByZXNzIGtleXVwIG1vdXNlZG93blwiLnNwbGl0KFwiIFwiKSk7ZWEoXCJvbkNvbXBvc2l0aW9uU3RhcnRcIixcImNvbXBvc2l0aW9uc3RhcnQgZm9jdXNvdXQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBtb3VzZWRvd25cIi5zcGxpdChcIiBcIikpO1xuZWEoXCJvbkNvbXBvc2l0aW9uVXBkYXRlXCIsXCJjb21wb3NpdGlvbnVwZGF0ZSBmb2N1c291dCBrZXlkb3duIGtleXByZXNzIGtleXVwIG1vdXNlZG93blwiLnNwbGl0KFwiIFwiKSk7dmFyIGZmPVwiYWJvcnQgY2FucGxheSBjYW5wbGF5dGhyb3VnaCBkdXJhdGlvbmNoYW5nZSBlbXB0aWVkIGVuY3J5cHRlZCBlbmRlZCBlcnJvciBsb2FkZWRkYXRhIGxvYWRlZG1ldGFkYXRhIGxvYWRzdGFydCBwYXVzZSBwbGF5IHBsYXlpbmcgcHJvZ3Jlc3MgcmF0ZWNoYW5nZSByZXNpemUgc2Vla2VkIHNlZWtpbmcgc3RhbGxlZCBzdXNwZW5kIHRpbWV1cGRhdGUgdm9sdW1lY2hhbmdlIHdhaXRpbmdcIi5zcGxpdChcIiBcIiksZ2Y9bmV3IFNldChcImNhbmNlbCBjbG9zZSBpbnZhbGlkIGxvYWQgc2Nyb2xsIHRvZ2dsZVwiLnNwbGl0KFwiIFwiKS5jb25jYXQoZmYpKTtcbmZ1bmN0aW9uIGhmKGEsYixjKXt2YXIgZD1hLnR5cGV8fFwidW5rbm93bi1ldmVudFwiO2EuY3VycmVudFRhcmdldD1jO1JiKGQsYix2b2lkIDAsYSk7YS5jdXJyZW50VGFyZ2V0PW51bGx9XG5mdW5jdGlvbiBuZShhLGIpe2I9MCE9PShiJjQpO2Zvcih2YXIgYz0wO2M8YS5sZW5ndGg7YysrKXt2YXIgZD1hW2NdLGU9ZC5ldmVudDtkPWQubGlzdGVuZXJzO2E6e3ZhciBmPXZvaWQgMDtpZihiKWZvcih2YXIgZz1kLmxlbmd0aC0xOzA8PWc7Zy0tKXt2YXIgaD1kW2ddLGs9aC5pbnN0YW5jZSxsPWguY3VycmVudFRhcmdldDtoPWgubGlzdGVuZXI7aWYoayE9PWYmJmUuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSlicmVhayBhO2hmKGUsaCxsKTtmPWt9ZWxzZSBmb3IoZz0wO2c8ZC5sZW5ndGg7ZysrKXtoPWRbZ107az1oLmluc3RhbmNlO2w9aC5jdXJyZW50VGFyZ2V0O2g9aC5saXN0ZW5lcjtpZihrIT09ZiYmZS5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpKWJyZWFrIGE7aGYoZSxoLGwpO2Y9a319fWlmKE5iKXRocm93IGE9T2IsTmI9ITEsT2I9bnVsbCxhO31cbmZ1bmN0aW9uIEYoYSxiKXt2YXIgYz1iW2pmXTt2b2lkIDA9PT1jJiYoYz1iW2pmXT1uZXcgU2V0KTt2YXIgZD1hK1wiX19idWJibGVcIjtjLmhhcyhkKXx8KGtmKGIsYSwyLCExKSxjLmFkZChkKSl9ZnVuY3Rpb24gbGYoYSxiLGMpe3ZhciBkPTA7YiYmKGR8PTQpO2tmKGMsYSxkLGIpfXZhciBtZj1cIl9yZWFjdExpc3RlbmluZ1wiK01hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnNsaWNlKDIpO2Z1bmN0aW9uIG5mKGEpe2lmKCFhW21mXSl7YVttZl09ITA7Y2EuZm9yRWFjaChmdW5jdGlvbihiKXtcInNlbGVjdGlvbmNoYW5nZVwiIT09YiYmKGdmLmhhcyhiKXx8bGYoYiwhMSxhKSxsZihiLCEwLGEpKX0pO3ZhciBiPTk9PT1hLm5vZGVUeXBlP2E6YS5vd25lckRvY3VtZW50O251bGw9PT1ifHxiW21mXXx8KGJbbWZdPSEwLGxmKFwic2VsZWN0aW9uY2hhbmdlXCIsITEsYikpfX1cbmZ1bmN0aW9uIGtmKGEsYixjLGQpe3N3aXRjaChlZChiKSl7Y2FzZSAxOnZhciBlPSRjO2JyZWFrO2Nhc2UgNDplPWJkO2JyZWFrO2RlZmF1bHQ6ZT1hZH1jPWUuYmluZChudWxsLGIsYyxhKTtlPXZvaWQgMDshSWJ8fFwidG91Y2hzdGFydFwiIT09YiYmXCJ0b3VjaG1vdmVcIiE9PWImJlwid2hlZWxcIiE9PWJ8fChlPSEwKTtkP3ZvaWQgMCE9PWU/YS5hZGRFdmVudExpc3RlbmVyKGIsYyx7Y2FwdHVyZTohMCxwYXNzaXZlOmV9KTphLmFkZEV2ZW50TGlzdGVuZXIoYixjLCEwKTp2b2lkIDAhPT1lP2EuYWRkRXZlbnRMaXN0ZW5lcihiLGMse3Bhc3NpdmU6ZX0pOmEuYWRkRXZlbnRMaXN0ZW5lcihiLGMsITEpfVxuZnVuY3Rpb24gY2QoYSxiLGMsZCxlKXt2YXIgZj1kO2lmKDA9PT0oYiYxKSYmMD09PShiJjIpJiZudWxsIT09ZClhOmZvcig7Oyl7aWYobnVsbD09PWQpcmV0dXJuO3ZhciBnPWQudGFnO2lmKDM9PT1nfHw0PT09Zyl7dmFyIGg9ZC5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztpZihoPT09ZXx8OD09PWgubm9kZVR5cGUmJmgucGFyZW50Tm9kZT09PWUpYnJlYWs7aWYoND09PWcpZm9yKGc9ZC5yZXR1cm47bnVsbCE9PWc7KXt2YXIgaz1nLnRhZztpZigzPT09a3x8ND09PWspaWYoaz1nLnN0YXRlTm9kZS5jb250YWluZXJJbmZvLGs9PT1lfHw4PT09ay5ub2RlVHlwZSYmay5wYXJlbnROb2RlPT09ZSlyZXR1cm47Zz1nLnJldHVybn1mb3IoO251bGwhPT1oOyl7Zz1TYyhoKTtpZihudWxsPT09ZylyZXR1cm47az1nLnRhZztpZig1PT09a3x8Nj09PWspe2Q9Zj1nO2NvbnRpbnVlIGF9aD1oLnBhcmVudE5vZGV9fWQ9ZC5yZXR1cm59R2IoZnVuY3Rpb24oKXt2YXIgZD1mLGU9dWIoYyksZz1bXTtcbmE6e3ZhciBoPVplLmdldChhKTtpZih2b2lkIDAhPT1oKXt2YXIgaz1vZCxuPWE7c3dpdGNoKGEpe2Nhc2UgXCJrZXlwcmVzc1wiOmlmKDA9PT1qZChjKSlicmVhayBhO2Nhc2UgXCJrZXlkb3duXCI6Y2FzZSBcImtleXVwXCI6az1NZDticmVhaztjYXNlIFwiZm9jdXNpblwiOm49XCJmb2N1c1wiO2s9QWQ7YnJlYWs7Y2FzZSBcImZvY3Vzb3V0XCI6bj1cImJsdXJcIjtrPUFkO2JyZWFrO2Nhc2UgXCJiZWZvcmVibHVyXCI6Y2FzZSBcImFmdGVyYmx1clwiOms9QWQ7YnJlYWs7Y2FzZSBcImNsaWNrXCI6aWYoMj09PWMuYnV0dG9uKWJyZWFrIGE7Y2FzZSBcImF1eGNsaWNrXCI6Y2FzZSBcImRibGNsaWNrXCI6Y2FzZSBcIm1vdXNlZG93blwiOmNhc2UgXCJtb3VzZW1vdmVcIjpjYXNlIFwibW91c2V1cFwiOmNhc2UgXCJtb3VzZW91dFwiOmNhc2UgXCJtb3VzZW92ZXJcIjpjYXNlIFwiY29udGV4dG1lbnVcIjprPXdkO2JyZWFrO2Nhc2UgXCJkcmFnXCI6Y2FzZSBcImRyYWdlbmRcIjpjYXNlIFwiZHJhZ2VudGVyXCI6Y2FzZSBcImRyYWdleGl0XCI6Y2FzZSBcImRyYWdsZWF2ZVwiOmNhc2UgXCJkcmFnb3ZlclwiOmNhc2UgXCJkcmFnc3RhcnRcIjpjYXNlIFwiZHJvcFwiOms9XG55ZDticmVhaztjYXNlIFwidG91Y2hjYW5jZWxcIjpjYXNlIFwidG91Y2hlbmRcIjpjYXNlIFwidG91Y2htb3ZlXCI6Y2FzZSBcInRvdWNoc3RhcnRcIjprPVFkO2JyZWFrO2Nhc2UgVmU6Y2FzZSBXZTpjYXNlIFhlOms9Q2Q7YnJlYWs7Y2FzZSBZZTprPVNkO2JyZWFrO2Nhc2UgXCJzY3JvbGxcIjprPXFkO2JyZWFrO2Nhc2UgXCJ3aGVlbFwiOms9VWQ7YnJlYWs7Y2FzZSBcImNvcHlcIjpjYXNlIFwiY3V0XCI6Y2FzZSBcInBhc3RlXCI6az1FZDticmVhaztjYXNlIFwiZ290cG9pbnRlcmNhcHR1cmVcIjpjYXNlIFwibG9zdHBvaW50ZXJjYXB0dXJlXCI6Y2FzZSBcInBvaW50ZXJjYW5jZWxcIjpjYXNlIFwicG9pbnRlcmRvd25cIjpjYXNlIFwicG9pbnRlcm1vdmVcIjpjYXNlIFwicG9pbnRlcm91dFwiOmNhc2UgXCJwb2ludGVyb3ZlclwiOmNhc2UgXCJwb2ludGVydXBcIjprPU9kfXZhciB2PTAhPT0oYiY0KSxDPSF2JiZcInNjcm9sbFwiPT09YSx0PXY/bnVsbCE9PWg/aCtcIkNhcHR1cmVcIjpudWxsOmg7dj1bXTtmb3IodmFyIHI9ZCx4O251bGwhPT1cbnI7KXt4PXI7dmFyIEI9eC5zdGF0ZU5vZGU7NT09PXgudGFnJiZudWxsIT09QiYmKHg9QixudWxsIT09dCYmKEI9SGIocix0KSxudWxsIT1CJiZ2LnB1c2gob2YocixCLHgpKSkpO2lmKEMpYnJlYWs7cj1yLnJldHVybn0wPHYubGVuZ3RoJiYoaD1uZXcgayhoLG4sbnVsbCxjLGUpLGcucHVzaCh7ZXZlbnQ6aCxsaXN0ZW5lcnM6dn0pKX19aWYoMD09PShiJjcpKXthOntoPVwibW91c2VvdmVyXCI9PT1hfHxcInBvaW50ZXJvdmVyXCI9PT1hO2s9XCJtb3VzZW91dFwiPT09YXx8XCJwb2ludGVyb3V0XCI9PT1hO2lmKGgmJmMhPT10YiYmKG49Yy5yZWxhdGVkVGFyZ2V0fHxjLmZyb21FbGVtZW50KSYmKFNjKG4pfHxuW3BmXSkpYnJlYWsgYTtpZihrfHxoKXtoPWUud2luZG93PT09ZT9lOihoPWUub3duZXJEb2N1bWVudCk/aC5kZWZhdWx0Vmlld3x8aC5wYXJlbnRXaW5kb3c6d2luZG93O2lmKGspe2lmKG49Yy5yZWxhdGVkVGFyZ2V0fHxjLnRvRWxlbWVudCxrPWQsbj1uP1NjKG4pOm51bGwsbnVsbCE9PVxubiYmKEM9U2IobiksbiE9PUN8fDUhPT1uLnRhZyYmNiE9PW4udGFnKSluPW51bGx9ZWxzZSBrPW51bGwsbj1kO2lmKGshPT1uKXt2PXdkO0I9XCJvbk1vdXNlTGVhdmVcIjt0PVwib25Nb3VzZUVudGVyXCI7cj1cIm1vdXNlXCI7aWYoXCJwb2ludGVyb3V0XCI9PT1hfHxcInBvaW50ZXJvdmVyXCI9PT1hKXY9T2QsQj1cIm9uUG9pbnRlckxlYXZlXCIsdD1cIm9uUG9pbnRlckVudGVyXCIscj1cInBvaW50ZXJcIjtDPW51bGw9PWs/aDpwZShrKTt4PW51bGw9PW4/aDpwZShuKTtoPW5ldyB2KEIscitcImxlYXZlXCIsayxjLGUpO2gudGFyZ2V0PUM7aC5yZWxhdGVkVGFyZ2V0PXg7Qj1udWxsO1NjKGUpPT09ZCYmKHY9bmV3IHYodCxyK1wiZW50ZXJcIixuLGMsZSksdi50YXJnZXQ9eCx2LnJlbGF0ZWRUYXJnZXQ9QyxCPXYpO0M9QjtpZihrJiZuKWI6e3Y9azt0PW47cj0wO2Zvcih4PXY7eDt4PXFmKHgpKXIrKzt4PTA7Zm9yKEI9dDtCO0I9cWYoQikpeCsrO2Zvcig7MDxyLXg7KXY9cWYodiksci0tO2Zvcig7MDx4LXI7KXQ9XG5xZih0KSx4LS07Zm9yKDtyLS07KXtpZih2PT09dHx8bnVsbCE9PXQmJnY9PT10LmFsdGVybmF0ZSlicmVhayBiO3Y9cWYodik7dD1xZih0KX12PW51bGx9ZWxzZSB2PW51bGw7bnVsbCE9PWsmJnJmKGcsaCxrLHYsITEpO251bGwhPT1uJiZudWxsIT09QyYmcmYoZyxDLG4sdiwhMCl9fX1hOntoPWQ/cGUoZCk6d2luZG93O2s9aC5ub2RlTmFtZSYmaC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO2lmKFwic2VsZWN0XCI9PT1rfHxcImlucHV0XCI9PT1rJiZcImZpbGVcIj09PWgudHlwZSl2YXIgTz1xZTtlbHNlIGlmKGhlKGgpKWlmKHJlKU89QWU7ZWxzZXtPPXllO3ZhciBUPXhlfWVsc2Uoaz1oLm5vZGVOYW1lKSYmXCJpbnB1dFwiPT09ay50b0xvd2VyQ2FzZSgpJiYoXCJjaGVja2JveFwiPT09aC50eXBlfHxcInJhZGlvXCI9PT1oLnR5cGUpJiYoTz16ZSk7aWYoTyYmKE89TyhhLGQpKSl7aWUoZyxPLGMsZSk7YnJlYWsgYX1UJiZUKGEsaCxkKTtcImZvY3Vzb3V0XCI9PT1hJiYoVD1oLl93cmFwcGVyU3RhdGUpJiZcblQuY29udHJvbGxlZCYmXCJudW1iZXJcIj09PWgudHlwZSYmJGEoaCxcIm51bWJlclwiLGgudmFsdWUpfVQ9ZD9wZShkKTp3aW5kb3c7c3dpdGNoKGEpe2Nhc2UgXCJmb2N1c2luXCI6aWYoaGUoVCl8fFwidHJ1ZVwiPT09VC5jb250ZW50RWRpdGFibGUpTGU9VCxNZT1kLE5lPW51bGw7YnJlYWs7Y2FzZSBcImZvY3Vzb3V0XCI6TmU9TWU9TGU9bnVsbDticmVhaztjYXNlIFwibW91c2Vkb3duXCI6T2U9ITA7YnJlYWs7Y2FzZSBcImNvbnRleHRtZW51XCI6Y2FzZSBcIm1vdXNldXBcIjpjYXNlIFwiZHJhZ2VuZFwiOk9lPSExO1BlKGcsYyxlKTticmVhaztjYXNlIFwic2VsZWN0aW9uY2hhbmdlXCI6aWYoS2UpYnJlYWs7Y2FzZSBcImtleWRvd25cIjpjYXNlIFwia2V5dXBcIjpQZShnLGMsZSl9dmFyIHphO2lmKFdkKWI6e3N3aXRjaChhKXtjYXNlIFwiY29tcG9zaXRpb25zdGFydFwiOnZhciBMPVwib25Db21wb3NpdGlvblN0YXJ0XCI7YnJlYWsgYjtjYXNlIFwiY29tcG9zaXRpb25lbmRcIjpMPVwib25Db21wb3NpdGlvbkVuZFwiO2JyZWFrIGI7XG5jYXNlIFwiY29tcG9zaXRpb251cGRhdGVcIjpMPVwib25Db21wb3NpdGlvblVwZGF0ZVwiO2JyZWFrIGJ9TD12b2lkIDB9ZWxzZSBkZT9iZShhLGMpJiYoTD1cIm9uQ29tcG9zaXRpb25FbmRcIik6XCJrZXlkb3duXCI9PT1hJiYyMjk9PT1jLmtleUNvZGUmJihMPVwib25Db21wb3NpdGlvblN0YXJ0XCIpO0wmJihaZCYmXCJrb1wiIT09Yy5sb2NhbGUmJihkZXx8XCJvbkNvbXBvc2l0aW9uU3RhcnRcIiE9PUw/XCJvbkNvbXBvc2l0aW9uRW5kXCI9PT1MJiZkZSYmKHphPWlkKCkpOihmZD1lLGdkPVwidmFsdWVcImluIGZkP2ZkLnZhbHVlOmZkLnRleHRDb250ZW50LGRlPSEwKSksVD1qZShkLEwpLDA8VC5sZW5ndGgmJihMPW5ldyBHZChMLGEsbnVsbCxjLGUpLGcucHVzaCh7ZXZlbnQ6TCxsaXN0ZW5lcnM6VH0pLHphP0wuZGF0YT16YTooemE9Y2UoYyksbnVsbCE9PXphJiYoTC5kYXRhPXphKSkpKTtpZih6YT1ZZD9lZShhLGMpOmZlKGEsYykpZD1qZShkLFwib25CZWZvcmVJbnB1dFwiKSwwPGQubGVuZ3RoJiYoZT1uZXcgR2QoXCJvbkJlZm9yZUlucHV0XCIsXG5cImJlZm9yZWlucHV0XCIsbnVsbCxjLGUpLGcucHVzaCh7ZXZlbnQ6ZSxsaXN0ZW5lcnM6ZH0pLGUuZGF0YT16YSl9bmUoZyxiKX0pfWZ1bmN0aW9uIG9mKGEsYixjKXtyZXR1cm57aW5zdGFuY2U6YSxsaXN0ZW5lcjpiLGN1cnJlbnRUYXJnZXQ6Y319ZnVuY3Rpb24gamUoYSxiKXtmb3IodmFyIGM9YitcIkNhcHR1cmVcIixkPVtdO251bGwhPT1hOyl7dmFyIGU9YSxmPWUuc3RhdGVOb2RlOzU9PT1lLnRhZyYmbnVsbCE9PWYmJihlPWYsZj1IYihhLGMpLG51bGwhPWYmJmQudW5zaGlmdChvZihhLGYsZSkpLGY9SGIoYSxiKSxudWxsIT1mJiZkLnB1c2gob2YoYSxmLGUpKSk7YT1hLnJldHVybn1yZXR1cm4gZH1mdW5jdGlvbiBxZihhKXtpZihudWxsPT09YSlyZXR1cm4gbnVsbDtkbyBhPWEucmV0dXJuO3doaWxlKGEmJjUhPT1hLnRhZyk7cmV0dXJuIGE/YTpudWxsfVxuZnVuY3Rpb24gcmYoYSxiLGMsZCxlKXtmb3IodmFyIGY9Yi5fcmVhY3ROYW1lLGc9W107bnVsbCE9PWMmJmMhPT1kOyl7dmFyIGg9YyxrPWguYWx0ZXJuYXRlLGw9aC5zdGF0ZU5vZGU7aWYobnVsbCE9PWsmJms9PT1kKWJyZWFrOzU9PT1oLnRhZyYmbnVsbCE9PWwmJihoPWwsZT8oaz1IYihjLGYpLG51bGwhPWsmJmcudW5zaGlmdChvZihjLGssaCkpKTplfHwoaz1IYihjLGYpLG51bGwhPWsmJmcucHVzaChvZihjLGssaCkpKSk7Yz1jLnJldHVybn0wIT09Zy5sZW5ndGgmJmEucHVzaCh7ZXZlbnQ6YixsaXN0ZW5lcnM6Z30pfXZhciBzZj0vXFxyXFxuPy9nLHRmPS9cXHUwMDAwfFxcdUZGRkQvZztmdW5jdGlvbiB1ZihhKXtyZXR1cm4oXCJzdHJpbmdcIj09PXR5cGVvZiBhP2E6XCJcIithKS5yZXBsYWNlKHNmLFwiXFxuXCIpLnJlcGxhY2UodGYsXCJcIil9ZnVuY3Rpb24gdmYoYSxiLGMpe2I9dWYoYik7aWYodWYoYSkhPT1iJiZjKXRocm93IEVycm9yKHAoNDI1KSk7fWZ1bmN0aW9uIHdmKCl7fVxudmFyIHhmPW51bGw7ZnVuY3Rpb24geWYoYSxiKXtyZXR1cm5cInRleHRhcmVhXCI9PT1hfHxcIm5vc2NyaXB0XCI9PT1hfHxcInN0cmluZ1wiPT09dHlwZW9mIGIuY2hpbGRyZW58fFwibnVtYmVyXCI9PT10eXBlb2YgYi5jaGlsZHJlbnx8XCJvYmplY3RcIj09PXR5cGVvZiBiLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MJiZudWxsIT09Yi5kYW5nZXJvdXNseVNldElubmVySFRNTCYmbnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTC5fX2h0bWx9XG52YXIgemY9XCJmdW5jdGlvblwiPT09dHlwZW9mIHNldFRpbWVvdXQ/c2V0VGltZW91dDp2b2lkIDAsQWY9XCJmdW5jdGlvblwiPT09dHlwZW9mIGNsZWFyVGltZW91dD9jbGVhclRpbWVvdXQ6dm9pZCAwLEJmPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBQcm9taXNlP1Byb21pc2U6dm9pZCAwLERmPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBxdWV1ZU1pY3JvdGFzaz9xdWV1ZU1pY3JvdGFzazpcInVuZGVmaW5lZFwiIT09dHlwZW9mIEJmP2Z1bmN0aW9uKGEpe3JldHVybiBCZi5yZXNvbHZlKG51bGwpLnRoZW4oYSkuY2F0Y2goQ2YpfTp6ZjtmdW5jdGlvbiBDZihhKXtzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7dGhyb3cgYTt9KX1cbmZ1bmN0aW9uIEVmKGEsYil7dmFyIGM9YixkPTA7ZG97dmFyIGU9Yy5uZXh0U2libGluZzthLnJlbW92ZUNoaWxkKGMpO2lmKGUmJjg9PT1lLm5vZGVUeXBlKWlmKGM9ZS5kYXRhLFwiLyRcIj09PWMpe2lmKDA9PT1kKXthLnJlbW92ZUNoaWxkKGUpO1ljKGIpO3JldHVybn1kLS19ZWxzZVwiJFwiIT09YyYmXCIkP1wiIT09YyYmXCIkIVwiIT09Y3x8ZCsrO2M9ZX13aGlsZShjKTtZYyhiKX1mdW5jdGlvbiBGZihhKXtmb3IoO251bGwhPWE7YT1hLm5leHRTaWJsaW5nKXt2YXIgYj1hLm5vZGVUeXBlO2lmKDE9PT1ifHwzPT09YilicmVhaztpZig4PT09Yil7Yj1hLmRhdGE7aWYoXCIkXCI9PT1ifHxcIiQhXCI9PT1ifHxcIiQ/XCI9PT1iKWJyZWFrO2lmKFwiLyRcIj09PWIpcmV0dXJuIG51bGx9fXJldHVybiBhfVxuZnVuY3Rpb24gR2YoYSl7YT1hLnByZXZpb3VzU2libGluZztmb3IodmFyIGI9MDthOyl7aWYoOD09PWEubm9kZVR5cGUpe3ZhciBjPWEuZGF0YTtpZihcIiRcIj09PWN8fFwiJCFcIj09PWN8fFwiJD9cIj09PWMpe2lmKDA9PT1iKXJldHVybiBhO2ItLX1lbHNlXCIvJFwiPT09YyYmYisrfWE9YS5wcmV2aW91c1NpYmxpbmd9cmV0dXJuIG51bGx9dmFyIEhmPU1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnNsaWNlKDIpLElmPVwiX19yZWFjdEZpYmVyJFwiK0hmLEpmPVwiX19yZWFjdFByb3BzJFwiK0hmLHBmPVwiX19yZWFjdENvbnRhaW5lciRcIitIZixqZj1cIl9fcmVhY3RFdmVudHMkXCIrSGYsS2Y9XCJfX3JlYWN0TGlzdGVuZXJzJFwiK0hmLExmPVwiX19yZWFjdEhhbmRsZXMkXCIrSGY7XG5mdW5jdGlvbiBTYyhhKXt2YXIgYj1hW0lmXTtpZihiKXJldHVybiBiO2Zvcih2YXIgYz1hLnBhcmVudE5vZGU7Yzspe2lmKGI9Y1twZl18fGNbSWZdKXtjPWIuYWx0ZXJuYXRlO2lmKG51bGwhPT1iLmNoaWxkfHxudWxsIT09YyYmbnVsbCE9PWMuY2hpbGQpZm9yKGE9R2YoYSk7bnVsbCE9PWE7KXtpZihjPWFbSWZdKXJldHVybiBjO2E9R2YoYSl9cmV0dXJuIGJ9YT1jO2M9YS5wYXJlbnROb2RlfXJldHVybiBudWxsfWZ1bmN0aW9uIHpiKGEpe2E9YVtJZl18fGFbcGZdO3JldHVybiFhfHw1IT09YS50YWcmJjYhPT1hLnRhZyYmMTMhPT1hLnRhZyYmMyE9PWEudGFnP251bGw6YX1mdW5jdGlvbiBwZShhKXtpZig1PT09YS50YWd8fDY9PT1hLnRhZylyZXR1cm4gYS5zdGF0ZU5vZGU7dGhyb3cgRXJyb3IocCgzMykpO31mdW5jdGlvbiBBYihhKXtyZXR1cm4gYVtKZl18fG51bGx9dmFyIE1mPVtdLE5mPS0xO2Z1bmN0aW9uIE9mKGEpe3JldHVybntjdXJyZW50OmF9fVxuZnVuY3Rpb24gRyhhKXswPk5mfHwoYS5jdXJyZW50PU1mW05mXSxNZltOZl09bnVsbCxOZi0tKX1mdW5jdGlvbiBIKGEsYil7TmYrKztNZltOZl09YS5jdXJyZW50O2EuY3VycmVudD1ifXZhciBQZj17fSxJPU9mKFBmKSxRZj1PZighMSksUmY9UGY7ZnVuY3Rpb24gU2YoYSxiKXt2YXIgYz1hLnR5cGUuY29udGV4dFR5cGVzO2lmKCFjKXJldHVybiBQZjt2YXIgZD1hLnN0YXRlTm9kZTtpZihkJiZkLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQ9PT1iKXJldHVybiBkLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0O3ZhciBlPXt9LGY7Zm9yKGYgaW4gYyllW2ZdPWJbZl07ZCYmKGE9YS5zdGF0ZU5vZGUsYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0PWIsYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dD1lKTtyZXR1cm4gZX1cbmZ1bmN0aW9uIFRmKGEpe2E9YS5jaGlsZENvbnRleHRUeXBlcztyZXR1cm4gbnVsbCE9PWEmJnZvaWQgMCE9PWF9ZnVuY3Rpb24gVWYoKXtHKFFmKTtHKEkpfWZ1bmN0aW9uIFZmKGEsYixjKXtpZihJLmN1cnJlbnQhPT1QZil0aHJvdyBFcnJvcihwKDE2OCkpO0goSSxiKTtIKFFmLGMpfWZ1bmN0aW9uIFdmKGEsYixjKXt2YXIgZD1hLnN0YXRlTm9kZTtiPWIuY2hpbGRDb250ZXh0VHlwZXM7aWYoXCJmdW5jdGlvblwiIT09dHlwZW9mIGQuZ2V0Q2hpbGRDb250ZXh0KXJldHVybiBjO2Q9ZC5nZXRDaGlsZENvbnRleHQoKTtmb3IodmFyIGUgaW4gZClpZighKGUgaW4gYikpdGhyb3cgRXJyb3IocCgxMDgsUGEoYSl8fFwiVW5rbm93blwiLGUpKTtyZXR1cm4gQSh7fSxjLGQpfVxuZnVuY3Rpb24gWGYoYSl7YT0oYT1hLnN0YXRlTm9kZSkmJmEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHR8fFBmO1JmPUkuY3VycmVudDtIKEksYSk7SChRZixRZi5jdXJyZW50KTtyZXR1cm4hMH1mdW5jdGlvbiBZZihhLGIsYyl7dmFyIGQ9YS5zdGF0ZU5vZGU7aWYoIWQpdGhyb3cgRXJyb3IocCgxNjkpKTtjPyhhPVdmKGEsYixSZiksZC5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dD1hLEcoUWYpLEcoSSksSChJLGEpKTpHKFFmKTtIKFFmLGMpfXZhciBaZj1udWxsLCRmPSExLGFnPSExO2Z1bmN0aW9uIGJnKGEpe251bGw9PT1aZj9aZj1bYV06WmYucHVzaChhKX1mdW5jdGlvbiBjZyhhKXskZj0hMDtiZyhhKX1cbmZ1bmN0aW9uIGRnKCl7aWYoIWFnJiZudWxsIT09WmYpe2FnPSEwO3ZhciBhPTAsYj1FO3RyeXt2YXIgYz1aZjtmb3IoRT0xO2E8Yy5sZW5ndGg7YSsrKXt2YXIgZD1jW2FdO2RvIGQ9ZCghMCk7d2hpbGUobnVsbCE9PWQpfVpmPW51bGw7JGY9ITF9Y2F0Y2goZSl7dGhyb3cgbnVsbCE9PVpmJiYoWmY9WmYuc2xpY2UoYSsxKSksWWIoY2MsZGcpLGU7fWZpbmFsbHl7RT1iLGFnPSExfX1yZXR1cm4gbnVsbH12YXIgZWc9c2EuUmVhY3RDdXJyZW50QmF0Y2hDb25maWc7ZnVuY3Rpb24gZmcoYSxiKXtpZihhJiZhLmRlZmF1bHRQcm9wcyl7Yj1BKHt9LGIpO2E9YS5kZWZhdWx0UHJvcHM7Zm9yKHZhciBjIGluIGEpdm9pZCAwPT09YltjXSYmKGJbY109YVtjXSk7cmV0dXJuIGJ9cmV0dXJuIGJ9dmFyIGdnPU9mKG51bGwpLGhnPW51bGwsaWc9bnVsbCxqZz1udWxsO2Z1bmN0aW9uIGtnKCl7amc9aWc9aGc9bnVsbH1cbmZ1bmN0aW9uIGxnKGEpe3ZhciBiPWdnLmN1cnJlbnQ7RyhnZyk7YS5fY3VycmVudFZhbHVlPWJ9ZnVuY3Rpb24gbWcoYSxiLGMpe2Zvcig7bnVsbCE9PWE7KXt2YXIgZD1hLmFsdGVybmF0ZTsoYS5jaGlsZExhbmVzJmIpIT09Yj8oYS5jaGlsZExhbmVzfD1iLG51bGwhPT1kJiYoZC5jaGlsZExhbmVzfD1iKSk6bnVsbCE9PWQmJihkLmNoaWxkTGFuZXMmYikhPT1iJiYoZC5jaGlsZExhbmVzfD1iKTtpZihhPT09YylicmVhazthPWEucmV0dXJufX1mdW5jdGlvbiBuZyhhLGIpe2hnPWE7amc9aWc9bnVsbDthPWEuZGVwZW5kZW5jaWVzO251bGwhPT1hJiZudWxsIT09YS5maXJzdENvbnRleHQmJigwIT09KGEubGFuZXMmYikmJihvZz0hMCksYS5maXJzdENvbnRleHQ9bnVsbCl9XG5mdW5jdGlvbiBwZyhhKXt2YXIgYj1hLl9jdXJyZW50VmFsdWU7aWYoamchPT1hKWlmKGE9e2NvbnRleHQ6YSxtZW1vaXplZFZhbHVlOmIsbmV4dDpudWxsfSxudWxsPT09aWcpe2lmKG51bGw9PT1oZyl0aHJvdyBFcnJvcihwKDMwOCkpO2lnPWE7aGcuZGVwZW5kZW5jaWVzPXtsYW5lczowLGZpcnN0Q29udGV4dDphfX1lbHNlIGlnPWlnLm5leHQ9YTtyZXR1cm4gYn12YXIgcWc9bnVsbCxyZz0hMTtmdW5jdGlvbiBzZyhhKXthLnVwZGF0ZVF1ZXVlPXtiYXNlU3RhdGU6YS5tZW1vaXplZFN0YXRlLGZpcnN0QmFzZVVwZGF0ZTpudWxsLGxhc3RCYXNlVXBkYXRlOm51bGwsc2hhcmVkOntwZW5kaW5nOm51bGwsaW50ZXJsZWF2ZWQ6bnVsbCxsYW5lczowfSxlZmZlY3RzOm51bGx9fVxuZnVuY3Rpb24gdGcoYSxiKXthPWEudXBkYXRlUXVldWU7Yi51cGRhdGVRdWV1ZT09PWEmJihiLnVwZGF0ZVF1ZXVlPXtiYXNlU3RhdGU6YS5iYXNlU3RhdGUsZmlyc3RCYXNlVXBkYXRlOmEuZmlyc3RCYXNlVXBkYXRlLGxhc3RCYXNlVXBkYXRlOmEubGFzdEJhc2VVcGRhdGUsc2hhcmVkOmEuc2hhcmVkLGVmZmVjdHM6YS5lZmZlY3RzfSl9ZnVuY3Rpb24gdWcoYSxiKXtyZXR1cm57ZXZlbnRUaW1lOmEsbGFuZTpiLHRhZzowLHBheWxvYWQ6bnVsbCxjYWxsYmFjazpudWxsLG5leHQ6bnVsbH19XG5mdW5jdGlvbiB2ZyhhLGIpe3ZhciBjPWEudXBkYXRlUXVldWU7bnVsbCE9PWMmJihjPWMuc2hhcmVkLG51bGwhPT1KJiYwIT09KGEubW9kZSYxKSYmMD09PShLJjIpPyhhPWMuaW50ZXJsZWF2ZWQsbnVsbD09PWE/KGIubmV4dD1iLG51bGw9PT1xZz9xZz1bY106cWcucHVzaChjKSk6KGIubmV4dD1hLm5leHQsYS5uZXh0PWIpLGMuaW50ZXJsZWF2ZWQ9Yik6KGE9Yy5wZW5kaW5nLG51bGw9PT1hP2IubmV4dD1iOihiLm5leHQ9YS5uZXh0LGEubmV4dD1iKSxjLnBlbmRpbmc9YikpfWZ1bmN0aW9uIHdnKGEsYixjKXtiPWIudXBkYXRlUXVldWU7aWYobnVsbCE9PWImJihiPWIuc2hhcmVkLDAhPT0oYyY0MTk0MjQwKSkpe3ZhciBkPWIubGFuZXM7ZCY9YS5wZW5kaW5nTGFuZXM7Y3w9ZDtiLmxhbmVzPWM7eWMoYSxjKX19XG5mdW5jdGlvbiB4ZyhhLGIpe3ZhciBjPWEudXBkYXRlUXVldWUsZD1hLmFsdGVybmF0ZTtpZihudWxsIT09ZCYmKGQ9ZC51cGRhdGVRdWV1ZSxjPT09ZCkpe3ZhciBlPW51bGwsZj1udWxsO2M9Yy5maXJzdEJhc2VVcGRhdGU7aWYobnVsbCE9PWMpe2Rve3ZhciBnPXtldmVudFRpbWU6Yy5ldmVudFRpbWUsbGFuZTpjLmxhbmUsdGFnOmMudGFnLHBheWxvYWQ6Yy5wYXlsb2FkLGNhbGxiYWNrOmMuY2FsbGJhY2ssbmV4dDpudWxsfTtudWxsPT09Zj9lPWY9ZzpmPWYubmV4dD1nO2M9Yy5uZXh0fXdoaWxlKG51bGwhPT1jKTtudWxsPT09Zj9lPWY9YjpmPWYubmV4dD1ifWVsc2UgZT1mPWI7Yz17YmFzZVN0YXRlOmQuYmFzZVN0YXRlLGZpcnN0QmFzZVVwZGF0ZTplLGxhc3RCYXNlVXBkYXRlOmYsc2hhcmVkOmQuc2hhcmVkLGVmZmVjdHM6ZC5lZmZlY3RzfTthLnVwZGF0ZVF1ZXVlPWM7cmV0dXJufWE9Yy5sYXN0QmFzZVVwZGF0ZTtudWxsPT09YT9jLmZpcnN0QmFzZVVwZGF0ZT1iOmEubmV4dD1cbmI7Yy5sYXN0QmFzZVVwZGF0ZT1ifVxuZnVuY3Rpb24geWcoYSxiLGMsZCl7dmFyIGU9YS51cGRhdGVRdWV1ZTtyZz0hMTt2YXIgZj1lLmZpcnN0QmFzZVVwZGF0ZSxnPWUubGFzdEJhc2VVcGRhdGUsaD1lLnNoYXJlZC5wZW5kaW5nO2lmKG51bGwhPT1oKXtlLnNoYXJlZC5wZW5kaW5nPW51bGw7dmFyIGs9aCxsPWsubmV4dDtrLm5leHQ9bnVsbDtudWxsPT09Zz9mPWw6Zy5uZXh0PWw7Zz1rO3ZhciBtPWEuYWx0ZXJuYXRlO251bGwhPT1tJiYobT1tLnVwZGF0ZVF1ZXVlLGg9bS5sYXN0QmFzZVVwZGF0ZSxoIT09ZyYmKG51bGw9PT1oP20uZmlyc3RCYXNlVXBkYXRlPWw6aC5uZXh0PWwsbS5sYXN0QmFzZVVwZGF0ZT1rKSl9aWYobnVsbCE9PWYpe3ZhciB3PWUuYmFzZVN0YXRlO2c9MDttPWw9az1udWxsO2g9Zjtkb3t2YXIgdT1oLmxhbmUseT1oLmV2ZW50VGltZTtpZigoZCZ1KT09PXUpe251bGwhPT1tJiYobT1tLm5leHQ9e2V2ZW50VGltZTp5LGxhbmU6MCx0YWc6aC50YWcscGF5bG9hZDpoLnBheWxvYWQsY2FsbGJhY2s6aC5jYWxsYmFjayxcbm5leHQ6bnVsbH0pO2E6e3ZhciBuPWEsdj1oO3U9Yjt5PWM7c3dpdGNoKHYudGFnKXtjYXNlIDE6bj12LnBheWxvYWQ7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIG4pe3c9bi5jYWxsKHksdyx1KTticmVhayBhfXc9bjticmVhayBhO2Nhc2UgMzpuLmZsYWdzPW4uZmxhZ3MmLTY1NTM3fDEyODtjYXNlIDA6bj12LnBheWxvYWQ7dT1cImZ1bmN0aW9uXCI9PT10eXBlb2Ygbj9uLmNhbGwoeSx3LHUpOm47aWYobnVsbD09PXV8fHZvaWQgMD09PXUpYnJlYWsgYTt3PUEoe30sdyx1KTticmVhayBhO2Nhc2UgMjpyZz0hMH19bnVsbCE9PWguY2FsbGJhY2smJjAhPT1oLmxhbmUmJihhLmZsYWdzfD02NCx1PWUuZWZmZWN0cyxudWxsPT09dT9lLmVmZmVjdHM9W2hdOnUucHVzaChoKSl9ZWxzZSB5PXtldmVudFRpbWU6eSxsYW5lOnUsdGFnOmgudGFnLHBheWxvYWQ6aC5wYXlsb2FkLGNhbGxiYWNrOmguY2FsbGJhY2ssbmV4dDpudWxsfSxudWxsPT09bT8obD1tPXksaz13KTptPW0ubmV4dD15LGd8PXU7XG5oPWgubmV4dDtpZihudWxsPT09aClpZihoPWUuc2hhcmVkLnBlbmRpbmcsbnVsbD09PWgpYnJlYWs7ZWxzZSB1PWgsaD11Lm5leHQsdS5uZXh0PW51bGwsZS5sYXN0QmFzZVVwZGF0ZT11LGUuc2hhcmVkLnBlbmRpbmc9bnVsbH13aGlsZSgxKTtudWxsPT09bSYmKGs9dyk7ZS5iYXNlU3RhdGU9aztlLmZpcnN0QmFzZVVwZGF0ZT1sO2UubGFzdEJhc2VVcGRhdGU9bTtiPWUuc2hhcmVkLmludGVybGVhdmVkO2lmKG51bGwhPT1iKXtlPWI7ZG8gZ3w9ZS5sYW5lLGU9ZS5uZXh0O3doaWxlKGUhPT1iKX1lbHNlIG51bGw9PT1mJiYoZS5zaGFyZWQubGFuZXM9MCk7emd8PWc7YS5sYW5lcz1nO2EubWVtb2l6ZWRTdGF0ZT13fX1cbmZ1bmN0aW9uIEFnKGEsYixjKXthPWIuZWZmZWN0cztiLmVmZmVjdHM9bnVsbDtpZihudWxsIT09YSlmb3IoYj0wO2I8YS5sZW5ndGg7YisrKXt2YXIgZD1hW2JdLGU9ZC5jYWxsYmFjaztpZihudWxsIT09ZSl7ZC5jYWxsYmFjaz1udWxsO2Q9YztpZihcImZ1bmN0aW9uXCIhPT10eXBlb2YgZSl0aHJvdyBFcnJvcihwKDE5MSxlKSk7ZS5jYWxsKGQpfX19dmFyIEJnPShuZXcgYWEuQ29tcG9uZW50KS5yZWZzO2Z1bmN0aW9uIENnKGEsYixjLGQpe2I9YS5tZW1vaXplZFN0YXRlO2M9YyhkLGIpO2M9bnVsbD09PWN8fHZvaWQgMD09PWM/YjpBKHt9LGIsYyk7YS5tZW1vaXplZFN0YXRlPWM7MD09PWEubGFuZXMmJihhLnVwZGF0ZVF1ZXVlLmJhc2VTdGF0ZT1jKX1cbnZhciBGZz17aXNNb3VudGVkOmZ1bmN0aW9uKGEpe3JldHVybihhPWEuX3JlYWN0SW50ZXJuYWxzKT9TYihhKT09PWE6ITF9LGVucXVldWVTZXRTdGF0ZTpmdW5jdGlvbihhLGIsYyl7YT1hLl9yZWFjdEludGVybmFsczt2YXIgZD1NKCksZT1EZyhhKSxmPXVnKGQsZSk7Zi5wYXlsb2FkPWI7dm9pZCAwIT09YyYmbnVsbCE9PWMmJihmLmNhbGxiYWNrPWMpO3ZnKGEsZik7Yj1FZyhhLGUsZCk7bnVsbCE9PWImJndnKGIsYSxlKX0sZW5xdWV1ZVJlcGxhY2VTdGF0ZTpmdW5jdGlvbihhLGIsYyl7YT1hLl9yZWFjdEludGVybmFsczt2YXIgZD1NKCksZT1EZyhhKSxmPXVnKGQsZSk7Zi50YWc9MTtmLnBheWxvYWQ9Yjt2b2lkIDAhPT1jJiZudWxsIT09YyYmKGYuY2FsbGJhY2s9Yyk7dmcoYSxmKTtiPUVnKGEsZSxkKTtudWxsIT09YiYmd2coYixhLGUpfSxlbnF1ZXVlRm9yY2VVcGRhdGU6ZnVuY3Rpb24oYSxiKXthPWEuX3JlYWN0SW50ZXJuYWxzO3ZhciBjPU0oKSxkPURnKGEpLGU9dWcoYyxcbmQpO2UudGFnPTI7dm9pZCAwIT09YiYmbnVsbCE9PWImJihlLmNhbGxiYWNrPWIpO3ZnKGEsZSk7Yj1FZyhhLGQsYyk7bnVsbCE9PWImJndnKGIsYSxkKX19O2Z1bmN0aW9uIEdnKGEsYixjLGQsZSxmLGcpe2E9YS5zdGF0ZU5vZGU7cmV0dXJuXCJmdW5jdGlvblwiPT09dHlwZW9mIGEuc2hvdWxkQ29tcG9uZW50VXBkYXRlP2Euc2hvdWxkQ29tcG9uZW50VXBkYXRlKGQsZixnKTpiLnByb3RvdHlwZSYmYi5wcm90b3R5cGUuaXNQdXJlUmVhY3RDb21wb25lbnQ/IURlKGMsZCl8fCFEZShlLGYpOiEwfVxuZnVuY3Rpb24gSGcoYSxiLGMpe3ZhciBkPSExLGU9UGY7dmFyIGY9Yi5jb250ZXh0VHlwZTtcIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mP2Y9cGcoZik6KGU9VGYoYik/UmY6SS5jdXJyZW50LGQ9Yi5jb250ZXh0VHlwZXMsZj0oZD1udWxsIT09ZCYmdm9pZCAwIT09ZCk/U2YoYSxlKTpQZik7Yj1uZXcgYihjLGYpO2EubWVtb2l6ZWRTdGF0ZT1udWxsIT09Yi5zdGF0ZSYmdm9pZCAwIT09Yi5zdGF0ZT9iLnN0YXRlOm51bGw7Yi51cGRhdGVyPUZnO2Euc3RhdGVOb2RlPWI7Yi5fcmVhY3RJbnRlcm5hbHM9YTtkJiYoYT1hLnN0YXRlTm9kZSxhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQ9ZSxhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0PWYpO3JldHVybiBifVxuZnVuY3Rpb24gSWcoYSxiLGMsZCl7YT1iLnN0YXRlO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBiLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJmIuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhjLGQpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBiLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZiLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKGMsZCk7Yi5zdGF0ZSE9PWEmJkZnLmVucXVldWVSZXBsYWNlU3RhdGUoYixiLnN0YXRlLG51bGwpfVxuZnVuY3Rpb24gSmcoYSxiLGMsZCl7dmFyIGU9YS5zdGF0ZU5vZGU7ZS5wcm9wcz1jO2Uuc3RhdGU9YS5tZW1vaXplZFN0YXRlO2UucmVmcz1CZztzZyhhKTt2YXIgZj1iLmNvbnRleHRUeXBlO1wib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWY/ZS5jb250ZXh0PXBnKGYpOihmPVRmKGIpP1JmOkkuY3VycmVudCxlLmNvbnRleHQ9U2YoYSxmKSk7ZS5zdGF0ZT1hLm1lbW9pemVkU3RhdGU7Zj1iLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcztcImZ1bmN0aW9uXCI9PT10eXBlb2YgZiYmKENnKGEsYixmLGMpLGUuc3RhdGU9YS5tZW1vaXplZFN0YXRlKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHN8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZS5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZS5jb21wb25lbnRXaWxsTW91bnR8fChiPWUuc3RhdGUsXG5cImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5jb21wb25lbnRXaWxsTW91bnQmJmUuY29tcG9uZW50V2lsbE1vdW50KCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGUuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmZS5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50KCksYiE9PWUuc3RhdGUmJkZnLmVucXVldWVSZXBsYWNlU3RhdGUoZSxlLnN0YXRlLG51bGwpLHlnKGEsYyxlLGQpLGUuc3RhdGU9YS5tZW1vaXplZFN0YXRlKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5jb21wb25lbnREaWRNb3VudCYmKGEuZmxhZ3N8PTQxOTQzMDgpfXZhciBLZz1bXSxMZz0wLE1nPW51bGwsTmc9MCxPZz1bXSxQZz0wLFFnPW51bGwsUmc9MSxTZz1cIlwiO2Z1bmN0aW9uIFRnKGEsYil7S2dbTGcrK109Tmc7S2dbTGcrK109TWc7TWc9YTtOZz1ifVxuZnVuY3Rpb24gVWcoYSxiLGMpe09nW1BnKytdPVJnO09nW1BnKytdPVNnO09nW1BnKytdPVFnO1FnPWE7dmFyIGQ9Umc7YT1TZzt2YXIgZT0zMi1sYyhkKS0xO2QmPX4oMTw8ZSk7Yys9MTt2YXIgZj0zMi1sYyhiKStlO2lmKDMwPGYpe3ZhciBnPWUtZSU1O2Y9KGQmKDE8PGcpLTEpLnRvU3RyaW5nKDMyKTtkPj49ZztlLT1nO1JnPTE8PDMyLWxjKGIpK2V8Yzw8ZXxkO1NnPWYrYX1lbHNlIFJnPTE8PGZ8Yzw8ZXxkLFNnPWF9ZnVuY3Rpb24gVmcoYSl7bnVsbCE9PWEucmV0dXJuJiYoVGcoYSwxKSxVZyhhLDEsMCkpfWZ1bmN0aW9uIFdnKGEpe2Zvcig7YT09PU1nOylNZz1LZ1stLUxnXSxLZ1tMZ109bnVsbCxOZz1LZ1stLUxnXSxLZ1tMZ109bnVsbDtmb3IoO2E9PT1RZzspUWc9T2dbLS1QZ10sT2dbUGddPW51bGwsU2c9T2dbLS1QZ10sT2dbUGddPW51bGwsUmc9T2dbLS1QZ10sT2dbUGddPW51bGx9dmFyIFhnPW51bGwsWWc9bnVsbCxOPSExLFpnPW51bGw7XG5mdW5jdGlvbiAkZyhhLGIpe3ZhciBjPWFoKDUsbnVsbCxudWxsLDApO2MuZWxlbWVudFR5cGU9XCJERUxFVEVEXCI7Yy5zdGF0ZU5vZGU9YjtjLnJldHVybj1hO2I9YS5kZWxldGlvbnM7bnVsbD09PWI/KGEuZGVsZXRpb25zPVtjXSxhLmZsYWdzfD0xNik6Yi5wdXNoKGMpfVxuZnVuY3Rpb24gYmgoYSxiKXtzd2l0Y2goYS50YWcpe2Nhc2UgNTp2YXIgYz1hLnR5cGU7Yj0xIT09Yi5ub2RlVHlwZXx8Yy50b0xvd2VyQ2FzZSgpIT09Yi5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpP251bGw6YjtyZXR1cm4gbnVsbCE9PWI/KGEuc3RhdGVOb2RlPWIsWGc9YSxZZz1GZihiLmZpcnN0Q2hpbGQpLCEwKTohMTtjYXNlIDY6cmV0dXJuIGI9XCJcIj09PWEucGVuZGluZ1Byb3BzfHwzIT09Yi5ub2RlVHlwZT9udWxsOmIsbnVsbCE9PWI/KGEuc3RhdGVOb2RlPWIsWGc9YSxZZz1udWxsLCEwKTohMTtjYXNlIDEzOnJldHVybiBiPTghPT1iLm5vZGVUeXBlP251bGw6YixudWxsIT09Yj8oYz1udWxsIT09UWc/e2lkOlJnLG92ZXJmbG93OlNnfTpudWxsLGEubWVtb2l6ZWRTdGF0ZT17ZGVoeWRyYXRlZDpiLHRyZWVDb250ZXh0OmMscmV0cnlMYW5lOjEwNzM3NDE4MjR9LGM9YWgoMTgsbnVsbCxudWxsLDApLGMuc3RhdGVOb2RlPWIsYy5yZXR1cm49YSxhLmNoaWxkPWMsWGc9YSxZZz1cbm51bGwsITApOiExO2RlZmF1bHQ6cmV0dXJuITF9fWZ1bmN0aW9uIGNoKGEpe3JldHVybiAwIT09KGEubW9kZSYxKSYmMD09PShhLmZsYWdzJjEyOCl9ZnVuY3Rpb24gZGgoYSl7aWYoTil7dmFyIGI9WWc7aWYoYil7dmFyIGM9YjtpZighYmgoYSxiKSl7aWYoY2goYSkpdGhyb3cgRXJyb3IocCg0MTgpKTtiPUZmKGMubmV4dFNpYmxpbmcpO3ZhciBkPVhnO2ImJmJoKGEsYik/JGcoZCxjKTooYS5mbGFncz1hLmZsYWdzJi00MDk3fDIsTj0hMSxYZz1hKX19ZWxzZXtpZihjaChhKSl0aHJvdyBFcnJvcihwKDQxOCkpO2EuZmxhZ3M9YS5mbGFncyYtNDA5N3wyO049ITE7WGc9YX19fWZ1bmN0aW9uIGVoKGEpe2ZvcihhPWEucmV0dXJuO251bGwhPT1hJiY1IT09YS50YWcmJjMhPT1hLnRhZyYmMTMhPT1hLnRhZzspYT1hLnJldHVybjtYZz1hfVxuZnVuY3Rpb24gZmgoYSl7aWYoYSE9PVhnKXJldHVybiExO2lmKCFOKXJldHVybiBlaChhKSxOPSEwLCExO3ZhciBiOyhiPTMhPT1hLnRhZykmJiEoYj01IT09YS50YWcpJiYoYj1hLnR5cGUsYj1cImhlYWRcIiE9PWImJlwiYm9keVwiIT09YiYmIXlmKGEudHlwZSxhLm1lbW9pemVkUHJvcHMpKTtpZihiJiYoYj1ZZykpe2lmKGNoKGEpKXtmb3IoYT1ZZzthOylhPUZmKGEubmV4dFNpYmxpbmcpO3Rocm93IEVycm9yKHAoNDE4KSk7fWZvcig7YjspJGcoYSxiKSxiPUZmKGIubmV4dFNpYmxpbmcpfWVoKGEpO2lmKDEzPT09YS50YWcpe2E9YS5tZW1vaXplZFN0YXRlO2E9bnVsbCE9PWE/YS5kZWh5ZHJhdGVkOm51bGw7aWYoIWEpdGhyb3cgRXJyb3IocCgzMTcpKTthOnthPWEubmV4dFNpYmxpbmc7Zm9yKGI9MDthOyl7aWYoOD09PWEubm9kZVR5cGUpe3ZhciBjPWEuZGF0YTtpZihcIi8kXCI9PT1jKXtpZigwPT09Yil7WWc9RmYoYS5uZXh0U2libGluZyk7YnJlYWsgYX1iLS19ZWxzZVwiJFwiIT09YyYmXG5cIiQhXCIhPT1jJiZcIiQ/XCIhPT1jfHxiKyt9YT1hLm5leHRTaWJsaW5nfVlnPW51bGx9fWVsc2UgWWc9WGc/RmYoYS5zdGF0ZU5vZGUubmV4dFNpYmxpbmcpOm51bGw7cmV0dXJuITB9ZnVuY3Rpb24gZ2goKXtZZz1YZz1udWxsO049ITF9ZnVuY3Rpb24gaGgoYSl7bnVsbD09PVpnP1pnPVthXTpaZy5wdXNoKGEpfVxuZnVuY3Rpb24gaWgoYSxiLGMpe2E9Yy5yZWY7aWYobnVsbCE9PWEmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBhJiZcIm9iamVjdFwiIT09dHlwZW9mIGEpe2lmKGMuX293bmVyKXtjPWMuX293bmVyO2lmKGMpe2lmKDEhPT1jLnRhZyl0aHJvdyBFcnJvcihwKDMwOSkpO3ZhciBkPWMuc3RhdGVOb2RlfWlmKCFkKXRocm93IEVycm9yKHAoMTQ3LGEpKTt2YXIgZT1kLGY9XCJcIithO2lmKG51bGwhPT1iJiZudWxsIT09Yi5yZWYmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBiLnJlZiYmYi5yZWYuX3N0cmluZ1JlZj09PWYpcmV0dXJuIGIucmVmO2I9ZnVuY3Rpb24oYSl7dmFyIGI9ZS5yZWZzO2I9PT1CZyYmKGI9ZS5yZWZzPXt9KTtudWxsPT09YT9kZWxldGUgYltmXTpiW2ZdPWF9O2IuX3N0cmluZ1JlZj1mO3JldHVybiBifWlmKFwic3RyaW5nXCIhPT10eXBlb2YgYSl0aHJvdyBFcnJvcihwKDI4NCkpO2lmKCFjLl9vd25lcil0aHJvdyBFcnJvcihwKDI5MCxhKSk7fXJldHVybiBhfVxuZnVuY3Rpb24gamgoYSxiKXthPU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChiKTt0aHJvdyBFcnJvcihwKDMxLFwiW29iamVjdCBPYmplY3RdXCI9PT1hP1wib2JqZWN0IHdpdGgga2V5cyB7XCIrT2JqZWN0LmtleXMoYikuam9pbihcIiwgXCIpK1wifVwiOmEpKTt9ZnVuY3Rpb24ga2goYSl7dmFyIGI9YS5faW5pdDtyZXR1cm4gYihhLl9wYXlsb2FkKX1cbmZ1bmN0aW9uIGxoKGEpe2Z1bmN0aW9uIGIoYixjKXtpZihhKXt2YXIgZD1iLmRlbGV0aW9ucztudWxsPT09ZD8oYi5kZWxldGlvbnM9W2NdLGIuZmxhZ3N8PTE2KTpkLnB1c2goYyl9fWZ1bmN0aW9uIGMoYyxkKXtpZighYSlyZXR1cm4gbnVsbDtmb3IoO251bGwhPT1kOyliKGMsZCksZD1kLnNpYmxpbmc7cmV0dXJuIG51bGx9ZnVuY3Rpb24gZChhLGIpe2ZvcihhPW5ldyBNYXA7bnVsbCE9PWI7KW51bGwhPT1iLmtleT9hLnNldChiLmtleSxiKTphLnNldChiLmluZGV4LGIpLGI9Yi5zaWJsaW5nO3JldHVybiBhfWZ1bmN0aW9uIGUoYSxiKXthPW1oKGEsYik7YS5pbmRleD0wO2Euc2libGluZz1udWxsO3JldHVybiBhfWZ1bmN0aW9uIGYoYixjLGQpe2IuaW5kZXg9ZDtpZighYSlyZXR1cm4gYi5mbGFnc3w9MTA0ODU3NixjO2Q9Yi5hbHRlcm5hdGU7aWYobnVsbCE9PWQpcmV0dXJuIGQ9ZC5pbmRleCxkPGM/KGIuZmxhZ3N8PTIsYyk6ZDtiLmZsYWdzfD0yO3JldHVybiBjfWZ1bmN0aW9uIGcoYil7YSYmXG5udWxsPT09Yi5hbHRlcm5hdGUmJihiLmZsYWdzfD0yKTtyZXR1cm4gYn1mdW5jdGlvbiBoKGEsYixjLGQpe2lmKG51bGw9PT1ifHw2IT09Yi50YWcpcmV0dXJuIGI9bmgoYyxhLm1vZGUsZCksYi5yZXR1cm49YSxiO2I9ZShiLGMpO2IucmV0dXJuPWE7cmV0dXJuIGJ9ZnVuY3Rpb24gayhhLGIsYyxkKXt2YXIgZj1jLnR5cGU7aWYoZj09PXZhKXJldHVybiBtKGEsYixjLnByb3BzLmNoaWxkcmVuLGQsYy5rZXkpO2lmKG51bGwhPT1iJiYoYi5lbGVtZW50VHlwZT09PWZ8fFwib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWYmJmYuJCR0eXBlb2Y9PT1GYSYma2goZik9PT1iLnR5cGUpKXJldHVybiBkPWUoYixjLnByb3BzKSxkLnJlZj1paChhLGIsYyksZC5yZXR1cm49YSxkO2Q9b2goYy50eXBlLGMua2V5LGMucHJvcHMsbnVsbCxhLm1vZGUsZCk7ZC5yZWY9aWgoYSxiLGMpO2QucmV0dXJuPWE7cmV0dXJuIGR9ZnVuY3Rpb24gbChhLGIsYyxkKXtpZihudWxsPT09Ynx8NCE9PWIudGFnfHxcbmIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8hPT1jLmNvbnRhaW5lckluZm98fGIuc3RhdGVOb2RlLmltcGxlbWVudGF0aW9uIT09Yy5pbXBsZW1lbnRhdGlvbilyZXR1cm4gYj1waChjLGEubW9kZSxkKSxiLnJldHVybj1hLGI7Yj1lKGIsYy5jaGlsZHJlbnx8W10pO2IucmV0dXJuPWE7cmV0dXJuIGJ9ZnVuY3Rpb24gbShhLGIsYyxkLGYpe2lmKG51bGw9PT1ifHw3IT09Yi50YWcpcmV0dXJuIGI9cWgoYyxhLm1vZGUsZCxmKSxiLnJldHVybj1hLGI7Yj1lKGIsYyk7Yi5yZXR1cm49YTtyZXR1cm4gYn1mdW5jdGlvbiB3KGEsYixjKXtpZihcInN0cmluZ1wiPT09dHlwZW9mIGImJlwiXCIhPT1ifHxcIm51bWJlclwiPT09dHlwZW9mIGIpcmV0dXJuIGI9bmgoXCJcIitiLGEubW9kZSxjKSxiLnJldHVybj1hLGI7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBiJiZudWxsIT09Yil7c3dpdGNoKGIuJCR0eXBlb2Ype2Nhc2UgdGE6cmV0dXJuIGM9b2goYi50eXBlLGIua2V5LGIucHJvcHMsbnVsbCxhLm1vZGUsYyksXG5jLnJlZj1paChhLG51bGwsYiksYy5yZXR1cm49YSxjO2Nhc2UgdWE6cmV0dXJuIGI9cGgoYixhLm1vZGUsYyksYi5yZXR1cm49YSxiO2Nhc2UgRmE6dmFyIGQ9Yi5faW5pdDtyZXR1cm4gdyhhLGQoYi5fcGF5bG9hZCksYyl9aWYoYmIoYil8fElhKGIpKXJldHVybiBiPXFoKGIsYS5tb2RlLGMsbnVsbCksYi5yZXR1cm49YSxiO2poKGEsYil9cmV0dXJuIG51bGx9ZnVuY3Rpb24gdShhLGIsYyxkKXt2YXIgZT1udWxsIT09Yj9iLmtleTpudWxsO2lmKFwic3RyaW5nXCI9PT10eXBlb2YgYyYmXCJcIiE9PWN8fFwibnVtYmVyXCI9PT10eXBlb2YgYylyZXR1cm4gbnVsbCE9PWU/bnVsbDpoKGEsYixcIlwiK2MsZCk7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBjJiZudWxsIT09Yyl7c3dpdGNoKGMuJCR0eXBlb2Ype2Nhc2UgdGE6cmV0dXJuIGMua2V5PT09ZT9rKGEsYixjLGQpOm51bGw7Y2FzZSB1YTpyZXR1cm4gYy5rZXk9PT1lP2woYSxiLGMsZCk6bnVsbDtjYXNlIEZhOnJldHVybiBlPWMuX2luaXQsdShhLFxuYixlKGMuX3BheWxvYWQpLGQpfWlmKGJiKGMpfHxJYShjKSlyZXR1cm4gbnVsbCE9PWU/bnVsbDptKGEsYixjLGQsbnVsbCk7amgoYSxjKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiB5KGEsYixjLGQsZSl7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBkJiZcIlwiIT09ZHx8XCJudW1iZXJcIj09PXR5cGVvZiBkKXJldHVybiBhPWEuZ2V0KGMpfHxudWxsLGgoYixhLFwiXCIrZCxlKTtpZihcIm9iamVjdFwiPT09dHlwZW9mIGQmJm51bGwhPT1kKXtzd2l0Y2goZC4kJHR5cGVvZil7Y2FzZSB0YTpyZXR1cm4gYT1hLmdldChudWxsPT09ZC5rZXk/YzpkLmtleSl8fG51bGwsayhiLGEsZCxlKTtjYXNlIHVhOnJldHVybiBhPWEuZ2V0KG51bGw9PT1kLmtleT9jOmQua2V5KXx8bnVsbCxsKGIsYSxkLGUpO2Nhc2UgRmE6dmFyIGY9ZC5faW5pdDtyZXR1cm4geShhLGIsYyxmKGQuX3BheWxvYWQpLGUpfWlmKGJiKGQpfHxJYShkKSlyZXR1cm4gYT1hLmdldChjKXx8bnVsbCxtKGIsYSxkLGUsbnVsbCk7amgoYixkKX1yZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIG4oZSxnLGgsayl7Zm9yKHZhciBsPW51bGwsbj1udWxsLG09ZyxyPWc9MCx4PW51bGw7bnVsbCE9PW0mJnI8aC5sZW5ndGg7cisrKXttLmluZGV4PnI/KHg9bSxtPW51bGwpOng9bS5zaWJsaW5nO3ZhciB0PXUoZSxtLGhbcl0sayk7aWYobnVsbD09PXQpe251bGw9PT1tJiYobT14KTticmVha31hJiZtJiZudWxsPT09dC5hbHRlcm5hdGUmJmIoZSxtKTtnPWYodCxnLHIpO251bGw9PT1uP2w9dDpuLnNpYmxpbmc9dDtuPXQ7bT14fWlmKHI9PT1oLmxlbmd0aClyZXR1cm4gYyhlLG0pLE4mJlRnKGUsciksbDtpZihudWxsPT09bSl7Zm9yKDtyPGgubGVuZ3RoO3IrKyltPXcoZSxoW3JdLGspLG51bGwhPT1tJiYoZz1mKG0sZyxyKSxudWxsPT09bj9sPW06bi5zaWJsaW5nPW0sbj1tKTtOJiZUZyhlLHIpO3JldHVybiBsfWZvcihtPWQoZSxtKTtyPGgubGVuZ3RoO3IrKyl4PXkobSxlLHIsaFtyXSxrKSxudWxsIT09eCYmKGEmJm51bGwhPT14LmFsdGVybmF0ZSYmbS5kZWxldGUobnVsbD09PVxueC5rZXk/cjp4LmtleSksZz1mKHgsZyxyKSxudWxsPT09bj9sPXg6bi5zaWJsaW5nPXgsbj14KTthJiZtLmZvckVhY2goZnVuY3Rpb24oYSl7cmV0dXJuIGIoZSxhKX0pO04mJlRnKGUscik7cmV0dXJuIGx9ZnVuY3Rpb24gdihlLGcsaCxrKXt2YXIgbD1JYShoKTtpZihcImZ1bmN0aW9uXCIhPT10eXBlb2YgbCl0aHJvdyBFcnJvcihwKDE1MCkpO2g9bC5jYWxsKGgpO2lmKG51bGw9PWgpdGhyb3cgRXJyb3IocCgxNTEpKTtmb3IodmFyIG09bD1udWxsLG49ZyxyPWc9MCx4PW51bGwsdD1oLm5leHQoKTtudWxsIT09biYmIXQuZG9uZTtyKyssdD1oLm5leHQoKSl7bi5pbmRleD5yPyh4PW4sbj1udWxsKTp4PW4uc2libGluZzt2YXIgdj11KGUsbix0LnZhbHVlLGspO2lmKG51bGw9PT12KXtudWxsPT09biYmKG49eCk7YnJlYWt9YSYmbiYmbnVsbD09PXYuYWx0ZXJuYXRlJiZiKGUsbik7Zz1mKHYsZyxyKTtudWxsPT09bT9sPXY6bS5zaWJsaW5nPXY7bT12O249eH1pZih0LmRvbmUpcmV0dXJuIGMoZSxcbm4pLE4mJlRnKGUsciksbDtpZihudWxsPT09bil7Zm9yKDshdC5kb25lO3IrKyx0PWgubmV4dCgpKXQ9dyhlLHQudmFsdWUsayksbnVsbCE9PXQmJihnPWYodCxnLHIpLG51bGw9PT1tP2w9dDptLnNpYmxpbmc9dCxtPXQpO04mJlRnKGUscik7cmV0dXJuIGx9Zm9yKG49ZChlLG4pOyF0LmRvbmU7cisrLHQ9aC5uZXh0KCkpdD15KG4sZSxyLHQudmFsdWUsayksbnVsbCE9PXQmJihhJiZudWxsIT09dC5hbHRlcm5hdGUmJm4uZGVsZXRlKG51bGw9PT10LmtleT9yOnQua2V5KSxnPWYodCxnLHIpLG51bGw9PT1tP2w9dDptLnNpYmxpbmc9dCxtPXQpO2EmJm4uZm9yRWFjaChmdW5jdGlvbihhKXtyZXR1cm4gYihlLGEpfSk7TiYmVGcoZSxyKTtyZXR1cm4gbH1mdW5jdGlvbiBDKGEsZCxmLGgpe1wib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWYmJmYudHlwZT09PXZhJiZudWxsPT09Zi5rZXkmJihmPWYucHJvcHMuY2hpbGRyZW4pO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWYpe3N3aXRjaChmLiQkdHlwZW9mKXtjYXNlIHRhOmE6e2Zvcih2YXIgaz1cbmYua2V5LGw9ZDtudWxsIT09bDspe2lmKGwua2V5PT09ayl7az1mLnR5cGU7aWYoaz09PXZhKXtpZig3PT09bC50YWcpe2MoYSxsLnNpYmxpbmcpO2Q9ZShsLGYucHJvcHMuY2hpbGRyZW4pO2QucmV0dXJuPWE7YT1kO2JyZWFrIGF9fWVsc2UgaWYobC5lbGVtZW50VHlwZT09PWt8fFwib2JqZWN0XCI9PT10eXBlb2YgayYmbnVsbCE9PWsmJmsuJCR0eXBlb2Y9PT1GYSYma2goayk9PT1sLnR5cGUpe2MoYSxsLnNpYmxpbmcpO2Q9ZShsLGYucHJvcHMpO2QucmVmPWloKGEsbCxmKTtkLnJldHVybj1hO2E9ZDticmVhayBhfWMoYSxsKTticmVha31lbHNlIGIoYSxsKTtsPWwuc2libGluZ31mLnR5cGU9PT12YT8oZD1xaChmLnByb3BzLmNoaWxkcmVuLGEubW9kZSxoLGYua2V5KSxkLnJldHVybj1hLGE9ZCk6KGg9b2goZi50eXBlLGYua2V5LGYucHJvcHMsbnVsbCxhLm1vZGUsaCksaC5yZWY9aWgoYSxkLGYpLGgucmV0dXJuPWEsYT1oKX1yZXR1cm4gZyhhKTtjYXNlIHVhOmE6e2ZvcihsPWYua2V5O251bGwhPT1cbmQ7KXtpZihkLmtleT09PWwpaWYoND09PWQudGFnJiZkLnN0YXRlTm9kZS5jb250YWluZXJJbmZvPT09Zi5jb250YWluZXJJbmZvJiZkLnN0YXRlTm9kZS5pbXBsZW1lbnRhdGlvbj09PWYuaW1wbGVtZW50YXRpb24pe2MoYSxkLnNpYmxpbmcpO2Q9ZShkLGYuY2hpbGRyZW58fFtdKTtkLnJldHVybj1hO2E9ZDticmVhayBhfWVsc2V7YyhhLGQpO2JyZWFrfWVsc2UgYihhLGQpO2Q9ZC5zaWJsaW5nfWQ9cGgoZixhLm1vZGUsaCk7ZC5yZXR1cm49YTthPWR9cmV0dXJuIGcoYSk7Y2FzZSBGYTpyZXR1cm4gbD1mLl9pbml0LEMoYSxkLGwoZi5fcGF5bG9hZCksaCl9aWYoYmIoZikpcmV0dXJuIG4oYSxkLGYsaCk7aWYoSWEoZikpcmV0dXJuIHYoYSxkLGYsaCk7amgoYSxmKX1yZXR1cm5cInN0cmluZ1wiPT09dHlwZW9mIGYmJlwiXCIhPT1mfHxcIm51bWJlclwiPT09dHlwZW9mIGY/KGY9XCJcIitmLG51bGwhPT1kJiY2PT09ZC50YWc/KGMoYSxkLnNpYmxpbmcpLGQ9ZShkLGYpLGQucmV0dXJuPWEsYT1kKTpcbihjKGEsZCksZD1uaChmLGEubW9kZSxoKSxkLnJldHVybj1hLGE9ZCksZyhhKSk6YyhhLGQpfXJldHVybiBDfXZhciByaD1saCghMCksc2g9bGgoITEpLHRoPXt9LHVoPU9mKHRoKSx2aD1PZih0aCksd2g9T2YodGgpO2Z1bmN0aW9uIHhoKGEpe2lmKGE9PT10aCl0aHJvdyBFcnJvcihwKDE3NCkpO3JldHVybiBhfWZ1bmN0aW9uIHloKGEsYil7SCh3aCxiKTtIKHZoLGEpO0godWgsdGgpO2E9Yi5ub2RlVHlwZTtzd2l0Y2goYSl7Y2FzZSA5OmNhc2UgMTE6Yj0oYj1iLmRvY3VtZW50RWxlbWVudCk/Yi5uYW1lc3BhY2VVUkk6aWIobnVsbCxcIlwiKTticmVhaztkZWZhdWx0OmE9OD09PWE/Yi5wYXJlbnROb2RlOmIsYj1hLm5hbWVzcGFjZVVSSXx8bnVsbCxhPWEudGFnTmFtZSxiPWliKGIsYSl9Ryh1aCk7SCh1aCxiKX1mdW5jdGlvbiB6aCgpe0codWgpO0codmgpO0cod2gpfVxuZnVuY3Rpb24gQWgoYSl7eGgod2guY3VycmVudCk7dmFyIGI9eGgodWguY3VycmVudCk7dmFyIGM9aWIoYixhLnR5cGUpO2IhPT1jJiYoSCh2aCxhKSxIKHVoLGMpKX1mdW5jdGlvbiBCaChhKXt2aC5jdXJyZW50PT09YSYmKEcodWgpLEcodmgpKX12YXIgUD1PZigwKTtcbmZ1bmN0aW9uIENoKGEpe2Zvcih2YXIgYj1hO251bGwhPT1iOyl7aWYoMTM9PT1iLnRhZyl7dmFyIGM9Yi5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1jJiYoYz1jLmRlaHlkcmF0ZWQsbnVsbD09PWN8fFwiJD9cIj09PWMuZGF0YXx8XCIkIVwiPT09Yy5kYXRhKSlyZXR1cm4gYn1lbHNlIGlmKDE5PT09Yi50YWcmJnZvaWQgMCE9PWIubWVtb2l6ZWRQcm9wcy5yZXZlYWxPcmRlcil7aWYoMCE9PShiLmZsYWdzJjEyOCkpcmV0dXJuIGJ9ZWxzZSBpZihudWxsIT09Yi5jaGlsZCl7Yi5jaGlsZC5yZXR1cm49YjtiPWIuY2hpbGQ7Y29udGludWV9aWYoYj09PWEpYnJlYWs7Zm9yKDtudWxsPT09Yi5zaWJsaW5nOyl7aWYobnVsbD09PWIucmV0dXJufHxiLnJldHVybj09PWEpcmV0dXJuIG51bGw7Yj1iLnJldHVybn1iLnNpYmxpbmcucmV0dXJuPWIucmV0dXJuO2I9Yi5zaWJsaW5nfXJldHVybiBudWxsfXZhciBEaD1bXTtcbmZ1bmN0aW9uIEVoKCl7Zm9yKHZhciBhPTA7YTxEaC5sZW5ndGg7YSsrKURoW2FdLl93b3JrSW5Qcm9ncmVzc1ZlcnNpb25QcmltYXJ5PW51bGw7RGgubGVuZ3RoPTB9dmFyIEZoPXNhLlJlYWN0Q3VycmVudERpc3BhdGNoZXIsR2g9c2EuUmVhY3RDdXJyZW50QmF0Y2hDb25maWcsSGg9MCxRPW51bGwsUj1udWxsLFM9bnVsbCxJaD0hMSxKaD0hMSxLaD0wLExoPTA7ZnVuY3Rpb24gVSgpe3Rocm93IEVycm9yKHAoMzIxKSk7fWZ1bmN0aW9uIE1oKGEsYil7aWYobnVsbD09PWIpcmV0dXJuITE7Zm9yKHZhciBjPTA7YzxiLmxlbmd0aCYmYzxhLmxlbmd0aDtjKyspaWYoIUNlKGFbY10sYltjXSkpcmV0dXJuITE7cmV0dXJuITB9XG5mdW5jdGlvbiBOaChhLGIsYyxkLGUsZil7SGg9ZjtRPWI7Yi5tZW1vaXplZFN0YXRlPW51bGw7Yi51cGRhdGVRdWV1ZT1udWxsO2IubGFuZXM9MDtGaC5jdXJyZW50PW51bGw9PT1hfHxudWxsPT09YS5tZW1vaXplZFN0YXRlP09oOlBoO2E9YyhkLGUpO2lmKEpoKXtmPTA7ZG97Smg9ITE7S2g9MDtpZigyNTw9Zil0aHJvdyBFcnJvcihwKDMwMSkpO2YrPTE7Uz1SPW51bGw7Yi51cGRhdGVRdWV1ZT1udWxsO0ZoLmN1cnJlbnQ9UWg7YT1jKGQsZSl9d2hpbGUoSmgpfUZoLmN1cnJlbnQ9Umg7Yj1udWxsIT09UiYmbnVsbCE9PVIubmV4dDtIaD0wO1M9Uj1RPW51bGw7SWg9ITE7aWYoYil0aHJvdyBFcnJvcihwKDMwMCkpO3JldHVybiBhfWZ1bmN0aW9uIFNoKCl7dmFyIGE9MCE9PUtoO0toPTA7cmV0dXJuIGF9XG5mdW5jdGlvbiBUaCgpe3ZhciBhPXttZW1vaXplZFN0YXRlOm51bGwsYmFzZVN0YXRlOm51bGwsYmFzZVF1ZXVlOm51bGwscXVldWU6bnVsbCxuZXh0Om51bGx9O251bGw9PT1TP1EubWVtb2l6ZWRTdGF0ZT1TPWE6Uz1TLm5leHQ9YTtyZXR1cm4gU31mdW5jdGlvbiBVaCgpe2lmKG51bGw9PT1SKXt2YXIgYT1RLmFsdGVybmF0ZTthPW51bGwhPT1hP2EubWVtb2l6ZWRTdGF0ZTpudWxsfWVsc2UgYT1SLm5leHQ7dmFyIGI9bnVsbD09PVM/US5tZW1vaXplZFN0YXRlOlMubmV4dDtpZihudWxsIT09YilTPWIsUj1hO2Vsc2V7aWYobnVsbD09PWEpdGhyb3cgRXJyb3IocCgzMTApKTtSPWE7YT17bWVtb2l6ZWRTdGF0ZTpSLm1lbW9pemVkU3RhdGUsYmFzZVN0YXRlOlIuYmFzZVN0YXRlLGJhc2VRdWV1ZTpSLmJhc2VRdWV1ZSxxdWV1ZTpSLnF1ZXVlLG5leHQ6bnVsbH07bnVsbD09PVM/US5tZW1vaXplZFN0YXRlPVM9YTpTPVMubmV4dD1hfXJldHVybiBTfVxuZnVuY3Rpb24gVmgoYSxiKXtyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2YgYj9iKGEpOmJ9XG5mdW5jdGlvbiBXaChhKXt2YXIgYj1VaCgpLGM9Yi5xdWV1ZTtpZihudWxsPT09Yyl0aHJvdyBFcnJvcihwKDMxMSkpO2MubGFzdFJlbmRlcmVkUmVkdWNlcj1hO3ZhciBkPVIsZT1kLmJhc2VRdWV1ZSxmPWMucGVuZGluZztpZihudWxsIT09Zil7aWYobnVsbCE9PWUpe3ZhciBnPWUubmV4dDtlLm5leHQ9Zi5uZXh0O2YubmV4dD1nfWQuYmFzZVF1ZXVlPWU9ZjtjLnBlbmRpbmc9bnVsbH1pZihudWxsIT09ZSl7Zj1lLm5leHQ7ZD1kLmJhc2VTdGF0ZTt2YXIgaD1nPW51bGwsaz1udWxsLGw9Zjtkb3t2YXIgbT1sLmxhbmU7aWYoKEhoJm0pPT09bSludWxsIT09ayYmKGs9ay5uZXh0PXtsYW5lOjAsYWN0aW9uOmwuYWN0aW9uLGhhc0VhZ2VyU3RhdGU6bC5oYXNFYWdlclN0YXRlLGVhZ2VyU3RhdGU6bC5lYWdlclN0YXRlLG5leHQ6bnVsbH0pLGQ9bC5oYXNFYWdlclN0YXRlP2wuZWFnZXJTdGF0ZTphKGQsbC5hY3Rpb24pO2Vsc2V7dmFyIHc9e2xhbmU6bSxhY3Rpb246bC5hY3Rpb24saGFzRWFnZXJTdGF0ZTpsLmhhc0VhZ2VyU3RhdGUsXG5lYWdlclN0YXRlOmwuZWFnZXJTdGF0ZSxuZXh0Om51bGx9O251bGw9PT1rPyhoPWs9dyxnPWQpOms9ay5uZXh0PXc7US5sYW5lc3w9bTt6Z3w9bX1sPWwubmV4dH13aGlsZShudWxsIT09bCYmbCE9PWYpO251bGw9PT1rP2c9ZDprLm5leHQ9aDtDZShkLGIubWVtb2l6ZWRTdGF0ZSl8fChvZz0hMCk7Yi5tZW1vaXplZFN0YXRlPWQ7Yi5iYXNlU3RhdGU9ZztiLmJhc2VRdWV1ZT1rO2MubGFzdFJlbmRlcmVkU3RhdGU9ZH1hPWMuaW50ZXJsZWF2ZWQ7aWYobnVsbCE9PWEpe2U9YTtkbyBmPWUubGFuZSxRLmxhbmVzfD1mLHpnfD1mLGU9ZS5uZXh0O3doaWxlKGUhPT1hKX1lbHNlIG51bGw9PT1lJiYoYy5sYW5lcz0wKTtyZXR1cm5bYi5tZW1vaXplZFN0YXRlLGMuZGlzcGF0Y2hdfVxuZnVuY3Rpb24gWGgoYSl7dmFyIGI9VWgoKSxjPWIucXVldWU7aWYobnVsbD09PWMpdGhyb3cgRXJyb3IocCgzMTEpKTtjLmxhc3RSZW5kZXJlZFJlZHVjZXI9YTt2YXIgZD1jLmRpc3BhdGNoLGU9Yy5wZW5kaW5nLGY9Yi5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1lKXtjLnBlbmRpbmc9bnVsbDt2YXIgZz1lPWUubmV4dDtkbyBmPWEoZixnLmFjdGlvbiksZz1nLm5leHQ7d2hpbGUoZyE9PWUpO0NlKGYsYi5tZW1vaXplZFN0YXRlKXx8KG9nPSEwKTtiLm1lbW9pemVkU3RhdGU9ZjtudWxsPT09Yi5iYXNlUXVldWUmJihiLmJhc2VTdGF0ZT1mKTtjLmxhc3RSZW5kZXJlZFN0YXRlPWZ9cmV0dXJuW2YsZF19ZnVuY3Rpb24gWWgoKXt9XG5mdW5jdGlvbiBaaChhLGIpe3ZhciBjPVEsZD1VaCgpLGU9YigpLGY9IUNlKGQubWVtb2l6ZWRTdGF0ZSxlKTtmJiYoZC5tZW1vaXplZFN0YXRlPWUsb2c9ITApO2Q9ZC5xdWV1ZTskaChhaS5iaW5kKG51bGwsYyxkLGEpLFthXSk7aWYoZC5nZXRTbmFwc2hvdCE9PWJ8fGZ8fG51bGwhPT1TJiZTLm1lbW9pemVkU3RhdGUudGFnJjEpe2MuZmxhZ3N8PTIwNDg7YmkoOSxjaS5iaW5kKG51bGwsYyxkLGUsYiksdm9pZCAwLG51bGwpO2lmKG51bGw9PT1KKXRocm93IEVycm9yKHAoMzQ5KSk7MCE9PShIaCYzMCl8fGRpKGMsYixlKX1yZXR1cm4gZX1mdW5jdGlvbiBkaShhLGIsYyl7YS5mbGFnc3w9MTYzODQ7YT17Z2V0U25hcHNob3Q6Yix2YWx1ZTpjfTtiPVEudXBkYXRlUXVldWU7bnVsbD09PWI/KGI9e2xhc3RFZmZlY3Q6bnVsbCxzdG9yZXM6bnVsbH0sUS51cGRhdGVRdWV1ZT1iLGIuc3RvcmVzPVthXSk6KGM9Yi5zdG9yZXMsbnVsbD09PWM/Yi5zdG9yZXM9W2FdOmMucHVzaChhKSl9XG5mdW5jdGlvbiBjaShhLGIsYyxkKXtiLnZhbHVlPWM7Yi5nZXRTbmFwc2hvdD1kO2VpKGIpJiZFZyhhLDEsLTEpfWZ1bmN0aW9uIGFpKGEsYixjKXtyZXR1cm4gYyhmdW5jdGlvbigpe2VpKGIpJiZFZyhhLDEsLTEpfSl9ZnVuY3Rpb24gZWkoYSl7dmFyIGI9YS5nZXRTbmFwc2hvdDthPWEudmFsdWU7dHJ5e3ZhciBjPWIoKTtyZXR1cm4hQ2UoYSxjKX1jYXRjaChkKXtyZXR1cm4hMH19ZnVuY3Rpb24gZmkoYSl7dmFyIGI9VGgoKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSYmKGE9YSgpKTtiLm1lbW9pemVkU3RhdGU9Yi5iYXNlU3RhdGU9YTthPXtwZW5kaW5nOm51bGwsaW50ZXJsZWF2ZWQ6bnVsbCxsYW5lczowLGRpc3BhdGNoOm51bGwsbGFzdFJlbmRlcmVkUmVkdWNlcjpWaCxsYXN0UmVuZGVyZWRTdGF0ZTphfTtiLnF1ZXVlPWE7YT1hLmRpc3BhdGNoPWdpLmJpbmQobnVsbCxRLGEpO3JldHVybltiLm1lbW9pemVkU3RhdGUsYV19XG5mdW5jdGlvbiBiaShhLGIsYyxkKXthPXt0YWc6YSxjcmVhdGU6YixkZXN0cm95OmMsZGVwczpkLG5leHQ6bnVsbH07Yj1RLnVwZGF0ZVF1ZXVlO251bGw9PT1iPyhiPXtsYXN0RWZmZWN0Om51bGwsc3RvcmVzOm51bGx9LFEudXBkYXRlUXVldWU9YixiLmxhc3RFZmZlY3Q9YS5uZXh0PWEpOihjPWIubGFzdEVmZmVjdCxudWxsPT09Yz9iLmxhc3RFZmZlY3Q9YS5uZXh0PWE6KGQ9Yy5uZXh0LGMubmV4dD1hLGEubmV4dD1kLGIubGFzdEVmZmVjdD1hKSk7cmV0dXJuIGF9ZnVuY3Rpb24gaGkoKXtyZXR1cm4gVWgoKS5tZW1vaXplZFN0YXRlfWZ1bmN0aW9uIGlpKGEsYixjLGQpe3ZhciBlPVRoKCk7US5mbGFnc3w9YTtlLm1lbW9pemVkU3RhdGU9YmkoMXxiLGMsdm9pZCAwLHZvaWQgMD09PWQ/bnVsbDpkKX1cbmZ1bmN0aW9uIGppKGEsYixjLGQpe3ZhciBlPVVoKCk7ZD12b2lkIDA9PT1kP251bGw6ZDt2YXIgZj12b2lkIDA7aWYobnVsbCE9PVIpe3ZhciBnPVIubWVtb2l6ZWRTdGF0ZTtmPWcuZGVzdHJveTtpZihudWxsIT09ZCYmTWgoZCxnLmRlcHMpKXtlLm1lbW9pemVkU3RhdGU9YmkoYixjLGYsZCk7cmV0dXJufX1RLmZsYWdzfD1hO2UubWVtb2l6ZWRTdGF0ZT1iaSgxfGIsYyxmLGQpfWZ1bmN0aW9uIGtpKGEsYil7cmV0dXJuIGlpKDgzOTA2NTYsOCxhLGIpfWZ1bmN0aW9uICRoKGEsYil7cmV0dXJuIGppKDIwNDgsOCxhLGIpfWZ1bmN0aW9uIGxpKGEsYil7cmV0dXJuIGppKDQsMixhLGIpfWZ1bmN0aW9uIG1pKGEsYil7cmV0dXJuIGppKDQsNCxhLGIpfVxuZnVuY3Rpb24gbmkoYSxiKXtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYilyZXR1cm4gYT1hKCksYihhKSxmdW5jdGlvbigpe2IobnVsbCl9O2lmKG51bGwhPT1iJiZ2b2lkIDAhPT1iKXJldHVybiBhPWEoKSxiLmN1cnJlbnQ9YSxmdW5jdGlvbigpe2IuY3VycmVudD1udWxsfX1mdW5jdGlvbiBvaShhLGIsYyl7Yz1udWxsIT09YyYmdm9pZCAwIT09Yz9jLmNvbmNhdChbYV0pOm51bGw7cmV0dXJuIGppKDQsNCxuaS5iaW5kKG51bGwsYixhKSxjKX1mdW5jdGlvbiBwaSgpe31mdW5jdGlvbiBxaShhLGIpe3ZhciBjPVVoKCk7Yj12b2lkIDA9PT1iP251bGw6Yjt2YXIgZD1jLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWQmJm51bGwhPT1iJiZNaChiLGRbMV0pKXJldHVybiBkWzBdO2MubWVtb2l6ZWRTdGF0ZT1bYSxiXTtyZXR1cm4gYX1cbmZ1bmN0aW9uIHJpKGEsYil7dmFyIGM9VWgoKTtiPXZvaWQgMD09PWI/bnVsbDpiO3ZhciBkPWMubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09ZCYmbnVsbCE9PWImJk1oKGIsZFsxXSkpcmV0dXJuIGRbMF07YT1hKCk7Yy5tZW1vaXplZFN0YXRlPVthLGJdO3JldHVybiBhfWZ1bmN0aW9uIHNpKGEsYil7dmFyIGM9RTtFPTAhPT1jJiY0PmM/Yzo0O2EoITApO3ZhciBkPUdoLnRyYW5zaXRpb247R2gudHJhbnNpdGlvbj17fTt0cnl7YSghMSksYigpfWZpbmFsbHl7RT1jLEdoLnRyYW5zaXRpb249ZH19ZnVuY3Rpb24gdGkoKXtyZXR1cm4gVWgoKS5tZW1vaXplZFN0YXRlfWZ1bmN0aW9uIHVpKGEsYixjKXt2YXIgZD1EZyhhKTtjPXtsYW5lOmQsYWN0aW9uOmMsaGFzRWFnZXJTdGF0ZTohMSxlYWdlclN0YXRlOm51bGwsbmV4dDpudWxsfTt2aShhKT93aShiLGMpOih4aShhLGIsYyksYz1NKCksYT1FZyhhLGQsYyksbnVsbCE9PWEmJnlpKGEsYixkKSl9XG5mdW5jdGlvbiBnaShhLGIsYyl7dmFyIGQ9RGcoYSksZT17bGFuZTpkLGFjdGlvbjpjLGhhc0VhZ2VyU3RhdGU6ITEsZWFnZXJTdGF0ZTpudWxsLG5leHQ6bnVsbH07aWYodmkoYSkpd2koYixlKTtlbHNle3hpKGEsYixlKTt2YXIgZj1hLmFsdGVybmF0ZTtpZigwPT09YS5sYW5lcyYmKG51bGw9PT1mfHwwPT09Zi5sYW5lcykmJihmPWIubGFzdFJlbmRlcmVkUmVkdWNlcixudWxsIT09ZikpdHJ5e3ZhciBnPWIubGFzdFJlbmRlcmVkU3RhdGUsaD1mKGcsYyk7ZS5oYXNFYWdlclN0YXRlPSEwO2UuZWFnZXJTdGF0ZT1oO2lmKENlKGgsZykpcmV0dXJufWNhdGNoKGspe31maW5hbGx5e31jPU0oKTthPUVnKGEsZCxjKTtudWxsIT09YSYmeWkoYSxiLGQpfX1mdW5jdGlvbiB2aShhKXt2YXIgYj1hLmFsdGVybmF0ZTtyZXR1cm4gYT09PVF8fG51bGwhPT1iJiZiPT09UX1cbmZ1bmN0aW9uIHdpKGEsYil7Smg9SWg9ITA7dmFyIGM9YS5wZW5kaW5nO251bGw9PT1jP2IubmV4dD1iOihiLm5leHQ9Yy5uZXh0LGMubmV4dD1iKTthLnBlbmRpbmc9Yn1mdW5jdGlvbiB4aShhLGIsYyl7bnVsbCE9PUomJjAhPT0oYS5tb2RlJjEpJiYwPT09KEsmMik/KGE9Yi5pbnRlcmxlYXZlZCxudWxsPT09YT8oYy5uZXh0PWMsbnVsbD09PXFnP3FnPVtiXTpxZy5wdXNoKGIpKTooYy5uZXh0PWEubmV4dCxhLm5leHQ9YyksYi5pbnRlcmxlYXZlZD1jKTooYT1iLnBlbmRpbmcsbnVsbD09PWE/Yy5uZXh0PWM6KGMubmV4dD1hLm5leHQsYS5uZXh0PWMpLGIucGVuZGluZz1jKX1mdW5jdGlvbiB5aShhLGIsYyl7aWYoMCE9PShjJjQxOTQyNDApKXt2YXIgZD1iLmxhbmVzO2QmPWEucGVuZGluZ0xhbmVzO2N8PWQ7Yi5sYW5lcz1jO3ljKGEsYyl9fVxudmFyIFJoPXtyZWFkQ29udGV4dDpwZyx1c2VDYWxsYmFjazpVLHVzZUNvbnRleHQ6VSx1c2VFZmZlY3Q6VSx1c2VJbXBlcmF0aXZlSGFuZGxlOlUsdXNlSW5zZXJ0aW9uRWZmZWN0OlUsdXNlTGF5b3V0RWZmZWN0OlUsdXNlTWVtbzpVLHVzZVJlZHVjZXI6VSx1c2VSZWY6VSx1c2VTdGF0ZTpVLHVzZURlYnVnVmFsdWU6VSx1c2VEZWZlcnJlZFZhbHVlOlUsdXNlVHJhbnNpdGlvbjpVLHVzZU11dGFibGVTb3VyY2U6VSx1c2VTeW5jRXh0ZXJuYWxTdG9yZTpVLHVzZUlkOlUsdW5zdGFibGVfaXNOZXdSZWNvbmNpbGVyOiExfSxPaD17cmVhZENvbnRleHQ6cGcsdXNlQ2FsbGJhY2s6ZnVuY3Rpb24oYSxiKXtUaCgpLm1lbW9pemVkU3RhdGU9W2Esdm9pZCAwPT09Yj9udWxsOmJdO3JldHVybiBhfSx1c2VDb250ZXh0OnBnLHVzZUVmZmVjdDpraSx1c2VJbXBlcmF0aXZlSGFuZGxlOmZ1bmN0aW9uKGEsYixjKXtjPW51bGwhPT1jJiZ2b2lkIDAhPT1jP2MuY29uY2F0KFthXSk6bnVsbDtyZXR1cm4gaWkoNDE5NDMwOCxcbjQsbmkuYmluZChudWxsLGIsYSksYyl9LHVzZUxheW91dEVmZmVjdDpmdW5jdGlvbihhLGIpe3JldHVybiBpaSg0MTk0MzA4LDQsYSxiKX0sdXNlSW5zZXJ0aW9uRWZmZWN0OmZ1bmN0aW9uKGEsYil7cmV0dXJuIGlpKDQsMixhLGIpfSx1c2VNZW1vOmZ1bmN0aW9uKGEsYil7dmFyIGM9VGgoKTtiPXZvaWQgMD09PWI/bnVsbDpiO2E9YSgpO2MubWVtb2l6ZWRTdGF0ZT1bYSxiXTtyZXR1cm4gYX0sdXNlUmVkdWNlcjpmdW5jdGlvbihhLGIsYyl7dmFyIGQ9VGgoKTtiPXZvaWQgMCE9PWM/YyhiKTpiO2QubWVtb2l6ZWRTdGF0ZT1kLmJhc2VTdGF0ZT1iO2E9e3BlbmRpbmc6bnVsbCxpbnRlcmxlYXZlZDpudWxsLGxhbmVzOjAsZGlzcGF0Y2g6bnVsbCxsYXN0UmVuZGVyZWRSZWR1Y2VyOmEsbGFzdFJlbmRlcmVkU3RhdGU6Yn07ZC5xdWV1ZT1hO2E9YS5kaXNwYXRjaD11aS5iaW5kKG51bGwsUSxhKTtyZXR1cm5bZC5tZW1vaXplZFN0YXRlLGFdfSx1c2VSZWY6ZnVuY3Rpb24oYSl7dmFyIGI9XG5UaCgpO2E9e2N1cnJlbnQ6YX07cmV0dXJuIGIubWVtb2l6ZWRTdGF0ZT1hfSx1c2VTdGF0ZTpmaSx1c2VEZWJ1Z1ZhbHVlOnBpLHVzZURlZmVycmVkVmFsdWU6ZnVuY3Rpb24oYSl7dmFyIGI9ZmkoYSksYz1iWzBdLGQ9YlsxXTtraShmdW5jdGlvbigpe3ZhciBiPUdoLnRyYW5zaXRpb247R2gudHJhbnNpdGlvbj17fTt0cnl7ZChhKX1maW5hbGx5e0doLnRyYW5zaXRpb249Yn19LFthXSk7cmV0dXJuIGN9LHVzZVRyYW5zaXRpb246ZnVuY3Rpb24oKXt2YXIgYT1maSghMSksYj1hWzBdO2E9c2kuYmluZChudWxsLGFbMV0pO1RoKCkubWVtb2l6ZWRTdGF0ZT1hO3JldHVybltiLGFdfSx1c2VNdXRhYmxlU291cmNlOmZ1bmN0aW9uKCl7fSx1c2VTeW5jRXh0ZXJuYWxTdG9yZTpmdW5jdGlvbihhLGIsYyl7dmFyIGQ9USxlPVRoKCk7aWYoTil7aWYodm9pZCAwPT09Yyl0aHJvdyBFcnJvcihwKDQwNykpO2M9YygpfWVsc2V7Yz1iKCk7aWYobnVsbD09PUopdGhyb3cgRXJyb3IocCgzNDkpKTtcbjAhPT0oSGgmMzApfHxkaShkLGIsYyl9ZS5tZW1vaXplZFN0YXRlPWM7dmFyIGY9e3ZhbHVlOmMsZ2V0U25hcHNob3Q6Yn07ZS5xdWV1ZT1mO2tpKGFpLmJpbmQobnVsbCxkLGYsYSksW2FdKTtkLmZsYWdzfD0yMDQ4O2JpKDksY2kuYmluZChudWxsLGQsZixjLGIpLHZvaWQgMCxudWxsKTtyZXR1cm4gY30sdXNlSWQ6ZnVuY3Rpb24oKXt2YXIgYT1UaCgpLGI9Si5pZGVudGlmaWVyUHJlZml4O2lmKE4pe3ZhciBjPVNnO3ZhciBkPVJnO2M9KGQmfigxPDwzMi1sYyhkKS0xKSkudG9TdHJpbmcoMzIpK2M7Yj1cIjpcIitiK1wiUlwiK2M7Yz1LaCsrOzA8YyYmKGIrPVwiSFwiK2MudG9TdHJpbmcoMzIpKTtiKz1cIjpcIn1lbHNlIGM9TGgrKyxiPVwiOlwiK2IrXCJyXCIrYy50b1N0cmluZygzMikrXCI6XCI7cmV0dXJuIGEubWVtb2l6ZWRTdGF0ZT1ifSx1bnN0YWJsZV9pc05ld1JlY29uY2lsZXI6ITF9LFBoPXtyZWFkQ29udGV4dDpwZyx1c2VDYWxsYmFjazpxaSx1c2VDb250ZXh0OnBnLHVzZUVmZmVjdDokaCx1c2VJbXBlcmF0aXZlSGFuZGxlOm9pLFxudXNlSW5zZXJ0aW9uRWZmZWN0OmxpLHVzZUxheW91dEVmZmVjdDptaSx1c2VNZW1vOnJpLHVzZVJlZHVjZXI6V2gsdXNlUmVmOmhpLHVzZVN0YXRlOmZ1bmN0aW9uKCl7cmV0dXJuIFdoKFZoKX0sdXNlRGVidWdWYWx1ZTpwaSx1c2VEZWZlcnJlZFZhbHVlOmZ1bmN0aW9uKGEpe3ZhciBiPVdoKFZoKSxjPWJbMF0sZD1iWzFdOyRoKGZ1bmN0aW9uKCl7dmFyIGI9R2gudHJhbnNpdGlvbjtHaC50cmFuc2l0aW9uPXt9O3RyeXtkKGEpfWZpbmFsbHl7R2gudHJhbnNpdGlvbj1ifX0sW2FdKTtyZXR1cm4gY30sdXNlVHJhbnNpdGlvbjpmdW5jdGlvbigpe3ZhciBhPVdoKFZoKVswXSxiPVVoKCkubWVtb2l6ZWRTdGF0ZTtyZXR1cm5bYSxiXX0sdXNlTXV0YWJsZVNvdXJjZTpZaCx1c2VTeW5jRXh0ZXJuYWxTdG9yZTpaaCx1c2VJZDp0aSx1bnN0YWJsZV9pc05ld1JlY29uY2lsZXI6ITF9LFFoPXtyZWFkQ29udGV4dDpwZyx1c2VDYWxsYmFjazpxaSx1c2VDb250ZXh0OnBnLHVzZUVmZmVjdDokaCxcbnVzZUltcGVyYXRpdmVIYW5kbGU6b2ksdXNlSW5zZXJ0aW9uRWZmZWN0OmxpLHVzZUxheW91dEVmZmVjdDptaSx1c2VNZW1vOnJpLHVzZVJlZHVjZXI6WGgsdXNlUmVmOmhpLHVzZVN0YXRlOmZ1bmN0aW9uKCl7cmV0dXJuIFhoKFZoKX0sdXNlRGVidWdWYWx1ZTpwaSx1c2VEZWZlcnJlZFZhbHVlOmZ1bmN0aW9uKGEpe3ZhciBiPVhoKFZoKSxjPWJbMF0sZD1iWzFdOyRoKGZ1bmN0aW9uKCl7dmFyIGI9R2gudHJhbnNpdGlvbjtHaC50cmFuc2l0aW9uPXt9O3RyeXtkKGEpfWZpbmFsbHl7R2gudHJhbnNpdGlvbj1ifX0sW2FdKTtyZXR1cm4gY30sdXNlVHJhbnNpdGlvbjpmdW5jdGlvbigpe3ZhciBhPVhoKFZoKVswXSxiPVVoKCkubWVtb2l6ZWRTdGF0ZTtyZXR1cm5bYSxiXX0sdXNlTXV0YWJsZVNvdXJjZTpZaCx1c2VTeW5jRXh0ZXJuYWxTdG9yZTpaaCx1c2VJZDp0aSx1bnN0YWJsZV9pc05ld1JlY29uY2lsZXI6ITF9O1xuZnVuY3Rpb24gemkoYSxiKXt0cnl7dmFyIGM9XCJcIixkPWI7ZG8gYys9TmEoZCksZD1kLnJldHVybjt3aGlsZShkKTt2YXIgZT1jfWNhdGNoKGYpe2U9XCJcXG5FcnJvciBnZW5lcmF0aW5nIHN0YWNrOiBcIitmLm1lc3NhZ2UrXCJcXG5cIitmLnN0YWNrfXJldHVybnt2YWx1ZTphLHNvdXJjZTpiLHN0YWNrOmV9fWZ1bmN0aW9uIEFpKGEsYil7dHJ5e2NvbnNvbGUuZXJyb3IoYi52YWx1ZSl9Y2F0Y2goYyl7c2V0VGltZW91dChmdW5jdGlvbigpe3Rocm93IGM7fSl9fXZhciBCaT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgV2Vha01hcD9XZWFrTWFwOk1hcDtmdW5jdGlvbiBDaShhLGIsYyl7Yz11ZygtMSxjKTtjLnRhZz0zO2MucGF5bG9hZD17ZWxlbWVudDpudWxsfTt2YXIgZD1iLnZhbHVlO2MuY2FsbGJhY2s9ZnVuY3Rpb24oKXtEaXx8KERpPSEwLEVpPWQpO0FpKGEsYil9O3JldHVybiBjfVxuZnVuY3Rpb24gRmkoYSxiLGMpe2M9dWcoLTEsYyk7Yy50YWc9Mzt2YXIgZD1hLnR5cGUuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkKXt2YXIgZT1iLnZhbHVlO2MucGF5bG9hZD1mdW5jdGlvbigpe3JldHVybiBkKGUpfTtjLmNhbGxiYWNrPWZ1bmN0aW9uKCl7QWkoYSxiKX19dmFyIGY9YS5zdGF0ZU5vZGU7bnVsbCE9PWYmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBmLmNvbXBvbmVudERpZENhdGNoJiYoYy5jYWxsYmFjaz1mdW5jdGlvbigpe0FpKGEsYik7XCJmdW5jdGlvblwiIT09dHlwZW9mIGQmJihudWxsPT09R2k/R2k9bmV3IFNldChbdGhpc10pOkdpLmFkZCh0aGlzKSk7dmFyIGM9Yi5zdGFjazt0aGlzLmNvbXBvbmVudERpZENhdGNoKGIudmFsdWUse2NvbXBvbmVudFN0YWNrOm51bGwhPT1jP2M6XCJcIn0pfSk7cmV0dXJuIGN9XG5mdW5jdGlvbiBIaShhLGIsYyl7dmFyIGQ9YS5waW5nQ2FjaGU7aWYobnVsbD09PWQpe2Q9YS5waW5nQ2FjaGU9bmV3IEJpO3ZhciBlPW5ldyBTZXQ7ZC5zZXQoYixlKX1lbHNlIGU9ZC5nZXQoYiksdm9pZCAwPT09ZSYmKGU9bmV3IFNldCxkLnNldChiLGUpKTtlLmhhcyhjKXx8KGUuYWRkKGMpLGE9SWkuYmluZChudWxsLGEsYixjKSxiLnRoZW4oYSxhKSl9ZnVuY3Rpb24gSmkoYSl7ZG97dmFyIGI7aWYoYj0xMz09PWEudGFnKWI9YS5tZW1vaXplZFN0YXRlLGI9bnVsbCE9PWI/bnVsbCE9PWIuZGVoeWRyYXRlZD8hMDohMTohMDtpZihiKXJldHVybiBhO2E9YS5yZXR1cm59d2hpbGUobnVsbCE9PWEpO3JldHVybiBudWxsfVxuZnVuY3Rpb24gS2koYSxiLGMsZCxlKXtpZigwPT09KGEubW9kZSYxKSlyZXR1cm4gYT09PWI/YS5mbGFnc3w9NjU1MzY6KGEuZmxhZ3N8PTEyOCxjLmZsYWdzfD0xMzEwNzIsYy5mbGFncyY9LTUyODA1LDE9PT1jLnRhZyYmKG51bGw9PT1jLmFsdGVybmF0ZT9jLnRhZz0xNzooYj11ZygtMSwxKSxiLnRhZz0yLHZnKGMsYikpKSxjLmxhbmVzfD0xKSxhO2EuZmxhZ3N8PTY1NTM2O2EubGFuZXM9ZTtyZXR1cm4gYX12YXIgTGksTWksTmksT2k7XG5MaT1mdW5jdGlvbihhLGIpe2Zvcih2YXIgYz1iLmNoaWxkO251bGwhPT1jOyl7aWYoNT09PWMudGFnfHw2PT09Yy50YWcpYS5hcHBlbmRDaGlsZChjLnN0YXRlTm9kZSk7ZWxzZSBpZig0IT09Yy50YWcmJm51bGwhPT1jLmNoaWxkKXtjLmNoaWxkLnJldHVybj1jO2M9Yy5jaGlsZDtjb250aW51ZX1pZihjPT09YilicmVhaztmb3IoO251bGw9PT1jLnNpYmxpbmc7KXtpZihudWxsPT09Yy5yZXR1cm58fGMucmV0dXJuPT09YilyZXR1cm47Yz1jLnJldHVybn1jLnNpYmxpbmcucmV0dXJuPWMucmV0dXJuO2M9Yy5zaWJsaW5nfX07TWk9ZnVuY3Rpb24oKXt9O1xuTmk9ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9YS5tZW1vaXplZFByb3BzO2lmKGUhPT1kKXthPWIuc3RhdGVOb2RlO3hoKHVoLmN1cnJlbnQpO3ZhciBmPW51bGw7c3dpdGNoKGMpe2Nhc2UgXCJpbnB1dFwiOmU9V2EoYSxlKTtkPVdhKGEsZCk7Zj1bXTticmVhaztjYXNlIFwic2VsZWN0XCI6ZT1BKHt9LGUse3ZhbHVlOnZvaWQgMH0pO2Q9QSh7fSxkLHt2YWx1ZTp2b2lkIDB9KTtmPVtdO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmU9ZGIoYSxlKTtkPWRiKGEsZCk7Zj1bXTticmVhaztkZWZhdWx0OlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBlLm9uQ2xpY2smJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLm9uQ2xpY2smJihhLm9uY2xpY2s9d2YpfXJiKGMsZCk7dmFyIGc7Yz1udWxsO2ZvcihsIGluIGUpaWYoIWQuaGFzT3duUHJvcGVydHkobCkmJmUuaGFzT3duUHJvcGVydHkobCkmJm51bGwhPWVbbF0paWYoXCJzdHlsZVwiPT09bCl7dmFyIGg9ZVtsXTtmb3IoZyBpbiBoKWguaGFzT3duUHJvcGVydHkoZykmJlxuKGN8fChjPXt9KSxjW2ddPVwiXCIpfWVsc2VcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCIhPT1sJiZcImNoaWxkcmVuXCIhPT1sJiZcInN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZ1wiIT09bCYmXCJzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmdcIiE9PWwmJlwiYXV0b0ZvY3VzXCIhPT1sJiYoZGEuaGFzT3duUHJvcGVydHkobCk/Znx8KGY9W10pOihmPWZ8fFtdKS5wdXNoKGwsbnVsbCkpO2ZvcihsIGluIGQpe3ZhciBrPWRbbF07aD1udWxsIT1lP2VbbF06dm9pZCAwO2lmKGQuaGFzT3duUHJvcGVydHkobCkmJmshPT1oJiYobnVsbCE9a3x8bnVsbCE9aCkpaWYoXCJzdHlsZVwiPT09bClpZihoKXtmb3IoZyBpbiBoKSFoLmhhc093blByb3BlcnR5KGcpfHxrJiZrLmhhc093blByb3BlcnR5KGcpfHwoY3x8KGM9e30pLGNbZ109XCJcIik7Zm9yKGcgaW4gaylrLmhhc093blByb3BlcnR5KGcpJiZoW2ddIT09a1tnXSYmKGN8fChjPXt9KSxjW2ddPWtbZ10pfWVsc2UgY3x8KGZ8fChmPVtdKSxmLnB1c2gobCxcbmMpKSxjPWs7ZWxzZVwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIj09PWw/KGs9az9rLl9faHRtbDp2b2lkIDAsaD1oP2guX19odG1sOnZvaWQgMCxudWxsIT1rJiZoIT09ayYmKGY9Znx8W10pLnB1c2gobCxrKSk6XCJjaGlsZHJlblwiPT09bD9cInN0cmluZ1wiIT09dHlwZW9mIGsmJlwibnVtYmVyXCIhPT10eXBlb2Yga3x8KGY9Znx8W10pLnB1c2gobCxcIlwiK2spOlwic3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nXCIhPT1sJiZcInN1cHByZXNzSHlkcmF0aW9uV2FybmluZ1wiIT09bCYmKGRhLmhhc093blByb3BlcnR5KGwpPyhudWxsIT1rJiZcIm9uU2Nyb2xsXCI9PT1sJiZGKFwic2Nyb2xsXCIsYSksZnx8aD09PWt8fChmPVtdKSk6KGY9Znx8W10pLnB1c2gobCxrKSl9YyYmKGY9Znx8W10pLnB1c2goXCJzdHlsZVwiLGMpO3ZhciBsPWY7aWYoYi51cGRhdGVRdWV1ZT1sKWIuZmxhZ3N8PTR9fTtPaT1mdW5jdGlvbihhLGIsYyxkKXtjIT09ZCYmKGIuZmxhZ3N8PTQpfTtcbmZ1bmN0aW9uIFBpKGEsYil7aWYoIU4pc3dpdGNoKGEudGFpbE1vZGUpe2Nhc2UgXCJoaWRkZW5cIjpiPWEudGFpbDtmb3IodmFyIGM9bnVsbDtudWxsIT09YjspbnVsbCE9PWIuYWx0ZXJuYXRlJiYoYz1iKSxiPWIuc2libGluZztudWxsPT09Yz9hLnRhaWw9bnVsbDpjLnNpYmxpbmc9bnVsbDticmVhaztjYXNlIFwiY29sbGFwc2VkXCI6Yz1hLnRhaWw7Zm9yKHZhciBkPW51bGw7bnVsbCE9PWM7KW51bGwhPT1jLmFsdGVybmF0ZSYmKGQ9YyksYz1jLnNpYmxpbmc7bnVsbD09PWQ/Ynx8bnVsbD09PWEudGFpbD9hLnRhaWw9bnVsbDphLnRhaWwuc2libGluZz1udWxsOmQuc2libGluZz1udWxsfX1cbmZ1bmN0aW9uIFYoYSl7dmFyIGI9bnVsbCE9PWEuYWx0ZXJuYXRlJiZhLmFsdGVybmF0ZS5jaGlsZD09PWEuY2hpbGQsYz0wLGQ9MDtpZihiKWZvcih2YXIgZT1hLmNoaWxkO251bGwhPT1lOyljfD1lLmxhbmVzfGUuY2hpbGRMYW5lcyxkfD1lLnN1YnRyZWVGbGFncyYxNDY4MDA2NCxkfD1lLmZsYWdzJjE0NjgwMDY0LGUucmV0dXJuPWEsZT1lLnNpYmxpbmc7ZWxzZSBmb3IoZT1hLmNoaWxkO251bGwhPT1lOyljfD1lLmxhbmVzfGUuY2hpbGRMYW5lcyxkfD1lLnN1YnRyZWVGbGFncyxkfD1lLmZsYWdzLGUucmV0dXJuPWEsZT1lLnNpYmxpbmc7YS5zdWJ0cmVlRmxhZ3N8PWQ7YS5jaGlsZExhbmVzPWM7cmV0dXJuIGJ9XG5mdW5jdGlvbiBRaShhLGIsYyl7dmFyIGQ9Yi5wZW5kaW5nUHJvcHM7V2coYik7c3dpdGNoKGIudGFnKXtjYXNlIDI6Y2FzZSAxNjpjYXNlIDE1OmNhc2UgMDpjYXNlIDExOmNhc2UgNzpjYXNlIDg6Y2FzZSAxMjpjYXNlIDk6Y2FzZSAxNDpyZXR1cm4gVihiKSxudWxsO2Nhc2UgMTpyZXR1cm4gVGYoYi50eXBlKSYmVWYoKSxWKGIpLG51bGw7Y2FzZSAzOmQ9Yi5zdGF0ZU5vZGU7emgoKTtHKFFmKTtHKEkpO0VoKCk7ZC5wZW5kaW5nQ29udGV4dCYmKGQuY29udGV4dD1kLnBlbmRpbmdDb250ZXh0LGQucGVuZGluZ0NvbnRleHQ9bnVsbCk7aWYobnVsbD09PWF8fG51bGw9PT1hLmNoaWxkKWZoKGIpP2IuZmxhZ3N8PTQ6bnVsbD09PWF8fGEubWVtb2l6ZWRTdGF0ZS5pc0RlaHlkcmF0ZWQmJjA9PT0oYi5mbGFncyYyNTYpfHwoYi5mbGFnc3w9MTAyNCxudWxsIT09WmcmJihSaShaZyksWmc9bnVsbCkpO01pKGEsYik7VihiKTtyZXR1cm4gbnVsbDtjYXNlIDU6QmgoYik7dmFyIGU9eGgod2guY3VycmVudCk7XG5jPWIudHlwZTtpZihudWxsIT09YSYmbnVsbCE9Yi5zdGF0ZU5vZGUpTmkoYSxiLGMsZCxlKSxhLnJlZiE9PWIucmVmJiYoYi5mbGFnc3w9NTEyLGIuZmxhZ3N8PTIwOTcxNTIpO2Vsc2V7aWYoIWQpe2lmKG51bGw9PT1iLnN0YXRlTm9kZSl0aHJvdyBFcnJvcihwKDE2NikpO1YoYik7cmV0dXJuIG51bGx9YT14aCh1aC5jdXJyZW50KTtpZihmaChiKSl7ZD1iLnN0YXRlTm9kZTtjPWIudHlwZTt2YXIgZj1iLm1lbW9pemVkUHJvcHM7ZFtJZl09YjtkW0pmXT1mO2E9MCE9PShiLm1vZGUmMSk7c3dpdGNoKGMpe2Nhc2UgXCJkaWFsb2dcIjpGKFwiY2FuY2VsXCIsZCk7RihcImNsb3NlXCIsZCk7YnJlYWs7Y2FzZSBcImlmcmFtZVwiOmNhc2UgXCJvYmplY3RcIjpjYXNlIFwiZW1iZWRcIjpGKFwibG9hZFwiLGQpO2JyZWFrO2Nhc2UgXCJ2aWRlb1wiOmNhc2UgXCJhdWRpb1wiOmZvcihlPTA7ZTxmZi5sZW5ndGg7ZSsrKUYoZmZbZV0sZCk7YnJlYWs7Y2FzZSBcInNvdXJjZVwiOkYoXCJlcnJvclwiLGQpO2JyZWFrO2Nhc2UgXCJpbWdcIjpjYXNlIFwiaW1hZ2VcIjpjYXNlIFwibGlua1wiOkYoXCJlcnJvclwiLFxuZCk7RihcImxvYWRcIixkKTticmVhaztjYXNlIFwiZGV0YWlsc1wiOkYoXCJ0b2dnbGVcIixkKTticmVhaztjYXNlIFwiaW5wdXRcIjpYYShkLGYpO0YoXCJpbnZhbGlkXCIsZCk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmQuX3dyYXBwZXJTdGF0ZT17d2FzTXVsdGlwbGU6ISFmLm11bHRpcGxlfTtGKFwiaW52YWxpZFwiLGQpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmViKGQsZiksRihcImludmFsaWRcIixkKX1yYihjLGYpO2U9bnVsbDtmb3IodmFyIGcgaW4gZilpZihmLmhhc093blByb3BlcnR5KGcpKXt2YXIgaD1mW2ddO1wiY2hpbGRyZW5cIj09PWc/XCJzdHJpbmdcIj09PXR5cGVvZiBoP2QudGV4dENvbnRlbnQhPT1oJiYodmYoZC50ZXh0Q29udGVudCxoLGEpLGU9W1wiY2hpbGRyZW5cIixoXSk6XCJudW1iZXJcIj09PXR5cGVvZiBoJiZkLnRleHRDb250ZW50IT09XCJcIitoJiYodmYoZC50ZXh0Q29udGVudCxoLGEpLGU9W1wiY2hpbGRyZW5cIixcIlwiK2hdKTpkYS5oYXNPd25Qcm9wZXJ0eShnKSYmbnVsbCE9aCYmXCJvblNjcm9sbFwiPT09XG5nJiZGKFwic2Nyb2xsXCIsZCl9c3dpdGNoKGMpe2Nhc2UgXCJpbnB1dFwiOlRhKGQpO2FiKGQsZiwhMCk7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6VGEoZCk7Z2IoZCk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmNhc2UgXCJvcHRpb25cIjpicmVhaztkZWZhdWx0OlwiZnVuY3Rpb25cIj09PXR5cGVvZiBmLm9uQ2xpY2smJihkLm9uY2xpY2s9d2YpfWQ9ZTtiLnVwZGF0ZVF1ZXVlPWQ7bnVsbCE9PWQmJihiLmZsYWdzfD00KX1lbHNle2c9OT09PWUubm9kZVR5cGU/ZTplLm93bmVyRG9jdW1lbnQ7XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCI9PT1hJiYoYT1oYihjKSk7XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCI9PT1hP1wic2NyaXB0XCI9PT1jPyhhPWcuY3JlYXRlRWxlbWVudChcImRpdlwiKSxhLmlubmVySFRNTD1cIjxzY3JpcHQ+XFx4M2Mvc2NyaXB0PlwiLGE9YS5yZW1vdmVDaGlsZChhLmZpcnN0Q2hpbGQpKTpcInN0cmluZ1wiPT09dHlwZW9mIGQuaXM/YT1nLmNyZWF0ZUVsZW1lbnQoYyx7aXM6ZC5pc30pOlxuKGE9Zy5jcmVhdGVFbGVtZW50KGMpLFwic2VsZWN0XCI9PT1jJiYoZz1hLGQubXVsdGlwbGU/Zy5tdWx0aXBsZT0hMDpkLnNpemUmJihnLnNpemU9ZC5zaXplKSkpOmE9Zy5jcmVhdGVFbGVtZW50TlMoYSxjKTthW0lmXT1iO2FbSmZdPWQ7TGkoYSxiLCExLCExKTtiLnN0YXRlTm9kZT1hO2E6e2c9c2IoYyxkKTtzd2l0Y2goYyl7Y2FzZSBcImRpYWxvZ1wiOkYoXCJjYW5jZWxcIixhKTtGKFwiY2xvc2VcIixhKTtlPWQ7YnJlYWs7Y2FzZSBcImlmcmFtZVwiOmNhc2UgXCJvYmplY3RcIjpjYXNlIFwiZW1iZWRcIjpGKFwibG9hZFwiLGEpO2U9ZDticmVhaztjYXNlIFwidmlkZW9cIjpjYXNlIFwiYXVkaW9cIjpmb3IoZT0wO2U8ZmYubGVuZ3RoO2UrKylGKGZmW2VdLGEpO2U9ZDticmVhaztjYXNlIFwic291cmNlXCI6RihcImVycm9yXCIsYSk7ZT1kO2JyZWFrO2Nhc2UgXCJpbWdcIjpjYXNlIFwiaW1hZ2VcIjpjYXNlIFwibGlua1wiOkYoXCJlcnJvclwiLGEpO0YoXCJsb2FkXCIsYSk7ZT1kO2JyZWFrO2Nhc2UgXCJkZXRhaWxzXCI6RihcInRvZ2dsZVwiLFxuYSk7ZT1kO2JyZWFrO2Nhc2UgXCJpbnB1dFwiOlhhKGEsZCk7ZT1XYShhLGQpO0YoXCJpbnZhbGlkXCIsYSk7YnJlYWs7Y2FzZSBcIm9wdGlvblwiOmU9ZDticmVhaztjYXNlIFwic2VsZWN0XCI6YS5fd3JhcHBlclN0YXRlPXt3YXNNdWx0aXBsZTohIWQubXVsdGlwbGV9O2U9QSh7fSxkLHt2YWx1ZTp2b2lkIDB9KTtGKFwiaW52YWxpZFwiLGEpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmViKGEsZCk7ZT1kYihhLGQpO0YoXCJpbnZhbGlkXCIsYSk7YnJlYWs7ZGVmYXVsdDplPWR9cmIoYyxlKTtoPWU7Zm9yKGYgaW4gaClpZihoLmhhc093blByb3BlcnR5KGYpKXt2YXIgaz1oW2ZdO1wic3R5bGVcIj09PWY/cGIoYSxrKTpcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCI9PT1mPyhrPWs/ay5fX2h0bWw6dm9pZCAwLG51bGwhPWsmJmtiKGEsaykpOlwiY2hpbGRyZW5cIj09PWY/XCJzdHJpbmdcIj09PXR5cGVvZiBrPyhcInRleHRhcmVhXCIhPT1jfHxcIlwiIT09aykmJmxiKGEsayk6XCJudW1iZXJcIj09PXR5cGVvZiBrJiZsYihhLFxuXCJcIitrKTpcInN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZ1wiIT09ZiYmXCJzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmdcIiE9PWYmJlwiYXV0b0ZvY3VzXCIhPT1mJiYoZGEuaGFzT3duUHJvcGVydHkoZik/bnVsbCE9ayYmXCJvblNjcm9sbFwiPT09ZiYmRihcInNjcm9sbFwiLGEpOm51bGwhPWsmJnJhKGEsZixrLGcpKX1zd2l0Y2goYyl7Y2FzZSBcImlucHV0XCI6VGEoYSk7YWIoYSxkLCExKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpUYShhKTtnYihhKTticmVhaztjYXNlIFwib3B0aW9uXCI6bnVsbCE9ZC52YWx1ZSYmYS5zZXRBdHRyaWJ1dGUoXCJ2YWx1ZVwiLFwiXCIrUWEoZC52YWx1ZSkpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjphLm11bHRpcGxlPSEhZC5tdWx0aXBsZTtmPWQudmFsdWU7bnVsbCE9Zj9jYihhLCEhZC5tdWx0aXBsZSxmLCExKTpudWxsIT1kLmRlZmF1bHRWYWx1ZSYmY2IoYSwhIWQubXVsdGlwbGUsZC5kZWZhdWx0VmFsdWUsITApO2JyZWFrO2RlZmF1bHQ6XCJmdW5jdGlvblwiPT09dHlwZW9mIGUub25DbGljayYmXG4oYS5vbmNsaWNrPXdmKX1zd2l0Y2goYyl7Y2FzZSBcImJ1dHRvblwiOmNhc2UgXCJpbnB1dFwiOmNhc2UgXCJzZWxlY3RcIjpjYXNlIFwidGV4dGFyZWFcIjpkPSEhZC5hdXRvRm9jdXM7YnJlYWsgYTtjYXNlIFwiaW1nXCI6ZD0hMDticmVhayBhO2RlZmF1bHQ6ZD0hMX19ZCYmKGIuZmxhZ3N8PTQpfW51bGwhPT1iLnJlZiYmKGIuZmxhZ3N8PTUxMixiLmZsYWdzfD0yMDk3MTUyKX1WKGIpO3JldHVybiBudWxsO2Nhc2UgNjppZihhJiZudWxsIT1iLnN0YXRlTm9kZSlPaShhLGIsYS5tZW1vaXplZFByb3BzLGQpO2Vsc2V7aWYoXCJzdHJpbmdcIiE9PXR5cGVvZiBkJiZudWxsPT09Yi5zdGF0ZU5vZGUpdGhyb3cgRXJyb3IocCgxNjYpKTtjPXhoKHdoLmN1cnJlbnQpO3hoKHVoLmN1cnJlbnQpO2lmKGZoKGIpKXtkPWIuc3RhdGVOb2RlO2M9Yi5tZW1vaXplZFByb3BzO2RbSWZdPWI7aWYoZj1kLm5vZGVWYWx1ZSE9PWMpaWYoYT1YZyxudWxsIT09YSlzd2l0Y2goZz0wIT09KGEubW9kZSYxKSxhLnRhZyl7Y2FzZSAzOnZmKGQubm9kZVZhbHVlLFxuYyxnKTticmVhaztjYXNlIDU6ITAhPT1hLm1lbW9pemVkUHJvcHNbdm9pZCAwXSYmdmYoZC5ub2RlVmFsdWUsYyxnKX1mJiYoYi5mbGFnc3w9NCl9ZWxzZSBkPSg5PT09Yy5ub2RlVHlwZT9jOmMub3duZXJEb2N1bWVudCkuY3JlYXRlVGV4dE5vZGUoZCksZFtJZl09YixiLnN0YXRlTm9kZT1kfVYoYik7cmV0dXJuIG51bGw7Y2FzZSAxMzpHKFApO2Q9Yi5tZW1vaXplZFN0YXRlO2lmKE4mJm51bGwhPT1ZZyYmMCE9PShiLm1vZGUmMSkmJjA9PT0oYi5mbGFncyYxMjgpKXtmb3IoZD1ZZztkOylkPUZmKGQubmV4dFNpYmxpbmcpO2doKCk7Yi5mbGFnc3w9OTg1NjA7cmV0dXJuIGJ9aWYobnVsbCE9PWQmJm51bGwhPT1kLmRlaHlkcmF0ZWQpe2Q9ZmgoYik7aWYobnVsbD09PWEpe2lmKCFkKXRocm93IEVycm9yKHAoMzE4KSk7ZD1iLm1lbW9pemVkU3RhdGU7ZD1udWxsIT09ZD9kLmRlaHlkcmF0ZWQ6bnVsbDtpZighZCl0aHJvdyBFcnJvcihwKDMxNykpO2RbSWZdPWJ9ZWxzZSBnaCgpLDA9PT1cbihiLmZsYWdzJjEyOCkmJihiLm1lbW9pemVkU3RhdGU9bnVsbCksYi5mbGFnc3w9NDtWKGIpO3JldHVybiBudWxsfW51bGwhPT1aZyYmKFJpKFpnKSxaZz1udWxsKTtpZigwIT09KGIuZmxhZ3MmMTI4KSlyZXR1cm4gYi5sYW5lcz1jLGI7ZD1udWxsIT09ZDtjPSExO251bGw9PT1hP2ZoKGIpOmM9bnVsbCE9PWEubWVtb2l6ZWRTdGF0ZTtkJiYhYyYmKGIuY2hpbGQuZmxhZ3N8PTgxOTIsMCE9PShiLm1vZGUmMSkmJihudWxsPT09YXx8MCE9PShQLmN1cnJlbnQmMSk/MD09PVcmJihXPTMpOlNpKCkpKTtudWxsIT09Yi51cGRhdGVRdWV1ZSYmKGIuZmxhZ3N8PTQpO1YoYik7cmV0dXJuIG51bGw7Y2FzZSA0OnJldHVybiB6aCgpLE1pKGEsYiksbnVsbD09PWEmJm5mKGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8pLFYoYiksbnVsbDtjYXNlIDEwOnJldHVybiBsZyhiLnR5cGUuX2NvbnRleHQpLFYoYiksbnVsbDtjYXNlIDE3OnJldHVybiBUZihiLnR5cGUpJiZVZigpLFYoYiksbnVsbDtjYXNlIDE5OkcoUCk7XG5mPWIubWVtb2l6ZWRTdGF0ZTtpZihudWxsPT09ZilyZXR1cm4gVihiKSxudWxsO2Q9MCE9PShiLmZsYWdzJjEyOCk7Zz1mLnJlbmRlcmluZztpZihudWxsPT09ZylpZihkKVBpKGYsITEpO2Vsc2V7aWYoMCE9PVd8fG51bGwhPT1hJiYwIT09KGEuZmxhZ3MmMTI4KSlmb3IoYT1iLmNoaWxkO251bGwhPT1hOyl7Zz1DaChhKTtpZihudWxsIT09Zyl7Yi5mbGFnc3w9MTI4O1BpKGYsITEpO2Q9Zy51cGRhdGVRdWV1ZTtudWxsIT09ZCYmKGIudXBkYXRlUXVldWU9ZCxiLmZsYWdzfD00KTtiLnN1YnRyZWVGbGFncz0wO2Q9Yztmb3IoYz1iLmNoaWxkO251bGwhPT1jOylmPWMsYT1kLGYuZmxhZ3MmPTE0NjgwMDY2LGc9Zi5hbHRlcm5hdGUsbnVsbD09PWc/KGYuY2hpbGRMYW5lcz0wLGYubGFuZXM9YSxmLmNoaWxkPW51bGwsZi5zdWJ0cmVlRmxhZ3M9MCxmLm1lbW9pemVkUHJvcHM9bnVsbCxmLm1lbW9pemVkU3RhdGU9bnVsbCxmLnVwZGF0ZVF1ZXVlPW51bGwsZi5kZXBlbmRlbmNpZXM9bnVsbCxcbmYuc3RhdGVOb2RlPW51bGwpOihmLmNoaWxkTGFuZXM9Zy5jaGlsZExhbmVzLGYubGFuZXM9Zy5sYW5lcyxmLmNoaWxkPWcuY2hpbGQsZi5zdWJ0cmVlRmxhZ3M9MCxmLmRlbGV0aW9ucz1udWxsLGYubWVtb2l6ZWRQcm9wcz1nLm1lbW9pemVkUHJvcHMsZi5tZW1vaXplZFN0YXRlPWcubWVtb2l6ZWRTdGF0ZSxmLnVwZGF0ZVF1ZXVlPWcudXBkYXRlUXVldWUsZi50eXBlPWcudHlwZSxhPWcuZGVwZW5kZW5jaWVzLGYuZGVwZW5kZW5jaWVzPW51bGw9PT1hP251bGw6e2xhbmVzOmEubGFuZXMsZmlyc3RDb250ZXh0OmEuZmlyc3RDb250ZXh0fSksYz1jLnNpYmxpbmc7SChQLFAuY3VycmVudCYxfDIpO3JldHVybiBiLmNoaWxkfWE9YS5zaWJsaW5nfW51bGwhPT1mLnRhaWwmJkQoKT5UaSYmKGIuZmxhZ3N8PTEyOCxkPSEwLFBpKGYsITEpLGIubGFuZXM9NDE5NDMwNCl9ZWxzZXtpZighZClpZihhPUNoKGcpLG51bGwhPT1hKXtpZihiLmZsYWdzfD0xMjgsZD0hMCxjPWEudXBkYXRlUXVldWUsXG5udWxsIT09YyYmKGIudXBkYXRlUXVldWU9YyxiLmZsYWdzfD00KSxQaShmLCEwKSxudWxsPT09Zi50YWlsJiZcImhpZGRlblwiPT09Zi50YWlsTW9kZSYmIWcuYWx0ZXJuYXRlJiYhTilyZXR1cm4gVihiKSxudWxsfWVsc2UgMipEKCktZi5yZW5kZXJpbmdTdGFydFRpbWU+VGkmJjEwNzM3NDE4MjQhPT1jJiYoYi5mbGFnc3w9MTI4LGQ9ITAsUGkoZiwhMSksYi5sYW5lcz00MTk0MzA0KTtmLmlzQmFja3dhcmRzPyhnLnNpYmxpbmc9Yi5jaGlsZCxiLmNoaWxkPWcpOihjPWYubGFzdCxudWxsIT09Yz9jLnNpYmxpbmc9ZzpiLmNoaWxkPWcsZi5sYXN0PWcpfWlmKG51bGwhPT1mLnRhaWwpcmV0dXJuIGI9Zi50YWlsLGYucmVuZGVyaW5nPWIsZi50YWlsPWIuc2libGluZyxmLnJlbmRlcmluZ1N0YXJ0VGltZT1EKCksYi5zaWJsaW5nPW51bGwsYz1QLmN1cnJlbnQsSChQLGQ/YyYxfDI6YyYxKSxiO1YoYik7cmV0dXJuIG51bGw7Y2FzZSAyMjpjYXNlIDIzOnJldHVybiBVaSgpLGQ9bnVsbCE9PVxuYi5tZW1vaXplZFN0YXRlLG51bGwhPT1hJiZudWxsIT09YS5tZW1vaXplZFN0YXRlIT09ZCYmKGIuZmxhZ3N8PTgxOTIpLGQmJjAhPT0oYi5tb2RlJjEpPzAhPT0oVmkmMTA3Mzc0MTgyNCkmJihWKGIpLGIuc3VidHJlZUZsYWdzJjYmJihiLmZsYWdzfD04MTkyKSk6VihiKSxudWxsO2Nhc2UgMjQ6cmV0dXJuIG51bGw7Y2FzZSAyNTpyZXR1cm4gbnVsbH10aHJvdyBFcnJvcihwKDE1NixiLnRhZykpO312YXIgV2k9c2EuUmVhY3RDdXJyZW50T3duZXIsb2c9ITE7ZnVuY3Rpb24gWGkoYSxiLGMsZCl7Yi5jaGlsZD1udWxsPT09YT9zaChiLG51bGwsYyxkKTpyaChiLGEuY2hpbGQsYyxkKX1cbmZ1bmN0aW9uIFlpKGEsYixjLGQsZSl7Yz1jLnJlbmRlcjt2YXIgZj1iLnJlZjtuZyhiLGUpO2Q9TmgoYSxiLGMsZCxmLGUpO2M9U2goKTtpZihudWxsIT09YSYmIW9nKXJldHVybiBiLnVwZGF0ZVF1ZXVlPWEudXBkYXRlUXVldWUsYi5mbGFncyY9LTIwNTMsYS5sYW5lcyY9fmUsWmkoYSxiLGUpO04mJmMmJlZnKGIpO2IuZmxhZ3N8PTE7WGkoYSxiLGQsZSk7cmV0dXJuIGIuY2hpbGR9XG5mdW5jdGlvbiAkaShhLGIsYyxkLGUpe2lmKG51bGw9PT1hKXt2YXIgZj1jLnR5cGU7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGYmJiFhaihmKSYmdm9pZCAwPT09Zi5kZWZhdWx0UHJvcHMmJm51bGw9PT1jLmNvbXBhcmUmJnZvaWQgMD09PWMuZGVmYXVsdFByb3BzKXJldHVybiBiLnRhZz0xNSxiLnR5cGU9ZixiaihhLGIsZixkLGUpO2E9b2goYy50eXBlLG51bGwsZCxiLGIubW9kZSxlKTthLnJlZj1iLnJlZjthLnJldHVybj1iO3JldHVybiBiLmNoaWxkPWF9Zj1hLmNoaWxkO2lmKDA9PT0oYS5sYW5lcyZlKSl7dmFyIGc9Zi5tZW1vaXplZFByb3BzO2M9Yy5jb21wYXJlO2M9bnVsbCE9PWM/YzpEZTtpZihjKGcsZCkmJmEucmVmPT09Yi5yZWYpcmV0dXJuIFppKGEsYixlKX1iLmZsYWdzfD0xO2E9bWgoZixkKTthLnJlZj1iLnJlZjthLnJldHVybj1iO3JldHVybiBiLmNoaWxkPWF9XG5mdW5jdGlvbiBiaihhLGIsYyxkLGUpe2lmKG51bGwhPT1hJiZEZShhLm1lbW9pemVkUHJvcHMsZCkmJmEucmVmPT09Yi5yZWYpaWYob2c9ITEsMCE9PShhLmxhbmVzJmUpKTAhPT0oYS5mbGFncyYxMzEwNzIpJiYob2c9ITApO2Vsc2UgcmV0dXJuIGIubGFuZXM9YS5sYW5lcyxaaShhLGIsZSk7cmV0dXJuIGNqKGEsYixjLGQsZSl9XG5mdW5jdGlvbiBkaihhLGIsYyl7dmFyIGQ9Yi5wZW5kaW5nUHJvcHMsZT1kLmNoaWxkcmVuLGY9bnVsbCE9PWE/YS5tZW1vaXplZFN0YXRlOm51bGw7aWYoXCJoaWRkZW5cIj09PWQubW9kZSlpZigwPT09KGIubW9kZSYxKSliLm1lbW9pemVkU3RhdGU9e2Jhc2VMYW5lczowLGNhY2hlUG9vbDpudWxsfSxIKGVqLFZpKSxWaXw9YztlbHNlIGlmKDAhPT0oYyYxMDczNzQxODI0KSliLm1lbW9pemVkU3RhdGU9e2Jhc2VMYW5lczowLGNhY2hlUG9vbDpudWxsfSxkPW51bGwhPT1mP2YuYmFzZUxhbmVzOmMsSChlaixWaSksVml8PWQ7ZWxzZSByZXR1cm4gYT1udWxsIT09Zj9mLmJhc2VMYW5lc3xjOmMsYi5sYW5lcz1iLmNoaWxkTGFuZXM9MTA3Mzc0MTgyNCxiLm1lbW9pemVkU3RhdGU9e2Jhc2VMYW5lczphLGNhY2hlUG9vbDpudWxsfSxiLnVwZGF0ZVF1ZXVlPW51bGwsSChlaixWaSksVml8PWEsbnVsbDtlbHNlIG51bGwhPT1mPyhkPWYuYmFzZUxhbmVzfGMsYi5tZW1vaXplZFN0YXRlPW51bGwpOlxuZD1jLEgoZWosVmkpLFZpfD1kO1hpKGEsYixlLGMpO3JldHVybiBiLmNoaWxkfWZ1bmN0aW9uIGZqKGEsYil7dmFyIGM9Yi5yZWY7aWYobnVsbD09PWEmJm51bGwhPT1jfHxudWxsIT09YSYmYS5yZWYhPT1jKWIuZmxhZ3N8PTUxMixiLmZsYWdzfD0yMDk3MTUyfWZ1bmN0aW9uIGNqKGEsYixjLGQsZSl7dmFyIGY9VGYoYyk/UmY6SS5jdXJyZW50O2Y9U2YoYixmKTtuZyhiLGUpO2M9TmgoYSxiLGMsZCxmLGUpO2Q9U2goKTtpZihudWxsIT09YSYmIW9nKXJldHVybiBiLnVwZGF0ZVF1ZXVlPWEudXBkYXRlUXVldWUsYi5mbGFncyY9LTIwNTMsYS5sYW5lcyY9fmUsWmkoYSxiLGUpO04mJmQmJlZnKGIpO2IuZmxhZ3N8PTE7WGkoYSxiLGMsZSk7cmV0dXJuIGIuY2hpbGR9XG5mdW5jdGlvbiBnaihhLGIsYyxkLGUpe2lmKFRmKGMpKXt2YXIgZj0hMDtYZihiKX1lbHNlIGY9ITE7bmcoYixlKTtpZihudWxsPT09Yi5zdGF0ZU5vZGUpbnVsbCE9PWEmJihhLmFsdGVybmF0ZT1udWxsLGIuYWx0ZXJuYXRlPW51bGwsYi5mbGFnc3w9MiksSGcoYixjLGQpLEpnKGIsYyxkLGUpLGQ9ITA7ZWxzZSBpZihudWxsPT09YSl7dmFyIGc9Yi5zdGF0ZU5vZGUsaD1iLm1lbW9pemVkUHJvcHM7Zy5wcm9wcz1oO3ZhciBrPWcuY29udGV4dCxsPWMuY29udGV4dFR5cGU7XCJvYmplY3RcIj09PXR5cGVvZiBsJiZudWxsIT09bD9sPXBnKGwpOihsPVRmKGMpP1JmOkkuY3VycmVudCxsPVNmKGIsbCkpO3ZhciBtPWMuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzLHc9XCJmdW5jdGlvblwiPT09dHlwZW9mIG18fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlO3d8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZcblwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHN8fChoIT09ZHx8ayE9PWwpJiZJZyhiLGcsZCxsKTtyZz0hMTt2YXIgdT1iLm1lbW9pemVkU3RhdGU7Zy5zdGF0ZT11O3lnKGIsZCxnLGUpO2s9Yi5tZW1vaXplZFN0YXRlO2ghPT1kfHx1IT09a3x8UWYuY3VycmVudHx8cmc/KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBtJiYoQ2coYixjLG0sZCksaz1iLm1lbW9pemVkU3RhdGUpLChoPXJnfHxHZyhiLGMsaCxkLHUsayxsKSk/KHd8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxNb3VudHx8KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxNb3VudCYmZy5jb21wb25lbnRXaWxsTW91bnQoKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZnLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQoKSksXCJmdW5jdGlvblwiPT09XG50eXBlb2YgZy5jb21wb25lbnREaWRNb3VudCYmKGIuZmxhZ3N8PTQxOTQzMDgpKTooXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50RGlkTW91bnQmJihiLmZsYWdzfD00MTk0MzA4KSxiLm1lbW9pemVkUHJvcHM9ZCxiLm1lbW9pemVkU3RhdGU9ayksZy5wcm9wcz1kLGcuc3RhdGU9ayxnLmNvbnRleHQ9bCxkPWgpOihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnREaWRNb3VudCYmKGIuZmxhZ3N8PTQxOTQzMDgpLGQ9ITEpfWVsc2V7Zz1iLnN0YXRlTm9kZTt0ZyhhLGIpO2g9Yi5tZW1vaXplZFByb3BzO2w9Yi50eXBlPT09Yi5lbGVtZW50VHlwZT9oOmZnKGIudHlwZSxoKTtnLnByb3BzPWw7dz1iLnBlbmRpbmdQcm9wczt1PWcuY29udGV4dDtrPWMuY29udGV4dFR5cGU7XCJvYmplY3RcIj09PXR5cGVvZiBrJiZudWxsIT09az9rPXBnKGspOihrPVRmKGMpP1JmOkkuY3VycmVudCxrPVNmKGIsaykpO3ZhciB5PWMuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzOyhtPVwiZnVuY3Rpb25cIj09PVxudHlwZW9mIHl8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlKXx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHN8fChoIT09d3x8dSE9PWspJiZJZyhiLGcsZCxrKTtyZz0hMTt1PWIubWVtb2l6ZWRTdGF0ZTtnLnN0YXRlPXU7eWcoYixkLGcsZSk7dmFyIG49Yi5tZW1vaXplZFN0YXRlO2ghPT13fHx1IT09bnx8UWYuY3VycmVudHx8cmc/KFwiZnVuY3Rpb25cIj09PXR5cGVvZiB5JiYoQ2coYixjLHksZCksbj1iLm1lbW9pemVkU3RhdGUpLChsPXJnfHxHZyhiLGMsbCxkLHUsbixrKXx8ITEpPyhtfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50V2lsbFVwZGF0ZXx8KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxVcGRhdGUmJlxuZy5jb21wb25lbnRXaWxsVXBkYXRlKGQsbixrKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSYmZy5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZShkLG4saykpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudERpZFVwZGF0ZSYmKGIuZmxhZ3N8PTQpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlJiYoYi5mbGFnc3w9MTAyNCkpOihcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnREaWRVcGRhdGV8fGg9PT1hLm1lbW9pemVkUHJvcHMmJnU9PT1hLm1lbW9pemVkU3RhdGV8fChiLmZsYWdzfD00KSxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZXx8aD09PWEubWVtb2l6ZWRQcm9wcyYmdT09PWEubWVtb2l6ZWRTdGF0ZXx8KGIuZmxhZ3N8PTEwMjQpLGIubWVtb2l6ZWRQcm9wcz1kLGIubWVtb2l6ZWRTdGF0ZT1uKSxnLnByb3BzPWQsZy5zdGF0ZT1uLGcuY29udGV4dD1cbmssZD1sKTooXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50RGlkVXBkYXRlfHxoPT09YS5tZW1vaXplZFByb3BzJiZ1PT09YS5tZW1vaXplZFN0YXRlfHwoYi5mbGFnc3w9NCksXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGV8fGg9PT1hLm1lbW9pemVkUHJvcHMmJnU9PT1hLm1lbW9pemVkU3RhdGV8fChiLmZsYWdzfD0xMDI0KSxkPSExKX1yZXR1cm4gaGooYSxiLGMsZCxmLGUpfVxuZnVuY3Rpb24gaGooYSxiLGMsZCxlLGYpe2ZqKGEsYik7dmFyIGc9MCE9PShiLmZsYWdzJjEyOCk7aWYoIWQmJiFnKXJldHVybiBlJiZZZihiLGMsITEpLFppKGEsYixmKTtkPWIuc3RhdGVOb2RlO1dpLmN1cnJlbnQ9Yjt2YXIgaD1nJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYy5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3I/bnVsbDpkLnJlbmRlcigpO2IuZmxhZ3N8PTE7bnVsbCE9PWEmJmc/KGIuY2hpbGQ9cmgoYixhLmNoaWxkLG51bGwsZiksYi5jaGlsZD1yaChiLG51bGwsaCxmKSk6WGkoYSxiLGgsZik7Yi5tZW1vaXplZFN0YXRlPWQuc3RhdGU7ZSYmWWYoYixjLCEwKTtyZXR1cm4gYi5jaGlsZH1mdW5jdGlvbiBpaihhKXt2YXIgYj1hLnN0YXRlTm9kZTtiLnBlbmRpbmdDb250ZXh0P1ZmKGEsYi5wZW5kaW5nQ29udGV4dCxiLnBlbmRpbmdDb250ZXh0IT09Yi5jb250ZXh0KTpiLmNvbnRleHQmJlZmKGEsYi5jb250ZXh0LCExKTt5aChhLGIuY29udGFpbmVySW5mbyl9XG5mdW5jdGlvbiBqaihhLGIsYyxkLGUpe2doKCk7aGgoZSk7Yi5mbGFnc3w9MjU2O1hpKGEsYixjLGQpO3JldHVybiBiLmNoaWxkfXZhciBraj17ZGVoeWRyYXRlZDpudWxsLHRyZWVDb250ZXh0Om51bGwscmV0cnlMYW5lOjB9O2Z1bmN0aW9uIGxqKGEpe3JldHVybntiYXNlTGFuZXM6YSxjYWNoZVBvb2w6bnVsbH19XG5mdW5jdGlvbiBtaihhLGIsYyl7dmFyIGQ9Yi5wZW5kaW5nUHJvcHMsZT1QLmN1cnJlbnQsZj0hMSxnPTAhPT0oYi5mbGFncyYxMjgpLGg7KGg9Zyl8fChoPW51bGwhPT1hJiZudWxsPT09YS5tZW1vaXplZFN0YXRlPyExOjAhPT0oZSYyKSk7aWYoaClmPSEwLGIuZmxhZ3MmPS0xMjk7ZWxzZSBpZihudWxsPT09YXx8bnVsbCE9PWEubWVtb2l6ZWRTdGF0ZSllfD0xO0goUCxlJjEpO2lmKG51bGw9PT1hKXtkaChiKTthPWIubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09YSYmKGE9YS5kZWh5ZHJhdGVkLG51bGwhPT1hKSlyZXR1cm4gMD09PShiLm1vZGUmMSk/Yi5sYW5lcz0xOlwiJCFcIj09PWEuZGF0YT9iLmxhbmVzPTg6Yi5sYW5lcz0xMDczNzQxODI0LG51bGw7ZT1kLmNoaWxkcmVuO2E9ZC5mYWxsYmFjaztyZXR1cm4gZj8oZD1iLm1vZGUsZj1iLmNoaWxkLGU9e21vZGU6XCJoaWRkZW5cIixjaGlsZHJlbjplfSwwPT09KGQmMSkmJm51bGwhPT1mPyhmLmNoaWxkTGFuZXM9MCxmLnBlbmRpbmdQcm9wcz1cbmUpOmY9bmooZSxkLDAsbnVsbCksYT1xaChhLGQsYyxudWxsKSxmLnJldHVybj1iLGEucmV0dXJuPWIsZi5zaWJsaW5nPWEsYi5jaGlsZD1mLGIuY2hpbGQubWVtb2l6ZWRTdGF0ZT1saihjKSxiLm1lbW9pemVkU3RhdGU9a2osYSk6b2ooYixlKX1lPWEubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09ZSl7aD1lLmRlaHlkcmF0ZWQ7aWYobnVsbCE9PWgpe2lmKGcpe2lmKGIuZmxhZ3MmMjU2KXJldHVybiBiLmZsYWdzJj0tMjU3LHBqKGEsYixjLEVycm9yKHAoNDIyKSkpO2lmKG51bGwhPT1iLm1lbW9pemVkU3RhdGUpcmV0dXJuIGIuY2hpbGQ9YS5jaGlsZCxiLmZsYWdzfD0xMjgsbnVsbDtmPWQuZmFsbGJhY2s7ZT1iLm1vZGU7ZD1uaih7bW9kZTpcInZpc2libGVcIixjaGlsZHJlbjpkLmNoaWxkcmVufSxlLDAsbnVsbCk7Zj1xaChmLGUsYyxudWxsKTtmLmZsYWdzfD0yO2QucmV0dXJuPWI7Zi5yZXR1cm49YjtkLnNpYmxpbmc9ZjtiLmNoaWxkPWQ7MCE9PShiLm1vZGUmMSkmJnJoKGIsYS5jaGlsZCxcbm51bGwsYyk7Yi5jaGlsZC5tZW1vaXplZFN0YXRlPWxqKGMpO2IubWVtb2l6ZWRTdGF0ZT1rajtyZXR1cm4gZn1pZigwPT09KGIubW9kZSYxKSliPXBqKGEsYixjLG51bGwpO2Vsc2UgaWYoXCIkIVwiPT09aC5kYXRhKWI9cGooYSxiLGMsRXJyb3IocCg0MTkpKSk7ZWxzZSBpZihkPTAhPT0oYyZhLmNoaWxkTGFuZXMpLG9nfHxkKXtkPUo7aWYobnVsbCE9PWQpe3N3aXRjaChjJi1jKXtjYXNlIDQ6Zj0yO2JyZWFrO2Nhc2UgMTY6Zj04O2JyZWFrO2Nhc2UgNjQ6Y2FzZSAxMjg6Y2FzZSAyNTY6Y2FzZSA1MTI6Y2FzZSAxMDI0OmNhc2UgMjA0ODpjYXNlIDQwOTY6Y2FzZSA4MTkyOmNhc2UgMTYzODQ6Y2FzZSAzMjc2ODpjYXNlIDY1NTM2OmNhc2UgMTMxMDcyOmNhc2UgMjYyMTQ0OmNhc2UgNTI0Mjg4OmNhc2UgMTA0ODU3NjpjYXNlIDIwOTcxNTI6Y2FzZSA0MTk0MzA0OmNhc2UgODM4ODYwODpjYXNlIDE2Nzc3MjE2OmNhc2UgMzM1NTQ0MzI6Y2FzZSA2NzEwODg2NDpmPTMyO2JyZWFrO2Nhc2UgNTM2ODcwOTEyOmY9XG4yNjg0MzU0NTY7YnJlYWs7ZGVmYXVsdDpmPTB9ZD0wIT09KGYmKGQuc3VzcGVuZGVkTGFuZXN8YykpPzA6ZjswIT09ZCYmZCE9PWUucmV0cnlMYW5lJiYoZS5yZXRyeUxhbmU9ZCxFZyhhLGQsLTEpKX1TaSgpO2I9cGooYSxiLGMsRXJyb3IocCg0MjEpKSl9ZWxzZVwiJD9cIj09PWguZGF0YT8oYi5mbGFnc3w9MTI4LGIuY2hpbGQ9YS5jaGlsZCxiPXFqLmJpbmQobnVsbCxhKSxoLl9yZWFjdFJldHJ5PWIsYj1udWxsKTooYz1lLnRyZWVDb250ZXh0LFlnPUZmKGgubmV4dFNpYmxpbmcpLFhnPWIsTj0hMCxaZz1udWxsLG51bGwhPT1jJiYoT2dbUGcrK109UmcsT2dbUGcrK109U2csT2dbUGcrK109UWcsUmc9Yy5pZCxTZz1jLm92ZXJmbG93LFFnPWIpLGI9b2ooYixiLnBlbmRpbmdQcm9wcy5jaGlsZHJlbiksYi5mbGFnc3w9NDA5Nik7cmV0dXJuIGJ9aWYoZilyZXR1cm4gZD1yaihhLGIsZC5jaGlsZHJlbixkLmZhbGxiYWNrLGMpLGY9Yi5jaGlsZCxlPWEuY2hpbGQubWVtb2l6ZWRTdGF0ZSxcbmYubWVtb2l6ZWRTdGF0ZT1udWxsPT09ZT9saihjKTp7YmFzZUxhbmVzOmUuYmFzZUxhbmVzfGMsY2FjaGVQb29sOm51bGx9LGYuY2hpbGRMYW5lcz1hLmNoaWxkTGFuZXMmfmMsYi5tZW1vaXplZFN0YXRlPWtqLGQ7Yz1zaihhLGIsZC5jaGlsZHJlbixjKTtiLm1lbW9pemVkU3RhdGU9bnVsbDtyZXR1cm4gY31pZihmKXJldHVybiBkPXJqKGEsYixkLmNoaWxkcmVuLGQuZmFsbGJhY2ssYyksZj1iLmNoaWxkLGU9YS5jaGlsZC5tZW1vaXplZFN0YXRlLGYubWVtb2l6ZWRTdGF0ZT1udWxsPT09ZT9saihjKTp7YmFzZUxhbmVzOmUuYmFzZUxhbmVzfGMsY2FjaGVQb29sOm51bGx9LGYuY2hpbGRMYW5lcz1hLmNoaWxkTGFuZXMmfmMsYi5tZW1vaXplZFN0YXRlPWtqLGQ7Yz1zaihhLGIsZC5jaGlsZHJlbixjKTtiLm1lbW9pemVkU3RhdGU9bnVsbDtyZXR1cm4gY31cbmZ1bmN0aW9uIG9qKGEsYil7Yj1uaih7bW9kZTpcInZpc2libGVcIixjaGlsZHJlbjpifSxhLm1vZGUsMCxudWxsKTtiLnJldHVybj1hO3JldHVybiBhLmNoaWxkPWJ9ZnVuY3Rpb24gc2ooYSxiLGMsZCl7dmFyIGU9YS5jaGlsZDthPWUuc2libGluZztjPW1oKGUse21vZGU6XCJ2aXNpYmxlXCIsY2hpbGRyZW46Y30pOzA9PT0oYi5tb2RlJjEpJiYoYy5sYW5lcz1kKTtjLnJldHVybj1iO2Muc2libGluZz1udWxsO251bGwhPT1hJiYoZD1iLmRlbGV0aW9ucyxudWxsPT09ZD8oYi5kZWxldGlvbnM9W2FdLGIuZmxhZ3N8PTE2KTpkLnB1c2goYSkpO3JldHVybiBiLmNoaWxkPWN9XG5mdW5jdGlvbiByaihhLGIsYyxkLGUpe3ZhciBmPWIubW9kZTthPWEuY2hpbGQ7dmFyIGc9YS5zaWJsaW5nLGg9e21vZGU6XCJoaWRkZW5cIixjaGlsZHJlbjpjfTswPT09KGYmMSkmJmIuY2hpbGQhPT1hPyhjPWIuY2hpbGQsYy5jaGlsZExhbmVzPTAsYy5wZW5kaW5nUHJvcHM9aCxiLmRlbGV0aW9ucz1udWxsKTooYz1taChhLGgpLGMuc3VidHJlZUZsYWdzPWEuc3VidHJlZUZsYWdzJjE0NjgwMDY0KTtudWxsIT09Zz9kPW1oKGcsZCk6KGQ9cWgoZCxmLGUsbnVsbCksZC5mbGFnc3w9Mik7ZC5yZXR1cm49YjtjLnJldHVybj1iO2Muc2libGluZz1kO2IuY2hpbGQ9YztyZXR1cm4gZH1mdW5jdGlvbiBwaihhLGIsYyxkKXtudWxsIT09ZCYmaGgoZCk7cmgoYixhLmNoaWxkLG51bGwsYyk7YT1vaihiLGIucGVuZGluZ1Byb3BzLmNoaWxkcmVuKTthLmZsYWdzfD0yO2IubWVtb2l6ZWRTdGF0ZT1udWxsO3JldHVybiBhfVxuZnVuY3Rpb24gdGooYSxiLGMpe2EubGFuZXN8PWI7dmFyIGQ9YS5hbHRlcm5hdGU7bnVsbCE9PWQmJihkLmxhbmVzfD1iKTttZyhhLnJldHVybixiLGMpfWZ1bmN0aW9uIHVqKGEsYixjLGQsZSl7dmFyIGY9YS5tZW1vaXplZFN0YXRlO251bGw9PT1mP2EubWVtb2l6ZWRTdGF0ZT17aXNCYWNrd2FyZHM6YixyZW5kZXJpbmc6bnVsbCxyZW5kZXJpbmdTdGFydFRpbWU6MCxsYXN0OmQsdGFpbDpjLHRhaWxNb2RlOmV9OihmLmlzQmFja3dhcmRzPWIsZi5yZW5kZXJpbmc9bnVsbCxmLnJlbmRlcmluZ1N0YXJ0VGltZT0wLGYubGFzdD1kLGYudGFpbD1jLGYudGFpbE1vZGU9ZSl9XG5mdW5jdGlvbiB2aihhLGIsYyl7dmFyIGQ9Yi5wZW5kaW5nUHJvcHMsZT1kLnJldmVhbE9yZGVyLGY9ZC50YWlsO1hpKGEsYixkLmNoaWxkcmVuLGMpO2Q9UC5jdXJyZW50O2lmKDAhPT0oZCYyKSlkPWQmMXwyLGIuZmxhZ3N8PTEyODtlbHNle2lmKG51bGwhPT1hJiYwIT09KGEuZmxhZ3MmMTI4KSlhOmZvcihhPWIuY2hpbGQ7bnVsbCE9PWE7KXtpZigxMz09PWEudGFnKW51bGwhPT1hLm1lbW9pemVkU3RhdGUmJnRqKGEsYyxiKTtlbHNlIGlmKDE5PT09YS50YWcpdGooYSxjLGIpO2Vsc2UgaWYobnVsbCE9PWEuY2hpbGQpe2EuY2hpbGQucmV0dXJuPWE7YT1hLmNoaWxkO2NvbnRpbnVlfWlmKGE9PT1iKWJyZWFrIGE7Zm9yKDtudWxsPT09YS5zaWJsaW5nOyl7aWYobnVsbD09PWEucmV0dXJufHxhLnJldHVybj09PWIpYnJlYWsgYTthPWEucmV0dXJufWEuc2libGluZy5yZXR1cm49YS5yZXR1cm47YT1hLnNpYmxpbmd9ZCY9MX1IKFAsZCk7aWYoMD09PShiLm1vZGUmMSkpYi5tZW1vaXplZFN0YXRlPVxubnVsbDtlbHNlIHN3aXRjaChlKXtjYXNlIFwiZm9yd2FyZHNcIjpjPWIuY2hpbGQ7Zm9yKGU9bnVsbDtudWxsIT09YzspYT1jLmFsdGVybmF0ZSxudWxsIT09YSYmbnVsbD09PUNoKGEpJiYoZT1jKSxjPWMuc2libGluZztjPWU7bnVsbD09PWM/KGU9Yi5jaGlsZCxiLmNoaWxkPW51bGwpOihlPWMuc2libGluZyxjLnNpYmxpbmc9bnVsbCk7dWooYiwhMSxlLGMsZik7YnJlYWs7Y2FzZSBcImJhY2t3YXJkc1wiOmM9bnVsbDtlPWIuY2hpbGQ7Zm9yKGIuY2hpbGQ9bnVsbDtudWxsIT09ZTspe2E9ZS5hbHRlcm5hdGU7aWYobnVsbCE9PWEmJm51bGw9PT1DaChhKSl7Yi5jaGlsZD1lO2JyZWFrfWE9ZS5zaWJsaW5nO2Uuc2libGluZz1jO2M9ZTtlPWF9dWooYiwhMCxjLG51bGwsZik7YnJlYWs7Y2FzZSBcInRvZ2V0aGVyXCI6dWooYiwhMSxudWxsLG51bGwsdm9pZCAwKTticmVhaztkZWZhdWx0OmIubWVtb2l6ZWRTdGF0ZT1udWxsfXJldHVybiBiLmNoaWxkfVxuZnVuY3Rpb24gWmkoYSxiLGMpe251bGwhPT1hJiYoYi5kZXBlbmRlbmNpZXM9YS5kZXBlbmRlbmNpZXMpO3pnfD1iLmxhbmVzO2lmKDA9PT0oYyZiLmNoaWxkTGFuZXMpKXJldHVybiBudWxsO2lmKG51bGwhPT1hJiZiLmNoaWxkIT09YS5jaGlsZCl0aHJvdyBFcnJvcihwKDE1MykpO2lmKG51bGwhPT1iLmNoaWxkKXthPWIuY2hpbGQ7Yz1taChhLGEucGVuZGluZ1Byb3BzKTtiLmNoaWxkPWM7Zm9yKGMucmV0dXJuPWI7bnVsbCE9PWEuc2libGluZzspYT1hLnNpYmxpbmcsYz1jLnNpYmxpbmc9bWgoYSxhLnBlbmRpbmdQcm9wcyksYy5yZXR1cm49YjtjLnNpYmxpbmc9bnVsbH1yZXR1cm4gYi5jaGlsZH1cbmZ1bmN0aW9uIHdqKGEsYixjKXtzd2l0Y2goYi50YWcpe2Nhc2UgMzppaihiKTtnaCgpO2JyZWFrO2Nhc2UgNTpBaChiKTticmVhaztjYXNlIDE6VGYoYi50eXBlKSYmWGYoYik7YnJlYWs7Y2FzZSA0OnloKGIsYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyk7YnJlYWs7Y2FzZSAxMDp2YXIgZD1iLnR5cGUuX2NvbnRleHQsZT1iLm1lbW9pemVkUHJvcHMudmFsdWU7SChnZyxkLl9jdXJyZW50VmFsdWUpO2QuX2N1cnJlbnRWYWx1ZT1lO2JyZWFrO2Nhc2UgMTM6ZD1iLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWQpe2lmKG51bGwhPT1kLmRlaHlkcmF0ZWQpcmV0dXJuIEgoUCxQLmN1cnJlbnQmMSksYi5mbGFnc3w9MTI4LG51bGw7aWYoMCE9PShjJmIuY2hpbGQuY2hpbGRMYW5lcykpcmV0dXJuIG1qKGEsYixjKTtIKFAsUC5jdXJyZW50JjEpO2E9WmkoYSxiLGMpO3JldHVybiBudWxsIT09YT9hLnNpYmxpbmc6bnVsbH1IKFAsUC5jdXJyZW50JjEpO2JyZWFrO2Nhc2UgMTk6ZD0wIT09KGMmXG5iLmNoaWxkTGFuZXMpO2lmKDAhPT0oYS5mbGFncyYxMjgpKXtpZihkKXJldHVybiB2aihhLGIsYyk7Yi5mbGFnc3w9MTI4fWU9Yi5tZW1vaXplZFN0YXRlO251bGwhPT1lJiYoZS5yZW5kZXJpbmc9bnVsbCxlLnRhaWw9bnVsbCxlLmxhc3RFZmZlY3Q9bnVsbCk7SChQLFAuY3VycmVudCk7aWYoZClicmVhaztlbHNlIHJldHVybiBudWxsO2Nhc2UgMjI6Y2FzZSAyMzpyZXR1cm4gYi5sYW5lcz0wLGRqKGEsYixjKX1yZXR1cm4gWmkoYSxiLGMpfVxuZnVuY3Rpb24geGooYSxiKXtXZyhiKTtzd2l0Y2goYi50YWcpe2Nhc2UgMTpyZXR1cm4gVGYoYi50eXBlKSYmVWYoKSxhPWIuZmxhZ3MsYSY2NTUzNj8oYi5mbGFncz1hJi02NTUzN3wxMjgsYik6bnVsbDtjYXNlIDM6cmV0dXJuIHpoKCksRyhRZiksRyhJKSxFaCgpLGE9Yi5mbGFncywwIT09KGEmNjU1MzYpJiYwPT09KGEmMTI4KT8oYi5mbGFncz1hJi02NTUzN3wxMjgsYik6bnVsbDtjYXNlIDU6cmV0dXJuIEJoKGIpLG51bGw7Y2FzZSAxMzpHKFApO2E9Yi5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1hJiZudWxsIT09YS5kZWh5ZHJhdGVkKXtpZihudWxsPT09Yi5hbHRlcm5hdGUpdGhyb3cgRXJyb3IocCgzNDApKTtnaCgpfWE9Yi5mbGFncztyZXR1cm4gYSY2NTUzNj8oYi5mbGFncz1hJi02NTUzN3wxMjgsYik6bnVsbDtjYXNlIDE5OnJldHVybiBHKFApLG51bGw7Y2FzZSA0OnJldHVybiB6aCgpLG51bGw7Y2FzZSAxMDpyZXR1cm4gbGcoYi50eXBlLl9jb250ZXh0KSxudWxsO2Nhc2UgMjI6Y2FzZSAyMzpyZXR1cm4gVWkoKSxcbm51bGw7Y2FzZSAyNDpyZXR1cm4gbnVsbDtkZWZhdWx0OnJldHVybiBudWxsfX12YXIgeWo9ITEsemo9ITEsQWo9XCJmdW5jdGlvblwiPT09dHlwZW9mIFdlYWtTZXQ/V2Vha1NldDpTZXQsWD1udWxsO2Z1bmN0aW9uIEJqKGEsYil7dmFyIGM9YS5yZWY7aWYobnVsbCE9PWMpaWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGMpdHJ5e2MobnVsbCl9Y2F0Y2goZCl7Q2ooYSxiLGQpfWVsc2UgYy5jdXJyZW50PW51bGx9ZnVuY3Rpb24gRGooYSxiLGMpe3RyeXtjKCl9Y2F0Y2goZCl7Q2ooYSxiLGQpfX12YXIgRWo9ITE7XG5mdW5jdGlvbiBGaihhLGIpe2E9SGUoKTtpZihJZShhKSl7aWYoXCJzZWxlY3Rpb25TdGFydFwiaW4gYSl2YXIgYz17c3RhcnQ6YS5zZWxlY3Rpb25TdGFydCxlbmQ6YS5zZWxlY3Rpb25FbmR9O2Vsc2UgYTp7Yz0oYz1hLm93bmVyRG9jdW1lbnQpJiZjLmRlZmF1bHRWaWV3fHx3aW5kb3c7dmFyIGQ9Yy5nZXRTZWxlY3Rpb24mJmMuZ2V0U2VsZWN0aW9uKCk7aWYoZCYmMCE9PWQucmFuZ2VDb3VudCl7Yz1kLmFuY2hvck5vZGU7dmFyIGU9ZC5hbmNob3JPZmZzZXQsZj1kLmZvY3VzTm9kZTtkPWQuZm9jdXNPZmZzZXQ7dHJ5e2Mubm9kZVR5cGUsZi5ub2RlVHlwZX1jYXRjaChPKXtjPW51bGw7YnJlYWsgYX12YXIgZz0wLGg9LTEsaz0tMSxsPTAsbT0wLHc9YSx1PW51bGw7Yjpmb3IoOzspe2Zvcih2YXIgeTs7KXt3IT09Y3x8MCE9PWUmJjMhPT13Lm5vZGVUeXBlfHwoaD1nK2UpO3chPT1mfHwwIT09ZCYmMyE9PXcubm9kZVR5cGV8fChrPWcrZCk7Mz09PXcubm9kZVR5cGUmJihnKz13Lm5vZGVWYWx1ZS5sZW5ndGgpO1xuaWYobnVsbD09PSh5PXcuZmlyc3RDaGlsZCkpYnJlYWs7dT13O3c9eX1mb3IoOzspe2lmKHc9PT1hKWJyZWFrIGI7dT09PWMmJisrbD09PWUmJihoPWcpO3U9PT1mJiYrK209PT1kJiYoaz1nKTtpZihudWxsIT09KHk9dy5uZXh0U2libGluZykpYnJlYWs7dz11O3U9dy5wYXJlbnROb2RlfXc9eX1jPS0xPT09aHx8LTE9PT1rP251bGw6e3N0YXJ0OmgsZW5kOmt9fWVsc2UgYz1udWxsfWM9Y3x8e3N0YXJ0OjAsZW5kOjB9fWVsc2UgYz1udWxsO3hmPXtmb2N1c2VkRWxlbTphLHNlbGVjdGlvblJhbmdlOmN9O2ZvcihYPWI7bnVsbCE9PVg7KWlmKGI9WCxhPWIuY2hpbGQsMCE9PShiLnN1YnRyZWVGbGFncyYxMDI4KSYmbnVsbCE9PWEpYS5yZXR1cm49YixYPWE7ZWxzZSBmb3IoO251bGwhPT1YOyl7Yj1YO3RyeXt2YXIgbj1iLmFsdGVybmF0ZTtpZigwIT09KGIuZmxhZ3MmMTAyNCkpc3dpdGNoKGIudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE1OmJyZWFrO2Nhc2UgMTppZihudWxsIT09XG5uKXt2YXIgdj1uLm1lbW9pemVkUHJvcHMsQz1uLm1lbW9pemVkU3RhdGUsdD1iLnN0YXRlTm9kZSxyPXQuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUoYi5lbGVtZW50VHlwZT09PWIudHlwZT92OmZnKGIudHlwZSx2KSxDKTt0Ll9fcmVhY3RJbnRlcm5hbFNuYXBzaG90QmVmb3JlVXBkYXRlPXJ9YnJlYWs7Y2FzZSAzOnZhciB4PWIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87aWYoMT09PXgubm9kZVR5cGUpeC50ZXh0Q29udGVudD1cIlwiO2Vsc2UgaWYoOT09PXgubm9kZVR5cGUpe3ZhciBCPXguYm9keTtudWxsIT1CJiYoQi50ZXh0Q29udGVudD1cIlwiKX1icmVhaztjYXNlIDU6Y2FzZSA2OmNhc2UgNDpjYXNlIDE3OmJyZWFrO2RlZmF1bHQ6dGhyb3cgRXJyb3IocCgxNjMpKTt9fWNhdGNoKE8pe0NqKGIsYi5yZXR1cm4sTyl9YT1iLnNpYmxpbmc7aWYobnVsbCE9PWEpe2EucmV0dXJuPWIucmV0dXJuO1g9YTticmVha31YPWIucmV0dXJufW49RWo7RWo9ITE7cmV0dXJuIG59XG5mdW5jdGlvbiBHaihhLGIsYyl7dmFyIGQ9Yi51cGRhdGVRdWV1ZTtkPW51bGwhPT1kP2QubGFzdEVmZmVjdDpudWxsO2lmKG51bGwhPT1kKXt2YXIgZT1kPWQubmV4dDtkb3tpZigoZS50YWcmYSk9PT1hKXt2YXIgZj1lLmRlc3Ryb3k7ZS5kZXN0cm95PXZvaWQgMDt2b2lkIDAhPT1mJiZEaihiLGMsZil9ZT1lLm5leHR9d2hpbGUoZSE9PWQpfX1mdW5jdGlvbiBIaihhLGIpe2I9Yi51cGRhdGVRdWV1ZTtiPW51bGwhPT1iP2IubGFzdEVmZmVjdDpudWxsO2lmKG51bGwhPT1iKXt2YXIgYz1iPWIubmV4dDtkb3tpZigoYy50YWcmYSk9PT1hKXt2YXIgZD1jLmNyZWF0ZTtjLmRlc3Ryb3k9ZCgpfWM9Yy5uZXh0fXdoaWxlKGMhPT1iKX19ZnVuY3Rpb24gSWooYSl7dmFyIGI9YS5yZWY7aWYobnVsbCE9PWIpe3ZhciBjPWEuc3RhdGVOb2RlO3N3aXRjaChhLnRhZyl7Y2FzZSA1OmE9YzticmVhaztkZWZhdWx0OmE9Y31cImZ1bmN0aW9uXCI9PT10eXBlb2YgYj9iKGEpOmIuY3VycmVudD1hfX1cbmZ1bmN0aW9uIEpqKGEsYixjKXtpZihpYyYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGljLm9uQ29tbWl0RmliZXJVbm1vdW50KXRyeXtpYy5vbkNvbW1pdEZpYmVyVW5tb3VudChoYyxiKX1jYXRjaChnKXt9c3dpdGNoKGIudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE0OmNhc2UgMTU6YT1iLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1hJiYoYT1hLmxhc3RFZmZlY3QsbnVsbCE9PWEpKXt2YXIgZD1hPWEubmV4dDtkb3t2YXIgZT1kLGY9ZS5kZXN0cm95O2U9ZS50YWc7dm9pZCAwIT09ZiYmKDAhPT0oZSYyKT9EaihiLGMsZik6MCE9PShlJjQpJiZEaihiLGMsZikpO2Q9ZC5uZXh0fXdoaWxlKGQhPT1hKX1icmVhaztjYXNlIDE6QmooYixjKTthPWIuc3RhdGVOb2RlO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhLmNvbXBvbmVudFdpbGxVbm1vdW50KXRyeXthLnByb3BzPWIubWVtb2l6ZWRQcm9wcyxhLnN0YXRlPWIubWVtb2l6ZWRTdGF0ZSxhLmNvbXBvbmVudFdpbGxVbm1vdW50KCl9Y2F0Y2goZyl7Q2ooYixcbmMsZyl9YnJlYWs7Y2FzZSA1OkJqKGIsYyk7YnJlYWs7Y2FzZSA0OktqKGEsYixjKX19ZnVuY3Rpb24gTGooYSl7dmFyIGI9YS5hbHRlcm5hdGU7bnVsbCE9PWImJihhLmFsdGVybmF0ZT1udWxsLExqKGIpKTthLmNoaWxkPW51bGw7YS5kZWxldGlvbnM9bnVsbDthLnNpYmxpbmc9bnVsbDs1PT09YS50YWcmJihiPWEuc3RhdGVOb2RlLG51bGwhPT1iJiYoZGVsZXRlIGJbSWZdLGRlbGV0ZSBiW0pmXSxkZWxldGUgYltqZl0sZGVsZXRlIGJbS2ZdLGRlbGV0ZSBiW0xmXSkpO2Euc3RhdGVOb2RlPW51bGw7YS5yZXR1cm49bnVsbDthLmRlcGVuZGVuY2llcz1udWxsO2EubWVtb2l6ZWRQcm9wcz1udWxsO2EubWVtb2l6ZWRTdGF0ZT1udWxsO2EucGVuZGluZ1Byb3BzPW51bGw7YS5zdGF0ZU5vZGU9bnVsbDthLnVwZGF0ZVF1ZXVlPW51bGx9ZnVuY3Rpb24gTWooYSl7cmV0dXJuIDU9PT1hLnRhZ3x8Mz09PWEudGFnfHw0PT09YS50YWd9XG5mdW5jdGlvbiBOaihhKXthOmZvcig7Oyl7Zm9yKDtudWxsPT09YS5zaWJsaW5nOyl7aWYobnVsbD09PWEucmV0dXJufHxNaihhLnJldHVybikpcmV0dXJuIG51bGw7YT1hLnJldHVybn1hLnNpYmxpbmcucmV0dXJuPWEucmV0dXJuO2ZvcihhPWEuc2libGluZzs1IT09YS50YWcmJjYhPT1hLnRhZyYmMTghPT1hLnRhZzspe2lmKGEuZmxhZ3MmMiljb250aW51ZSBhO2lmKG51bGw9PT1hLmNoaWxkfHw0PT09YS50YWcpY29udGludWUgYTtlbHNlIGEuY2hpbGQucmV0dXJuPWEsYT1hLmNoaWxkfWlmKCEoYS5mbGFncyYyKSlyZXR1cm4gYS5zdGF0ZU5vZGV9fVxuZnVuY3Rpb24gT2ooYSl7YTp7Zm9yKHZhciBiPWEucmV0dXJuO251bGwhPT1iOyl7aWYoTWooYikpYnJlYWsgYTtiPWIucmV0dXJufXRocm93IEVycm9yKHAoMTYwKSk7fXZhciBjPWI7c3dpdGNoKGMudGFnKXtjYXNlIDU6Yj1jLnN0YXRlTm9kZTtjLmZsYWdzJjMyJiYobGIoYixcIlwiKSxjLmZsYWdzJj0tMzMpO2M9TmooYSk7UGooYSxjLGIpO2JyZWFrO2Nhc2UgMzpjYXNlIDQ6Yj1jLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO2M9TmooYSk7UWooYSxjLGIpO2JyZWFrO2RlZmF1bHQ6dGhyb3cgRXJyb3IocCgxNjEpKTt9fVxuZnVuY3Rpb24gUWooYSxiLGMpe3ZhciBkPWEudGFnO2lmKDU9PT1kfHw2PT09ZClhPWEuc3RhdGVOb2RlLGI/OD09PWMubm9kZVR5cGU/Yy5wYXJlbnROb2RlLmluc2VydEJlZm9yZShhLGIpOmMuaW5zZXJ0QmVmb3JlKGEsYik6KDg9PT1jLm5vZGVUeXBlPyhiPWMucGFyZW50Tm9kZSxiLmluc2VydEJlZm9yZShhLGMpKTooYj1jLGIuYXBwZW5kQ2hpbGQoYSkpLGM9Yy5fcmVhY3RSb290Q29udGFpbmVyLG51bGwhPT1jJiZ2b2lkIDAhPT1jfHxudWxsIT09Yi5vbmNsaWNrfHwoYi5vbmNsaWNrPXdmKSk7ZWxzZSBpZig0IT09ZCYmKGE9YS5jaGlsZCxudWxsIT09YSkpZm9yKFFqKGEsYixjKSxhPWEuc2libGluZztudWxsIT09YTspUWooYSxiLGMpLGE9YS5zaWJsaW5nfVxuZnVuY3Rpb24gUGooYSxiLGMpe3ZhciBkPWEudGFnO2lmKDU9PT1kfHw2PT09ZClhPWEuc3RhdGVOb2RlLGI/Yy5pbnNlcnRCZWZvcmUoYSxiKTpjLmFwcGVuZENoaWxkKGEpO2Vsc2UgaWYoNCE9PWQmJihhPWEuY2hpbGQsbnVsbCE9PWEpKWZvcihQaihhLGIsYyksYT1hLnNpYmxpbmc7bnVsbCE9PWE7KVBqKGEsYixjKSxhPWEuc2libGluZ31cbmZ1bmN0aW9uIEtqKGEsYixjKXtmb3IodmFyIGQ9YixlPSExLGYsZzs7KXtpZighZSl7ZT1kLnJldHVybjthOmZvcig7Oyl7aWYobnVsbD09PWUpdGhyb3cgRXJyb3IocCgxNjApKTtmPWUuc3RhdGVOb2RlO3N3aXRjaChlLnRhZyl7Y2FzZSA1Omc9ITE7YnJlYWsgYTtjYXNlIDM6Zj1mLmNvbnRhaW5lckluZm87Zz0hMDticmVhayBhO2Nhc2UgNDpmPWYuY29udGFpbmVySW5mbztnPSEwO2JyZWFrIGF9ZT1lLnJldHVybn1lPSEwfWlmKDU9PT1kLnRhZ3x8Nj09PWQudGFnKXthOmZvcih2YXIgaD1hLGs9ZCxsPWMsbT1rOzspaWYoSmooaCxtLGwpLG51bGwhPT1tLmNoaWxkJiY0IT09bS50YWcpbS5jaGlsZC5yZXR1cm49bSxtPW0uY2hpbGQ7ZWxzZXtpZihtPT09aylicmVhayBhO2Zvcig7bnVsbD09PW0uc2libGluZzspe2lmKG51bGw9PT1tLnJldHVybnx8bS5yZXR1cm49PT1rKWJyZWFrIGE7bT1tLnJldHVybn1tLnNpYmxpbmcucmV0dXJuPW0ucmV0dXJuO209bS5zaWJsaW5nfWc/KGg9XG5mLGs9ZC5zdGF0ZU5vZGUsOD09PWgubm9kZVR5cGU/aC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGspOmgucmVtb3ZlQ2hpbGQoaykpOmYucmVtb3ZlQ2hpbGQoZC5zdGF0ZU5vZGUpfWVsc2UgaWYoMTg9PT1kLnRhZylnPyhoPWYsaz1kLnN0YXRlTm9kZSw4PT09aC5ub2RlVHlwZT9FZihoLnBhcmVudE5vZGUsayk6MT09PWgubm9kZVR5cGUmJkVmKGgsayksWWMoaCkpOkVmKGYsZC5zdGF0ZU5vZGUpO2Vsc2UgaWYoND09PWQudGFnKXtpZihudWxsIT09ZC5jaGlsZCl7Zj1kLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO2c9ITA7ZC5jaGlsZC5yZXR1cm49ZDtkPWQuY2hpbGQ7Y29udGludWV9fWVsc2UgaWYoSmooYSxkLGMpLG51bGwhPT1kLmNoaWxkKXtkLmNoaWxkLnJldHVybj1kO2Q9ZC5jaGlsZDtjb250aW51ZX1pZihkPT09YilicmVhaztmb3IoO251bGw9PT1kLnNpYmxpbmc7KXtpZihudWxsPT09ZC5yZXR1cm58fGQucmV0dXJuPT09YilyZXR1cm47ZD1kLnJldHVybjs0PT09ZC50YWcmJlxuKGU9ITEpfWQuc2libGluZy5yZXR1cm49ZC5yZXR1cm47ZD1kLnNpYmxpbmd9fVxuZnVuY3Rpb24gUmooYSxiKXtzd2l0Y2goYi50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTQ6Y2FzZSAxNTpHaigzLGIsYi5yZXR1cm4pO0hqKDMsYik7R2ooNSxiLGIucmV0dXJuKTtyZXR1cm47Y2FzZSAxOnJldHVybjtjYXNlIDU6dmFyIGM9Yi5zdGF0ZU5vZGU7aWYobnVsbCE9Yyl7dmFyIGQ9Yi5tZW1vaXplZFByb3BzLGU9bnVsbCE9PWE/YS5tZW1vaXplZFByb3BzOmQ7YT1iLnR5cGU7dmFyIGY9Yi51cGRhdGVRdWV1ZTtiLnVwZGF0ZVF1ZXVlPW51bGw7aWYobnVsbCE9PWYpe1wiaW5wdXRcIj09PWEmJlwicmFkaW9cIj09PWQudHlwZSYmbnVsbCE9ZC5uYW1lJiZZYShjLGQpO3NiKGEsZSk7Yj1zYihhLGQpO2ZvcihlPTA7ZTxmLmxlbmd0aDtlKz0yKXt2YXIgZz1mW2VdLGg9ZltlKzFdO1wic3R5bGVcIj09PWc/cGIoYyxoKTpcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCI9PT1nP2tiKGMsaCk6XCJjaGlsZHJlblwiPT09Zz9sYihjLGgpOnJhKGMsZyxoLGIpfXN3aXRjaChhKXtjYXNlIFwiaW5wdXRcIjpaYShjLFxuZCk7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6ZmIoYyxkKTticmVhaztjYXNlIFwic2VsZWN0XCI6YT1jLl93cmFwcGVyU3RhdGUud2FzTXVsdGlwbGUsYy5fd3JhcHBlclN0YXRlLndhc011bHRpcGxlPSEhZC5tdWx0aXBsZSxmPWQudmFsdWUsbnVsbCE9Zj9jYihjLCEhZC5tdWx0aXBsZSxmLCExKTphIT09ISFkLm11bHRpcGxlJiYobnVsbCE9ZC5kZWZhdWx0VmFsdWU/Y2IoYywhIWQubXVsdGlwbGUsZC5kZWZhdWx0VmFsdWUsITApOmNiKGMsISFkLm11bHRpcGxlLGQubXVsdGlwbGU/W106XCJcIiwhMSkpfWNbSmZdPWR9fXJldHVybjtjYXNlIDY6aWYobnVsbD09PWIuc3RhdGVOb2RlKXRocm93IEVycm9yKHAoMTYyKSk7Yi5zdGF0ZU5vZGUubm9kZVZhbHVlPWIubWVtb2l6ZWRQcm9wcztyZXR1cm47Y2FzZSAzOm51bGwhPT1hJiZhLm1lbW9pemVkU3RhdGUuaXNEZWh5ZHJhdGVkJiZZYyhiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvKTtyZXR1cm47Y2FzZSAxMjpyZXR1cm47Y2FzZSAxMzpTaihiKTtcbnJldHVybjtjYXNlIDE5OlNqKGIpO3JldHVybjtjYXNlIDE3OnJldHVybn10aHJvdyBFcnJvcihwKDE2MykpO31mdW5jdGlvbiBTaihhKXt2YXIgYj1hLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1iKXthLnVwZGF0ZVF1ZXVlPW51bGw7dmFyIGM9YS5zdGF0ZU5vZGU7bnVsbD09PWMmJihjPWEuc3RhdGVOb2RlPW5ldyBBaik7Yi5mb3JFYWNoKGZ1bmN0aW9uKGIpe3ZhciBkPVRqLmJpbmQobnVsbCxhLGIpO2MuaGFzKGIpfHwoYy5hZGQoYiksYi50aGVuKGQsZCkpfSl9fVxuZnVuY3Rpb24gVWooYSxiKXtmb3IoWD1iO251bGwhPT1YOyl7Yj1YO3ZhciBjPWIuZGVsZXRpb25zO2lmKG51bGwhPT1jKWZvcih2YXIgZD0wO2Q8Yy5sZW5ndGg7ZCsrKXt2YXIgZT1jW2RdO3RyeXtLaihhLGUsYik7dmFyIGY9ZS5hbHRlcm5hdGU7bnVsbCE9PWYmJihmLnJldHVybj1udWxsKTtlLnJldHVybj1udWxsfWNhdGNoKEwpe0NqKGUsYixMKX19Yz1iLmNoaWxkO2lmKDAhPT0oYi5zdWJ0cmVlRmxhZ3MmMTI4NTQpJiZudWxsIT09YyljLnJldHVybj1iLFg9YztlbHNlIGZvcig7bnVsbCE9PVg7KXtiPVg7dHJ5e3ZhciBnPWIuZmxhZ3M7ZyYzMiYmbGIoYi5zdGF0ZU5vZGUsXCJcIik7aWYoZyY1MTIpe3ZhciBoPWIuYWx0ZXJuYXRlO2lmKG51bGwhPT1oKXt2YXIgaz1oLnJlZjtudWxsIT09ayYmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBrP2sobnVsbCk6ay5jdXJyZW50PW51bGwpfX1pZihnJjgxOTIpc3dpdGNoKGIudGFnKXtjYXNlIDEzOmlmKG51bGwhPT1iLm1lbW9pemVkU3RhdGUpe3ZhciBsPVxuYi5hbHRlcm5hdGU7aWYobnVsbD09PWx8fG51bGw9PT1sLm1lbW9pemVkU3RhdGUpVmo9RCgpfWJyZWFrO2Nhc2UgMjI6dmFyIG09bnVsbCE9PWIubWVtb2l6ZWRTdGF0ZSx3PWIuYWx0ZXJuYXRlLHU9bnVsbCE9PXcmJm51bGwhPT13Lm1lbW9pemVkU3RhdGU7Yz1iO2E6e2Q9YztlPW07Zm9yKHZhciB5PW51bGwsbj1kOzspe2lmKDU9PT1uLnRhZyl7aWYobnVsbD09PXkpe3k9bjt2YXIgdj1uLnN0YXRlTm9kZTtpZihlKXt2YXIgQz12LnN0eWxlO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBDLnNldFByb3BlcnR5P0Muc2V0UHJvcGVydHkoXCJkaXNwbGF5XCIsXCJub25lXCIsXCJpbXBvcnRhbnRcIik6Qy5kaXNwbGF5PVwibm9uZVwifWVsc2V7dmFyIHQ9bi5zdGF0ZU5vZGUscj1uLm1lbW9pemVkUHJvcHMuc3R5bGUseD12b2lkIDAhPT1yJiZudWxsIT09ciYmci5oYXNPd25Qcm9wZXJ0eShcImRpc3BsYXlcIik/ci5kaXNwbGF5Om51bGw7dC5zdHlsZS5kaXNwbGF5PW9iKFwiZGlzcGxheVwiLHgpfX19ZWxzZSBpZig2PT09XG5uLnRhZyludWxsPT09eSYmKG4uc3RhdGVOb2RlLm5vZGVWYWx1ZT1lP1wiXCI6bi5tZW1vaXplZFByb3BzKTtlbHNlIGlmKCgyMiE9PW4udGFnJiYyMyE9PW4udGFnfHxudWxsPT09bi5tZW1vaXplZFN0YXRlfHxuPT09ZCkmJm51bGwhPT1uLmNoaWxkKXtuLmNoaWxkLnJldHVybj1uO249bi5jaGlsZDtjb250aW51ZX1pZihuPT09ZClicmVhaztmb3IoO251bGw9PT1uLnNpYmxpbmc7KXtpZihudWxsPT09bi5yZXR1cm58fG4ucmV0dXJuPT09ZClicmVhayBhO3k9PT1uJiYoeT1udWxsKTtuPW4ucmV0dXJufXk9PT1uJiYoeT1udWxsKTtuLnNpYmxpbmcucmV0dXJuPW4ucmV0dXJuO249bi5zaWJsaW5nfX1pZihtJiYhdSYmMCE9PShjLm1vZGUmMSkpe1g9Yztmb3IodmFyIEI9Yy5jaGlsZDtudWxsIT09Qjspe2ZvcihjPVg9QjtudWxsIT09WDspe2Q9WDt2YXIgTz1kLmNoaWxkO3N3aXRjaChkLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNDpjYXNlIDE1OkdqKDQsZCxkLnJldHVybik7YnJlYWs7XG5jYXNlIDE6QmooZCxkLnJldHVybik7dmFyIFQ9ZC5zdGF0ZU5vZGU7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIFQuY29tcG9uZW50V2lsbFVubW91bnQpe3ZhciB6YT1kLnJldHVybjt0cnl7VC5wcm9wcz1kLm1lbW9pemVkUHJvcHMsVC5zdGF0ZT1kLm1lbW9pemVkU3RhdGUsVC5jb21wb25lbnRXaWxsVW5tb3VudCgpfWNhdGNoKEwpe0NqKGQsemEsTCl9fWJyZWFrO2Nhc2UgNTpCaihkLGQucmV0dXJuKTticmVhaztjYXNlIDIyOmlmKG51bGwhPT1kLm1lbW9pemVkU3RhdGUpe1dqKGMpO2NvbnRpbnVlfX1udWxsIT09Tz8oTy5yZXR1cm49ZCxYPU8pOldqKGMpfUI9Qi5zaWJsaW5nfX19c3dpdGNoKGcmNDEwMil7Y2FzZSAyOk9qKGIpO2IuZmxhZ3MmPS0zO2JyZWFrO2Nhc2UgNjpPaihiKTtiLmZsYWdzJj0tMztSaihiLmFsdGVybmF0ZSxiKTticmVhaztjYXNlIDQwOTY6Yi5mbGFncyY9LTQwOTc7YnJlYWs7Y2FzZSA0MTAwOmIuZmxhZ3MmPS00MDk3O1JqKGIuYWx0ZXJuYXRlLGIpO1xuYnJlYWs7Y2FzZSA0OlJqKGIuYWx0ZXJuYXRlLGIpfX1jYXRjaChMKXtDaihiLGIucmV0dXJuLEwpfWM9Yi5zaWJsaW5nO2lmKG51bGwhPT1jKXtjLnJldHVybj1iLnJldHVybjtYPWM7YnJlYWt9WD1iLnJldHVybn19fWZ1bmN0aW9uIFhqKGEsYixjKXtYPWE7WWooYSxiLGMpfVxuZnVuY3Rpb24gWWooYSxiLGMpe2Zvcih2YXIgZD0wIT09KGEubW9kZSYxKTtudWxsIT09WDspe3ZhciBlPVgsZj1lLmNoaWxkO2lmKDIyPT09ZS50YWcmJmQpe3ZhciBnPW51bGwhPT1lLm1lbW9pemVkU3RhdGV8fHlqO2lmKCFnKXt2YXIgaD1lLmFsdGVybmF0ZSxrPW51bGwhPT1oJiZudWxsIT09aC5tZW1vaXplZFN0YXRlfHx6ajtoPXlqO3ZhciBsPXpqO3lqPWc7aWYoKHpqPWspJiYhbClmb3IoWD1lO251bGwhPT1YOylnPVgsaz1nLmNoaWxkLDIyPT09Zy50YWcmJm51bGwhPT1nLm1lbW9pemVkU3RhdGU/WmooZSk6bnVsbCE9PWs/KGsucmV0dXJuPWcsWD1rKTpaaihlKTtmb3IoO251bGwhPT1mOylYPWYsWWooZixiLGMpLGY9Zi5zaWJsaW5nO1g9ZTt5aj1oO3pqPWx9YWsoYSxiLGMpfWVsc2UgMCE9PShlLnN1YnRyZWVGbGFncyY4NzcyKSYmbnVsbCE9PWY/KGYucmV0dXJuPWUsWD1mKTphayhhLGIsYyl9fVxuZnVuY3Rpb24gYWsoYSl7Zm9yKDtudWxsIT09WDspe3ZhciBiPVg7aWYoMCE9PShiLmZsYWdzJjg3NzIpKXt2YXIgYz1iLmFsdGVybmF0ZTt0cnl7aWYoMCE9PShiLmZsYWdzJjg3NzIpKXN3aXRjaChiLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNTp6anx8SGooNSxiKTticmVhaztjYXNlIDE6dmFyIGQ9Yi5zdGF0ZU5vZGU7aWYoYi5mbGFncyY0JiYhemopaWYobnVsbD09PWMpZC5jb21wb25lbnREaWRNb3VudCgpO2Vsc2V7dmFyIGU9Yi5lbGVtZW50VHlwZT09PWIudHlwZT9jLm1lbW9pemVkUHJvcHM6ZmcoYi50eXBlLGMubWVtb2l6ZWRQcm9wcyk7ZC5jb21wb25lbnREaWRVcGRhdGUoZSxjLm1lbW9pemVkU3RhdGUsZC5fX3JlYWN0SW50ZXJuYWxTbmFwc2hvdEJlZm9yZVVwZGF0ZSl9dmFyIGY9Yi51cGRhdGVRdWV1ZTtudWxsIT09ZiYmQWcoYixmLGQpO2JyZWFrO2Nhc2UgMzp2YXIgZz1iLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1nKXtjPW51bGw7aWYobnVsbCE9PWIuY2hpbGQpc3dpdGNoKGIuY2hpbGQudGFnKXtjYXNlIDU6Yz1cbmIuY2hpbGQuc3RhdGVOb2RlO2JyZWFrO2Nhc2UgMTpjPWIuY2hpbGQuc3RhdGVOb2RlfUFnKGIsZyxjKX1icmVhaztjYXNlIDU6dmFyIGg9Yi5zdGF0ZU5vZGU7aWYobnVsbD09PWMmJmIuZmxhZ3MmNCl7Yz1oO3ZhciBrPWIubWVtb2l6ZWRQcm9wcztzd2l0Y2goYi50eXBlKXtjYXNlIFwiYnV0dG9uXCI6Y2FzZSBcImlucHV0XCI6Y2FzZSBcInNlbGVjdFwiOmNhc2UgXCJ0ZXh0YXJlYVwiOmsuYXV0b0ZvY3VzJiZjLmZvY3VzKCk7YnJlYWs7Y2FzZSBcImltZ1wiOmsuc3JjJiYoYy5zcmM9ay5zcmMpfX1icmVhaztjYXNlIDY6YnJlYWs7Y2FzZSA0OmJyZWFrO2Nhc2UgMTI6YnJlYWs7Y2FzZSAxMzppZihudWxsPT09Yi5tZW1vaXplZFN0YXRlKXt2YXIgbD1iLmFsdGVybmF0ZTtpZihudWxsIT09bCl7dmFyIG09bC5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1tKXt2YXIgdz1tLmRlaHlkcmF0ZWQ7bnVsbCE9PXcmJlljKHcpfX19YnJlYWs7Y2FzZSAxOTpjYXNlIDE3OmNhc2UgMjE6Y2FzZSAyMjpjYXNlIDIzOmJyZWFrO1xuZGVmYXVsdDp0aHJvdyBFcnJvcihwKDE2MykpO316anx8Yi5mbGFncyY1MTImJklqKGIpfWNhdGNoKHUpe0NqKGIsYi5yZXR1cm4sdSl9fWlmKGI9PT1hKXtYPW51bGw7YnJlYWt9Yz1iLnNpYmxpbmc7aWYobnVsbCE9PWMpe2MucmV0dXJuPWIucmV0dXJuO1g9YzticmVha31YPWIucmV0dXJufX1mdW5jdGlvbiBXaihhKXtmb3IoO251bGwhPT1YOyl7dmFyIGI9WDtpZihiPT09YSl7WD1udWxsO2JyZWFrfXZhciBjPWIuc2libGluZztpZihudWxsIT09Yyl7Yy5yZXR1cm49Yi5yZXR1cm47WD1jO2JyZWFrfVg9Yi5yZXR1cm59fVxuZnVuY3Rpb24gWmooYSl7Zm9yKDtudWxsIT09WDspe3ZhciBiPVg7dHJ5e3N3aXRjaChiLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNTp2YXIgYz1iLnJldHVybjt0cnl7SGooNCxiKX1jYXRjaChrKXtDaihiLGMsayl9YnJlYWs7Y2FzZSAxOnZhciBkPWIuc3RhdGVOb2RlO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLmNvbXBvbmVudERpZE1vdW50KXt2YXIgZT1iLnJldHVybjt0cnl7ZC5jb21wb25lbnREaWRNb3VudCgpfWNhdGNoKGspe0NqKGIsZSxrKX19dmFyIGY9Yi5yZXR1cm47dHJ5e0lqKGIpfWNhdGNoKGspe0NqKGIsZixrKX1icmVhaztjYXNlIDU6dmFyIGc9Yi5yZXR1cm47dHJ5e0lqKGIpfWNhdGNoKGspe0NqKGIsZyxrKX19fWNhdGNoKGspe0NqKGIsYi5yZXR1cm4sayl9aWYoYj09PWEpe1g9bnVsbDticmVha312YXIgaD1iLnNpYmxpbmc7aWYobnVsbCE9PWgpe2gucmV0dXJuPWIucmV0dXJuO1g9aDticmVha31YPWIucmV0dXJufX1cbnZhciBiaz1NYXRoLmNlaWwsY2s9c2EuUmVhY3RDdXJyZW50RGlzcGF0Y2hlcixkaz1zYS5SZWFjdEN1cnJlbnRPd25lcixlaz1zYS5SZWFjdEN1cnJlbnRCYXRjaENvbmZpZyxLPTAsSj1udWxsLFk9bnVsbCxaPTAsVmk9MCxlaj1PZigwKSxXPTAsZms9bnVsbCx6Zz0wLGdrPTAsaGs9MCxpaz1udWxsLGprPW51bGwsVmo9MCxUaT1JbmZpbml0eSxEaT0hMSxFaT1udWxsLEdpPW51bGwsa2s9ITEsbGs9bnVsbCxtaz0wLG5rPTAsb2s9bnVsbCxwaz0tMSxxaz0wO2Z1bmN0aW9uIE0oKXtyZXR1cm4gMCE9PShLJjYpP0QoKTotMSE9PXBrP3BrOnBrPUQoKX1cbmZ1bmN0aW9uIERnKGEpe2lmKDA9PT0oYS5tb2RlJjEpKXJldHVybiAxO2lmKDAhPT0oSyYyKSYmMCE9PVopcmV0dXJuIFomLVo7aWYobnVsbCE9PWVnLnRyYW5zaXRpb24pcmV0dXJuIDA9PT1xayYmKGE9b2Msb2M8PD0xLDA9PT0ob2MmNDE5NDI0MCkmJihvYz02NCkscWs9YSkscWs7YT1FO2lmKDAhPT1hKXJldHVybiBhO2E9d2luZG93LmV2ZW50O2E9dm9pZCAwPT09YT8xNjplZChhLnR5cGUpO3JldHVybiBhfWZ1bmN0aW9uIEVnKGEsYixjKXtpZig1MDxuayl0aHJvdyBuaz0wLG9rPW51bGwsRXJyb3IocCgxODUpKTt2YXIgZD1yayhhLGIpO2lmKG51bGw9PT1kKXJldHVybiBudWxsO3djKGQsYixjKTtpZigwPT09KEsmMil8fGQhPT1KKWQ9PT1KJiYoMD09PShLJjIpJiYoZ2t8PWIpLDQ9PT1XJiZzayhkLFopKSx0ayhkLGMpLDE9PT1iJiYwPT09SyYmMD09PShhLm1vZGUmMSkmJihUaT1EKCkrNTAwLCRmJiZkZygpKTtyZXR1cm4gZH1cbmZ1bmN0aW9uIHJrKGEsYil7YS5sYW5lc3w9Yjt2YXIgYz1hLmFsdGVybmF0ZTtudWxsIT09YyYmKGMubGFuZXN8PWIpO2M9YTtmb3IoYT1hLnJldHVybjtudWxsIT09YTspYS5jaGlsZExhbmVzfD1iLGM9YS5hbHRlcm5hdGUsbnVsbCE9PWMmJihjLmNoaWxkTGFuZXN8PWIpLGM9YSxhPWEucmV0dXJuO3JldHVybiAzPT09Yy50YWc/Yy5zdGF0ZU5vZGU6bnVsbH1cbmZ1bmN0aW9uIHRrKGEsYil7dmFyIGM9YS5jYWxsYmFja05vZGU7dGMoYSxiKTt2YXIgZD1yYyhhLGE9PT1KP1o6MCk7aWYoMD09PWQpbnVsbCE9PWMmJlpiKGMpLGEuY2FsbGJhY2tOb2RlPW51bGwsYS5jYWxsYmFja1ByaW9yaXR5PTA7ZWxzZSBpZihiPWQmLWQsYS5jYWxsYmFja1ByaW9yaXR5IT09Yil7bnVsbCE9YyYmWmIoYyk7aWYoMT09PWIpMD09PWEudGFnP2NnKHVrLmJpbmQobnVsbCxhKSk6YmcodWsuYmluZChudWxsLGEpKSxEZihmdW5jdGlvbigpezA9PT1LJiZkZygpfSksYz1udWxsO2Vsc2V7c3dpdGNoKHpjKGQpKXtjYXNlIDE6Yz1jYzticmVhaztjYXNlIDQ6Yz1kYzticmVhaztjYXNlIDE2OmM9ZWM7YnJlYWs7Y2FzZSA1MzY4NzA5MTI6Yz1nYzticmVhaztkZWZhdWx0OmM9ZWN9Yz12ayhjLHdrLmJpbmQobnVsbCxhKSl9YS5jYWxsYmFja1ByaW9yaXR5PWI7YS5jYWxsYmFja05vZGU9Y319XG5mdW5jdGlvbiB3ayhhLGIpe3BrPS0xO3FrPTA7aWYoMCE9PShLJjYpKXRocm93IEVycm9yKHAoMzI3KSk7dmFyIGM9YS5jYWxsYmFja05vZGU7aWYoeGsoKSYmYS5jYWxsYmFja05vZGUhPT1jKXJldHVybiBudWxsO3ZhciBkPXJjKGEsYT09PUo/WjowKTtpZigwPT09ZClyZXR1cm4gbnVsbDtpZigwIT09KGQmMzApfHwwIT09KGQmYS5leHBpcmVkTGFuZXMpfHxiKWI9eWsoYSxkKTtlbHNle2I9ZDt2YXIgZT1LO0t8PTI7dmFyIGY9emsoKTtpZihKIT09YXx8WiE9PWIpVGk9RCgpKzUwMCxBayhhLGIpO2RvIHRyeXtCaygpO2JyZWFrfWNhdGNoKGgpe0NrKGEsaCl9d2hpbGUoMSk7a2coKTtjay5jdXJyZW50PWY7Sz1lO251bGwhPT1ZP2I9MDooSj1udWxsLFo9MCxiPVcpfWlmKDAhPT1iKXsyPT09YiYmKGU9dWMoYSksMCE9PWUmJihkPWUsYj1EayhhLGUpKSk7aWYoMT09PWIpdGhyb3cgYz1mayxBayhhLDApLHNrKGEsZCksdGsoYSxEKCkpLGM7aWYoNj09PWIpc2soYSxkKTtlbHNle2U9XG5hLmN1cnJlbnQuYWx0ZXJuYXRlO2lmKDA9PT0oZCYzMCkmJiFFayhlKSYmKGI9eWsoYSxkKSwyPT09YiYmKGY9dWMoYSksMCE9PWYmJihkPWYsYj1EayhhLGYpKSksMT09PWIpKXRocm93IGM9ZmssQWsoYSwwKSxzayhhLGQpLHRrKGEsRCgpKSxjO2EuZmluaXNoZWRXb3JrPWU7YS5maW5pc2hlZExhbmVzPWQ7c3dpdGNoKGIpe2Nhc2UgMDpjYXNlIDE6dGhyb3cgRXJyb3IocCgzNDUpKTtjYXNlIDI6RmsoYSxqayk7YnJlYWs7Y2FzZSAzOnNrKGEsZCk7aWYoKGQmMTMwMDIzNDI0KT09PWQmJihiPVZqKzUwMC1EKCksMTA8Yikpe2lmKDAhPT1yYyhhLDApKWJyZWFrO2U9YS5zdXNwZW5kZWRMYW5lcztpZigoZSZkKSE9PWQpe00oKTthLnBpbmdlZExhbmVzfD1hLnN1c3BlbmRlZExhbmVzJmU7YnJlYWt9YS50aW1lb3V0SGFuZGxlPXpmKEZrLmJpbmQobnVsbCxhLGprKSxiKTticmVha31GayhhLGprKTticmVhaztjYXNlIDQ6c2soYSxkKTtpZigoZCY0MTk0MjQwKT09PWQpYnJlYWs7Yj1cbmEuZXZlbnRUaW1lcztmb3IoZT0tMTswPGQ7KXt2YXIgZz0zMS1sYyhkKTtmPTE8PGc7Zz1iW2ddO2c+ZSYmKGU9Zyk7ZCY9fmZ9ZD1lO2Q9RCgpLWQ7ZD0oMTIwPmQ/MTIwOjQ4MD5kPzQ4MDoxMDgwPmQ/MTA4MDoxOTIwPmQ/MTkyMDozRTM+ZD8zRTM6NDMyMD5kPzQzMjA6MTk2MCpiayhkLzE5NjApKS1kO2lmKDEwPGQpe2EudGltZW91dEhhbmRsZT16ZihGay5iaW5kKG51bGwsYSxqayksZCk7YnJlYWt9RmsoYSxqayk7YnJlYWs7Y2FzZSA1OkZrKGEsamspO2JyZWFrO2RlZmF1bHQ6dGhyb3cgRXJyb3IocCgzMjkpKTt9fX10ayhhLEQoKSk7cmV0dXJuIGEuY2FsbGJhY2tOb2RlPT09Yz93ay5iaW5kKG51bGwsYSk6bnVsbH1mdW5jdGlvbiBEayhhLGIpe3ZhciBjPWlrO2EuY3VycmVudC5tZW1vaXplZFN0YXRlLmlzRGVoeWRyYXRlZCYmKEFrKGEsYikuZmxhZ3N8PTI1Nik7YT15ayhhLGIpOzIhPT1hJiYoYj1qayxqaz1jLG51bGwhPT1iJiZSaShiKSk7cmV0dXJuIGF9XG5mdW5jdGlvbiBSaShhKXtudWxsPT09ams/ams9YTpqay5wdXNoLmFwcGx5KGprLGEpfWZ1bmN0aW9uIEVrKGEpe2Zvcih2YXIgYj1hOzspe2lmKGIuZmxhZ3MmMTYzODQpe3ZhciBjPWIudXBkYXRlUXVldWU7aWYobnVsbCE9PWMmJihjPWMuc3RvcmVzLG51bGwhPT1jKSlmb3IodmFyIGQ9MDtkPGMubGVuZ3RoO2QrKyl7dmFyIGU9Y1tkXSxmPWUuZ2V0U25hcHNob3Q7ZT1lLnZhbHVlO3RyeXtpZighQ2UoZigpLGUpKXJldHVybiExfWNhdGNoKGcpe3JldHVybiExfX19Yz1iLmNoaWxkO2lmKGIuc3VidHJlZUZsYWdzJjE2Mzg0JiZudWxsIT09YyljLnJldHVybj1iLGI9YztlbHNle2lmKGI9PT1hKWJyZWFrO2Zvcig7bnVsbD09PWIuc2libGluZzspe2lmKG51bGw9PT1iLnJldHVybnx8Yi5yZXR1cm49PT1hKXJldHVybiEwO2I9Yi5yZXR1cm59Yi5zaWJsaW5nLnJldHVybj1iLnJldHVybjtiPWIuc2libGluZ319cmV0dXJuITB9XG5mdW5jdGlvbiBzayhhLGIpe2ImPX5oaztiJj1+Z2s7YS5zdXNwZW5kZWRMYW5lc3w9YjthLnBpbmdlZExhbmVzJj1+Yjtmb3IoYT1hLmV4cGlyYXRpb25UaW1lczswPGI7KXt2YXIgYz0zMS1sYyhiKSxkPTE8PGM7YVtjXT0tMTtiJj1+ZH19ZnVuY3Rpb24gdWsoYSl7aWYoMCE9PShLJjYpKXRocm93IEVycm9yKHAoMzI3KSk7eGsoKTt2YXIgYj1yYyhhLDApO2lmKDA9PT0oYiYxKSlyZXR1cm4gdGsoYSxEKCkpLG51bGw7dmFyIGM9eWsoYSxiKTtpZigwIT09YS50YWcmJjI9PT1jKXt2YXIgZD11YyhhKTswIT09ZCYmKGI9ZCxjPURrKGEsZCkpfWlmKDE9PT1jKXRocm93IGM9ZmssQWsoYSwwKSxzayhhLGIpLHRrKGEsRCgpKSxjO2lmKDY9PT1jKXRocm93IEVycm9yKHAoMzQ1KSk7YS5maW5pc2hlZFdvcms9YS5jdXJyZW50LmFsdGVybmF0ZTthLmZpbmlzaGVkTGFuZXM9YjtGayhhLGprKTt0ayhhLEQoKSk7cmV0dXJuIG51bGx9XG5mdW5jdGlvbiBHayhhLGIpe3ZhciBjPUs7S3w9MTt0cnl7cmV0dXJuIGEoYil9ZmluYWxseXtLPWMsMD09PUsmJihUaT1EKCkrNTAwLCRmJiZkZygpKX19ZnVuY3Rpb24gSGsoYSl7bnVsbCE9PWxrJiYwPT09bGsudGFnJiYwPT09KEsmNikmJnhrKCk7dmFyIGI9SztLfD0xO3ZhciBjPWVrLnRyYW5zaXRpb24sZD1FO3RyeXtpZihlay50cmFuc2l0aW9uPW51bGwsRT0xLGEpcmV0dXJuIGEoKX1maW5hbGx5e0U9ZCxlay50cmFuc2l0aW9uPWMsSz1iLDA9PT0oSyY2KSYmZGcoKX19ZnVuY3Rpb24gVWkoKXtWaT1lai5jdXJyZW50O0coZWopfVxuZnVuY3Rpb24gQWsoYSxiKXthLmZpbmlzaGVkV29yaz1udWxsO2EuZmluaXNoZWRMYW5lcz0wO3ZhciBjPWEudGltZW91dEhhbmRsZTstMSE9PWMmJihhLnRpbWVvdXRIYW5kbGU9LTEsQWYoYykpO2lmKG51bGwhPT1ZKWZvcihjPVkucmV0dXJuO251bGwhPT1jOyl7dmFyIGQ9YztXZyhkKTtzd2l0Y2goZC50YWcpe2Nhc2UgMTpkPWQudHlwZS5jaGlsZENvbnRleHRUeXBlcztudWxsIT09ZCYmdm9pZCAwIT09ZCYmVWYoKTticmVhaztjYXNlIDM6emgoKTtHKFFmKTtHKEkpO0VoKCk7YnJlYWs7Y2FzZSA1OkJoKGQpO2JyZWFrO2Nhc2UgNDp6aCgpO2JyZWFrO2Nhc2UgMTM6RyhQKTticmVhaztjYXNlIDE5OkcoUCk7YnJlYWs7Y2FzZSAxMDpsZyhkLnR5cGUuX2NvbnRleHQpO2JyZWFrO2Nhc2UgMjI6Y2FzZSAyMzpVaSgpfWM9Yy5yZXR1cm59Sj1hO1k9YT1taChhLmN1cnJlbnQsbnVsbCk7Wj1WaT1iO1c9MDtmaz1udWxsO2hrPWdrPXpnPTA7ams9aWs9bnVsbDtpZihudWxsIT09cWcpe2ZvcihiPVxuMDtiPHFnLmxlbmd0aDtiKyspaWYoYz1xZ1tiXSxkPWMuaW50ZXJsZWF2ZWQsbnVsbCE9PWQpe2MuaW50ZXJsZWF2ZWQ9bnVsbDt2YXIgZT1kLm5leHQsZj1jLnBlbmRpbmc7aWYobnVsbCE9PWYpe3ZhciBnPWYubmV4dDtmLm5leHQ9ZTtkLm5leHQ9Z31jLnBlbmRpbmc9ZH1xZz1udWxsfXJldHVybiBhfVxuZnVuY3Rpb24gQ2soYSxiKXtkb3t2YXIgYz1ZO3RyeXtrZygpO0ZoLmN1cnJlbnQ9Umg7aWYoSWgpe2Zvcih2YXIgZD1RLm1lbW9pemVkU3RhdGU7bnVsbCE9PWQ7KXt2YXIgZT1kLnF1ZXVlO251bGwhPT1lJiYoZS5wZW5kaW5nPW51bGwpO2Q9ZC5uZXh0fUloPSExfUhoPTA7Uz1SPVE9bnVsbDtKaD0hMTtLaD0wO2RrLmN1cnJlbnQ9bnVsbDtpZihudWxsPT09Y3x8bnVsbD09PWMucmV0dXJuKXtXPTE7Zms9YjtZPW51bGw7YnJlYWt9YTp7dmFyIGY9YSxnPWMucmV0dXJuLGg9YyxrPWI7Yj1aO2guZmxhZ3N8PTMyNzY4O2lmKG51bGwhPT1rJiZcIm9iamVjdFwiPT09dHlwZW9mIGsmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBrLnRoZW4pe3ZhciBsPWssbT1oLHc9bS50YWc7aWYoMD09PShtLm1vZGUmMSkmJigwPT09d3x8MTE9PT13fHwxNT09PXcpKXt2YXIgdT1tLmFsdGVybmF0ZTt1PyhtLnVwZGF0ZVF1ZXVlPXUudXBkYXRlUXVldWUsbS5tZW1vaXplZFN0YXRlPXUubWVtb2l6ZWRTdGF0ZSxcbm0ubGFuZXM9dS5sYW5lcyk6KG0udXBkYXRlUXVldWU9bnVsbCxtLm1lbW9pemVkU3RhdGU9bnVsbCl9dmFyIHk9SmkoZyk7aWYobnVsbCE9PXkpe3kuZmxhZ3MmPS0yNTc7S2koeSxnLGgsZixiKTt5Lm1vZGUmMSYmSGkoZixsLGIpO2I9eTtrPWw7dmFyIG49Yi51cGRhdGVRdWV1ZTtpZihudWxsPT09bil7dmFyIHY9bmV3IFNldDt2LmFkZChrKTtiLnVwZGF0ZVF1ZXVlPXZ9ZWxzZSBuLmFkZChrKTticmVhayBhfWVsc2V7aWYoMD09PShiJjEpKXtIaShmLGwsYik7U2koKTticmVhayBhfWs9RXJyb3IocCg0MjYpKX19ZWxzZSBpZihOJiZoLm1vZGUmMSl7dmFyIEM9SmkoZyk7aWYobnVsbCE9PUMpezA9PT0oQy5mbGFncyY2NTUzNikmJihDLmZsYWdzfD0yNTYpO0tpKEMsZyxoLGYsYik7aGgoayk7YnJlYWsgYX19Zj1rOzQhPT1XJiYoVz0yKTtudWxsPT09aWs/aWs9W2ZdOmlrLnB1c2goZik7az16aShrLGgpO2g9Zztkb3tzd2l0Y2goaC50YWcpe2Nhc2UgMzpoLmZsYWdzfD02NTUzNjtcbmImPS1iO2gubGFuZXN8PWI7dmFyIHQ9Q2koaCxrLGIpO3hnKGgsdCk7YnJlYWsgYTtjYXNlIDE6Zj1rO3ZhciByPWgudHlwZSx4PWguc3RhdGVOb2RlO2lmKDA9PT0oaC5mbGFncyYxMjgpJiYoXCJmdW5jdGlvblwiPT09dHlwZW9mIHIuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yfHxudWxsIT09eCYmXCJmdW5jdGlvblwiPT09dHlwZW9mIHguY29tcG9uZW50RGlkQ2F0Y2gmJihudWxsPT09R2l8fCFHaS5oYXMoeCkpKSl7aC5mbGFnc3w9NjU1MzY7YiY9LWI7aC5sYW5lc3w9Yjt2YXIgQj1GaShoLGYsYik7eGcoaCxCKTticmVhayBhfX1oPWgucmV0dXJufXdoaWxlKG51bGwhPT1oKX1JayhjKX1jYXRjaChPKXtiPU87WT09PWMmJm51bGwhPT1jJiYoWT1jPWMucmV0dXJuKTtjb250aW51ZX1icmVha313aGlsZSgxKX1mdW5jdGlvbiB6aygpe3ZhciBhPWNrLmN1cnJlbnQ7Y2suY3VycmVudD1SaDtyZXR1cm4gbnVsbD09PWE/Umg6YX1cbmZ1bmN0aW9uIFNpKCl7aWYoMD09PVd8fDM9PT1XfHwyPT09VylXPTQ7bnVsbD09PUp8fDA9PT0oemcmMjY4NDM1NDU1KSYmMD09PShnayYyNjg0MzU0NTUpfHxzayhKLFopfWZ1bmN0aW9uIHlrKGEsYil7dmFyIGM9SztLfD0yO3ZhciBkPXprKCk7Sj09PWEmJlo9PT1ifHxBayhhLGIpO2RvIHRyeXtKaygpO2JyZWFrfWNhdGNoKGUpe0NrKGEsZSl9d2hpbGUoMSk7a2coKTtLPWM7Y2suY3VycmVudD1kO2lmKG51bGwhPT1ZKXRocm93IEVycm9yKHAoMjYxKSk7Sj1udWxsO1o9MDtyZXR1cm4gV31mdW5jdGlvbiBKaygpe2Zvcig7bnVsbCE9PVk7KUtrKFkpfWZ1bmN0aW9uIEJrKCl7Zm9yKDtudWxsIT09WSYmISRiKCk7KUtrKFkpfWZ1bmN0aW9uIEtrKGEpe3ZhciBiPUxrKGEuYWx0ZXJuYXRlLGEsVmkpO2EubWVtb2l6ZWRQcm9wcz1hLnBlbmRpbmdQcm9wcztudWxsPT09Yj9JayhhKTpZPWI7ZGsuY3VycmVudD1udWxsfVxuZnVuY3Rpb24gSWsoYSl7dmFyIGI9YTtkb3t2YXIgYz1iLmFsdGVybmF0ZTthPWIucmV0dXJuO2lmKDA9PT0oYi5mbGFncyYzMjc2OCkpe2lmKGM9UWkoYyxiLFZpKSxudWxsIT09Yyl7WT1jO3JldHVybn19ZWxzZXtjPXhqKGMsYik7aWYobnVsbCE9PWMpe2MuZmxhZ3MmPTMyNzY3O1k9YztyZXR1cm59aWYobnVsbCE9PWEpYS5mbGFnc3w9MzI3NjgsYS5zdWJ0cmVlRmxhZ3M9MCxhLmRlbGV0aW9ucz1udWxsO2Vsc2V7Vz02O1k9bnVsbDtyZXR1cm59fWI9Yi5zaWJsaW5nO2lmKG51bGwhPT1iKXtZPWI7cmV0dXJufVk9Yj1hfXdoaWxlKG51bGwhPT1iKTswPT09VyYmKFc9NSl9ZnVuY3Rpb24gRmsoYSxiKXt2YXIgYz1FLGQ9ZWsudHJhbnNpdGlvbjt0cnl7ZWsudHJhbnNpdGlvbj1udWxsLEU9MSxNayhhLGIsYyl9ZmluYWxseXtlay50cmFuc2l0aW9uPWQsRT1jfXJldHVybiBudWxsfVxuZnVuY3Rpb24gTWsoYSxiLGMpe2RvIHhrKCk7d2hpbGUobnVsbCE9PWxrKTtpZigwIT09KEsmNikpdGhyb3cgRXJyb3IocCgzMjcpKTt2YXIgZD1hLmZpbmlzaGVkV29yayxlPWEuZmluaXNoZWRMYW5lcztpZihudWxsPT09ZClyZXR1cm4gbnVsbDthLmZpbmlzaGVkV29yaz1udWxsO2EuZmluaXNoZWRMYW5lcz0wO2lmKGQ9PT1hLmN1cnJlbnQpdGhyb3cgRXJyb3IocCgxNzcpKTthLmNhbGxiYWNrTm9kZT1udWxsO2EuY2FsbGJhY2tQcmlvcml0eT0wO3ZhciBmPWQubGFuZXN8ZC5jaGlsZExhbmVzO3hjKGEsZik7YT09PUomJihZPUo9bnVsbCxaPTApOzA9PT0oZC5zdWJ0cmVlRmxhZ3MmMjA2NCkmJjA9PT0oZC5mbGFncyYyMDY0KXx8a2t8fChraz0hMCx2ayhlYyxmdW5jdGlvbigpe3hrKCk7cmV0dXJuIG51bGx9KSk7Zj0wIT09KGQuZmxhZ3MmMTU5OTApO2lmKDAhPT0oZC5zdWJ0cmVlRmxhZ3MmMTU5OTApfHxmKXtmPWVrLnRyYW5zaXRpb247ZWsudHJhbnNpdGlvbj1udWxsO3ZhciBnPVxuRTtFPTE7dmFyIGg9SztLfD00O2RrLmN1cnJlbnQ9bnVsbDtGaihhLGQpO1VqKGEsZCxlKTtKZSh4Zik7eGY9bnVsbDthLmN1cnJlbnQ9ZDtYaihkLGEsZSk7YWMoKTtLPWg7RT1nO2VrLnRyYW5zaXRpb249Zn1lbHNlIGEuY3VycmVudD1kO2trJiYoa2s9ITEsbGs9YSxtaz1lKTtmPWEucGVuZGluZ0xhbmVzOzA9PT1mJiYoR2k9bnVsbCk7amMoZC5zdGF0ZU5vZGUsYyk7dGsoYSxEKCkpO2lmKG51bGwhPT1iKWZvcihjPWEub25SZWNvdmVyYWJsZUVycm9yLGQ9MDtkPGIubGVuZ3RoO2QrKyljKGJbZF0pO2lmKERpKXRocm93IERpPSExLGE9RWksRWk9bnVsbCxhOzAhPT0obWsmMSkmJjAhPT1hLnRhZyYmeGsoKTtmPWEucGVuZGluZ0xhbmVzOzAhPT0oZiYxKT9hPT09b2s/bmsrKzoobms9MCxvaz1hKTpuaz0wO2RnKCk7cmV0dXJuIG51bGx9XG5mdW5jdGlvbiB4aygpe2lmKG51bGwhPT1sayl7dmFyIGE9emMobWspLGI9ZWsudHJhbnNpdGlvbixjPUU7dHJ5e2VrLnRyYW5zaXRpb249bnVsbDtFPTE2PmE/MTY6YTtpZihudWxsPT09bGspdmFyIGQ9ITE7ZWxzZXthPWxrO2xrPW51bGw7bWs9MDtpZigwIT09KEsmNikpdGhyb3cgRXJyb3IocCgzMzEpKTt2YXIgZT1LO0t8PTQ7Zm9yKFg9YS5jdXJyZW50O251bGwhPT1YOyl7dmFyIGY9WCxnPWYuY2hpbGQ7aWYoMCE9PShYLmZsYWdzJjE2KSl7dmFyIGg9Zi5kZWxldGlvbnM7aWYobnVsbCE9PWgpe2Zvcih2YXIgaz0wO2s8aC5sZW5ndGg7aysrKXt2YXIgbD1oW2tdO2ZvcihYPWw7bnVsbCE9PVg7KXt2YXIgbT1YO3N3aXRjaChtLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNTpHaig4LG0sZil9dmFyIHc9bS5jaGlsZDtpZihudWxsIT09dyl3LnJldHVybj1tLFg9dztlbHNlIGZvcig7bnVsbCE9PVg7KXttPVg7dmFyIHU9bS5zaWJsaW5nLHk9bS5yZXR1cm47TGoobSk7aWYobT09PVxubCl7WD1udWxsO2JyZWFrfWlmKG51bGwhPT11KXt1LnJldHVybj15O1g9dTticmVha31YPXl9fX12YXIgbj1mLmFsdGVybmF0ZTtpZihudWxsIT09bil7dmFyIHY9bi5jaGlsZDtpZihudWxsIT09dil7bi5jaGlsZD1udWxsO2Rve3ZhciBDPXYuc2libGluZzt2LnNpYmxpbmc9bnVsbDt2PUN9d2hpbGUobnVsbCE9PXYpfX1YPWZ9fWlmKDAhPT0oZi5zdWJ0cmVlRmxhZ3MmMjA2NCkmJm51bGwhPT1nKWcucmV0dXJuPWYsWD1nO2Vsc2UgYjpmb3IoO251bGwhPT1YOyl7Zj1YO2lmKDAhPT0oZi5mbGFncyYyMDQ4KSlzd2l0Y2goZi50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTU6R2ooOSxmLGYucmV0dXJuKX12YXIgdD1mLnNpYmxpbmc7aWYobnVsbCE9PXQpe3QucmV0dXJuPWYucmV0dXJuO1g9dDticmVhayBifVg9Zi5yZXR1cm59fXZhciByPWEuY3VycmVudDtmb3IoWD1yO251bGwhPT1YOyl7Zz1YO3ZhciB4PWcuY2hpbGQ7aWYoMCE9PShnLnN1YnRyZWVGbGFncyYyMDY0KSYmbnVsbCE9PVxueCl4LnJldHVybj1nLFg9eDtlbHNlIGI6Zm9yKGc9cjtudWxsIT09WDspe2g9WDtpZigwIT09KGguZmxhZ3MmMjA0OCkpdHJ5e3N3aXRjaChoLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNTpIaig5LGgpfX1jYXRjaChPKXtDaihoLGgucmV0dXJuLE8pfWlmKGg9PT1nKXtYPW51bGw7YnJlYWsgYn12YXIgQj1oLnNpYmxpbmc7aWYobnVsbCE9PUIpe0IucmV0dXJuPWgucmV0dXJuO1g9QjticmVhayBifVg9aC5yZXR1cm59fUs9ZTtkZygpO2lmKGljJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgaWMub25Qb3N0Q29tbWl0RmliZXJSb290KXRyeXtpYy5vblBvc3RDb21taXRGaWJlclJvb3QoaGMsYSl9Y2F0Y2goTyl7fWQ9ITB9cmV0dXJuIGR9ZmluYWxseXtFPWMsZWsudHJhbnNpdGlvbj1ifX1yZXR1cm4hMX1mdW5jdGlvbiBOayhhLGIsYyl7Yj16aShjLGIpO2I9Q2koYSxiLDEpO3ZnKGEsYik7Yj1NKCk7YT1yayhhLDEpO251bGwhPT1hJiYod2MoYSwxLGIpLHRrKGEsYikpfVxuZnVuY3Rpb24gQ2ooYSxiLGMpe2lmKDM9PT1hLnRhZylOayhhLGEsYyk7ZWxzZSBmb3IoO251bGwhPT1iOyl7aWYoMz09PWIudGFnKXtOayhiLGEsYyk7YnJlYWt9ZWxzZSBpZigxPT09Yi50YWcpe3ZhciBkPWIuc3RhdGVOb2RlO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBiLnR5cGUuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5jb21wb25lbnREaWRDYXRjaCYmKG51bGw9PT1HaXx8IUdpLmhhcyhkKSkpe2E9emkoYyxhKTthPUZpKGIsYSwxKTt2ZyhiLGEpO2E9TSgpO2I9cmsoYiwxKTtudWxsIT09YiYmKHdjKGIsMSxhKSx0ayhiLGEpKTticmVha319Yj1iLnJldHVybn19XG5mdW5jdGlvbiBJaShhLGIsYyl7dmFyIGQ9YS5waW5nQ2FjaGU7bnVsbCE9PWQmJmQuZGVsZXRlKGIpO2I9TSgpO2EucGluZ2VkTGFuZXN8PWEuc3VzcGVuZGVkTGFuZXMmYztKPT09YSYmKFomYyk9PT1jJiYoND09PVd8fDM9PT1XJiYoWiYxMzAwMjM0MjQpPT09WiYmNTAwPkQoKS1Waj9BayhhLDApOmhrfD1jKTt0ayhhLGIpfWZ1bmN0aW9uIE9rKGEsYil7MD09PWImJigwPT09KGEubW9kZSYxKT9iPTE6KGI9cGMscGM8PD0xLDA9PT0ocGMmMTMwMDIzNDI0KSYmKHBjPTQxOTQzMDQpKSk7dmFyIGM9TSgpO2E9cmsoYSxiKTtudWxsIT09YSYmKHdjKGEsYixjKSx0ayhhLGMpKX1mdW5jdGlvbiBxaihhKXt2YXIgYj1hLm1lbW9pemVkU3RhdGUsYz0wO251bGwhPT1iJiYoYz1iLnJldHJ5TGFuZSk7T2soYSxjKX1cbmZ1bmN0aW9uIFRqKGEsYil7dmFyIGM9MDtzd2l0Y2goYS50YWcpe2Nhc2UgMTM6dmFyIGQ9YS5zdGF0ZU5vZGU7dmFyIGU9YS5tZW1vaXplZFN0YXRlO251bGwhPT1lJiYoYz1lLnJldHJ5TGFuZSk7YnJlYWs7Y2FzZSAxOTpkPWEuc3RhdGVOb2RlO2JyZWFrO2RlZmF1bHQ6dGhyb3cgRXJyb3IocCgzMTQpKTt9bnVsbCE9PWQmJmQuZGVsZXRlKGIpO09rKGEsYyl9dmFyIExrO1xuTGs9ZnVuY3Rpb24oYSxiLGMpe2lmKG51bGwhPT1hKWlmKGEubWVtb2l6ZWRQcm9wcyE9PWIucGVuZGluZ1Byb3BzfHxRZi5jdXJyZW50KW9nPSEwO2Vsc2V7aWYoMD09PShhLmxhbmVzJmMpJiYwPT09KGIuZmxhZ3MmMTI4KSlyZXR1cm4gb2c9ITEsd2ooYSxiLGMpO29nPTAhPT0oYS5mbGFncyYxMzEwNzIpPyEwOiExfWVsc2Ugb2c9ITEsTiYmMCE9PShiLmZsYWdzJjEwNDg1NzYpJiZVZyhiLE5nLGIuaW5kZXgpO2IubGFuZXM9MDtzd2l0Y2goYi50YWcpe2Nhc2UgMjp2YXIgZD1iLnR5cGU7bnVsbCE9PWEmJihhLmFsdGVybmF0ZT1udWxsLGIuYWx0ZXJuYXRlPW51bGwsYi5mbGFnc3w9Mik7YT1iLnBlbmRpbmdQcm9wczt2YXIgZT1TZihiLEkuY3VycmVudCk7bmcoYixjKTtlPU5oKG51bGwsYixkLGEsZSxjKTt2YXIgZj1TaCgpO2IuZmxhZ3N8PTE7XCJvYmplY3RcIj09PXR5cGVvZiBlJiZudWxsIT09ZSYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGUucmVuZGVyJiZ2b2lkIDA9PT1lLiQkdHlwZW9mP1xuKGIudGFnPTEsYi5tZW1vaXplZFN0YXRlPW51bGwsYi51cGRhdGVRdWV1ZT1udWxsLFRmKGQpPyhmPSEwLFhmKGIpKTpmPSExLGIubWVtb2l6ZWRTdGF0ZT1udWxsIT09ZS5zdGF0ZSYmdm9pZCAwIT09ZS5zdGF0ZT9lLnN0YXRlOm51bGwsc2coYiksZS51cGRhdGVyPUZnLGIuc3RhdGVOb2RlPWUsZS5fcmVhY3RJbnRlcm5hbHM9YixKZyhiLGQsYSxjKSxiPWhqKG51bGwsYixkLCEwLGYsYykpOihiLnRhZz0wLE4mJmYmJlZnKGIpLFhpKG51bGwsYixlLGMpLGI9Yi5jaGlsZCk7cmV0dXJuIGI7Y2FzZSAxNjpkPWIuZWxlbWVudFR5cGU7YTp7bnVsbCE9PWEmJihhLmFsdGVybmF0ZT1udWxsLGIuYWx0ZXJuYXRlPW51bGwsYi5mbGFnc3w9Mik7YT1iLnBlbmRpbmdQcm9wcztlPWQuX2luaXQ7ZD1lKGQuX3BheWxvYWQpO2IudHlwZT1kO2U9Yi50YWc9UGsoZCk7YT1mZyhkLGEpO3N3aXRjaChlKXtjYXNlIDA6Yj1jaihudWxsLGIsZCxhLGMpO2JyZWFrIGE7Y2FzZSAxOmI9Z2oobnVsbCxiLFxuZCxhLGMpO2JyZWFrIGE7Y2FzZSAxMTpiPVlpKG51bGwsYixkLGEsYyk7YnJlYWsgYTtjYXNlIDE0OmI9JGkobnVsbCxiLGQsZmcoZC50eXBlLGEpLGMpO2JyZWFrIGF9dGhyb3cgRXJyb3IocCgzMDYsZCxcIlwiKSk7fXJldHVybiBiO2Nhc2UgMDpyZXR1cm4gZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxlPWIuZWxlbWVudFR5cGU9PT1kP2U6ZmcoZCxlKSxjaihhLGIsZCxlLGMpO2Nhc2UgMTpyZXR1cm4gZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxlPWIuZWxlbWVudFR5cGU9PT1kP2U6ZmcoZCxlKSxnaihhLGIsZCxlLGMpO2Nhc2UgMzphOntpaihiKTtpZihudWxsPT09YSl0aHJvdyBFcnJvcihwKDM4NykpO2Q9Yi5wZW5kaW5nUHJvcHM7Zj1iLm1lbW9pemVkU3RhdGU7ZT1mLmVsZW1lbnQ7dGcoYSxiKTt5ZyhiLGQsbnVsbCxjKTt2YXIgZz1iLm1lbW9pemVkU3RhdGU7ZD1nLmVsZW1lbnQ7aWYoZi5pc0RlaHlkcmF0ZWQpaWYoZj17ZWxlbWVudDpkLGlzRGVoeWRyYXRlZDohMSxcbmNhY2hlOmcuY2FjaGUsdHJhbnNpdGlvbnM6Zy50cmFuc2l0aW9uc30sYi51cGRhdGVRdWV1ZS5iYXNlU3RhdGU9ZixiLm1lbW9pemVkU3RhdGU9ZixiLmZsYWdzJjI1Nil7ZT1FcnJvcihwKDQyMykpO2I9amooYSxiLGQsYyxlKTticmVhayBhfWVsc2UgaWYoZCE9PWUpe2U9RXJyb3IocCg0MjQpKTtiPWpqKGEsYixkLGMsZSk7YnJlYWsgYX1lbHNlIGZvcihZZz1GZihiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvLmZpcnN0Q2hpbGQpLFhnPWIsTj0hMCxaZz1udWxsLGM9c2goYixudWxsLGQsYyksYi5jaGlsZD1jO2M7KWMuZmxhZ3M9Yy5mbGFncyYtM3w0MDk2LGM9Yy5zaWJsaW5nO2Vsc2V7Z2goKTtpZihkPT09ZSl7Yj1aaShhLGIsYyk7YnJlYWsgYX1YaShhLGIsZCxjKX1iPWIuY2hpbGR9cmV0dXJuIGI7Y2FzZSA1OnJldHVybiBBaChiKSxudWxsPT09YSYmZGgoYiksZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxmPW51bGwhPT1hP2EubWVtb2l6ZWRQcm9wczpudWxsLGc9ZS5jaGlsZHJlbixcbnlmKGQsZSk/Zz1udWxsOm51bGwhPT1mJiZ5ZihkLGYpJiYoYi5mbGFnc3w9MzIpLGZqKGEsYiksWGkoYSxiLGcsYyksYi5jaGlsZDtjYXNlIDY6cmV0dXJuIG51bGw9PT1hJiZkaChiKSxudWxsO2Nhc2UgMTM6cmV0dXJuIG1qKGEsYixjKTtjYXNlIDQ6cmV0dXJuIHloKGIsYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyksZD1iLnBlbmRpbmdQcm9wcyxudWxsPT09YT9iLmNoaWxkPXJoKGIsbnVsbCxkLGMpOlhpKGEsYixkLGMpLGIuY2hpbGQ7Y2FzZSAxMTpyZXR1cm4gZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxlPWIuZWxlbWVudFR5cGU9PT1kP2U6ZmcoZCxlKSxZaShhLGIsZCxlLGMpO2Nhc2UgNzpyZXR1cm4gWGkoYSxiLGIucGVuZGluZ1Byb3BzLGMpLGIuY2hpbGQ7Y2FzZSA4OnJldHVybiBYaShhLGIsYi5wZW5kaW5nUHJvcHMuY2hpbGRyZW4sYyksYi5jaGlsZDtjYXNlIDEyOnJldHVybiBYaShhLGIsYi5wZW5kaW5nUHJvcHMuY2hpbGRyZW4sYyksYi5jaGlsZDtjYXNlIDEwOmE6e2Q9XG5iLnR5cGUuX2NvbnRleHQ7ZT1iLnBlbmRpbmdQcm9wcztmPWIubWVtb2l6ZWRQcm9wcztnPWUudmFsdWU7SChnZyxkLl9jdXJyZW50VmFsdWUpO2QuX2N1cnJlbnRWYWx1ZT1nO2lmKG51bGwhPT1mKWlmKENlKGYudmFsdWUsZykpe2lmKGYuY2hpbGRyZW49PT1lLmNoaWxkcmVuJiYhUWYuY3VycmVudCl7Yj1aaShhLGIsYyk7YnJlYWsgYX19ZWxzZSBmb3IoZj1iLmNoaWxkLG51bGwhPT1mJiYoZi5yZXR1cm49Yik7bnVsbCE9PWY7KXt2YXIgaD1mLmRlcGVuZGVuY2llcztpZihudWxsIT09aCl7Zz1mLmNoaWxkO2Zvcih2YXIgaz1oLmZpcnN0Q29udGV4dDtudWxsIT09azspe2lmKGsuY29udGV4dD09PWQpe2lmKDE9PT1mLnRhZyl7az11ZygtMSxjJi1jKTtrLnRhZz0yO3ZhciBsPWYudXBkYXRlUXVldWU7aWYobnVsbCE9PWwpe2w9bC5zaGFyZWQ7dmFyIG09bC5wZW5kaW5nO251bGw9PT1tP2submV4dD1rOihrLm5leHQ9bS5uZXh0LG0ubmV4dD1rKTtsLnBlbmRpbmc9a319Zi5sYW5lc3w9XG5jO2s9Zi5hbHRlcm5hdGU7bnVsbCE9PWsmJihrLmxhbmVzfD1jKTttZyhmLnJldHVybixjLGIpO2gubGFuZXN8PWM7YnJlYWt9az1rLm5leHR9fWVsc2UgaWYoMTA9PT1mLnRhZylnPWYudHlwZT09PWIudHlwZT9udWxsOmYuY2hpbGQ7ZWxzZSBpZigxOD09PWYudGFnKXtnPWYucmV0dXJuO2lmKG51bGw9PT1nKXRocm93IEVycm9yKHAoMzQxKSk7Zy5sYW5lc3w9YztoPWcuYWx0ZXJuYXRlO251bGwhPT1oJiYoaC5sYW5lc3w9Yyk7bWcoZyxjLGIpO2c9Zi5zaWJsaW5nfWVsc2UgZz1mLmNoaWxkO2lmKG51bGwhPT1nKWcucmV0dXJuPWY7ZWxzZSBmb3IoZz1mO251bGwhPT1nOyl7aWYoZz09PWIpe2c9bnVsbDticmVha31mPWcuc2libGluZztpZihudWxsIT09Zil7Zi5yZXR1cm49Zy5yZXR1cm47Zz1mO2JyZWFrfWc9Zy5yZXR1cm59Zj1nfVhpKGEsYixlLmNoaWxkcmVuLGMpO2I9Yi5jaGlsZH1yZXR1cm4gYjtjYXNlIDk6cmV0dXJuIGU9Yi50eXBlLGQ9Yi5wZW5kaW5nUHJvcHMuY2hpbGRyZW4sXG5uZyhiLGMpLGU9cGcoZSksZD1kKGUpLGIuZmxhZ3N8PTEsWGkoYSxiLGQsYyksYi5jaGlsZDtjYXNlIDE0OnJldHVybiBkPWIudHlwZSxlPWZnKGQsYi5wZW5kaW5nUHJvcHMpLGU9ZmcoZC50eXBlLGUpLCRpKGEsYixkLGUsYyk7Y2FzZSAxNTpyZXR1cm4gYmooYSxiLGIudHlwZSxiLnBlbmRpbmdQcm9wcyxjKTtjYXNlIDE3OnJldHVybiBkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLGU9Yi5lbGVtZW50VHlwZT09PWQ/ZTpmZyhkLGUpLG51bGwhPT1hJiYoYS5hbHRlcm5hdGU9bnVsbCxiLmFsdGVybmF0ZT1udWxsLGIuZmxhZ3N8PTIpLGIudGFnPTEsVGYoZCk/KGE9ITAsWGYoYikpOmE9ITEsbmcoYixjKSxIZyhiLGQsZSksSmcoYixkLGUsYyksaGoobnVsbCxiLGQsITAsYSxjKTtjYXNlIDE5OnJldHVybiB2aihhLGIsYyk7Y2FzZSAyMjpyZXR1cm4gZGooYSxiLGMpfXRocm93IEVycm9yKHAoMTU2LGIudGFnKSk7fTtmdW5jdGlvbiB2ayhhLGIpe3JldHVybiBZYihhLGIpfVxuZnVuY3Rpb24gUWsoYSxiLGMsZCl7dGhpcy50YWc9YTt0aGlzLmtleT1jO3RoaXMuc2libGluZz10aGlzLmNoaWxkPXRoaXMucmV0dXJuPXRoaXMuc3RhdGVOb2RlPXRoaXMudHlwZT10aGlzLmVsZW1lbnRUeXBlPW51bGw7dGhpcy5pbmRleD0wO3RoaXMucmVmPW51bGw7dGhpcy5wZW5kaW5nUHJvcHM9Yjt0aGlzLmRlcGVuZGVuY2llcz10aGlzLm1lbW9pemVkU3RhdGU9dGhpcy51cGRhdGVRdWV1ZT10aGlzLm1lbW9pemVkUHJvcHM9bnVsbDt0aGlzLm1vZGU9ZDt0aGlzLnN1YnRyZWVGbGFncz10aGlzLmZsYWdzPTA7dGhpcy5kZWxldGlvbnM9bnVsbDt0aGlzLmNoaWxkTGFuZXM9dGhpcy5sYW5lcz0wO3RoaXMuYWx0ZXJuYXRlPW51bGx9ZnVuY3Rpb24gYWgoYSxiLGMsZCl7cmV0dXJuIG5ldyBRayhhLGIsYyxkKX1mdW5jdGlvbiBhaihhKXthPWEucHJvdG90eXBlO3JldHVybiEoIWF8fCFhLmlzUmVhY3RDb21wb25lbnQpfVxuZnVuY3Rpb24gUGsoYSl7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEpcmV0dXJuIGFqKGEpPzE6MDtpZih2b2lkIDAhPT1hJiZudWxsIT09YSl7YT1hLiQkdHlwZW9mO2lmKGE9PT1CYSlyZXR1cm4gMTE7aWYoYT09PUVhKXJldHVybiAxNH1yZXR1cm4gMn1cbmZ1bmN0aW9uIG1oKGEsYil7dmFyIGM9YS5hbHRlcm5hdGU7bnVsbD09PWM/KGM9YWgoYS50YWcsYixhLmtleSxhLm1vZGUpLGMuZWxlbWVudFR5cGU9YS5lbGVtZW50VHlwZSxjLnR5cGU9YS50eXBlLGMuc3RhdGVOb2RlPWEuc3RhdGVOb2RlLGMuYWx0ZXJuYXRlPWEsYS5hbHRlcm5hdGU9Yyk6KGMucGVuZGluZ1Byb3BzPWIsYy50eXBlPWEudHlwZSxjLmZsYWdzPTAsYy5zdWJ0cmVlRmxhZ3M9MCxjLmRlbGV0aW9ucz1udWxsKTtjLmZsYWdzPWEuZmxhZ3MmMTQ2ODAwNjQ7Yy5jaGlsZExhbmVzPWEuY2hpbGRMYW5lcztjLmxhbmVzPWEubGFuZXM7Yy5jaGlsZD1hLmNoaWxkO2MubWVtb2l6ZWRQcm9wcz1hLm1lbW9pemVkUHJvcHM7Yy5tZW1vaXplZFN0YXRlPWEubWVtb2l6ZWRTdGF0ZTtjLnVwZGF0ZVF1ZXVlPWEudXBkYXRlUXVldWU7Yj1hLmRlcGVuZGVuY2llcztjLmRlcGVuZGVuY2llcz1udWxsPT09Yj9udWxsOntsYW5lczpiLmxhbmVzLGZpcnN0Q29udGV4dDpiLmZpcnN0Q29udGV4dH07XG5jLnNpYmxpbmc9YS5zaWJsaW5nO2MuaW5kZXg9YS5pbmRleDtjLnJlZj1hLnJlZjtyZXR1cm4gY31cbmZ1bmN0aW9uIG9oKGEsYixjLGQsZSxmKXt2YXIgZz0yO2Q9YTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSlhaihhKSYmKGc9MSk7ZWxzZSBpZihcInN0cmluZ1wiPT09dHlwZW9mIGEpZz01O2Vsc2UgYTpzd2l0Y2goYSl7Y2FzZSB2YTpyZXR1cm4gcWgoYy5jaGlsZHJlbixlLGYsYik7Y2FzZSB3YTpnPTg7ZXw9ODticmVhaztjYXNlIHhhOnJldHVybiBhPWFoKDEyLGMsYixlfDIpLGEuZWxlbWVudFR5cGU9eGEsYS5sYW5lcz1mLGE7Y2FzZSBDYTpyZXR1cm4gYT1haCgxMyxjLGIsZSksYS5lbGVtZW50VHlwZT1DYSxhLmxhbmVzPWYsYTtjYXNlIERhOnJldHVybiBhPWFoKDE5LGMsYixlKSxhLmVsZW1lbnRUeXBlPURhLGEubGFuZXM9ZixhO2Nhc2UgR2E6cmV0dXJuIG5qKGMsZSxmLGIpO2RlZmF1bHQ6aWYoXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSlzd2l0Y2goYS4kJHR5cGVvZil7Y2FzZSB5YTpnPTEwO2JyZWFrIGE7Y2FzZSBBYTpnPTk7YnJlYWsgYTtjYXNlIEJhOmc9MTE7XG5icmVhayBhO2Nhc2UgRWE6Zz0xNDticmVhayBhO2Nhc2UgRmE6Zz0xNjtkPW51bGw7YnJlYWsgYX10aHJvdyBFcnJvcihwKDEzMCxudWxsPT1hP2E6dHlwZW9mIGEsXCJcIikpO31iPWFoKGcsYyxiLGUpO2IuZWxlbWVudFR5cGU9YTtiLnR5cGU9ZDtiLmxhbmVzPWY7cmV0dXJuIGJ9ZnVuY3Rpb24gcWgoYSxiLGMsZCl7YT1haCg3LGEsZCxiKTthLmxhbmVzPWM7cmV0dXJuIGF9ZnVuY3Rpb24gbmooYSxiLGMsZCl7YT1haCgyMixhLGQsYik7YS5lbGVtZW50VHlwZT1HYTthLmxhbmVzPWM7YS5zdGF0ZU5vZGU9e307cmV0dXJuIGF9ZnVuY3Rpb24gbmgoYSxiLGMpe2E9YWgoNixhLG51bGwsYik7YS5sYW5lcz1jO3JldHVybiBhfVxuZnVuY3Rpb24gcGgoYSxiLGMpe2I9YWgoNCxudWxsIT09YS5jaGlsZHJlbj9hLmNoaWxkcmVuOltdLGEua2V5LGIpO2IubGFuZXM9YztiLnN0YXRlTm9kZT17Y29udGFpbmVySW5mbzphLmNvbnRhaW5lckluZm8scGVuZGluZ0NoaWxkcmVuOm51bGwsaW1wbGVtZW50YXRpb246YS5pbXBsZW1lbnRhdGlvbn07cmV0dXJuIGJ9XG5mdW5jdGlvbiBSayhhLGIsYyxkLGUpe3RoaXMudGFnPWI7dGhpcy5jb250YWluZXJJbmZvPWE7dGhpcy5maW5pc2hlZFdvcms9dGhpcy5waW5nQ2FjaGU9dGhpcy5jdXJyZW50PXRoaXMucGVuZGluZ0NoaWxkcmVuPW51bGw7dGhpcy50aW1lb3V0SGFuZGxlPS0xO3RoaXMuY2FsbGJhY2tOb2RlPXRoaXMucGVuZGluZ0NvbnRleHQ9dGhpcy5jb250ZXh0PW51bGw7dGhpcy5jYWxsYmFja1ByaW9yaXR5PTA7dGhpcy5ldmVudFRpbWVzPXZjKDApO3RoaXMuZXhwaXJhdGlvblRpbWVzPXZjKC0xKTt0aGlzLmVudGFuZ2xlZExhbmVzPXRoaXMuZmluaXNoZWRMYW5lcz10aGlzLm11dGFibGVSZWFkTGFuZXM9dGhpcy5leHBpcmVkTGFuZXM9dGhpcy5waW5nZWRMYW5lcz10aGlzLnN1c3BlbmRlZExhbmVzPXRoaXMucGVuZGluZ0xhbmVzPTA7dGhpcy5lbnRhbmdsZW1lbnRzPXZjKDApO3RoaXMuaWRlbnRpZmllclByZWZpeD1kO3RoaXMub25SZWNvdmVyYWJsZUVycm9yPWU7dGhpcy5tdXRhYmxlU291cmNlRWFnZXJIeWRyYXRpb25EYXRhPVxubnVsbH1mdW5jdGlvbiBTayhhLGIsYyxkLGUsZixnLGgsayl7YT1uZXcgUmsoYSxiLGMsaCxrKTsxPT09Yj8oYj0xLCEwPT09ZiYmKGJ8PTgpKTpiPTA7Zj1haCgzLG51bGwsbnVsbCxiKTthLmN1cnJlbnQ9ZjtmLnN0YXRlTm9kZT1hO2YubWVtb2l6ZWRTdGF0ZT17ZWxlbWVudDpkLGlzRGVoeWRyYXRlZDpjLGNhY2hlOm51bGwsdHJhbnNpdGlvbnM6bnVsbH07c2coZik7cmV0dXJuIGF9ZnVuY3Rpb24gVGsoYSxiLGMpe3ZhciBkPTM8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzNdP2FyZ3VtZW50c1szXTpudWxsO3JldHVybnskJHR5cGVvZjp1YSxrZXk6bnVsbD09ZD9udWxsOlwiXCIrZCxjaGlsZHJlbjphLGNvbnRhaW5lckluZm86YixpbXBsZW1lbnRhdGlvbjpjfX1cbmZ1bmN0aW9uIFVrKGEpe2lmKCFhKXJldHVybiBQZjthPWEuX3JlYWN0SW50ZXJuYWxzO2E6e2lmKFNiKGEpIT09YXx8MSE9PWEudGFnKXRocm93IEVycm9yKHAoMTcwKSk7dmFyIGI9YTtkb3tzd2l0Y2goYi50YWcpe2Nhc2UgMzpiPWIuc3RhdGVOb2RlLmNvbnRleHQ7YnJlYWsgYTtjYXNlIDE6aWYoVGYoYi50eXBlKSl7Yj1iLnN0YXRlTm9kZS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dDticmVhayBhfX1iPWIucmV0dXJufXdoaWxlKG51bGwhPT1iKTt0aHJvdyBFcnJvcihwKDE3MSkpO31pZigxPT09YS50YWcpe3ZhciBjPWEudHlwZTtpZihUZihjKSlyZXR1cm4gV2YoYSxjLGIpfXJldHVybiBifVxuZnVuY3Rpb24gVmsoYSxiLGMsZCxlLGYsZyxoLGspe2E9U2soYyxkLCEwLGEsZSxmLGcsaCxrKTthLmNvbnRleHQ9VWsobnVsbCk7Yz1hLmN1cnJlbnQ7ZD1NKCk7ZT1EZyhjKTtmPXVnKGQsZSk7Zi5jYWxsYmFjaz12b2lkIDAhPT1iJiZudWxsIT09Yj9iOm51bGw7dmcoYyxmKTthLmN1cnJlbnQubGFuZXM9ZTt3YyhhLGUsZCk7dGsoYSxkKTtyZXR1cm4gYX1mdW5jdGlvbiBXayhhLGIsYyxkKXt2YXIgZT1iLmN1cnJlbnQsZj1NKCksZz1EZyhlKTtjPVVrKGMpO251bGw9PT1iLmNvbnRleHQ/Yi5jb250ZXh0PWM6Yi5wZW5kaW5nQ29udGV4dD1jO2I9dWcoZixnKTtiLnBheWxvYWQ9e2VsZW1lbnQ6YX07ZD12b2lkIDA9PT1kP251bGw6ZDtudWxsIT09ZCYmKGIuY2FsbGJhY2s9ZCk7dmcoZSxiKTthPUVnKGUsZyxmKTtudWxsIT09YSYmd2coYSxlLGcpO3JldHVybiBnfVxuZnVuY3Rpb24gWGsoYSl7YT1hLmN1cnJlbnQ7aWYoIWEuY2hpbGQpcmV0dXJuIG51bGw7c3dpdGNoKGEuY2hpbGQudGFnKXtjYXNlIDU6cmV0dXJuIGEuY2hpbGQuc3RhdGVOb2RlO2RlZmF1bHQ6cmV0dXJuIGEuY2hpbGQuc3RhdGVOb2RlfX1mdW5jdGlvbiBZayhhLGIpe2E9YS5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1hJiZudWxsIT09YS5kZWh5ZHJhdGVkKXt2YXIgYz1hLnJldHJ5TGFuZTthLnJldHJ5TGFuZT0wIT09YyYmYzxiP2M6Yn19ZnVuY3Rpb24gWmsoYSxiKXtZayhhLGIpOyhhPWEuYWx0ZXJuYXRlKSYmWWsoYSxiKX1mdW5jdGlvbiAkaygpe3JldHVybiBudWxsfXZhciBhbD1cImZ1bmN0aW9uXCI9PT10eXBlb2YgcmVwb3J0RXJyb3I/cmVwb3J0RXJyb3I6ZnVuY3Rpb24oYSl7Y29uc29sZS5lcnJvcihhKX07ZnVuY3Rpb24gYmwoYSl7dGhpcy5faW50ZXJuYWxSb290PWF9XG5jbC5wcm90b3R5cGUucmVuZGVyPWJsLnByb3RvdHlwZS5yZW5kZXI9ZnVuY3Rpb24oYSl7dmFyIGI9dGhpcy5faW50ZXJuYWxSb290O2lmKG51bGw9PT1iKXRocm93IEVycm9yKHAoNDA5KSk7V2soYSxiLG51bGwsbnVsbCl9O2NsLnByb3RvdHlwZS51bm1vdW50PWJsLnByb3RvdHlwZS51bm1vdW50PWZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5faW50ZXJuYWxSb290O2lmKG51bGwhPT1hKXt0aGlzLl9pbnRlcm5hbFJvb3Q9bnVsbDt2YXIgYj1hLmNvbnRhaW5lckluZm87SGsoZnVuY3Rpb24oKXtXayhudWxsLGEsbnVsbCxudWxsKX0pO2JbcGZdPW51bGx9fTtmdW5jdGlvbiBjbChhKXt0aGlzLl9pbnRlcm5hbFJvb3Q9YX1cbmNsLnByb3RvdHlwZS51bnN0YWJsZV9zY2hlZHVsZUh5ZHJhdGlvbj1mdW5jdGlvbihhKXtpZihhKXt2YXIgYj1EYygpO2E9e2Jsb2NrZWRPbjpudWxsLHRhcmdldDphLHByaW9yaXR5OmJ9O2Zvcih2YXIgYz0wO2M8TWMubGVuZ3RoJiYwIT09YiYmYjxNY1tjXS5wcmlvcml0eTtjKyspO01jLnNwbGljZShjLDAsYSk7MD09PWMmJlJjKGEpfX07ZnVuY3Rpb24gZGwoYSl7cmV0dXJuISghYXx8MSE9PWEubm9kZVR5cGUmJjkhPT1hLm5vZGVUeXBlJiYxMSE9PWEubm9kZVR5cGUpfWZ1bmN0aW9uIGVsKGEpe3JldHVybiEoIWF8fDEhPT1hLm5vZGVUeXBlJiY5IT09YS5ub2RlVHlwZSYmMTEhPT1hLm5vZGVUeXBlJiYoOCE9PWEubm9kZVR5cGV8fFwiIHJlYWN0LW1vdW50LXBvaW50LXVuc3RhYmxlIFwiIT09YS5ub2RlVmFsdWUpKX1mdW5jdGlvbiBmbCgpe31cbmZ1bmN0aW9uIGdsKGEsYixjLGQsZSl7aWYoZSl7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGQpe3ZhciBmPWQ7ZD1mdW5jdGlvbigpe3ZhciBhPVhrKGcpO2YuY2FsbChhKX19dmFyIGc9VmsoYixkLGEsMCxudWxsLCExLCExLFwiXCIsZmwpO2EuX3JlYWN0Um9vdENvbnRhaW5lcj1nO2FbcGZdPWcuY3VycmVudDtuZig4PT09YS5ub2RlVHlwZT9hLnBhcmVudE5vZGU6YSk7SGsoKTtyZXR1cm4gZ31mb3IoO2U9YS5sYXN0Q2hpbGQ7KWEucmVtb3ZlQ2hpbGQoZSk7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGQpe3ZhciBoPWQ7ZD1mdW5jdGlvbigpe3ZhciBhPVhrKGspO2guY2FsbChhKX19dmFyIGs9U2soYSwwLCExLG51bGwsbnVsbCwhMSwhMSxcIlwiLGZsKTthLl9yZWFjdFJvb3RDb250YWluZXI9azthW3BmXT1rLmN1cnJlbnQ7bmYoOD09PWEubm9kZVR5cGU/YS5wYXJlbnROb2RlOmEpO0hrKGZ1bmN0aW9uKCl7V2soYixrLGMsZCl9KTtyZXR1cm4ga31cbmZ1bmN0aW9uIGhsKGEsYixjLGQsZSl7dmFyIGY9Yy5fcmVhY3RSb290Q29udGFpbmVyO2lmKGYpe3ZhciBnPWY7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGUpe3ZhciBoPWU7ZT1mdW5jdGlvbigpe3ZhciBhPVhrKGcpO2guY2FsbChhKX19V2soYixnLGEsZSl9ZWxzZSBnPWdsKGMsYixhLGUsZCk7cmV0dXJuIFhrKGcpfUFjPWZ1bmN0aW9uKGEpe3N3aXRjaChhLnRhZyl7Y2FzZSAzOnZhciBiPWEuc3RhdGVOb2RlO2lmKGIuY3VycmVudC5tZW1vaXplZFN0YXRlLmlzRGVoeWRyYXRlZCl7dmFyIGM9cWMoYi5wZW5kaW5nTGFuZXMpOzAhPT1jJiYoeWMoYixjfDEpLHRrKGIsRCgpKSwwPT09KEsmNikmJihUaT1EKCkrNTAwLGRnKCkpKX1icmVhaztjYXNlIDEzOnZhciBkPU0oKTtIayhmdW5jdGlvbigpe3JldHVybiBFZyhhLDEsZCl9KTtaayhhLDEpfX07QmM9ZnVuY3Rpb24oYSl7aWYoMTM9PT1hLnRhZyl7dmFyIGI9TSgpO0VnKGEsMTM0MjE3NzI4LGIpO1prKGEsMTM0MjE3NzI4KX19O1xuQ2M9ZnVuY3Rpb24oYSl7aWYoMTM9PT1hLnRhZyl7dmFyIGI9TSgpLGM9RGcoYSk7RWcoYSxjLGIpO1prKGEsYyl9fTtEYz1mdW5jdGlvbigpe3JldHVybiBFfTtFYz1mdW5jdGlvbihhLGIpe3ZhciBjPUU7dHJ5e3JldHVybiBFPWEsYigpfWZpbmFsbHl7RT1jfX07XG52Yj1mdW5jdGlvbihhLGIsYyl7c3dpdGNoKGIpe2Nhc2UgXCJpbnB1dFwiOlphKGEsYyk7Yj1jLm5hbWU7aWYoXCJyYWRpb1wiPT09Yy50eXBlJiZudWxsIT1iKXtmb3IoYz1hO2MucGFyZW50Tm9kZTspYz1jLnBhcmVudE5vZGU7Yz1jLnF1ZXJ5U2VsZWN0b3JBbGwoXCJpbnB1dFtuYW1lPVwiK0pTT04uc3RyaW5naWZ5KFwiXCIrYikrJ11bdHlwZT1cInJhZGlvXCJdJyk7Zm9yKGI9MDtiPGMubGVuZ3RoO2IrKyl7dmFyIGQ9Y1tiXTtpZihkIT09YSYmZC5mb3JtPT09YS5mb3JtKXt2YXIgZT1BYihkKTtpZighZSl0aHJvdyBFcnJvcihwKDkwKSk7VWEoZCk7WmEoZCxlKX19fWJyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmZiKGEsYyk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmI9Yy52YWx1ZSxudWxsIT1iJiZjYihhLCEhYy5tdWx0aXBsZSxiLCExKX19O0RiPUdrO0ViPUhrO1xudmFyIGlsPXt1c2luZ0NsaWVudEVudHJ5UG9pbnQ6ITEsRXZlbnRzOlt6YixwZSxBYixCYixDYixHa119LGpsPXtmaW5kRmliZXJCeUhvc3RJbnN0YW5jZTpTYyxidW5kbGVUeXBlOjAsdmVyc2lvbjpcIjE4LjAuMC1mYzQ2ZGJhNjctMjAyMjAzMjlcIixyZW5kZXJlclBhY2thZ2VOYW1lOlwicmVhY3QtZG9tXCJ9O1xudmFyIGtsPXtidW5kbGVUeXBlOmpsLmJ1bmRsZVR5cGUsdmVyc2lvbjpqbC52ZXJzaW9uLHJlbmRlcmVyUGFja2FnZU5hbWU6amwucmVuZGVyZXJQYWNrYWdlTmFtZSxyZW5kZXJlckNvbmZpZzpqbC5yZW5kZXJlckNvbmZpZyxvdmVycmlkZUhvb2tTdGF0ZTpudWxsLG92ZXJyaWRlSG9va1N0YXRlRGVsZXRlUGF0aDpudWxsLG92ZXJyaWRlSG9va1N0YXRlUmVuYW1lUGF0aDpudWxsLG92ZXJyaWRlUHJvcHM6bnVsbCxvdmVycmlkZVByb3BzRGVsZXRlUGF0aDpudWxsLG92ZXJyaWRlUHJvcHNSZW5hbWVQYXRoOm51bGwsc2V0RXJyb3JIYW5kbGVyOm51bGwsc2V0U3VzcGVuc2VIYW5kbGVyOm51bGwsc2NoZWR1bGVVcGRhdGU6bnVsbCxjdXJyZW50RGlzcGF0Y2hlclJlZjpzYS5SZWFjdEN1cnJlbnREaXNwYXRjaGVyLGZpbmRIb3N0SW5zdGFuY2VCeUZpYmVyOmZ1bmN0aW9uKGEpe2E9V2IoYSk7cmV0dXJuIG51bGw9PT1hP251bGw6YS5zdGF0ZU5vZGV9LGZpbmRGaWJlckJ5SG9zdEluc3RhbmNlOmpsLmZpbmRGaWJlckJ5SG9zdEluc3RhbmNlfHxcbiRrLGZpbmRIb3N0SW5zdGFuY2VzRm9yUmVmcmVzaDpudWxsLHNjaGVkdWxlUmVmcmVzaDpudWxsLHNjaGVkdWxlUm9vdDpudWxsLHNldFJlZnJlc2hIYW5kbGVyOm51bGwsZ2V0Q3VycmVudEZpYmVyOm51bGwscmVjb25jaWxlclZlcnNpb246XCIxOC4wLjAtZmM0NmRiYTY3LTIwMjIwMzI5XCJ9O2lmKFwidW5kZWZpbmVkXCIhPT10eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fKXt2YXIgbGw9X19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fO2lmKCFsbC5pc0Rpc2FibGVkJiZsbC5zdXBwb3J0c0ZpYmVyKXRyeXtoYz1sbC5pbmplY3Qoa2wpLGljPWxsfWNhdGNoKGEpe319ZXhwb3J0cy5fX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRD1pbDtcbmV4cG9ydHMuY3JlYXRlUG9ydGFsPWZ1bmN0aW9uKGEsYil7dmFyIGM9Mjxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMl0/YXJndW1lbnRzWzJdOm51bGw7aWYoIWRsKGIpKXRocm93IEVycm9yKHAoMjAwKSk7cmV0dXJuIFRrKGEsYixudWxsLGMpfTtleHBvcnRzLmNyZWF0ZVJvb3Q9ZnVuY3Rpb24oYSxiKXtpZighZGwoYSkpdGhyb3cgRXJyb3IocCgyOTkpKTt2YXIgYz0hMSxkPVwiXCIsZT1hbDtudWxsIT09YiYmdm9pZCAwIT09YiYmKCEwPT09Yi51bnN0YWJsZV9zdHJpY3RNb2RlJiYoYz0hMCksdm9pZCAwIT09Yi5pZGVudGlmaWVyUHJlZml4JiYoZD1iLmlkZW50aWZpZXJQcmVmaXgpLHZvaWQgMCE9PWIub25SZWNvdmVyYWJsZUVycm9yJiYoZT1iLm9uUmVjb3ZlcmFibGVFcnJvcikpO2I9U2soYSwxLCExLG51bGwsbnVsbCxjLCExLGQsZSk7YVtwZl09Yi5jdXJyZW50O25mKDg9PT1hLm5vZGVUeXBlP2EucGFyZW50Tm9kZTphKTtyZXR1cm4gbmV3IGJsKGIpfTtcbmV4cG9ydHMuZmluZERPTU5vZGU9ZnVuY3Rpb24oYSl7aWYobnVsbD09YSlyZXR1cm4gbnVsbDtpZigxPT09YS5ub2RlVHlwZSlyZXR1cm4gYTt2YXIgYj1hLl9yZWFjdEludGVybmFscztpZih2b2lkIDA9PT1iKXtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYS5yZW5kZXIpdGhyb3cgRXJyb3IocCgxODgpKTthPU9iamVjdC5rZXlzKGEpLmpvaW4oXCIsXCIpO3Rocm93IEVycm9yKHAoMjY4LGEpKTt9YT1XYihiKTthPW51bGw9PT1hP251bGw6YS5zdGF0ZU5vZGU7cmV0dXJuIGF9O2V4cG9ydHMuZmx1c2hTeW5jPWZ1bmN0aW9uKGEpe3JldHVybiBIayhhKX07ZXhwb3J0cy5oeWRyYXRlPWZ1bmN0aW9uKGEsYixjKXtpZighZWwoYikpdGhyb3cgRXJyb3IocCgyMDApKTtyZXR1cm4gaGwobnVsbCxhLGIsITAsYyl9O1xuZXhwb3J0cy5oeWRyYXRlUm9vdD1mdW5jdGlvbihhLGIsYyl7aWYoIWRsKGEpKXRocm93IEVycm9yKHAoNDA1KSk7dmFyIGQ9bnVsbCE9YyYmYy5oeWRyYXRlZFNvdXJjZXN8fG51bGwsZT0hMSxmPVwiXCIsZz1hbDtudWxsIT09YyYmdm9pZCAwIT09YyYmKCEwPT09Yy51bnN0YWJsZV9zdHJpY3RNb2RlJiYoZT0hMCksdm9pZCAwIT09Yy5pZGVudGlmaWVyUHJlZml4JiYoZj1jLmlkZW50aWZpZXJQcmVmaXgpLHZvaWQgMCE9PWMub25SZWNvdmVyYWJsZUVycm9yJiYoZz1jLm9uUmVjb3ZlcmFibGVFcnJvcikpO2I9VmsoYixudWxsLGEsMSxudWxsIT1jP2M6bnVsbCxlLCExLGYsZyk7YVtwZl09Yi5jdXJyZW50O25mKGEpO2lmKGQpZm9yKGE9MDthPGQubGVuZ3RoO2ErKyljPWRbYV0sZT1jLl9nZXRWZXJzaW9uLGU9ZShjLl9zb3VyY2UpLG51bGw9PWIubXV0YWJsZVNvdXJjZUVhZ2VySHlkcmF0aW9uRGF0YT9iLm11dGFibGVTb3VyY2VFYWdlckh5ZHJhdGlvbkRhdGE9W2MsZV06Yi5tdXRhYmxlU291cmNlRWFnZXJIeWRyYXRpb25EYXRhLnB1c2goYyxcbmUpO3JldHVybiBuZXcgY2woYil9O2V4cG9ydHMucmVuZGVyPWZ1bmN0aW9uKGEsYixjKXtpZighZWwoYikpdGhyb3cgRXJyb3IocCgyMDApKTtyZXR1cm4gaGwobnVsbCxhLGIsITEsYyl9O2V4cG9ydHMudW5tb3VudENvbXBvbmVudEF0Tm9kZT1mdW5jdGlvbihhKXtpZighZWwoYSkpdGhyb3cgRXJyb3IocCg0MCkpO3JldHVybiBhLl9yZWFjdFJvb3RDb250YWluZXI/KEhrKGZ1bmN0aW9uKCl7aGwobnVsbCxudWxsLGEsITEsZnVuY3Rpb24oKXthLl9yZWFjdFJvb3RDb250YWluZXI9bnVsbDthW3BmXT1udWxsfSl9KSwhMCk6ITF9O2V4cG9ydHMudW5zdGFibGVfYmF0Y2hlZFVwZGF0ZXM9R2s7XG5leHBvcnRzLnVuc3RhYmxlX3JlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyPWZ1bmN0aW9uKGEsYixjLGQpe2lmKCFlbChjKSl0aHJvdyBFcnJvcihwKDIwMCkpO2lmKG51bGw9PWF8fHZvaWQgMD09PWEuX3JlYWN0SW50ZXJuYWxzKXRocm93IEVycm9yKHAoMzgpKTtyZXR1cm4gaGwoYSxiLGMsITEsZCl9O2V4cG9ydHMudmVyc2lvbj1cIjE4LjAuMC1mYzQ2ZGJhNjctMjAyMjAzMjlcIjtcbiIsIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9zY2hlZHVsZXIucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvc2NoZWR1bGVyLmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCIvKipcbiAqIEBsaWNlbnNlIFJlYWN0XG4gKiBzY2hlZHVsZXIucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuJ3VzZSBzdHJpY3QnO2Z1bmN0aW9uIGYoYSxiKXt2YXIgYz1hLmxlbmd0aDthLnB1c2goYik7YTpmb3IoOzA8Yzspe3ZhciBkPWMtMT4+PjEsZT1hW2RdO2lmKDA8ZyhlLGIpKWFbZF09YixhW2NdPWUsYz1kO2Vsc2UgYnJlYWsgYX19ZnVuY3Rpb24gaChhKXtyZXR1cm4gMD09PWEubGVuZ3RoP251bGw6YVswXX1mdW5jdGlvbiBrKGEpe2lmKDA9PT1hLmxlbmd0aClyZXR1cm4gbnVsbDt2YXIgYj1hWzBdLGM9YS5wb3AoKTtpZihjIT09Yil7YVswXT1jO2E6Zm9yKHZhciBkPTAsZT1hLmxlbmd0aCx3PWU+Pj4xO2Q8dzspe3ZhciBtPTIqKGQrMSktMSxDPWFbbV0sbj1tKzEseD1hW25dO2lmKDA+ZyhDLGMpKW48ZSYmMD5nKHgsQyk/KGFbZF09eCxhW25dPWMsZD1uKTooYVtkXT1DLGFbbV09YyxkPW0pO2Vsc2UgaWYobjxlJiYwPmcoeCxjKSlhW2RdPXgsYVtuXT1jLGQ9bjtlbHNlIGJyZWFrIGF9fXJldHVybiBifVxuZnVuY3Rpb24gZyhhLGIpe3ZhciBjPWEuc29ydEluZGV4LWIuc29ydEluZGV4O3JldHVybiAwIT09Yz9jOmEuaWQtYi5pZH1pZihcIm9iamVjdFwiPT09dHlwZW9mIHBlcmZvcm1hbmNlJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgcGVyZm9ybWFuY2Uubm93KXt2YXIgbD1wZXJmb3JtYW5jZTtleHBvcnRzLnVuc3RhYmxlX25vdz1mdW5jdGlvbigpe3JldHVybiBsLm5vdygpfX1lbHNle3ZhciBwPURhdGUscT1wLm5vdygpO2V4cG9ydHMudW5zdGFibGVfbm93PWZ1bmN0aW9uKCl7cmV0dXJuIHAubm93KCktcX19dmFyIHI9W10sdD1bXSx1PTEsdj1udWxsLHk9Myx6PSExLEE9ITEsQj0hMSxEPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBzZXRUaW1lb3V0P3NldFRpbWVvdXQ6bnVsbCxFPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBjbGVhclRpbWVvdXQ/Y2xlYXJUaW1lb3V0Om51bGwsRj1cInVuZGVmaW5lZFwiIT09dHlwZW9mIHNldEltbWVkaWF0ZT9zZXRJbW1lZGlhdGU6bnVsbDtcblwidW5kZWZpbmVkXCIhPT10eXBlb2YgbmF2aWdhdG9yJiZ2b2lkIDAhPT1uYXZpZ2F0b3Iuc2NoZWR1bGluZyYmdm9pZCAwIT09bmF2aWdhdG9yLnNjaGVkdWxpbmcuaXNJbnB1dFBlbmRpbmcmJm5hdmlnYXRvci5zY2hlZHVsaW5nLmlzSW5wdXRQZW5kaW5nLmJpbmQobmF2aWdhdG9yLnNjaGVkdWxpbmcpO2Z1bmN0aW9uIEcoYSl7Zm9yKHZhciBiPWgodCk7bnVsbCE9PWI7KXtpZihudWxsPT09Yi5jYWxsYmFjaylrKHQpO2Vsc2UgaWYoYi5zdGFydFRpbWU8PWEpayh0KSxiLnNvcnRJbmRleD1iLmV4cGlyYXRpb25UaW1lLGYocixiKTtlbHNlIGJyZWFrO2I9aCh0KX19ZnVuY3Rpb24gSChhKXtCPSExO0coYSk7aWYoIUEpaWYobnVsbCE9PWgocikpQT0hMCxJKEopO2Vsc2V7dmFyIGI9aCh0KTtudWxsIT09YiYmSyhILGIuc3RhcnRUaW1lLWEpfX1cbmZ1bmN0aW9uIEooYSxiKXtBPSExO0ImJihCPSExLEUoTCksTD0tMSk7ej0hMDt2YXIgYz15O3RyeXtHKGIpO2Zvcih2PWgocik7bnVsbCE9PXYmJighKHYuZXhwaXJhdGlvblRpbWU+Yil8fGEmJiFNKCkpOyl7dmFyIGQ9di5jYWxsYmFjaztpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZCl7di5jYWxsYmFjaz1udWxsO3k9di5wcmlvcml0eUxldmVsO3ZhciBlPWQodi5leHBpcmF0aW9uVGltZTw9Yik7Yj1leHBvcnRzLnVuc3RhYmxlX25vdygpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBlP3YuY2FsbGJhY2s9ZTp2PT09aChyKSYmayhyKTtHKGIpfWVsc2UgayhyKTt2PWgocil9aWYobnVsbCE9PXYpdmFyIHc9ITA7ZWxzZXt2YXIgbT1oKHQpO251bGwhPT1tJiZLKEgsbS5zdGFydFRpbWUtYik7dz0hMX1yZXR1cm4gd31maW5hbGx5e3Y9bnVsbCx5PWMsej0hMX19dmFyIE49ITEsTz1udWxsLEw9LTEsUD01LFE9LTE7XG5mdW5jdGlvbiBNKCl7cmV0dXJuIGV4cG9ydHMudW5zdGFibGVfbm93KCktUTxQPyExOiEwfWZ1bmN0aW9uIFIoKXtpZihudWxsIT09Tyl7dmFyIGE9ZXhwb3J0cy51bnN0YWJsZV9ub3coKTtRPWE7dmFyIGI9ITA7dHJ5e2I9TyghMCxhKX1maW5hbGx5e2I/UygpOihOPSExLE89bnVsbCl9fWVsc2UgTj0hMX12YXIgUztpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgRilTPWZ1bmN0aW9uKCl7RihSKX07ZWxzZSBpZihcInVuZGVmaW5lZFwiIT09dHlwZW9mIE1lc3NhZ2VDaGFubmVsKXt2YXIgVD1uZXcgTWVzc2FnZUNoYW5uZWwsVT1ULnBvcnQyO1QucG9ydDEub25tZXNzYWdlPVI7Uz1mdW5jdGlvbigpe1UucG9zdE1lc3NhZ2UobnVsbCl9fWVsc2UgUz1mdW5jdGlvbigpe0QoUiwwKX07ZnVuY3Rpb24gSShhKXtPPWE7Tnx8KE49ITAsUygpKX1mdW5jdGlvbiBLKGEsYil7TD1EKGZ1bmN0aW9uKCl7YShleHBvcnRzLnVuc3RhYmxlX25vdygpKX0sYil9XG5leHBvcnRzLnVuc3RhYmxlX0lkbGVQcmlvcml0eT01O2V4cG9ydHMudW5zdGFibGVfSW1tZWRpYXRlUHJpb3JpdHk9MTtleHBvcnRzLnVuc3RhYmxlX0xvd1ByaW9yaXR5PTQ7ZXhwb3J0cy51bnN0YWJsZV9Ob3JtYWxQcmlvcml0eT0zO2V4cG9ydHMudW5zdGFibGVfUHJvZmlsaW5nPW51bGw7ZXhwb3J0cy51bnN0YWJsZV9Vc2VyQmxvY2tpbmdQcmlvcml0eT0yO2V4cG9ydHMudW5zdGFibGVfY2FuY2VsQ2FsbGJhY2s9ZnVuY3Rpb24oYSl7YS5jYWxsYmFjaz1udWxsfTtleHBvcnRzLnVuc3RhYmxlX2NvbnRpbnVlRXhlY3V0aW9uPWZ1bmN0aW9uKCl7QXx8enx8KEE9ITAsSShKKSl9O1xuZXhwb3J0cy51bnN0YWJsZV9mb3JjZUZyYW1lUmF0ZT1mdW5jdGlvbihhKXswPmF8fDEyNTxhP2NvbnNvbGUuZXJyb3IoXCJmb3JjZUZyYW1lUmF0ZSB0YWtlcyBhIHBvc2l0aXZlIGludCBiZXR3ZWVuIDAgYW5kIDEyNSwgZm9yY2luZyBmcmFtZSByYXRlcyBoaWdoZXIgdGhhbiAxMjUgZnBzIGlzIG5vdCBzdXBwb3J0ZWRcIik6UD0wPGE/TWF0aC5mbG9vcigxRTMvYSk6NX07ZXhwb3J0cy51bnN0YWJsZV9nZXRDdXJyZW50UHJpb3JpdHlMZXZlbD1mdW5jdGlvbigpe3JldHVybiB5fTtleHBvcnRzLnVuc3RhYmxlX2dldEZpcnN0Q2FsbGJhY2tOb2RlPWZ1bmN0aW9uKCl7cmV0dXJuIGgocil9O2V4cG9ydHMudW5zdGFibGVfbmV4dD1mdW5jdGlvbihhKXtzd2l0Y2goeSl7Y2FzZSAxOmNhc2UgMjpjYXNlIDM6dmFyIGI9MzticmVhaztkZWZhdWx0OmI9eX12YXIgYz15O3k9Yjt0cnl7cmV0dXJuIGEoKX1maW5hbGx5e3k9Y319O2V4cG9ydHMudW5zdGFibGVfcGF1c2VFeGVjdXRpb249ZnVuY3Rpb24oKXt9O1xuZXhwb3J0cy51bnN0YWJsZV9yZXF1ZXN0UGFpbnQ9ZnVuY3Rpb24oKXt9O2V4cG9ydHMudW5zdGFibGVfcnVuV2l0aFByaW9yaXR5PWZ1bmN0aW9uKGEsYil7c3dpdGNoKGEpe2Nhc2UgMTpjYXNlIDI6Y2FzZSAzOmNhc2UgNDpjYXNlIDU6YnJlYWs7ZGVmYXVsdDphPTN9dmFyIGM9eTt5PWE7dHJ5e3JldHVybiBiKCl9ZmluYWxseXt5PWN9fTtcbmV4cG9ydHMudW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjaz1mdW5jdGlvbihhLGIsYyl7dmFyIGQ9ZXhwb3J0cy51bnN0YWJsZV9ub3coKTtcIm9iamVjdFwiPT09dHlwZW9mIGMmJm51bGwhPT1jPyhjPWMuZGVsYXksYz1cIm51bWJlclwiPT09dHlwZW9mIGMmJjA8Yz9kK2M6ZCk6Yz1kO3N3aXRjaChhKXtjYXNlIDE6dmFyIGU9LTE7YnJlYWs7Y2FzZSAyOmU9MjUwO2JyZWFrO2Nhc2UgNTplPTEwNzM3NDE4MjM7YnJlYWs7Y2FzZSA0OmU9MUU0O2JyZWFrO2RlZmF1bHQ6ZT01RTN9ZT1jK2U7YT17aWQ6dSsrLGNhbGxiYWNrOmIscHJpb3JpdHlMZXZlbDphLHN0YXJ0VGltZTpjLGV4cGlyYXRpb25UaW1lOmUsc29ydEluZGV4Oi0xfTtjPmQ/KGEuc29ydEluZGV4PWMsZih0LGEpLG51bGw9PT1oKHIpJiZhPT09aCh0KSYmKEI/KEUoTCksTD0tMSk6Qj0hMCxLKEgsYy1kKSkpOihhLnNvcnRJbmRleD1lLGYocixhKSxBfHx6fHwoQT0hMCxJKEopKSk7cmV0dXJuIGF9O1xuZXhwb3J0cy51bnN0YWJsZV9zaG91bGRZaWVsZD1NO2V4cG9ydHMudW5zdGFibGVfd3JhcENhbGxiYWNrPWZ1bmN0aW9uKGEpe3ZhciBiPXk7cmV0dXJuIGZ1bmN0aW9uKCl7dmFyIGM9eTt5PWI7dHJ5e3JldHVybiBhLmFwcGx5KHRoaXMsYXJndW1lbnRzKX1maW5hbGx5e3k9Y319fTtcbiIsInZhciBzY29wZSA9ICh0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiICYmIGdsb2JhbCkgfHxcbiAgICAgICAgICAgICh0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIiAmJiBzZWxmKSB8fFxuICAgICAgICAgICAgd2luZG93O1xudmFyIGFwcGx5ID0gRnVuY3Rpb24ucHJvdG90eXBlLmFwcGx5O1xuXG4vLyBET00gQVBJcywgZm9yIGNvbXBsZXRlbmVzc1xuXG5leHBvcnRzLnNldFRpbWVvdXQgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIG5ldyBUaW1lb3V0KGFwcGx5LmNhbGwoc2V0VGltZW91dCwgc2NvcGUsIGFyZ3VtZW50cyksIGNsZWFyVGltZW91dCk7XG59O1xuZXhwb3J0cy5zZXRJbnRlcnZhbCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gbmV3IFRpbWVvdXQoYXBwbHkuY2FsbChzZXRJbnRlcnZhbCwgc2NvcGUsIGFyZ3VtZW50cyksIGNsZWFySW50ZXJ2YWwpO1xufTtcbmV4cG9ydHMuY2xlYXJUaW1lb3V0ID1cbmV4cG9ydHMuY2xlYXJJbnRlcnZhbCA9IGZ1bmN0aW9uKHRpbWVvdXQpIHtcbiAgaWYgKHRpbWVvdXQpIHtcbiAgICB0aW1lb3V0LmNsb3NlKCk7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIFRpbWVvdXQoaWQsIGNsZWFyRm4pIHtcbiAgdGhpcy5faWQgPSBpZDtcbiAgdGhpcy5fY2xlYXJGbiA9IGNsZWFyRm47XG59XG5UaW1lb3V0LnByb3RvdHlwZS51bnJlZiA9IFRpbWVvdXQucHJvdG90eXBlLnJlZiA9IGZ1bmN0aW9uKCkge307XG5UaW1lb3V0LnByb3RvdHlwZS5jbG9zZSA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLl9jbGVhckZuLmNhbGwoc2NvcGUsIHRoaXMuX2lkKTtcbn07XG5cbi8vIERvZXMgbm90IHN0YXJ0IHRoZSB0aW1lLCBqdXN0IHNldHMgdXAgdGhlIG1lbWJlcnMgbmVlZGVkLlxuZXhwb3J0cy5lbnJvbGwgPSBmdW5jdGlvbihpdGVtLCBtc2Vjcykge1xuICBjbGVhclRpbWVvdXQoaXRlbS5faWRsZVRpbWVvdXRJZCk7XG4gIGl0ZW0uX2lkbGVUaW1lb3V0ID0gbXNlY3M7XG59O1xuXG5leHBvcnRzLnVuZW5yb2xsID0gZnVuY3Rpb24oaXRlbSkge1xuICBjbGVhclRpbWVvdXQoaXRlbS5faWRsZVRpbWVvdXRJZCk7XG4gIGl0ZW0uX2lkbGVUaW1lb3V0ID0gLTE7XG59O1xuXG5leHBvcnRzLl91bnJlZkFjdGl2ZSA9IGV4cG9ydHMuYWN0aXZlID0gZnVuY3Rpb24oaXRlbSkge1xuICBjbGVhclRpbWVvdXQoaXRlbS5faWRsZVRpbWVvdXRJZCk7XG5cbiAgdmFyIG1zZWNzID0gaXRlbS5faWRsZVRpbWVvdXQ7XG4gIGlmIChtc2VjcyA+PSAwKSB7XG4gICAgaXRlbS5faWRsZVRpbWVvdXRJZCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gb25UaW1lb3V0KCkge1xuICAgICAgaWYgKGl0ZW0uX29uVGltZW91dClcbiAgICAgICAgaXRlbS5fb25UaW1lb3V0KCk7XG4gICAgfSwgbXNlY3MpO1xuICB9XG59O1xuXG4vLyBzZXRpbW1lZGlhdGUgYXR0YWNoZXMgaXRzZWxmIHRvIHRoZSBnbG9iYWwgb2JqZWN0XG5yZXF1aXJlKFwic2V0aW1tZWRpYXRlXCIpO1xuLy8gT24gc29tZSBleG90aWMgZW52aXJvbm1lbnRzLCBpdCdzIG5vdCBjbGVhciB3aGljaCBvYmplY3QgYHNldGltbWVkaWF0ZWAgd2FzXG4vLyBhYmxlIHRvIGluc3RhbGwgb250by4gIFNlYXJjaCBlYWNoIHBvc3NpYmlsaXR5IGluIHRoZSBzYW1lIG9yZGVyIGFzIHRoZVxuLy8gYHNldGltbWVkaWF0ZWAgbGlicmFyeS5cbmV4cG9ydHMuc2V0SW1tZWRpYXRlID0gKHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiICYmIHNlbGYuc2V0SW1tZWRpYXRlKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAodHlwZW9mIGdsb2JhbCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBnbG9iYWwuc2V0SW1tZWRpYXRlKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAodGhpcyAmJiB0aGlzLnNldEltbWVkaWF0ZSk7XG5leHBvcnRzLmNsZWFySW1tZWRpYXRlID0gKHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiICYmIHNlbGYuY2xlYXJJbW1lZGlhdGUpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgKHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIgJiYgZ2xvYmFsLmNsZWFySW1tZWRpYXRlKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICh0aGlzICYmIHRoaXMuY2xlYXJJbW1lZGlhdGUpO1xuIiwiKGZ1bmN0aW9uIChnbG9iYWwsIHVuZGVmaW5lZCkge1xuICAgIFwidXNlIHN0cmljdFwiO1xuXG4gICAgaWYgKGdsb2JhbC5zZXRJbW1lZGlhdGUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBuZXh0SGFuZGxlID0gMTsgLy8gU3BlYyBzYXlzIGdyZWF0ZXIgdGhhbiB6ZXJvXG4gICAgdmFyIHRhc2tzQnlIYW5kbGUgPSB7fTtcbiAgICB2YXIgY3VycmVudGx5UnVubmluZ0FUYXNrID0gZmFsc2U7XG4gICAgdmFyIGRvYyA9IGdsb2JhbC5kb2N1bWVudDtcbiAgICB2YXIgcmVnaXN0ZXJJbW1lZGlhdGU7XG5cbiAgICBmdW5jdGlvbiBzZXRJbW1lZGlhdGUoY2FsbGJhY2spIHtcbiAgICAgIC8vIENhbGxiYWNrIGNhbiBlaXRoZXIgYmUgYSBmdW5jdGlvbiBvciBhIHN0cmluZ1xuICAgICAgaWYgKHR5cGVvZiBjYWxsYmFjayAhPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIGNhbGxiYWNrID0gbmV3IEZ1bmN0aW9uKFwiXCIgKyBjYWxsYmFjayk7XG4gICAgICB9XG4gICAgICAvLyBDb3B5IGZ1bmN0aW9uIGFyZ3VtZW50c1xuICAgICAgdmFyIGFyZ3MgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCAtIDEpO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmdzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgYXJnc1tpXSA9IGFyZ3VtZW50c1tpICsgMV07XG4gICAgICB9XG4gICAgICAvLyBTdG9yZSBhbmQgcmVnaXN0ZXIgdGhlIHRhc2tcbiAgICAgIHZhciB0YXNrID0geyBjYWxsYmFjazogY2FsbGJhY2ssIGFyZ3M6IGFyZ3MgfTtcbiAgICAgIHRhc2tzQnlIYW5kbGVbbmV4dEhhbmRsZV0gPSB0YXNrO1xuICAgICAgcmVnaXN0ZXJJbW1lZGlhdGUobmV4dEhhbmRsZSk7XG4gICAgICByZXR1cm4gbmV4dEhhbmRsZSsrO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNsZWFySW1tZWRpYXRlKGhhbmRsZSkge1xuICAgICAgICBkZWxldGUgdGFza3NCeUhhbmRsZVtoYW5kbGVdO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJ1bih0YXNrKSB7XG4gICAgICAgIHZhciBjYWxsYmFjayA9IHRhc2suY2FsbGJhY2s7XG4gICAgICAgIHZhciBhcmdzID0gdGFzay5hcmdzO1xuICAgICAgICBzd2l0Y2ggKGFyZ3MubGVuZ3RoKSB7XG4gICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgY2FsbGJhY2soYXJnc1swXSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgY2FsbGJhY2soYXJnc1swXSwgYXJnc1sxXSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgY2FsbGJhY2soYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIGNhbGxiYWNrLmFwcGx5KHVuZGVmaW5lZCwgYXJncyk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJ1bklmUHJlc2VudChoYW5kbGUpIHtcbiAgICAgICAgLy8gRnJvbSB0aGUgc3BlYzogXCJXYWl0IHVudGlsIGFueSBpbnZvY2F0aW9ucyBvZiB0aGlzIGFsZ29yaXRobSBzdGFydGVkIGJlZm9yZSB0aGlzIG9uZSBoYXZlIGNvbXBsZXRlZC5cIlxuICAgICAgICAvLyBTbyBpZiB3ZSdyZSBjdXJyZW50bHkgcnVubmluZyBhIHRhc2ssIHdlJ2xsIG5lZWQgdG8gZGVsYXkgdGhpcyBpbnZvY2F0aW9uLlxuICAgICAgICBpZiAoY3VycmVudGx5UnVubmluZ0FUYXNrKSB7XG4gICAgICAgICAgICAvLyBEZWxheSBieSBkb2luZyBhIHNldFRpbWVvdXQuIHNldEltbWVkaWF0ZSB3YXMgdHJpZWQgaW5zdGVhZCwgYnV0IGluIEZpcmVmb3ggNyBpdCBnZW5lcmF0ZWQgYVxuICAgICAgICAgICAgLy8gXCJ0b28gbXVjaCByZWN1cnNpb25cIiBlcnJvci5cbiAgICAgICAgICAgIHNldFRpbWVvdXQocnVuSWZQcmVzZW50LCAwLCBoYW5kbGUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFyIHRhc2sgPSB0YXNrc0J5SGFuZGxlW2hhbmRsZV07XG4gICAgICAgICAgICBpZiAodGFzaykge1xuICAgICAgICAgICAgICAgIGN1cnJlbnRseVJ1bm5pbmdBVGFzayA9IHRydWU7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgcnVuKHRhc2spO1xuICAgICAgICAgICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICAgICAgICAgIGNsZWFySW1tZWRpYXRlKGhhbmRsZSk7XG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnRseVJ1bm5pbmdBVGFzayA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGluc3RhbGxOZXh0VGlja0ltcGxlbWVudGF0aW9uKCkge1xuICAgICAgICByZWdpc3RlckltbWVkaWF0ZSA9IGZ1bmN0aW9uKGhhbmRsZSkge1xuICAgICAgICAgICAgcHJvY2Vzcy5uZXh0VGljayhmdW5jdGlvbiAoKSB7IHJ1bklmUHJlc2VudChoYW5kbGUpOyB9KTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjYW5Vc2VQb3N0TWVzc2FnZSgpIHtcbiAgICAgICAgLy8gVGhlIHRlc3QgYWdhaW5zdCBgaW1wb3J0U2NyaXB0c2AgcHJldmVudHMgdGhpcyBpbXBsZW1lbnRhdGlvbiBmcm9tIGJlaW5nIGluc3RhbGxlZCBpbnNpZGUgYSB3ZWIgd29ya2VyLFxuICAgICAgICAvLyB3aGVyZSBgZ2xvYmFsLnBvc3RNZXNzYWdlYCBtZWFucyBzb21ldGhpbmcgY29tcGxldGVseSBkaWZmZXJlbnQgYW5kIGNhbid0IGJlIHVzZWQgZm9yIHRoaXMgcHVycG9zZS5cbiAgICAgICAgaWYgKGdsb2JhbC5wb3N0TWVzc2FnZSAmJiAhZ2xvYmFsLmltcG9ydFNjcmlwdHMpIHtcbiAgICAgICAgICAgIHZhciBwb3N0TWVzc2FnZUlzQXN5bmNocm9ub3VzID0gdHJ1ZTtcbiAgICAgICAgICAgIHZhciBvbGRPbk1lc3NhZ2UgPSBnbG9iYWwub25tZXNzYWdlO1xuICAgICAgICAgICAgZ2xvYmFsLm9ubWVzc2FnZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHBvc3RNZXNzYWdlSXNBc3luY2hyb25vdXMgPSBmYWxzZTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBnbG9iYWwucG9zdE1lc3NhZ2UoXCJcIiwgXCIqXCIpO1xuICAgICAgICAgICAgZ2xvYmFsLm9ubWVzc2FnZSA9IG9sZE9uTWVzc2FnZTtcbiAgICAgICAgICAgIHJldHVybiBwb3N0TWVzc2FnZUlzQXN5bmNocm9ub3VzO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaW5zdGFsbFBvc3RNZXNzYWdlSW1wbGVtZW50YXRpb24oKSB7XG4gICAgICAgIC8vIEluc3RhbGxzIGFuIGV2ZW50IGhhbmRsZXIgb24gYGdsb2JhbGAgZm9yIHRoZSBgbWVzc2FnZWAgZXZlbnQ6IHNlZVxuICAgICAgICAvLyAqIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuL0RPTS93aW5kb3cucG9zdE1lc3NhZ2VcbiAgICAgICAgLy8gKiBodHRwOi8vd3d3LndoYXR3Zy5vcmcvc3BlY3Mvd2ViLWFwcHMvY3VycmVudC13b3JrL211bHRpcGFnZS9jb21tcy5odG1sI2Nyb3NzRG9jdW1lbnRNZXNzYWdlc1xuXG4gICAgICAgIHZhciBtZXNzYWdlUHJlZml4ID0gXCJzZXRJbW1lZGlhdGUkXCIgKyBNYXRoLnJhbmRvbSgpICsgXCIkXCI7XG4gICAgICAgIHZhciBvbkdsb2JhbE1lc3NhZ2UgPSBmdW5jdGlvbihldmVudCkge1xuICAgICAgICAgICAgaWYgKGV2ZW50LnNvdXJjZSA9PT0gZ2xvYmFsICYmXG4gICAgICAgICAgICAgICAgdHlwZW9mIGV2ZW50LmRhdGEgPT09IFwic3RyaW5nXCIgJiZcbiAgICAgICAgICAgICAgICBldmVudC5kYXRhLmluZGV4T2YobWVzc2FnZVByZWZpeCkgPT09IDApIHtcbiAgICAgICAgICAgICAgICBydW5JZlByZXNlbnQoK2V2ZW50LmRhdGEuc2xpY2UobWVzc2FnZVByZWZpeC5sZW5ndGgpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICBpZiAoZ2xvYmFsLmFkZEV2ZW50TGlzdGVuZXIpIHtcbiAgICAgICAgICAgIGdsb2JhbC5hZGRFdmVudExpc3RlbmVyKFwibWVzc2FnZVwiLCBvbkdsb2JhbE1lc3NhZ2UsIGZhbHNlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGdsb2JhbC5hdHRhY2hFdmVudChcIm9ubWVzc2FnZVwiLCBvbkdsb2JhbE1lc3NhZ2UpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmVnaXN0ZXJJbW1lZGlhdGUgPSBmdW5jdGlvbihoYW5kbGUpIHtcbiAgICAgICAgICAgIGdsb2JhbC5wb3N0TWVzc2FnZShtZXNzYWdlUHJlZml4ICsgaGFuZGxlLCBcIipcIik7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaW5zdGFsbE1lc3NhZ2VDaGFubmVsSW1wbGVtZW50YXRpb24oKSB7XG4gICAgICAgIHZhciBjaGFubmVsID0gbmV3IE1lc3NhZ2VDaGFubmVsKCk7XG4gICAgICAgIGNoYW5uZWwucG9ydDEub25tZXNzYWdlID0gZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgICAgIHZhciBoYW5kbGUgPSBldmVudC5kYXRhO1xuICAgICAgICAgICAgcnVuSWZQcmVzZW50KGhhbmRsZSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgcmVnaXN0ZXJJbW1lZGlhdGUgPSBmdW5jdGlvbihoYW5kbGUpIHtcbiAgICAgICAgICAgIGNoYW5uZWwucG9ydDIucG9zdE1lc3NhZ2UoaGFuZGxlKTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpbnN0YWxsUmVhZHlTdGF0ZUNoYW5nZUltcGxlbWVudGF0aW9uKCkge1xuICAgICAgICB2YXIgaHRtbCA9IGRvYy5kb2N1bWVudEVsZW1lbnQ7XG4gICAgICAgIHJlZ2lzdGVySW1tZWRpYXRlID0gZnVuY3Rpb24oaGFuZGxlKSB7XG4gICAgICAgICAgICAvLyBDcmVhdGUgYSA8c2NyaXB0PiBlbGVtZW50OyBpdHMgcmVhZHlzdGF0ZWNoYW5nZSBldmVudCB3aWxsIGJlIGZpcmVkIGFzeW5jaHJvbm91c2x5IG9uY2UgaXQgaXMgaW5zZXJ0ZWRcbiAgICAgICAgICAgIC8vIGludG8gdGhlIGRvY3VtZW50LiBEbyBzbywgdGh1cyBxdWV1aW5nIHVwIHRoZSB0YXNrLiBSZW1lbWJlciB0byBjbGVhbiB1cCBvbmNlIGl0J3MgYmVlbiBjYWxsZWQuXG4gICAgICAgICAgICB2YXIgc2NyaXB0ID0gZG9jLmNyZWF0ZUVsZW1lbnQoXCJzY3JpcHRcIik7XG4gICAgICAgICAgICBzY3JpcHQub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJ1bklmUHJlc2VudChoYW5kbGUpO1xuICAgICAgICAgICAgICAgIHNjcmlwdC5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBudWxsO1xuICAgICAgICAgICAgICAgIGh0bWwucmVtb3ZlQ2hpbGQoc2NyaXB0KTtcbiAgICAgICAgICAgICAgICBzY3JpcHQgPSBudWxsO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGh0bWwuYXBwZW5kQ2hpbGQoc2NyaXB0KTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpbnN0YWxsU2V0VGltZW91dEltcGxlbWVudGF0aW9uKCkge1xuICAgICAgICByZWdpc3RlckltbWVkaWF0ZSA9IGZ1bmN0aW9uKGhhbmRsZSkge1xuICAgICAgICAgICAgc2V0VGltZW91dChydW5JZlByZXNlbnQsIDAsIGhhbmRsZSk7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgLy8gSWYgc3VwcG9ydGVkLCB3ZSBzaG91bGQgYXR0YWNoIHRvIHRoZSBwcm90b3R5cGUgb2YgZ2xvYmFsLCBzaW5jZSB0aGF0IGlzIHdoZXJlIHNldFRpbWVvdXQgZXQgYWwuIGxpdmUuXG4gICAgdmFyIGF0dGFjaFRvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mICYmIE9iamVjdC5nZXRQcm90b3R5cGVPZihnbG9iYWwpO1xuICAgIGF0dGFjaFRvID0gYXR0YWNoVG8gJiYgYXR0YWNoVG8uc2V0VGltZW91dCA/IGF0dGFjaFRvIDogZ2xvYmFsO1xuXG4gICAgLy8gRG9uJ3QgZ2V0IGZvb2xlZCBieSBlLmcuIGJyb3dzZXJpZnkgZW52aXJvbm1lbnRzLlxuICAgIGlmICh7fS50b1N0cmluZy5jYWxsKGdsb2JhbC5wcm9jZXNzKSA9PT0gXCJbb2JqZWN0IHByb2Nlc3NdXCIpIHtcbiAgICAgICAgLy8gRm9yIE5vZGUuanMgYmVmb3JlIDAuOVxuICAgICAgICBpbnN0YWxsTmV4dFRpY2tJbXBsZW1lbnRhdGlvbigpO1xuXG4gICAgfSBlbHNlIGlmIChjYW5Vc2VQb3N0TWVzc2FnZSgpKSB7XG4gICAgICAgIC8vIEZvciBub24tSUUxMCBtb2Rlcm4gYnJvd3NlcnNcbiAgICAgICAgaW5zdGFsbFBvc3RNZXNzYWdlSW1wbGVtZW50YXRpb24oKTtcblxuICAgIH0gZWxzZSBpZiAoZ2xvYmFsLk1lc3NhZ2VDaGFubmVsKSB7XG4gICAgICAgIC8vIEZvciB3ZWIgd29ya2Vycywgd2hlcmUgc3VwcG9ydGVkXG4gICAgICAgIGluc3RhbGxNZXNzYWdlQ2hhbm5lbEltcGxlbWVudGF0aW9uKCk7XG5cbiAgICB9IGVsc2UgaWYgKGRvYyAmJiBcIm9ucmVhZHlzdGF0ZWNoYW5nZVwiIGluIGRvYy5jcmVhdGVFbGVtZW50KFwic2NyaXB0XCIpKSB7XG4gICAgICAgIC8vIEZvciBJRSA24oCTOFxuICAgICAgICBpbnN0YWxsUmVhZHlTdGF0ZUNoYW5nZUltcGxlbWVudGF0aW9uKCk7XG5cbiAgICB9IGVsc2Uge1xuICAgICAgICAvLyBGb3Igb2xkZXIgYnJvd3NlcnNcbiAgICAgICAgaW5zdGFsbFNldFRpbWVvdXRJbXBsZW1lbnRhdGlvbigpO1xuICAgIH1cblxuICAgIGF0dGFjaFRvLnNldEltbWVkaWF0ZSA9IHNldEltbWVkaWF0ZTtcbiAgICBhdHRhY2hUby5jbGVhckltbWVkaWF0ZSA9IGNsZWFySW1tZWRpYXRlO1xufSh0eXBlb2Ygc2VsZiA9PT0gXCJ1bmRlZmluZWRcIiA/IHR5cGVvZiBnbG9iYWwgPT09IFwidW5kZWZpbmVkXCIgPyB0aGlzIDogZ2xvYmFsIDogc2VsZikpO1xuIiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCBkZWZhdWx0RE9NIGZyb20gXCIuLi9tb2R1bGVzXCI7XHJcblxyXG5pbnRlcmZhY2UgTWFpbjFQcm9wcyB7fVxyXG5cclxuaW50ZXJmYWNlIE1haW4xU3RhdGUge31cclxuXHJcbi8vIGNvbnN0IERPTXJlbmRlciA9IFJlYWN0RE9NLnJlbmRlcjtcclxuXHJcbi8vIGNvbnN0IHsgY29ubmVjdCB9ID0gbGliUmVhY3RSZWR1eDtcclxuXHJcbmNsYXNzIE1haW4xIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PE1haW4xUHJvcHMsIE1haW4xU3RhdGU+IHtcclxuICByZW5kZXIoKSB7XHJcbiAgICByZXR1cm4gKFxyXG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cInBhZ2UtTWFpblwiPlxyXG4gICAgICAgIDxoMT5NYWluMTwvaDE+XHJcbiAgICAgICAgPGRlZmF1bHRET00uUHJpbWFyeUJ1dHRvbiB0ZXh0PVwiVGVzdCBMaWJyYXJ5IGltcG9ydCBmcm9tIExheW91dFwiIC8+XHJcbiAgICAgIDwvZGl2PlxyXG4gICAgKTtcclxuICB9XHJcbn1cclxuXHJcbi8vIGNvbnN0IG1hcFN0YXRlVG9Qcm9wcyA9IChzdGF0ZTogYW55KSA9PiB7XHJcbi8vICAgY29uc29sZS5sb2coc3RhdGUpO1xyXG4vLyAgIHJldHVybiB7XHJcbi8vICAgICB2YWx1ZTogc3RhdGUuVGVzdC52YWx1ZSxcclxuLy8gICB9O1xyXG4vLyB9O1xyXG5cclxuLy8gY29uc3QgTGF5b3V0Q29udGFpbmVyID0gTW9kdWxlQ29ubmVjdChtYXBTdGF0ZVRvUHJvcHMsIG51bGwpKE1haW4xKTtcclxuZXhwb3J0IGRlZmF1bHQgTWFpbjE7XHJcbiIsIi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXHJcblxyXG5QZXJtaXNzaW9uIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBhbmQvb3IgZGlzdHJpYnV0ZSB0aGlzIHNvZnR3YXJlIGZvciBhbnlcclxucHVycG9zZSB3aXRoIG9yIHdpdGhvdXQgZmVlIGlzIGhlcmVieSBncmFudGVkLlxyXG5cclxuVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiBBTkQgVEhFIEFVVEhPUiBESVNDTEFJTVMgQUxMIFdBUlJBTlRJRVMgV0lUSFxyXG5SRUdBUkQgVE8gVEhJUyBTT0ZUV0FSRSBJTkNMVURJTkcgQUxMIElNUExJRUQgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFlcclxuQU5EIEZJVE5FU1MuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1IgQkUgTElBQkxFIEZPUiBBTlkgU1BFQ0lBTCwgRElSRUNULFxyXG5JTkRJUkVDVCwgT1IgQ09OU0VRVUVOVElBTCBEQU1BR0VTIE9SIEFOWSBEQU1BR0VTIFdIQVRTT0VWRVIgUkVTVUxUSU5HIEZST01cclxuTE9TUyBPRiBVU0UsIERBVEEgT1IgUFJPRklUUywgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIE5FR0xJR0VOQ0UgT1JcclxuT1RIRVIgVE9SVElPVVMgQUNUSU9OLCBBUklTSU5HIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFVTRSBPUlxyXG5QRVJGT1JNQU5DRSBPRiBUSElTIFNPRlRXQVJFLlxyXG4qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xyXG4vKiBnbG9iYWwgUmVmbGVjdCwgUHJvbWlzZSAqL1xyXG5cclxudmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbihkLCBiKSB7XHJcbiAgICBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XHJcbiAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxyXG4gICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChiLCBwKSkgZFtwXSA9IGJbcF07IH07XHJcbiAgICByZXR1cm4gZXh0ZW5kU3RhdGljcyhkLCBiKTtcclxufTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2V4dGVuZHMoZCwgYikge1xyXG4gICAgaWYgKHR5cGVvZiBiICE9PSBcImZ1bmN0aW9uXCIgJiYgYiAhPT0gbnVsbClcclxuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2xhc3MgZXh0ZW5kcyB2YWx1ZSBcIiArIFN0cmluZyhiKSArIFwiIGlzIG5vdCBhIGNvbnN0cnVjdG9yIG9yIG51bGxcIik7XHJcbiAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xyXG4gICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XHJcbiAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XHJcbn1cclxuXHJcbmV4cG9ydCB2YXIgX19hc3NpZ24gPSBmdW5jdGlvbigpIHtcclxuICAgIF9fYXNzaWduID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiBfX2Fzc2lnbih0KSB7XHJcbiAgICAgICAgZm9yICh2YXIgcywgaSA9IDEsIG4gPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XHJcbiAgICAgICAgICAgIHMgPSBhcmd1bWVudHNbaV07XHJcbiAgICAgICAgICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSkgdFtwXSA9IHNbcF07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0O1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIF9fYXNzaWduLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3Jlc3QocywgZSkge1xyXG4gICAgdmFyIHQgPSB7fTtcclxuICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSAmJiBlLmluZGV4T2YocCkgPCAwKVxyXG4gICAgICAgIHRbcF0gPSBzW3BdO1xyXG4gICAgaWYgKHMgIT0gbnVsbCAmJiB0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyA9PT0gXCJmdW5jdGlvblwiKVxyXG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBwID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzKTsgaSA8IHAubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgaWYgKGUuaW5kZXhPZihwW2ldKSA8IDAgJiYgT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHMsIHBbaV0pKVxyXG4gICAgICAgICAgICAgICAgdFtwW2ldXSA9IHNbcFtpXV07XHJcbiAgICAgICAgfVxyXG4gICAgcmV0dXJuIHQ7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2RlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKSB7XHJcbiAgICB2YXIgYyA9IGFyZ3VtZW50cy5sZW5ndGgsIHIgPSBjIDwgMyA/IHRhcmdldCA6IGRlc2MgPT09IG51bGwgPyBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSkgOiBkZXNjLCBkO1xyXG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0LmRlY29yYXRlID09PSBcImZ1bmN0aW9uXCIpIHIgPSBSZWZsZWN0LmRlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKTtcclxuICAgIGVsc2UgZm9yICh2YXIgaSA9IGRlY29yYXRvcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIGlmIChkID0gZGVjb3JhdG9yc1tpXSkgciA9IChjIDwgMyA/IGQocikgOiBjID4gMyA/IGQodGFyZ2V0LCBrZXksIHIpIDogZCh0YXJnZXQsIGtleSkpIHx8IHI7XHJcbiAgICByZXR1cm4gYyA+IDMgJiYgciAmJiBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHIpLCByO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19wYXJhbShwYXJhbUluZGV4LCBkZWNvcmF0b3IpIHtcclxuICAgIHJldHVybiBmdW5jdGlvbiAodGFyZ2V0LCBrZXkpIHsgZGVjb3JhdG9yKHRhcmdldCwga2V5LCBwYXJhbUluZGV4KTsgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19tZXRhZGF0YShtZXRhZGF0YUtleSwgbWV0YWRhdGFWYWx1ZSkge1xyXG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0Lm1ldGFkYXRhID09PSBcImZ1bmN0aW9uXCIpIHJldHVybiBSZWZsZWN0Lm1ldGFkYXRhKG1ldGFkYXRhS2V5LCBtZXRhZGF0YVZhbHVlKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fYXdhaXRlcih0aGlzQXJnLCBfYXJndW1lbnRzLCBQLCBnZW5lcmF0b3IpIHtcclxuICAgIGZ1bmN0aW9uIGFkb3B0KHZhbHVlKSB7IHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIFAgPyB2YWx1ZSA6IG5ldyBQKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJlc29sdmUodmFsdWUpOyB9KTsgfVxyXG4gICAgcmV0dXJuIG5ldyAoUCB8fCAoUCA9IFByb21pc2UpKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgICAgZnVuY3Rpb24gZnVsZmlsbGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yLm5leHQodmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxyXG4gICAgICAgIGZ1bmN0aW9uIHJlamVjdGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yW1widGhyb3dcIl0odmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxyXG4gICAgICAgIGZ1bmN0aW9uIHN0ZXAocmVzdWx0KSB7IHJlc3VsdC5kb25lID8gcmVzb2x2ZShyZXN1bHQudmFsdWUpIDogYWRvcHQocmVzdWx0LnZhbHVlKS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpOyB9XHJcbiAgICAgICAgc3RlcCgoZ2VuZXJhdG9yID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pKS5uZXh0KCkpO1xyXG4gICAgfSk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2dlbmVyYXRvcih0aGlzQXJnLCBib2R5KSB7XHJcbiAgICB2YXIgXyA9IHsgbGFiZWw6IDAsIHNlbnQ6IGZ1bmN0aW9uKCkgeyBpZiAodFswXSAmIDEpIHRocm93IHRbMV07IHJldHVybiB0WzFdOyB9LCB0cnlzOiBbXSwgb3BzOiBbXSB9LCBmLCB5LCB0LCBnO1xyXG4gICAgcmV0dXJuIGcgPSB7IG5leHQ6IHZlcmIoMCksIFwidGhyb3dcIjogdmVyYigxKSwgXCJyZXR1cm5cIjogdmVyYigyKSB9LCB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgKGdbU3ltYm9sLml0ZXJhdG9yXSA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpczsgfSksIGc7XHJcbiAgICBmdW5jdGlvbiB2ZXJiKG4pIHsgcmV0dXJuIGZ1bmN0aW9uICh2KSB7IHJldHVybiBzdGVwKFtuLCB2XSk7IH07IH1cclxuICAgIGZ1bmN0aW9uIHN0ZXAob3ApIHtcclxuICAgICAgICBpZiAoZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkdlbmVyYXRvciBpcyBhbHJlYWR5IGV4ZWN1dGluZy5cIik7XHJcbiAgICAgICAgd2hpbGUgKF8pIHRyeSB7XHJcbiAgICAgICAgICAgIGlmIChmID0gMSwgeSAmJiAodCA9IG9wWzBdICYgMiA/IHlbXCJyZXR1cm5cIl0gOiBvcFswXSA/IHlbXCJ0aHJvd1wiXSB8fCAoKHQgPSB5W1wicmV0dXJuXCJdKSAmJiB0LmNhbGwoeSksIDApIDogeS5uZXh0KSAmJiAhKHQgPSB0LmNhbGwoeSwgb3BbMV0pKS5kb25lKSByZXR1cm4gdDtcclxuICAgICAgICAgICAgaWYgKHkgPSAwLCB0KSBvcCA9IFtvcFswXSAmIDIsIHQudmFsdWVdO1xyXG4gICAgICAgICAgICBzd2l0Y2ggKG9wWzBdKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDA6IGNhc2UgMTogdCA9IG9wOyBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgNDogXy5sYWJlbCsrOyByZXR1cm4geyB2YWx1ZTogb3BbMV0sIGRvbmU6IGZhbHNlIH07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDU6IF8ubGFiZWwrKzsgeSA9IG9wWzFdOyBvcCA9IFswXTsgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDc6IG9wID0gXy5vcHMucG9wKCk7IF8udHJ5cy5wb3AoKTsgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghKHQgPSBfLnRyeXMsIHQgPSB0Lmxlbmd0aCA+IDAgJiYgdFt0Lmxlbmd0aCAtIDFdKSAmJiAob3BbMF0gPT09IDYgfHwgb3BbMF0gPT09IDIpKSB7IF8gPSAwOyBjb250aW51ZTsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gMyAmJiAoIXQgfHwgKG9wWzFdID4gdFswXSAmJiBvcFsxXSA8IHRbM10pKSkgeyBfLmxhYmVsID0gb3BbMV07IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSA2ICYmIF8ubGFiZWwgPCB0WzFdKSB7IF8ubGFiZWwgPSB0WzFdOyB0ID0gb3A7IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHQgJiYgXy5sYWJlbCA8IHRbMl0pIHsgXy5sYWJlbCA9IHRbMl07IF8ub3BzLnB1c2gob3ApOyBicmVhazsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0WzJdKSBfLm9wcy5wb3AoKTtcclxuICAgICAgICAgICAgICAgICAgICBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIG9wID0gYm9keS5jYWxsKHRoaXNBcmcsIF8pO1xyXG4gICAgICAgIH0gY2F0Y2ggKGUpIHsgb3AgPSBbNiwgZV07IHkgPSAwOyB9IGZpbmFsbHkgeyBmID0gdCA9IDA7IH1cclxuICAgICAgICBpZiAob3BbMF0gJiA1KSB0aHJvdyBvcFsxXTsgcmV0dXJuIHsgdmFsdWU6IG9wWzBdID8gb3BbMV0gOiB2b2lkIDAsIGRvbmU6IHRydWUgfTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IHZhciBfX2NyZWF0ZUJpbmRpbmcgPSBPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XHJcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xyXG4gICAgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG0sIGspO1xyXG4gICAgaWYgKCFkZXNjIHx8IChcImdldFwiIGluIGRlc2MgPyAhbS5fX2VzTW9kdWxlIDogZGVzYy53cml0YWJsZSB8fCBkZXNjLmNvbmZpZ3VyYWJsZSkpIHtcclxuICAgICAgICBkZXNjID0geyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbVtrXTsgfSB9O1xyXG4gICAgfVxyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCBkZXNjKTtcclxufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcclxuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XHJcbiAgICBvW2syXSA9IG1ba107XHJcbn0pO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fZXhwb3J0U3RhcihtLCBvKSB7XHJcbiAgICBmb3IgKHZhciBwIGluIG0pIGlmIChwICE9PSBcImRlZmF1bHRcIiAmJiAhT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG8sIHApKSBfX2NyZWF0ZUJpbmRpbmcobywgbSwgcCk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3ZhbHVlcyhvKSB7XHJcbiAgICB2YXIgcyA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBTeW1ib2wuaXRlcmF0b3IsIG0gPSBzICYmIG9bc10sIGkgPSAwO1xyXG4gICAgaWYgKG0pIHJldHVybiBtLmNhbGwobyk7XHJcbiAgICBpZiAobyAmJiB0eXBlb2Ygby5sZW5ndGggPT09IFwibnVtYmVyXCIpIHJldHVybiB7XHJcbiAgICAgICAgbmV4dDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpZiAobyAmJiBpID49IG8ubGVuZ3RoKSBvID0gdm9pZCAwO1xyXG4gICAgICAgICAgICByZXR1cm4geyB2YWx1ZTogbyAmJiBvW2krK10sIGRvbmU6ICFvIH07XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIHRocm93IG5ldyBUeXBlRXJyb3IocyA/IFwiT2JqZWN0IGlzIG5vdCBpdGVyYWJsZS5cIiA6IFwiU3ltYm9sLml0ZXJhdG9yIGlzIG5vdCBkZWZpbmVkLlwiKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fcmVhZChvLCBuKSB7XHJcbiAgICB2YXIgbSA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvW1N5bWJvbC5pdGVyYXRvcl07XHJcbiAgICBpZiAoIW0pIHJldHVybiBvO1xyXG4gICAgdmFyIGkgPSBtLmNhbGwobyksIHIsIGFyID0gW10sIGU7XHJcbiAgICB0cnkge1xyXG4gICAgICAgIHdoaWxlICgobiA9PT0gdm9pZCAwIHx8IG4tLSA+IDApICYmICEociA9IGkubmV4dCgpKS5kb25lKSBhci5wdXNoKHIudmFsdWUpO1xyXG4gICAgfVxyXG4gICAgY2F0Y2ggKGVycm9yKSB7IGUgPSB7IGVycm9yOiBlcnJvciB9OyB9XHJcbiAgICBmaW5hbGx5IHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBpZiAociAmJiAhci5kb25lICYmIChtID0gaVtcInJldHVyblwiXSkpIG0uY2FsbChpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZmluYWxseSB7IGlmIChlKSB0aHJvdyBlLmVycm9yOyB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gYXI7XHJcbn1cclxuXHJcbi8qKiBAZGVwcmVjYXRlZCAqL1xyXG5leHBvcnQgZnVuY3Rpb24gX19zcHJlYWQoKSB7XHJcbiAgICBmb3IgKHZhciBhciA9IFtdLCBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKylcclxuICAgICAgICBhciA9IGFyLmNvbmNhdChfX3JlYWQoYXJndW1lbnRzW2ldKSk7XHJcbiAgICByZXR1cm4gYXI7XHJcbn1cclxuXHJcbi8qKiBAZGVwcmVjYXRlZCAqL1xyXG5leHBvcnQgZnVuY3Rpb24gX19zcHJlYWRBcnJheXMoKSB7XHJcbiAgICBmb3IgKHZhciBzID0gMCwgaSA9IDAsIGlsID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IGlsOyBpKyspIHMgKz0gYXJndW1lbnRzW2ldLmxlbmd0aDtcclxuICAgIGZvciAodmFyIHIgPSBBcnJheShzKSwgayA9IDAsIGkgPSAwOyBpIDwgaWw7IGkrKylcclxuICAgICAgICBmb3IgKHZhciBhID0gYXJndW1lbnRzW2ldLCBqID0gMCwgamwgPSBhLmxlbmd0aDsgaiA8IGpsOyBqKyssIGsrKylcclxuICAgICAgICAgICAgcltrXSA9IGFbal07XHJcbiAgICByZXR1cm4gcjtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fc3ByZWFkQXJyYXkodG8sIGZyb20sIHBhY2spIHtcclxuICAgIGlmIChwYWNrIHx8IGFyZ3VtZW50cy5sZW5ndGggPT09IDIpIGZvciAodmFyIGkgPSAwLCBsID0gZnJvbS5sZW5ndGgsIGFyOyBpIDwgbDsgaSsrKSB7XHJcbiAgICAgICAgaWYgKGFyIHx8ICEoaSBpbiBmcm9tKSkge1xyXG4gICAgICAgICAgICBpZiAoIWFyKSBhciA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGZyb20sIDAsIGkpO1xyXG4gICAgICAgICAgICBhcltpXSA9IGZyb21baV07XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRvLmNvbmNhdChhciB8fCBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChmcm9tKSk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2F3YWl0KHYpIHtcclxuICAgIHJldHVybiB0aGlzIGluc3RhbmNlb2YgX19hd2FpdCA/ICh0aGlzLnYgPSB2LCB0aGlzKSA6IG5ldyBfX2F3YWl0KHYpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19hc3luY0dlbmVyYXRvcih0aGlzQXJnLCBfYXJndW1lbnRzLCBnZW5lcmF0b3IpIHtcclxuICAgIGlmICghU3ltYm9sLmFzeW5jSXRlcmF0b3IpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTeW1ib2wuYXN5bmNJdGVyYXRvciBpcyBub3QgZGVmaW5lZC5cIik7XHJcbiAgICB2YXIgZyA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSwgaSwgcSA9IFtdO1xyXG4gICAgcmV0dXJuIGkgPSB7fSwgdmVyYihcIm5leHRcIiksIHZlcmIoXCJ0aHJvd1wiKSwgdmVyYihcInJldHVyblwiKSwgaVtTeW1ib2wuYXN5bmNJdGVyYXRvcl0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9LCBpO1xyXG4gICAgZnVuY3Rpb24gdmVyYihuKSB7IGlmIChnW25dKSBpW25dID0gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChhLCBiKSB7IHEucHVzaChbbiwgdiwgYSwgYl0pID4gMSB8fCByZXN1bWUobiwgdik7IH0pOyB9OyB9XHJcbiAgICBmdW5jdGlvbiByZXN1bWUobiwgdikgeyB0cnkgeyBzdGVwKGdbbl0odikpOyB9IGNhdGNoIChlKSB7IHNldHRsZShxWzBdWzNdLCBlKTsgfSB9XHJcbiAgICBmdW5jdGlvbiBzdGVwKHIpIHsgci52YWx1ZSBpbnN0YW5jZW9mIF9fYXdhaXQgPyBQcm9taXNlLnJlc29sdmUoci52YWx1ZS52KS50aGVuKGZ1bGZpbGwsIHJlamVjdCkgOiBzZXR0bGUocVswXVsyXSwgcik7IH1cclxuICAgIGZ1bmN0aW9uIGZ1bGZpbGwodmFsdWUpIHsgcmVzdW1lKFwibmV4dFwiLCB2YWx1ZSk7IH1cclxuICAgIGZ1bmN0aW9uIHJlamVjdCh2YWx1ZSkgeyByZXN1bWUoXCJ0aHJvd1wiLCB2YWx1ZSk7IH1cclxuICAgIGZ1bmN0aW9uIHNldHRsZShmLCB2KSB7IGlmIChmKHYpLCBxLnNoaWZ0KCksIHEubGVuZ3RoKSByZXN1bWUocVswXVswXSwgcVswXVsxXSk7IH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fYXN5bmNEZWxlZ2F0b3Iobykge1xyXG4gICAgdmFyIGksIHA7XHJcbiAgICByZXR1cm4gaSA9IHt9LCB2ZXJiKFwibmV4dFwiKSwgdmVyYihcInRocm93XCIsIGZ1bmN0aW9uIChlKSB7IHRocm93IGU7IH0pLCB2ZXJiKFwicmV0dXJuXCIpLCBpW1N5bWJvbC5pdGVyYXRvcl0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9LCBpO1xyXG4gICAgZnVuY3Rpb24gdmVyYihuLCBmKSB7IGlbbl0gPSBvW25dID8gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIChwID0gIXApID8geyB2YWx1ZTogX19hd2FpdChvW25dKHYpKSwgZG9uZTogbiA9PT0gXCJyZXR1cm5cIiB9IDogZiA/IGYodikgOiB2OyB9IDogZjsgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19hc3luY1ZhbHVlcyhvKSB7XHJcbiAgICBpZiAoIVN5bWJvbC5hc3luY0l0ZXJhdG9yKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3ltYm9sLmFzeW5jSXRlcmF0b3IgaXMgbm90IGRlZmluZWQuXCIpO1xyXG4gICAgdmFyIG0gPSBvW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSwgaTtcclxuICAgIHJldHVybiBtID8gbS5jYWxsKG8pIDogKG8gPSB0eXBlb2YgX192YWx1ZXMgPT09IFwiZnVuY3Rpb25cIiA/IF9fdmFsdWVzKG8pIDogb1tTeW1ib2wuaXRlcmF0b3JdKCksIGkgPSB7fSwgdmVyYihcIm5leHRcIiksIHZlcmIoXCJ0aHJvd1wiKSwgdmVyYihcInJldHVyblwiKSwgaVtTeW1ib2wuYXN5bmNJdGVyYXRvcl0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9LCBpKTtcclxuICAgIGZ1bmN0aW9uIHZlcmIobikgeyBpW25dID0gb1tuXSAmJiBmdW5jdGlvbiAodikgeyByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgeyB2ID0gb1tuXSh2KSwgc2V0dGxlKHJlc29sdmUsIHJlamVjdCwgdi5kb25lLCB2LnZhbHVlKTsgfSk7IH07IH1cclxuICAgIGZ1bmN0aW9uIHNldHRsZShyZXNvbHZlLCByZWplY3QsIGQsIHYpIHsgUHJvbWlzZS5yZXNvbHZlKHYpLnRoZW4oZnVuY3Rpb24odikgeyByZXNvbHZlKHsgdmFsdWU6IHYsIGRvbmU6IGQgfSk7IH0sIHJlamVjdCk7IH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fbWFrZVRlbXBsYXRlT2JqZWN0KGNvb2tlZCwgcmF3KSB7XHJcbiAgICBpZiAoT2JqZWN0LmRlZmluZVByb3BlcnR5KSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjb29rZWQsIFwicmF3XCIsIHsgdmFsdWU6IHJhdyB9KTsgfSBlbHNlIHsgY29va2VkLnJhdyA9IHJhdzsgfVxyXG4gICAgcmV0dXJuIGNvb2tlZDtcclxufTtcclxuXHJcbnZhciBfX3NldE1vZHVsZURlZmF1bHQgPSBPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIHYpIHtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBcImRlZmF1bHRcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdiB9KTtcclxufSkgOiBmdW5jdGlvbihvLCB2KSB7XHJcbiAgICBvW1wiZGVmYXVsdFwiXSA9IHY7XHJcbn07XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19pbXBvcnRTdGFyKG1vZCkge1xyXG4gICAgaWYgKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgcmV0dXJuIG1vZDtcclxuICAgIHZhciByZXN1bHQgPSB7fTtcclxuICAgIGlmIChtb2QgIT0gbnVsbCkgZm9yICh2YXIgayBpbiBtb2QpIGlmIChrICE9PSBcImRlZmF1bHRcIiAmJiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobW9kLCBrKSkgX19jcmVhdGVCaW5kaW5nKHJlc3VsdCwgbW9kLCBrKTtcclxuICAgIF9fc2V0TW9kdWxlRGVmYXVsdChyZXN1bHQsIG1vZCk7XHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19pbXBvcnREZWZhdWx0KG1vZCkge1xyXG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBkZWZhdWx0OiBtb2QgfTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fY2xhc3NQcml2YXRlRmllbGRHZXQocmVjZWl2ZXIsIHN0YXRlLCBraW5kLCBmKSB7XHJcbiAgICBpZiAoa2luZCA9PT0gXCJhXCIgJiYgIWYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJQcml2YXRlIGFjY2Vzc29yIHdhcyBkZWZpbmVkIHdpdGhvdXQgYSBnZXR0ZXJcIik7XHJcbiAgICBpZiAodHlwZW9mIHN0YXRlID09PSBcImZ1bmN0aW9uXCIgPyByZWNlaXZlciAhPT0gc3RhdGUgfHwgIWYgOiAhc3RhdGUuaGFzKHJlY2VpdmVyKSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCByZWFkIHByaXZhdGUgbWVtYmVyIGZyb20gYW4gb2JqZWN0IHdob3NlIGNsYXNzIGRpZCBub3QgZGVjbGFyZSBpdFwiKTtcclxuICAgIHJldHVybiBraW5kID09PSBcIm1cIiA/IGYgOiBraW5kID09PSBcImFcIiA/IGYuY2FsbChyZWNlaXZlcikgOiBmID8gZi52YWx1ZSA6IHN0YXRlLmdldChyZWNlaXZlcik7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0KHJlY2VpdmVyLCBzdGF0ZSwgdmFsdWUsIGtpbmQsIGYpIHtcclxuICAgIGlmIChraW5kID09PSBcIm1cIikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlByaXZhdGUgbWV0aG9kIGlzIG5vdCB3cml0YWJsZVwiKTtcclxuICAgIGlmIChraW5kID09PSBcImFcIiAmJiAhZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlByaXZhdGUgYWNjZXNzb3Igd2FzIGRlZmluZWQgd2l0aG91dCBhIHNldHRlclwiKTtcclxuICAgIGlmICh0eXBlb2Ygc3RhdGUgPT09IFwiZnVuY3Rpb25cIiA/IHJlY2VpdmVyICE9PSBzdGF0ZSB8fCAhZiA6ICFzdGF0ZS5oYXMocmVjZWl2ZXIpKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IHdyaXRlIHByaXZhdGUgbWVtYmVyIHRvIGFuIG9iamVjdCB3aG9zZSBjbGFzcyBkaWQgbm90IGRlY2xhcmUgaXRcIik7XHJcbiAgICByZXR1cm4gKGtpbmQgPT09IFwiYVwiID8gZi5jYWxsKHJlY2VpdmVyLCB2YWx1ZSkgOiBmID8gZi52YWx1ZSA9IHZhbHVlIDogc3RhdGUuc2V0KHJlY2VpdmVyLCB2YWx1ZSkpLCB2YWx1ZTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fY2xhc3NQcml2YXRlRmllbGRJbihzdGF0ZSwgcmVjZWl2ZXIpIHtcclxuICAgIGlmIChyZWNlaXZlciA9PT0gbnVsbCB8fCAodHlwZW9mIHJlY2VpdmVyICE9PSBcIm9iamVjdFwiICYmIHR5cGVvZiByZWNlaXZlciAhPT0gXCJmdW5jdGlvblwiKSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCB1c2UgJ2luJyBvcGVyYXRvciBvbiBub24tb2JqZWN0XCIpO1xyXG4gICAgcmV0dXJuIHR5cGVvZiBzdGF0ZSA9PT0gXCJmdW5jdGlvblwiID8gcmVjZWl2ZXIgPT09IHN0YXRlIDogc3RhdGUuaGFzKHJlY2VpdmVyKTtcclxufVxyXG4iLCJleHBvcnQgdmFyIF9pc1NTUiA9IGZhbHNlO1xuLyoqXG4gKiBIZWxwZXIgdG8gc2V0IHNzciBtb2RlIHRvIHNpbXVsYXRlIG5vIHdpbmRvdyBvYmplY3QgcmV0dXJuZWQgZnJvbSBnZXRXaW5kb3cgaGVscGVyLlxuICpcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNldFNTUihpc0VuYWJsZWQpIHtcbiAgICBfaXNTU1IgPSBpc0VuYWJsZWQ7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zZXRTU1IuanMubWFwIiwiaW1wb3J0IHsgX2lzU1NSIH0gZnJvbSAnLi9zZXRTU1InO1xudmFyIF93aW5kb3cgPSB1bmRlZmluZWQ7XG4vLyBOb3RlOiBBY2Nlc3NpbmcgXCJ3aW5kb3dcIiBpbiBJRTExIGlzIHNvbWV3aGF0IGV4cGVuc2l2ZSwgYW5kIGNhbGxpbmcgXCJ0eXBlb2Ygd2luZG93XCJcbi8vIGhpdHMgYSBtZW1vcnkgbGVhaywgd2hlcmVhcyBhbGlhc2luZyBpdCBhbmQgY2FsbGluZyBcInR5cGVvZiBfd2luZG93XCIgZG9lcyBub3QuXG4vLyBDYWNoaW5nIHRoZSB3aW5kb3cgdmFsdWUgYXQgdGhlIGZpbGUgc2NvcGUgbGV0cyB1cyBtaW5pbWl6ZSB0aGUgaW1wYWN0LlxudHJ5IHtcbiAgICBfd2luZG93ID0gd2luZG93O1xufVxuY2F0Y2ggKGUpIHtcbiAgICAvKiBuby1vcCAqL1xufVxuLyoqXG4gKiBIZWxwZXIgdG8gZ2V0IHRoZSB3aW5kb3cgb2JqZWN0LiBUaGUgaGVscGVyIHdpbGwgbWFrZSBzdXJlIHRvIHVzZSBhIGNhY2hlZCB2YXJpYWJsZVxuICogb2YgXCJ3aW5kb3dcIiwgdG8gYXZvaWQgb3ZlcmhlYWQgYW5kIG1lbW9yeSBsZWFrcyBpbiBJRTExLiBOb3RlIHRoYXQgaW4gcG9wdXAgc2NlbmFyaW9zIHRoZVxuICogd2luZG93IG9iamVjdCB3b24ndCBtYXRjaCB0aGUgXCJnbG9iYWxcIiB3aW5kb3cgb2JqZWN0LCBhbmQgZm9yIHRoZXNlIHNjZW5hcmlvcywgeW91IHNob3VsZFxuICogcGFzcyBpbiBhbiBlbGVtZW50IGhvc3RlZCB3aXRoaW4gdGhlIHBvcHVwLlxuICpcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldFdpbmRvdyhyb290RWxlbWVudCkge1xuICAgIGlmIChfaXNTU1IgfHwgdHlwZW9mIF93aW5kb3cgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICB2YXIgZWwgPSByb290RWxlbWVudDtcbiAgICAgICAgcmV0dXJuIGVsICYmIGVsLm93bmVyRG9jdW1lbnQgJiYgZWwub3duZXJEb2N1bWVudC5kZWZhdWx0VmlldyA/IGVsLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXcgOiBfd2luZG93O1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWdldFdpbmRvdy5qcy5tYXAiLCJpbXBvcnQgeyBnZXRXaW5kb3cgfSBmcm9tICcuL2RvbS9nZXRXaW5kb3cnO1xuLyoqXG4gKiBCdWdzIG9mdGVuIGFwcGVhciBpbiBhc3luYyBjb2RlIHdoZW4gc3R1ZmYgZ2V0cyBkaXNwb3NlZCwgYnV0IGFzeW5jIG9wZXJhdGlvbnMgZG9uJ3QgZ2V0IGNhbmNlbGVkLlxuICogVGhpcyBBc3luYyBoZWxwZXIgY2xhc3Mgc29sdmVzIHRoZXNlIGlzc3VlcyBieSB0eWluZyBhc3luYyBjb2RlIHRvIHRoZSBsaWZldGltZSBvZiBhIGRpc3Bvc2FibGUgb2JqZWN0LlxuICpcbiAqIFVzYWdlOiBBbnl0aGluZyBjbGFzcyBleHRlbmRpbmcgZnJvbSBCYXNlTW9kZWwgY2FuIGFjY2VzcyB0aGlzIGhlbHBlciB2aWEgdGhpcy5hc3luYy4gT3RoZXJ3aXNlIGNyZWF0ZSBhXG4gKiBuZXcgaW5zdGFuY2Ugb2YgdGhlIGNsYXNzIGFuZCByZW1lbWJlciB0byBjYWxsIGRpc3Bvc2UoKSBkdXJpbmcgeW91ciBjb2RlJ3MgZGlzcG9zZSBoYW5kbGVyLlxuICpcbiAqIEBwdWJsaWNcbiAqL1xudmFyIEFzeW5jID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgZnVuY3Rpb24gQXN5bmMocGFyZW50LCBvbkVycm9yKSB7XG4gICAgICAgIHRoaXMuX3RpbWVvdXRJZHMgPSBudWxsO1xuICAgICAgICB0aGlzLl9pbW1lZGlhdGVJZHMgPSBudWxsO1xuICAgICAgICB0aGlzLl9pbnRlcnZhbElkcyA9IG51bGw7XG4gICAgICAgIHRoaXMuX2FuaW1hdGlvbkZyYW1lSWRzID0gbnVsbDtcbiAgICAgICAgdGhpcy5faXNEaXNwb3NlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLl9wYXJlbnQgPSBwYXJlbnQgfHwgbnVsbDtcbiAgICAgICAgdGhpcy5fb25FcnJvckhhbmRsZXIgPSBvbkVycm9yO1xuICAgICAgICB0aGlzLl9ub29wID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgLyogZG8gbm90aGluZyAqL1xuICAgICAgICB9O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBEaXNwb3NlIGZ1bmN0aW9uLCBjbGVhcnMgYWxsIGFzeW5jIG9wZXJhdGlvbnMuXG4gICAgICovXG4gICAgQXN5bmMucHJvdG90eXBlLmRpc3Bvc2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBpZDtcbiAgICAgICAgdGhpcy5faXNEaXNwb3NlZCA9IHRydWU7XG4gICAgICAgIHRoaXMuX3BhcmVudCA9IG51bGw7XG4gICAgICAgIC8vIENsZWFyIHRpbWVvdXRzLlxuICAgICAgICBpZiAodGhpcy5fdGltZW91dElkcykge1xuICAgICAgICAgICAgZm9yIChpZCBpbiB0aGlzLl90aW1lb3V0SWRzKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX3RpbWVvdXRJZHMuaGFzT3duUHJvcGVydHkoaWQpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2xlYXJUaW1lb3V0KHBhcnNlSW50KGlkLCAxMCkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuX3RpbWVvdXRJZHMgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIC8vIENsZWFyIGltbWVkaWF0ZXMuXG4gICAgICAgIGlmICh0aGlzLl9pbW1lZGlhdGVJZHMpIHtcbiAgICAgICAgICAgIGZvciAoaWQgaW4gdGhpcy5faW1tZWRpYXRlSWRzKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX2ltbWVkaWF0ZUlkcy5oYXNPd25Qcm9wZXJ0eShpZCkpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jbGVhckltbWVkaWF0ZShwYXJzZUludChpZCwgMTApKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLl9pbW1lZGlhdGVJZHMgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIC8vIENsZWFyIGludGVydmFscy5cbiAgICAgICAgaWYgKHRoaXMuX2ludGVydmFsSWRzKSB7XG4gICAgICAgICAgICBmb3IgKGlkIGluIHRoaXMuX2ludGVydmFsSWRzKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX2ludGVydmFsSWRzLmhhc093blByb3BlcnR5KGlkKSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmNsZWFySW50ZXJ2YWwocGFyc2VJbnQoaWQsIDEwKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5faW50ZXJ2YWxJZHMgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIC8vIENsZWFyIGFuaW1hdGlvbiBmcmFtZXMuXG4gICAgICAgIGlmICh0aGlzLl9hbmltYXRpb25GcmFtZUlkcykge1xuICAgICAgICAgICAgZm9yIChpZCBpbiB0aGlzLl9hbmltYXRpb25GcmFtZUlkcykge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9hbmltYXRpb25GcmFtZUlkcy5oYXNPd25Qcm9wZXJ0eShpZCkpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jYW5jZWxBbmltYXRpb25GcmFtZShwYXJzZUludChpZCwgMTApKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLl9hbmltYXRpb25GcmFtZUlkcyA9IG51bGw7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFNldFRpbWVvdXQgb3ZlcnJpZGUsIHdoaWNoIHdpbGwgYXV0byBjYW5jZWwgdGhlIHRpbWVvdXQgZHVyaW5nIGRpc3Bvc2UuXG4gICAgICogQHBhcmFtIGNhbGxiYWNrIC0gQ2FsbGJhY2sgdG8gZXhlY3V0ZS5cbiAgICAgKiBAcGFyYW0gZHVyYXRpb24gLSBEdXJhdGlvbiBpbiBtaWxsaXNlY29uZHMuXG4gICAgICogQHJldHVybnMgVGhlIHNldFRpbWVvdXQgaWQuXG4gICAgICovXG4gICAgQXN5bmMucHJvdG90eXBlLnNldFRpbWVvdXQgPSBmdW5jdGlvbiAoY2FsbGJhY2ssIGR1cmF0aW9uKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHZhciB0aW1lb3V0SWQgPSAwO1xuICAgICAgICBpZiAoIXRoaXMuX2lzRGlzcG9zZWQpIHtcbiAgICAgICAgICAgIGlmICghdGhpcy5fdGltZW91dElkcykge1xuICAgICAgICAgICAgICAgIHRoaXMuX3RpbWVvdXRJZHMgPSB7fTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRpbWVvdXRJZCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIC8vIFRpbWUgdG8gZXhlY3V0ZSB0aGUgdGltZW91dCwgZW5xdWV1ZSBpdCBhcyBhIGZvcmVncm91bmQgdGFzayB0byBiZSBleGVjdXRlZC5cbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAvLyBOb3cgZGVsZXRlIHRoZSByZWNvcmQgYW5kIGNhbGwgdGhlIGNhbGxiYWNrLlxuICAgICAgICAgICAgICAgICAgICBpZiAoX3RoaXMuX3RpbWVvdXRJZHMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBfdGhpcy5fdGltZW91dElkc1t0aW1lb3V0SWRdO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrLmFwcGx5KF90aGlzLl9wYXJlbnQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy5fbG9nRXJyb3IoZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgZHVyYXRpb24pO1xuICAgICAgICAgICAgdGhpcy5fdGltZW91dElkc1t0aW1lb3V0SWRdID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGltZW91dElkO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQ2xlYXJzIHRoZSB0aW1lb3V0LlxuICAgICAqIEBwYXJhbSBpZCAtIElkIHRvIGNhbmNlbC5cbiAgICAgKi9cbiAgICBBc3luYy5wcm90b3R5cGUuY2xlYXJUaW1lb3V0ID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgICAgIGlmICh0aGlzLl90aW1lb3V0SWRzICYmIHRoaXMuX3RpbWVvdXRJZHNbaWRdKSB7XG4gICAgICAgICAgICBjbGVhclRpbWVvdXQoaWQpO1xuICAgICAgICAgICAgZGVsZXRlIHRoaXMuX3RpbWVvdXRJZHNbaWRdO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBTZXRJbW1lZGlhdGUgb3ZlcnJpZGUsIHdoaWNoIHdpbGwgYXV0byBjYW5jZWwgdGhlIGltbWVkaWF0ZSBkdXJpbmcgZGlzcG9zZS5cbiAgICAgKiBAcGFyYW0gY2FsbGJhY2sgLSBDYWxsYmFjayB0byBleGVjdXRlLlxuICAgICAqIEBwYXJhbSB0YXJnZXRFbGVtZW50IC0gT3B0aW9uYWwgdGFyZ2V0IGVsZW1lbnQgdG8gdXNlIGZvciBpZGVudGlmeWluZyB0aGUgY29ycmVjdCB3aW5kb3cuXG4gICAgICogQHJldHVybnMgVGhlIHNldFRpbWVvdXQgaWQuXG4gICAgICovXG4gICAgQXN5bmMucHJvdG90eXBlLnNldEltbWVkaWF0ZSA9IGZ1bmN0aW9uIChjYWxsYmFjaywgdGFyZ2V0RWxlbWVudCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB2YXIgaW1tZWRpYXRlSWQgPSAwO1xuICAgICAgICB2YXIgd2luID0gZ2V0V2luZG93KHRhcmdldEVsZW1lbnQpO1xuICAgICAgICBpZiAoIXRoaXMuX2lzRGlzcG9zZWQpIHtcbiAgICAgICAgICAgIGlmICghdGhpcy5faW1tZWRpYXRlSWRzKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5faW1tZWRpYXRlSWRzID0ge307XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgc2V0SW1tZWRpYXRlQ2FsbGJhY2sgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgLy8gVGltZSB0byBleGVjdXRlIHRoZSB0aW1lb3V0LCBlbnF1ZXVlIGl0IGFzIGEgZm9yZWdyb3VuZCB0YXNrIHRvIGJlIGV4ZWN1dGVkLlxuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIE5vdyBkZWxldGUgdGhlIHJlY29yZCBhbmQgY2FsbCB0aGUgY2FsbGJhY2suXG4gICAgICAgICAgICAgICAgICAgIGlmIChfdGhpcy5faW1tZWRpYXRlSWRzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgX3RoaXMuX2ltbWVkaWF0ZUlkc1tpbW1lZGlhdGVJZF07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2suYXBwbHkoX3RoaXMuX3BhcmVudCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLl9sb2dFcnJvcihlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgaW1tZWRpYXRlSWQgPSB3aW4uc2V0VGltZW91dChzZXRJbW1lZGlhdGVDYWxsYmFjaywgMCk7XG4gICAgICAgICAgICB0aGlzLl9pbW1lZGlhdGVJZHNbaW1tZWRpYXRlSWRdID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaW1tZWRpYXRlSWQ7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBDbGVhcnMgdGhlIGltbWVkaWF0ZS5cbiAgICAgKiBAcGFyYW0gaWQgLSBJZCB0byBjYW5jZWwuXG4gICAgICogQHBhcmFtIHRhcmdldEVsZW1lbnQgLSBPcHRpb25hbCB0YXJnZXQgZWxlbWVudCB0byB1c2UgZm9yIGlkZW50aWZ5aW5nIHRoZSBjb3JyZWN0IHdpbmRvdy5cbiAgICAgKi9cbiAgICBBc3luYy5wcm90b3R5cGUuY2xlYXJJbW1lZGlhdGUgPSBmdW5jdGlvbiAoaWQsIHRhcmdldEVsZW1lbnQpIHtcbiAgICAgICAgdmFyIHdpbiA9IGdldFdpbmRvdyh0YXJnZXRFbGVtZW50KTtcbiAgICAgICAgaWYgKHRoaXMuX2ltbWVkaWF0ZUlkcyAmJiB0aGlzLl9pbW1lZGlhdGVJZHNbaWRdKSB7XG4gICAgICAgICAgICB3aW4uY2xlYXJUaW1lb3V0KGlkKTtcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLl9pbW1lZGlhdGVJZHNbaWRdO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBTZXRJbnRlcnZhbCBvdmVycmlkZSwgd2hpY2ggd2lsbCBhdXRvIGNhbmNlbCB0aGUgdGltZW91dCBkdXJpbmcgZGlzcG9zZS5cbiAgICAgKiBAcGFyYW0gY2FsbGJhY2sgLSBDYWxsYmFjayB0byBleGVjdXRlLlxuICAgICAqIEBwYXJhbSBkdXJhdGlvbiAtIER1cmF0aW9uIGluIG1pbGxpc2Vjb25kcy5cbiAgICAgKiBAcmV0dXJucyBUaGUgc2V0VGltZW91dCBpZC5cbiAgICAgKi9cbiAgICBBc3luYy5wcm90b3R5cGUuc2V0SW50ZXJ2YWwgPSBmdW5jdGlvbiAoY2FsbGJhY2ssIGR1cmF0aW9uKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHZhciBpbnRlcnZhbElkID0gMDtcbiAgICAgICAgaWYgKCF0aGlzLl9pc0Rpc3Bvc2VkKSB7XG4gICAgICAgICAgICBpZiAoIXRoaXMuX2ludGVydmFsSWRzKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5faW50ZXJ2YWxJZHMgPSB7fTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGludGVydmFsSWQgPSBzZXRJbnRlcnZhbChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgLy8gVGltZSB0byBleGVjdXRlIHRoZSBpbnRlcnZhbCBjYWxsYmFjaywgZW5xdWV1ZSBpdCBhcyBhIGZvcmVncm91bmQgdGFzayB0byBiZSBleGVjdXRlZC5cbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBjYWxsYmFjay5hcHBseShfdGhpcy5fcGFyZW50KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuX2xvZ0Vycm9yKGUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sIGR1cmF0aW9uKTtcbiAgICAgICAgICAgIHRoaXMuX2ludGVydmFsSWRzW2ludGVydmFsSWRdID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaW50ZXJ2YWxJZDtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIENsZWFycyB0aGUgaW50ZXJ2YWwuXG4gICAgICogQHBhcmFtIGlkIC0gSWQgdG8gY2FuY2VsLlxuICAgICAqL1xuICAgIEFzeW5jLnByb3RvdHlwZS5jbGVhckludGVydmFsID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgICAgIGlmICh0aGlzLl9pbnRlcnZhbElkcyAmJiB0aGlzLl9pbnRlcnZhbElkc1tpZF0pIHtcbiAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwoaWQpO1xuICAgICAgICAgICAgZGVsZXRlIHRoaXMuX2ludGVydmFsSWRzW2lkXTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQsIHdoZW4gZXhlY3V0ZWQsIHdpbGwgb25seSBjYWxsIHRoZSBmdW5jIGZ1bmN0aW9uIGF0IG1vc3Qgb25jZSBwZXJcbiAgICAgKiBldmVyeSB3YWl0IG1pbGxpc2Vjb25kcy4gUHJvdmlkZSBhbiBvcHRpb25zIG9iamVjdCB0byBpbmRpY2F0ZSB0aGF0IGZ1bmMgc2hvdWxkIGJlIGludm9rZWRcbiAgICAgKiBvbiB0aGUgbGVhZGluZyBhbmQvb3IgdHJhaWxpbmcgZWRnZSBvZiB0aGUgd2FpdCB0aW1lb3V0LiBTdWJzZXF1ZW50IGNhbGxzIHRvIHRoZSB0aHJvdHRsZWRcbiAgICAgKiBmdW5jdGlvbiB3aWxsIHJldHVybiB0aGUgcmVzdWx0IG9mIHRoZSBsYXN0IGZ1bmMgY2FsbC5cbiAgICAgKlxuICAgICAqIE5vdGU6IElmIGxlYWRpbmcgYW5kIHRyYWlsaW5nIG9wdGlvbnMgYXJlIHRydWUgZnVuYyB3aWxsIGJlIGNhbGxlZCBvbiB0aGUgdHJhaWxpbmcgZWRnZSBvZlxuICAgICAqIHRoZSB0aW1lb3V0IG9ubHkgaWYgdGhlIHRocm90dGxlZCBmdW5jdGlvbiBpcyBpbnZva2VkIG1vcmUgdGhhbiBvbmNlIGR1cmluZyB0aGUgd2FpdCB0aW1lb3V0LlxuICAgICAqXG4gICAgICogQHBhcmFtIGZ1bmMgLSBUaGUgZnVuY3Rpb24gdG8gdGhyb3R0bGUuXG4gICAgICogQHBhcmFtIHdhaXQgLSBUaGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyB0byB0aHJvdHRsZSBleGVjdXRpb25zIHRvLiBEZWZhdWx0cyB0byAwLlxuICAgICAqIEBwYXJhbSBvcHRpb25zIC0gVGhlIG9wdGlvbnMgb2JqZWN0LlxuICAgICAqIEByZXR1cm5zIFRoZSBuZXcgdGhyb3R0bGVkIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgQXN5bmMucHJvdG90eXBlLnRocm90dGxlID0gZnVuY3Rpb24gKGZ1bmMsIHdhaXQsIG9wdGlvbnMpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgaWYgKHRoaXMuX2lzRGlzcG9zZWQpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9ub29wO1xuICAgICAgICB9XG4gICAgICAgIHZhciB3YWl0TVMgPSB3YWl0IHx8IDA7XG4gICAgICAgIHZhciBsZWFkaW5nID0gdHJ1ZTtcbiAgICAgICAgdmFyIHRyYWlsaW5nID0gdHJ1ZTtcbiAgICAgICAgdmFyIGxhc3RFeGVjdXRlVGltZSA9IDA7XG4gICAgICAgIHZhciBsYXN0UmVzdWx0O1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgICAgICB2YXIgbGFzdEFyZ3M7XG4gICAgICAgIHZhciB0aW1lb3V0SWQgPSBudWxsO1xuICAgICAgICBpZiAob3B0aW9ucyAmJiB0eXBlb2Ygb3B0aW9ucy5sZWFkaW5nID09PSAnYm9vbGVhbicpIHtcbiAgICAgICAgICAgIGxlYWRpbmcgPSBvcHRpb25zLmxlYWRpbmc7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9wdGlvbnMgJiYgdHlwZW9mIG9wdGlvbnMudHJhaWxpbmcgPT09ICdib29sZWFuJykge1xuICAgICAgICAgICAgdHJhaWxpbmcgPSBvcHRpb25zLnRyYWlsaW5nO1xuICAgICAgICB9XG4gICAgICAgIHZhciBjYWxsYmFjayA9IGZ1bmN0aW9uICh1c2VyQ2FsbCkge1xuICAgICAgICAgICAgdmFyIG5vdyA9IERhdGUubm93KCk7XG4gICAgICAgICAgICB2YXIgZGVsdGEgPSBub3cgLSBsYXN0RXhlY3V0ZVRpbWU7XG4gICAgICAgICAgICB2YXIgd2FpdExlbmd0aCA9IGxlYWRpbmcgPyB3YWl0TVMgLSBkZWx0YSA6IHdhaXRNUztcbiAgICAgICAgICAgIGlmIChkZWx0YSA+PSB3YWl0TVMgJiYgKCF1c2VyQ2FsbCB8fCBsZWFkaW5nKSkge1xuICAgICAgICAgICAgICAgIGxhc3RFeGVjdXRlVGltZSA9IG5vdztcbiAgICAgICAgICAgICAgICBpZiAodGltZW91dElkKSB7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLmNsZWFyVGltZW91dCh0aW1lb3V0SWQpO1xuICAgICAgICAgICAgICAgICAgICB0aW1lb3V0SWQgPSBudWxsO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBsYXN0UmVzdWx0ID0gZnVuYy5hcHBseShfdGhpcy5fcGFyZW50LCBsYXN0QXJncyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh0aW1lb3V0SWQgPT09IG51bGwgJiYgdHJhaWxpbmcpIHtcbiAgICAgICAgICAgICAgICB0aW1lb3V0SWQgPSBfdGhpcy5zZXRUaW1lb3V0KGNhbGxiYWNrLCB3YWl0TGVuZ3RoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBsYXN0UmVzdWx0O1xuICAgICAgICB9O1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgICAgICB2YXIgcmVzdWx0RnVuY3Rpb24gPSAoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIGFyZ3MgPSBbXTtcbiAgICAgICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICAgICAgYXJnc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGFzdEFyZ3MgPSBhcmdzO1xuICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKHRydWUpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdEZ1bmN0aW9uO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgd2lsbCBkZWxheSB0aGUgZXhlY3V0aW9uIG9mIGZ1bmMgdW50aWwgYWZ0ZXIgd2FpdCBtaWxsaXNlY29uZHMgaGF2ZVxuICAgICAqIGVsYXBzZWQgc2luY2UgdGhlIGxhc3QgdGltZSBpdCB3YXMgaW52b2tlZC4gUHJvdmlkZSBhbiBvcHRpb25zIG9iamVjdCB0byBpbmRpY2F0ZSB0aGF0IGZ1bmNcbiAgICAgKiBzaG91bGQgYmUgaW52b2tlZCBvbiB0aGUgbGVhZGluZyBhbmQvb3IgdHJhaWxpbmcgZWRnZSBvZiB0aGUgd2FpdCB0aW1lb3V0LiBTdWJzZXF1ZW50IGNhbGxzXG4gICAgICogdG8gdGhlIGRlYm91bmNlZCBmdW5jdGlvbiB3aWxsIHJldHVybiB0aGUgcmVzdWx0IG9mIHRoZSBsYXN0IGZ1bmMgY2FsbC5cbiAgICAgKlxuICAgICAqIE5vdGU6IElmIGxlYWRpbmcgYW5kIHRyYWlsaW5nIG9wdGlvbnMgYXJlIHRydWUgZnVuYyB3aWxsIGJlIGNhbGxlZCBvbiB0aGUgdHJhaWxpbmcgZWRnZSBvZlxuICAgICAqIHRoZSB0aW1lb3V0IG9ubHkgaWYgdGhlIGRlYm91bmNlZCBmdW5jdGlvbiBpcyBpbnZva2VkIG1vcmUgdGhhbiBvbmNlIGR1cmluZyB0aGUgd2FpdFxuICAgICAqIHRpbWVvdXQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZnVuYyAtIFRoZSBmdW5jdGlvbiB0byBkZWJvdW5jZS5cbiAgICAgKiBAcGFyYW0gd2FpdCAtIFRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRvIGRlbGF5LlxuICAgICAqIEBwYXJhbSBvcHRpb25zIC0gVGhlIG9wdGlvbnMgb2JqZWN0LlxuICAgICAqIEByZXR1cm5zIFRoZSBuZXcgZGVib3VuY2VkIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgQXN5bmMucHJvdG90eXBlLmRlYm91bmNlID0gZnVuY3Rpb24gKGZ1bmMsIHdhaXQsIG9wdGlvbnMpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgaWYgKHRoaXMuX2lzRGlzcG9zZWQpIHtcbiAgICAgICAgICAgIHZhciBub09wRnVuY3Rpb24gPSAoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIC8qKiBEbyBub3RoaW5nICovXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIG5vT3BGdW5jdGlvbi5jYW5jZWwgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIG5vT3BGdW5jdGlvbi5mbHVzaCA9IChmdW5jdGlvbiAoKSB7IHJldHVybiBudWxsOyB9KTtcbiAgICAgICAgICAgIG5vT3BGdW5jdGlvbi5wZW5kaW5nID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gZmFsc2U7IH07XG4gICAgICAgICAgICByZXR1cm4gbm9PcEZ1bmN0aW9uO1xuICAgICAgICB9XG4gICAgICAgIHZhciB3YWl0TVMgPSB3YWl0IHx8IDA7XG4gICAgICAgIHZhciBsZWFkaW5nID0gZmFsc2U7XG4gICAgICAgIHZhciB0cmFpbGluZyA9IHRydWU7XG4gICAgICAgIHZhciBtYXhXYWl0ID0gbnVsbDtcbiAgICAgICAgdmFyIGxhc3RDYWxsVGltZSA9IDA7XG4gICAgICAgIHZhciBsYXN0RXhlY3V0ZVRpbWUgPSBEYXRlLm5vdygpO1xuICAgICAgICB2YXIgbGFzdFJlc3VsdDtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICAgICAgdmFyIGxhc3RBcmdzO1xuICAgICAgICB2YXIgdGltZW91dElkID0gbnVsbDtcbiAgICAgICAgaWYgKG9wdGlvbnMgJiYgdHlwZW9mIG9wdGlvbnMubGVhZGluZyA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgICAgICBsZWFkaW5nID0gb3B0aW9ucy5sZWFkaW5nO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvcHRpb25zICYmIHR5cGVvZiBvcHRpb25zLnRyYWlsaW5nID09PSAnYm9vbGVhbicpIHtcbiAgICAgICAgICAgIHRyYWlsaW5nID0gb3B0aW9ucy50cmFpbGluZztcbiAgICAgICAgfVxuICAgICAgICBpZiAob3B0aW9ucyAmJiB0eXBlb2Ygb3B0aW9ucy5tYXhXYWl0ID09PSAnbnVtYmVyJyAmJiAhaXNOYU4ob3B0aW9ucy5tYXhXYWl0KSkge1xuICAgICAgICAgICAgbWF4V2FpdCA9IG9wdGlvbnMubWF4V2FpdDtcbiAgICAgICAgfVxuICAgICAgICB2YXIgbWFya0V4ZWN1dGVkID0gZnVuY3Rpb24gKHRpbWUpIHtcbiAgICAgICAgICAgIGlmICh0aW1lb3V0SWQpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5jbGVhclRpbWVvdXQodGltZW91dElkKTtcbiAgICAgICAgICAgICAgICB0aW1lb3V0SWQgPSBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGFzdEV4ZWN1dGVUaW1lID0gdGltZTtcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIGludm9rZUZ1bmN0aW9uID0gZnVuY3Rpb24gKHRpbWUpIHtcbiAgICAgICAgICAgIG1hcmtFeGVjdXRlZCh0aW1lKTtcbiAgICAgICAgICAgIGxhc3RSZXN1bHQgPSBmdW5jLmFwcGx5KF90aGlzLl9wYXJlbnQsIGxhc3RBcmdzKTtcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIGNhbGxiYWNrID0gZnVuY3Rpb24gKHVzZXJDYWxsKSB7XG4gICAgICAgICAgICB2YXIgbm93ID0gRGF0ZS5ub3coKTtcbiAgICAgICAgICAgIHZhciBleGVjdXRlSW1tZWRpYXRlbHkgPSBmYWxzZTtcbiAgICAgICAgICAgIGlmICh1c2VyQ2FsbCkge1xuICAgICAgICAgICAgICAgIGlmIChsZWFkaW5nICYmIG5vdyAtIGxhc3RDYWxsVGltZSA+PSB3YWl0TVMpIHtcbiAgICAgICAgICAgICAgICAgICAgZXhlY3V0ZUltbWVkaWF0ZWx5ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgbGFzdENhbGxUaW1lID0gbm93O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGRlbHRhID0gbm93IC0gbGFzdENhbGxUaW1lO1xuICAgICAgICAgICAgdmFyIHdhaXRMZW5ndGggPSB3YWl0TVMgLSBkZWx0YTtcbiAgICAgICAgICAgIHZhciBtYXhXYWl0RGVsdGEgPSBub3cgLSBsYXN0RXhlY3V0ZVRpbWU7XG4gICAgICAgICAgICB2YXIgbWF4V2FpdEV4cGlyZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIGlmIChtYXhXYWl0ICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgLy8gbWF4V2FpdCBvbmx5IG1hdHRlcnMgd2hlbiB0aGVyZSBpcyBhIHBlbmRpbmcgY2FsbGJhY2tcbiAgICAgICAgICAgICAgICBpZiAobWF4V2FpdERlbHRhID49IG1heFdhaXQgJiYgdGltZW91dElkKSB7XG4gICAgICAgICAgICAgICAgICAgIG1heFdhaXRFeHBpcmVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHdhaXRMZW5ndGggPSBNYXRoLm1pbih3YWl0TGVuZ3RoLCBtYXhXYWl0IC0gbWF4V2FpdERlbHRhKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZGVsdGEgPj0gd2FpdE1TIHx8IG1heFdhaXRFeHBpcmVkIHx8IGV4ZWN1dGVJbW1lZGlhdGVseSkge1xuICAgICAgICAgICAgICAgIGludm9rZUZ1bmN0aW9uKG5vdyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICgodGltZW91dElkID09PSBudWxsIHx8ICF1c2VyQ2FsbCkgJiYgdHJhaWxpbmcpIHtcbiAgICAgICAgICAgICAgICB0aW1lb3V0SWQgPSBfdGhpcy5zZXRUaW1lb3V0KGNhbGxiYWNrLCB3YWl0TGVuZ3RoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBsYXN0UmVzdWx0O1xuICAgICAgICB9O1xuICAgICAgICB2YXIgcGVuZGluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiAhIXRpbWVvdXRJZDtcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIGNhbmNlbCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmIChwZW5kaW5nKCkpIHtcbiAgICAgICAgICAgICAgICAvLyBNYXJrIHRoZSBkZWJvdW5jZWQgZnVuY3Rpb24gYXMgaGF2aW5nIGV4ZWN1dGVkXG4gICAgICAgICAgICAgICAgbWFya0V4ZWN1dGVkKERhdGUubm93KCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICB2YXIgZmx1c2ggPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAocGVuZGluZygpKSB7XG4gICAgICAgICAgICAgICAgaW52b2tlRnVuY3Rpb24oRGF0ZS5ub3coKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbGFzdFJlc3VsdDtcbiAgICAgICAgfTtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICAgICAgdmFyIHJlc3VsdEZ1bmN0aW9uID0gKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBhcmdzID0gW107XG4gICAgICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgICAgIGFyZ3NbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxhc3RBcmdzID0gYXJncztcbiAgICAgICAgICAgIHJldHVybiBjYWxsYmFjayh0cnVlKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJlc3VsdEZ1bmN0aW9uLmNhbmNlbCA9IGNhbmNlbDtcbiAgICAgICAgcmVzdWx0RnVuY3Rpb24uZmx1c2ggPSBmbHVzaDtcbiAgICAgICAgcmVzdWx0RnVuY3Rpb24ucGVuZGluZyA9IHBlbmRpbmc7XG4gICAgICAgIHJldHVybiByZXN1bHRGdW5jdGlvbjtcbiAgICB9O1xuICAgIEFzeW5jLnByb3RvdHlwZS5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgPSBmdW5jdGlvbiAoY2FsbGJhY2ssIHRhcmdldEVsZW1lbnQpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdmFyIGFuaW1hdGlvbkZyYW1lSWQgPSAwO1xuICAgICAgICB2YXIgd2luID0gZ2V0V2luZG93KHRhcmdldEVsZW1lbnQpO1xuICAgICAgICBpZiAoIXRoaXMuX2lzRGlzcG9zZWQpIHtcbiAgICAgICAgICAgIGlmICghdGhpcy5fYW5pbWF0aW9uRnJhbWVJZHMpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9hbmltYXRpb25GcmFtZUlkcyA9IHt9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGFuaW1hdGlvbkZyYW1lQ2FsbGJhY2sgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgLy8gTm93IGRlbGV0ZSB0aGUgcmVjb3JkIGFuZCBjYWxsIHRoZSBjYWxsYmFjay5cbiAgICAgICAgICAgICAgICAgICAgaWYgKF90aGlzLl9hbmltYXRpb25GcmFtZUlkcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIF90aGlzLl9hbmltYXRpb25GcmFtZUlkc1thbmltYXRpb25GcmFtZUlkXTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjYWxsYmFjay5hcHBseShfdGhpcy5fcGFyZW50KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuX2xvZ0Vycm9yKGUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBhbmltYXRpb25GcmFtZUlkID0gd2luLnJlcXVlc3RBbmltYXRpb25GcmFtZVxuICAgICAgICAgICAgICAgID8gd2luLnJlcXVlc3RBbmltYXRpb25GcmFtZShhbmltYXRpb25GcmFtZUNhbGxiYWNrKVxuICAgICAgICAgICAgICAgIDogd2luLnNldFRpbWVvdXQoYW5pbWF0aW9uRnJhbWVDYWxsYmFjaywgMCk7XG4gICAgICAgICAgICB0aGlzLl9hbmltYXRpb25GcmFtZUlkc1thbmltYXRpb25GcmFtZUlkXSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFuaW1hdGlvbkZyYW1lSWQ7XG4gICAgfTtcbiAgICBBc3luYy5wcm90b3R5cGUuY2FuY2VsQW5pbWF0aW9uRnJhbWUgPSBmdW5jdGlvbiAoaWQsIHRhcmdldEVsZW1lbnQpIHtcbiAgICAgICAgdmFyIHdpbiA9IGdldFdpbmRvdyh0YXJnZXRFbGVtZW50KTtcbiAgICAgICAgaWYgKHRoaXMuX2FuaW1hdGlvbkZyYW1lSWRzICYmIHRoaXMuX2FuaW1hdGlvbkZyYW1lSWRzW2lkXSkge1xuICAgICAgICAgICAgd2luLmNhbmNlbEFuaW1hdGlvbkZyYW1lID8gd2luLmNhbmNlbEFuaW1hdGlvbkZyYW1lKGlkKSA6IHdpbi5jbGVhclRpbWVvdXQoaWQpO1xuICAgICAgICAgICAgZGVsZXRlIHRoaXMuX2FuaW1hdGlvbkZyYW1lSWRzW2lkXTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICBBc3luYy5wcm90b3R5cGUuX2xvZ0Vycm9yID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgaWYgKHRoaXMuX29uRXJyb3JIYW5kbGVyKSB7XG4gICAgICAgICAgICB0aGlzLl9vbkVycm9ySGFuZGxlcihlKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIEFzeW5jO1xufSgpKTtcbmV4cG9ydCB7IEFzeW5jIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1Bc3luYy5qcy5tYXAiLCIvKipcbiAqIENvbXBhcmVzIGEgdG8gYiBhbmQgYiB0byBhLlxuICpcbiAqIEBwdWJsaWNcbiAqL1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbmV4cG9ydCBmdW5jdGlvbiBzaGFsbG93Q29tcGFyZShhLCBiKSB7XG4gICAgZm9yICh2YXIgcHJvcE5hbWUgaW4gYSkge1xuICAgICAgICBpZiAoYS5oYXNPd25Qcm9wZXJ0eShwcm9wTmFtZSkpIHtcbiAgICAgICAgICAgIGlmICghYi5oYXNPd25Qcm9wZXJ0eShwcm9wTmFtZSkgfHwgYltwcm9wTmFtZV0gIT09IGFbcHJvcE5hbWVdKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGZvciAodmFyIHByb3BOYW1lIGluIGIpIHtcbiAgICAgICAgaWYgKGIuaGFzT3duUHJvcGVydHkocHJvcE5hbWUpKSB7XG4gICAgICAgICAgICBpZiAoIWEuaGFzT3duUHJvcGVydHkocHJvcE5hbWUpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xufVxuLyoqXG4gKiBNYWtlcyBhIHJlc3VsdGluZyBtZXJnZSBvZiBhIGJ1bmNoIG9mIG9iamVjdHMuIFBhc3MgaW4gdGhlIHRhcmdldCBvYmplY3QgZm9sbG93ZWQgYnkgMSBvciBtb3JlXG4gKiBvYmplY3RzIGFzIGFyZ3VtZW50cyBhbmQgdGhleSB3aWxsIGJlIG1lcmdlZCBzZXF1ZW50aWFsbHkgaW50byB0aGUgdGFyZ2V0LiBOb3RlIHRoYXQgdGhpcyB3aWxsXG4gKiBzaGFsbG93IG1lcmdlOyBpdCB3aWxsIG5vdCBjcmVhdGUgbmV3IGNsb25lZCB2YWx1ZXMgZm9yIHRhcmdldCBtZW1iZXJzLlxuICpcbiAqIEBwdWJsaWNcbiAqIEBwYXJhbSB0YXJnZXQgLSBUYXJnZXQgb2JqZWN0IHRvIG1lcmdlIGZvbGxvd2luZyBvYmplY3QgYXJndW1lbnRzIGludG8uXG4gKiBAcGFyYW0gYXJncyAtIE9uZSBvciBtb3JlIG9iamVjdHMgdGhhdCB3aWxsIGJlIG1peGVkIGludG8gdGhlIHRhcmdldCBpbiB0aGUgb3JkZXIgdGhleSBhcmUgcHJvdmlkZWQuXG4gKiBAcmV0dXJucyBSZXN1bHRpbmcgbWVyZ2VkIHRhcmdldC5cbiAqL1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbmV4cG9ydCBmdW5jdGlvbiBhc3NpZ24odGFyZ2V0KSB7XG4gICAgdmFyIGFyZ3MgPSBbXTtcbiAgICBmb3IgKHZhciBfaSA9IDE7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICBhcmdzW19pIC0gMV0gPSBhcmd1bWVudHNbX2ldO1xuICAgIH1cbiAgICByZXR1cm4gZmlsdGVyZWRBc3NpZ24uYXBwbHkodGhpcywgW251bGwsIHRhcmdldF0uY29uY2F0KGFyZ3MpKTtcbn1cbi8qKlxuICogTWFrZXMgYSByZXN1bHRpbmcgbWVyZ2Ugb2YgYSBidW5jaCBvZiBvYmplY3RzLCBidXQgYWxsb3dzIGEgZmlsdGVyIGZ1bmN0aW9uIHRvIGJlIHBhc3NlZCBpbiB0byBmaWx0ZXJcbiAqIHRoZSByZXN1bHRpbmcgbWVyZ2VzLiBUaGlzIGFsbG93cyBmb3Igc2NlbmFyaW9zIHdoZXJlIHlvdSB3YW50IHRvIG1lcmdlIFwiZXZlcnl0aGluZyBleGNlcHQgdGhhdCBvbmUgdGhpbmdcIlxuICogb3IgXCJwcm9wZXJ0aWVzIHRoYXQgc3RhcnQgd2l0aCBkYXRhLVwiLiBOb3RlIHRoYXQgdGhpcyB3aWxsIHNoYWxsb3cgbWVyZ2U7IGl0IHdpbGwgbm90IGNyZWF0ZSBuZXcgY2xvbmVkXG4gKiB2YWx1ZXMgZm9yIHRhcmdldCBtZW1iZXJzLlxuICpcbiAqIEBwdWJsaWNcbiAqIEBwYXJhbSBpc0FsbG93ZWQgLSBDYWxsYmFjayB0byBkZXRlcm1pbmUgaWYgdGhlIGdpdmVuIHByb3BOYW1lIGlzIGFsbG93ZWQgaW4gdGhlIHJlc3VsdC5cbiAqIEBwYXJhbSB0YXJnZXQgLSBUYXJnZXQgb2JqZWN0IHRvIG1lcmdlIGZvbGxvd2luZyBvYmplY3QgYXJndW1lbnRzIGludG8uXG4gKiBAcGFyYW0gYXJncyAtIE9uZSBvciBtb3JlIG9iamVjdHMgdGhhdCB3aWxsIGJlIG1peGVkIGludG8gdGhlIHRhcmdldCBpbiB0aGUgb3JkZXIgdGhleSBhcmUgcHJvdmlkZWQuXG4gKiBAcmV0dXJucyBSZXN1bHRpbmcgbWVyZ2VkIHRhcmdldC5cbiAqL1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbmV4cG9ydCBmdW5jdGlvbiBmaWx0ZXJlZEFzc2lnbihpc0FsbG93ZWQsIHRhcmdldCkge1xuICAgIHZhciBhcmdzID0gW107XG4gICAgZm9yICh2YXIgX2kgPSAyOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgYXJnc1tfaSAtIDJdID0gYXJndW1lbnRzW19pXTtcbiAgICB9XG4gICAgdGFyZ2V0ID0gdGFyZ2V0IHx8IHt9O1xuICAgIGZvciAodmFyIF9hID0gMCwgYXJnc18xID0gYXJnczsgX2EgPCBhcmdzXzEubGVuZ3RoOyBfYSsrKSB7XG4gICAgICAgIHZhciBzb3VyY2VPYmplY3QgPSBhcmdzXzFbX2FdO1xuICAgICAgICBpZiAoc291cmNlT2JqZWN0KSB7XG4gICAgICAgICAgICBmb3IgKHZhciBwcm9wTmFtZSBpbiBzb3VyY2VPYmplY3QpIHtcbiAgICAgICAgICAgICAgICBpZiAoc291cmNlT2JqZWN0Lmhhc093blByb3BlcnR5KHByb3BOYW1lKSAmJiAoIWlzQWxsb3dlZCB8fCBpc0FsbG93ZWQocHJvcE5hbWUpKSkge1xuICAgICAgICAgICAgICAgICAgICB0YXJnZXRbcHJvcE5hbWVdID0gc291cmNlT2JqZWN0W3Byb3BOYW1lXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRhcmdldDtcbn1cbi8qKlxuICogVGFrZXMgYW4gZW51bSBhbmQgaXRlcmF0ZXMgb3ZlciBlYWNoIHZhbHVlIG9mIHRoZSBlbnVtIChhcyBhIHN0cmluZyksIHJ1bm5pbmcgdGhlIGNhbGxiYWNrIG9uIGVhY2gsXG4gKiByZXR1cm5pbmcgYSBtYXBwZWQgYXJyYXkuXG4gKiBAcGFyYW0gdGhlRW51bSAtIEVudW0gdG8gaXRlcmF0ZSBvdmVyXG4gKiBAcGFyYW0gY2FsbGJhY2sgLSBUaGUgZmlyc3QgcGFyYW1ldGVyIHRoZSBuYW1lIG9mIHRoZSBlbnRyeSwgYW5kIHRoZSBzZWNvbmQgcGFyYW1ldGVyIGlzIHRoZSB2YWx1ZVxuICogb2YgdGhhdCBlbnRyeSwgd2hpY2ggaXMgdGhlIHZhbHVlIHlvdSdkIG5vcm1hbGx5IHVzZSB3aGVuIHVzaW5nIHRoZSBlbnVtICh1c3VhbGx5IGEgbnVtYmVyKS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG1hcEVudW1CeU5hbWUoXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxudGhlRW51bSwgY2FsbGJhY2spIHtcbiAgICAvLyBtYXA8YW55PiB0byBzYXRpc2Z5IGNvbXBpbGVyIHNpbmNlIGl0IGRvZXNuJ3QgcmVhbGl6ZSB3ZSBzdHJpcCBvdXQgdW5kZWZpbmVkcyBpbiB0aGUgLmZpbHRlcigpIGNhbGxcbiAgICByZXR1cm4gT2JqZWN0LmtleXModGhlRW51bSlcbiAgICAgICAgLm1hcChmdW5jdGlvbiAocCkge1xuICAgICAgICAvLyBtYXAgb24gZWFjaCBwcm9wZXJ0eSBuYW1lIGFzIGEgc3RyaW5nXG4gICAgICAgIGlmIChTdHJpbmcoTnVtYmVyKHApKSAhPT0gcCkge1xuICAgICAgICAgICAgLy8gaWYgdGhlIHByb3BlcnR5IGlzIG5vdCBqdXN0IGEgbnVtYmVyIChiZWNhdXNlIGVudW1zIGluIFR5cGVTY3JpcHQgd2lsbCBtYXAgYm90aCB3YXlzKVxuICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKHAsIHRoZUVudW1bcF0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfSlcbiAgICAgICAgLmZpbHRlcihmdW5jdGlvbiAodikgeyByZXR1cm4gISF2OyB9KTsgLy8gb25seSByZXR1cm4gZWxlbWVudHMgd2l0aCB2YWx1ZXNcbn1cbi8qKlxuICogR2V0IGFsbCB2YWx1ZXMgaW4gYW4gb2JqZWN0IGRpY3Rpb25hcnlcbiAqXG4gKiBAcGFyYW0gb2JqIC0gVGhlIGRpY3Rpb25hcnkgdG8gZ2V0IHZhbHVlcyBmb3JcbiAqL1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbmV4cG9ydCBmdW5jdGlvbiB2YWx1ZXMob2JqKSB7XG4gICAgcmV0dXJuIE9iamVjdC5rZXlzKG9iaikucmVkdWNlKGZ1bmN0aW9uIChhcnIsIGtleSkge1xuICAgICAgICBhcnIucHVzaChvYmpba2V5XSk7XG4gICAgICAgIHJldHVybiBhcnI7XG4gICAgfSwgW10pO1xufVxuLyoqXG4gKiBUaW55IGhlbHBlciB0byBkbyB0aGUgbWluaW1hbCBhbW91bnQgb2Ygd29yayBpbiBkdXBsaWNhdGluZyBhbiBvYmplY3QgYnV0IG9taXR0aW5nIHNvbWVcbiAqIHByb3BzLiBUaGlzIGVuZHMgdXAgZmFzdGVyIHRoYW4gdXNpbmcgb2JqZWN0IC4uLnJlc3Qgb3IgcmVkdWNlIHRvIGZpbHRlci5cbiAqXG4gKiBUaGlzIGJlaGF2ZXMgdmVyeSBtdWNoIGxpa2UgZmlsdGVyZWRBc3NpZ24sIGJ1dCBkb2VzIG5vdCBtZXJnZSBtYW55IG9iamVjdHMgdG9nZXRoZXIsXG4gKiB1c2VzIGFuIGV4Y2x1c2lvbiBvYmplY3QgbWFwLCBhbmQgYXZvaWRzIHNwcmVhZHMgYWxsIGZvciBvcHRpbWFsIHBlcmZvcm1hbmNlLlxuICpcbiAqIFNlZSBwZXJmIHRlc3QgZm9yIGJhY2tncm91bmQ6XG4gKiBodHRwczovL2pzcGVyZi5jb20vb21pdC12cy1yZXN0LXZzLXJlZHVjZS8xXG4gKlxuICogQHBhcmFtIG9iaiAtIFRoZSBvYmplY3QgdG8gY2xvbmVcbiAqIEBwYXJhbSBleGNsdXNpb25zIC0gVGhlIGFycmF5IG9mIGtleXMgdG8gZXhjbHVkZVxuICovXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuZXhwb3J0IGZ1bmN0aW9uIG9taXQob2JqLCBleGNsdXNpb25zKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICB2YXIgcmVzdWx0ID0ge307XG4gICAgZm9yICh2YXIga2V5IGluIG9iaikge1xuICAgICAgICBpZiAoZXhjbHVzaW9ucy5pbmRleE9mKGtleSkgPT09IC0xICYmIG9iai5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgICAgICByZXN1bHRba2V5XSA9IG9ialtrZXldO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1vYmplY3QuanMubWFwIiwiaW1wb3J0IHsgYXNzaWduIH0gZnJvbSAnLi9vYmplY3QnO1xuLyoqIEFuIGluc3RhbmNlIG9mIEV2ZW50R3JvdXAgYWxsb3dzIGFueXRoaW5nIHdpdGggYSBoYW5kbGUgdG8gaXQgdG8gdHJpZ2dlciBldmVudHMgb24gaXQuXG4gKiAgSWYgdGhlIHRhcmdldCBpcyBhbiBIVE1MRWxlbWVudCwgdGhlIGV2ZW50IHdpbGwgYmUgYXR0YWNoZWQgdG8gdGhlIGVsZW1lbnQgYW5kIGNhbiBiZVxuICogIHRyaWdnZXJlZCBhcyB1c3VhbCAobGlrZSBjbGlja2luZyBmb3Igb25DbGljaykuXG4gKiAgVGhlIGV2ZW50IGNhbiBiZSB0cmlnZ2VyZWQgYnkgY2FsbGluZyBFdmVudEdyb3VwLnJhaXNlKCkgaGVyZS4gSWYgdGhlIHRhcmdldCBpcyBhblxuICogIEhUTUxFbGVtZW50LCB0aGUgZXZlbnQgZ2V0cyByYWlzZWQgYW5kIGlzIGhhbmRsZWQgYnkgdGhlIGJyb3dzZXIuIE90aGVyd2lzZSwgaXQgZ2V0c1xuICogIGhhbmRsZWQgaGVyZSBpbiBFdmVudEdyb3VwLCBhbmQgdGhlIGhhbmRsZXIgaXMgY2FsbGVkIGluIHRoZSBjb250ZXh0IG9mIHRoZSBwYXJlbnRcbiAqICAod2hpY2ggaXMgcGFzc2VkIGluIGluIHRoZSBjb25zdHJ1Y3RvcikuXG4gKlxuICogQHB1YmxpY1xuICoge0Bkb2NDYXRlZ29yeSBFdmVudEdyb3VwfVxuICovXG52YXIgRXZlbnRHcm91cCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICAvKiogcGFyZW50OiB0aGUgY29udGV4dCBpbiB3aGljaCBldmVudHMgYXR0YWNoZWQgdG8gbm9uLUhUTUxFbGVtZW50cyBhcmUgY2FsbGVkICovXG4gICAgZnVuY3Rpb24gRXZlbnRHcm91cChwYXJlbnQpIHtcbiAgICAgICAgdGhpcy5faWQgPSBFdmVudEdyb3VwLl91bmlxdWVJZCsrO1xuICAgICAgICB0aGlzLl9wYXJlbnQgPSBwYXJlbnQ7XG4gICAgICAgIHRoaXMuX2V2ZW50UmVjb3JkcyA9IFtdO1xuICAgIH1cbiAgICAvKiogRm9yIElFOCwgYnViYmxlRXZlbnQgaXMgaWdub3JlZCBoZXJlIGFuZCBtdXN0IGJlIGRlYWx0IHdpdGggYnkgdGhlIGhhbmRsZXIuXG4gICAgICogIEV2ZW50cyByYWlzZWQgaGVyZSBieSBkZWZhdWx0IGhhdmUgYnViYmxpbmcgc2V0IHRvIGZhbHNlIGFuZCBjYW5jZWxhYmxlIHNldCB0byB0cnVlLlxuICAgICAqICBUaGlzIGFwcGxpZXMgYWxzbyB0byBidWlsdC1pbiBldmVudHMgYmVpbmcgcmFpc2VkIG1hbnVhbGx5IGhlcmUgb24gSFRNTEVsZW1lbnRzLFxuICAgICAqICB3aGljaCBtYXkgbGVhZCB0byB1bmV4cGVjdGVkIGJlaGF2aW9yIGlmIGl0IGRpZmZlcnMgZnJvbSB0aGUgZGVmYXVsdHMuXG4gICAgICpcbiAgICAgKi9cbiAgICBFdmVudEdyb3VwLnJhaXNlID0gZnVuY3Rpb24gKHRhcmdldCwgZXZlbnROYW1lLCBldmVudEFyZ3MsIGJ1YmJsZUV2ZW50KSB7XG4gICAgICAgIHZhciByZXRWYWw7XG4gICAgICAgIGlmIChFdmVudEdyb3VwLl9pc0VsZW1lbnQodGFyZ2V0KSkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcgJiYgZG9jdW1lbnQuY3JlYXRlRXZlbnQpIHtcbiAgICAgICAgICAgICAgICB2YXIgZXYgPSBkb2N1bWVudC5jcmVhdGVFdmVudCgnSFRNTEV2ZW50cycpO1xuICAgICAgICAgICAgICAgIGV2LmluaXRFdmVudChldmVudE5hbWUsIGJ1YmJsZUV2ZW50IHx8IGZhbHNlLCB0cnVlKTtcbiAgICAgICAgICAgICAgICBhc3NpZ24oZXYsIGV2ZW50QXJncyk7XG4gICAgICAgICAgICAgICAgcmV0VmFsID0gdGFyZ2V0LmRpc3BhdGNoRXZlbnQoZXYpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJyAmJiBkb2N1bWVudC5jcmVhdGVFdmVudE9iamVjdCkge1xuICAgICAgICAgICAgICAgIC8vIElFOFxuICAgICAgICAgICAgICAgIHZhciBldk9iaiA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50T2JqZWN0KGV2ZW50QXJncyk7XG4gICAgICAgICAgICAgICAgLy8gY2Fubm90IHNldCBjYW5jZWxCdWJibGUgb24gZXZPYmosIGZpcmVFdmVudCB3aWxsIG92ZXJ3cml0ZSBpdFxuICAgICAgICAgICAgICAgIHRhcmdldC5maXJlRXZlbnQoJ29uJyArIGV2ZW50TmFtZSwgZXZPYmopO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9iYW4tdHMtY29tbWVudFxuICAgICAgICAgICAgLy8gQHRzLWlnbm9yZSAgLS0gRklYTUU6IHN0cmljdEJpbmRDYWxsQXBwbHkgZXJyb3IgLSBodHRwczovL2dpdGh1Yi5jb20vbWljcm9zb2Z0L2ZsdWVudHVpL2lzc3Vlcy8xNzMzMVxuICAgICAgICAgICAgd2hpbGUgKHRhcmdldCAmJiByZXRWYWwgIT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgdmFyIGV2ZW50cyA9IHRhcmdldC5fX2V2ZW50c19fO1xuICAgICAgICAgICAgICAgIHZhciBldmVudFJlY29yZHMgPSBldmVudHMgPyBldmVudHNbZXZlbnROYW1lXSA6IG51bGw7XG4gICAgICAgICAgICAgICAgaWYgKGV2ZW50UmVjb3Jkcykge1xuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpZCBpbiBldmVudFJlY29yZHMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChldmVudFJlY29yZHMuaGFzT3duUHJvcGVydHkoaWQpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGV2ZW50UmVjb3JkTGlzdCA9IGV2ZW50UmVjb3Jkc1tpZF07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9iYW4tdHMtY29tbWVudFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEB0cy1pZ25vcmUgIC0tIEZJWE1FOiBzdHJpY3RCaW5kQ2FsbEFwcGx5IGVycm9yIC0gaHR0cHM6Ly9naXRodWIuY29tL21pY3Jvc29mdC9mbHVlbnR1aS9pc3N1ZXMvMTczMzFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBsaXN0SW5kZXggPSAwOyByZXRWYWwgIT09IGZhbHNlICYmIGxpc3RJbmRleCA8IGV2ZW50UmVjb3JkTGlzdC5sZW5ndGg7IGxpc3RJbmRleCsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciByZWNvcmQgPSBldmVudFJlY29yZExpc3RbbGlzdEluZGV4XTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlY29yZC5vYmplY3RDYWxsYmFjaykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0VmFsID0gcmVjb3JkLm9iamVjdENhbGxiYWNrLmNhbGwocmVjb3JkLnBhcmVudCwgZXZlbnRBcmdzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBJZiB0aGUgdGFyZ2V0IGhhcyBhIHBhcmVudCwgYnViYmxlIHRoZSBldmVudCB1cC5cbiAgICAgICAgICAgICAgICB0YXJnZXQgPSBidWJibGVFdmVudCA/IHRhcmdldC5wYXJlbnQgOiBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXRWYWw7XG4gICAgfTtcbiAgICBFdmVudEdyb3VwLmlzT2JzZXJ2ZWQgPSBmdW5jdGlvbiAodGFyZ2V0LCBldmVudE5hbWUpIHtcbiAgICAgICAgdmFyIGV2ZW50cyA9IHRhcmdldCAmJiB0YXJnZXQuX19ldmVudHNfXztcbiAgICAgICAgcmV0dXJuICEhZXZlbnRzICYmICEhZXZlbnRzW2V2ZW50TmFtZV07XG4gICAgfTtcbiAgICAvKiogQ2hlY2sgdG8gc2VlIGlmIHRoZSB0YXJnZXQgaGFzIGRlY2xhcmVkIHN1cHBvcnQgb2YgdGhlIGdpdmVuIGV2ZW50LiAqL1xuICAgIEV2ZW50R3JvdXAuaXNEZWNsYXJlZCA9IGZ1bmN0aW9uICh0YXJnZXQsIGV2ZW50TmFtZSkge1xuICAgICAgICB2YXIgZGVjbGFyZWRFdmVudHMgPSB0YXJnZXQgJiYgdGFyZ2V0Ll9fZGVjbGFyZWRFdmVudHM7XG4gICAgICAgIHJldHVybiAhIWRlY2xhcmVkRXZlbnRzICYmICEhZGVjbGFyZWRFdmVudHNbZXZlbnROYW1lXTtcbiAgICB9O1xuICAgIEV2ZW50R3JvdXAuc3RvcFByb3BhZ2F0aW9uID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIGlmIChldmVudC5zdG9wUHJvcGFnYXRpb24pIHtcbiAgICAgICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgLy8gSUU4XG4gICAgICAgICAgICBldmVudC5jYW5jZWxCdWJibGUgPSB0cnVlO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBFdmVudEdyb3VwLl9pc0VsZW1lbnQgPSBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgICAgIHJldHVybiAoISF0YXJnZXQgJiYgKCEhdGFyZ2V0LmFkZEV2ZW50TGlzdGVuZXIgfHwgKHR5cGVvZiBIVE1MRWxlbWVudCAhPT0gJ3VuZGVmaW5lZCcgJiYgdGFyZ2V0IGluc3RhbmNlb2YgSFRNTEVsZW1lbnQpKSk7XG4gICAgfTtcbiAgICBFdmVudEdyb3VwLnByb3RvdHlwZS5kaXNwb3NlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoIXRoaXMuX2lzRGlzcG9zZWQpIHtcbiAgICAgICAgICAgIHRoaXMuX2lzRGlzcG9zZWQgPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy5vZmYoKTtcbiAgICAgICAgICAgIHRoaXMuX3BhcmVudCA9IG51bGw7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8qKiBPbiB0aGUgdGFyZ2V0LCBhdHRhY2ggYSBzZXQgb2YgZXZlbnRzLCB3aGVyZSB0aGUgZXZlbnRzIG9iamVjdCBpcyBhIG5hbWUgdG8gZnVuY3Rpb24gbWFwcGluZy4gKi9cbiAgICBFdmVudEdyb3VwLnByb3RvdHlwZS5vbkFsbCA9IGZ1bmN0aW9uICh0YXJnZXQsIGV2ZW50cywgdXNlQ2FwdHVyZSkge1xuICAgICAgICBmb3IgKHZhciBldmVudE5hbWUgaW4gZXZlbnRzKSB7XG4gICAgICAgICAgICBpZiAoZXZlbnRzLmhhc093blByb3BlcnR5KGV2ZW50TmFtZSkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLm9uKHRhcmdldCwgZXZlbnROYW1lLCBldmVudHNbZXZlbnROYW1lXSwgdXNlQ2FwdHVyZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8qKlxuICAgICAqIE9uIHRoZSB0YXJnZXQsIGF0dGFjaCBhbiBldmVudCB3aG9zZSBoYW5kbGVyIHdpbGwgYmUgY2FsbGVkIGluIHRoZSBjb250ZXh0IG9mIHRoZSBwYXJlbnRcbiAgICAgKiBvZiB0aGlzIGluc3RhbmNlIG9mIEV2ZW50R3JvdXAuXG4gICAgICovXG4gICAgRXZlbnRHcm91cC5wcm90b3R5cGUub24gPSBmdW5jdGlvbiAodGFyZ2V0LCBldmVudE5hbWUsIGNhbGxiYWNrLCBvcHRpb25zKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIGlmIChldmVudE5hbWUuaW5kZXhPZignLCcpID4gLTEpIHtcbiAgICAgICAgICAgIHZhciBldmVudHMgPSBldmVudE5hbWUuc3BsaXQoL1sgLF0rLyk7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGV2ZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIHRoaXMub24odGFyZ2V0LCBldmVudHNbaV0sIGNhbGxiYWNrLCBvcHRpb25zKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHZhciBwYXJlbnRfMSA9IHRoaXMuX3BhcmVudDtcbiAgICAgICAgICAgIHZhciBldmVudFJlY29yZCA9IHtcbiAgICAgICAgICAgICAgICB0YXJnZXQ6IHRhcmdldCxcbiAgICAgICAgICAgICAgICBldmVudE5hbWU6IGV2ZW50TmFtZSxcbiAgICAgICAgICAgICAgICBwYXJlbnQ6IHBhcmVudF8xLFxuICAgICAgICAgICAgICAgIGNhbGxiYWNrOiBjYWxsYmFjayxcbiAgICAgICAgICAgICAgICBvcHRpb25zOiBvcHRpb25zLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIC8vIEluaXRpYWxpemUgYW5kIHdpcmUgdXAgdGhlIHJlY29yZCBvbiB0aGUgdGFyZ2V0LCBzbyB0aGF0IGl0IGNhbiBjYWxsIHRoZSBjYWxsYmFjayBpZiB0aGUgZXZlbnQgZmlyZXMuXG4gICAgICAgICAgICB2YXIgZXZlbnRzID0gKHRhcmdldC5fX2V2ZW50c19fID0gdGFyZ2V0Ll9fZXZlbnRzX18gfHwge30pO1xuICAgICAgICAgICAgZXZlbnRzW2V2ZW50TmFtZV0gPVxuICAgICAgICAgICAgICAgIGV2ZW50c1tldmVudE5hbWVdIHx8XG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvdW50OiAwLFxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgZXZlbnRzW2V2ZW50TmFtZV1bdGhpcy5faWRdID0gZXZlbnRzW2V2ZW50TmFtZV1bdGhpcy5faWRdIHx8IFtdO1xuICAgICAgICAgICAgZXZlbnRzW2V2ZW50TmFtZV1bdGhpcy5faWRdLnB1c2goZXZlbnRSZWNvcmQpO1xuICAgICAgICAgICAgZXZlbnRzW2V2ZW50TmFtZV0uY291bnQrKztcbiAgICAgICAgICAgIGlmIChFdmVudEdyb3VwLl9pc0VsZW1lbnQodGFyZ2V0KSkge1xuICAgICAgICAgICAgICAgIHZhciBwcm9jZXNzRWxlbWVudEV2ZW50ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgYXJncyA9IFtdO1xuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgYXJnc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChfdGhpcy5faXNEaXNwb3NlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHZhciByZXN1bHQ7XG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSBjYWxsYmFjay5hcHBseShwYXJlbnRfMSwgYXJncyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L2Jhbi10cy1jb21tZW50XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBAdHMtaWdub3JlICAtLSBGSVhNRTogc3RyaWN0QmluZENhbGxBcHBseSBlcnJvciAtIGh0dHBzOi8vZ2l0aHViLmNvbS9taWNyb3NvZnQvZmx1ZW50dWkvaXNzdWVzLzE3MzMxXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzdWx0ID09PSBmYWxzZSAmJiBhcmdzWzBdKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGUgPSBhcmdzWzBdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlLnByZXZlbnREZWZhdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGUuc3RvcFByb3BhZ2F0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUuY2FuY2VsQnViYmxlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gaWdub3JlXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIGV2ZW50UmVjb3JkLmVsZW1lbnRDYWxsYmFjayA9IHByb2Nlc3NFbGVtZW50RXZlbnQ7XG4gICAgICAgICAgICAgICAgaWYgKHRhcmdldC5hZGRFdmVudExpc3RlbmVyKSB7XG4gICAgICAgICAgICAgICAgICAgIHRhcmdldC5hZGRFdmVudExpc3RlbmVyKGV2ZW50TmFtZSwgcHJvY2Vzc0VsZW1lbnRFdmVudCwgb3B0aW9ucyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHRhcmdldC5hdHRhY2hFdmVudCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBJRThcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0LmF0dGFjaEV2ZW50KCdvbicgKyBldmVudE5hbWUsIHByb2Nlc3NFbGVtZW50RXZlbnQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHZhciBwcm9jZXNzT2JqZWN0RXZlbnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBhcmdzID0gW107XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhcmdzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKF90aGlzLl9pc0Rpc3Bvc2VkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrLmFwcGx5KHBhcmVudF8xLCBhcmdzKTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIGV2ZW50UmVjb3JkLm9iamVjdENhbGxiYWNrID0gcHJvY2Vzc09iamVjdEV2ZW50O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gUmVtZW1iZXIgdGhlIHJlY29yZCBsb2NhbGx5LCBzbyB0aGF0IGl0IGNhbiBiZSByZW1vdmVkLlxuICAgICAgICAgICAgdGhpcy5fZXZlbnRSZWNvcmRzLnB1c2goZXZlbnRSZWNvcmQpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBFdmVudEdyb3VwLnByb3RvdHlwZS5vZmYgPSBmdW5jdGlvbiAodGFyZ2V0LCBldmVudE5hbWUsIGNhbGxiYWNrLCBvcHRpb25zKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5fZXZlbnRSZWNvcmRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgZXZlbnRSZWNvcmQgPSB0aGlzLl9ldmVudFJlY29yZHNbaV07XG4gICAgICAgICAgICBpZiAoKCF0YXJnZXQgfHwgdGFyZ2V0ID09PSBldmVudFJlY29yZC50YXJnZXQpICYmXG4gICAgICAgICAgICAgICAgKCFldmVudE5hbWUgfHwgZXZlbnROYW1lID09PSBldmVudFJlY29yZC5ldmVudE5hbWUpICYmXG4gICAgICAgICAgICAgICAgKCFjYWxsYmFjayB8fCBjYWxsYmFjayA9PT0gZXZlbnRSZWNvcmQuY2FsbGJhY2spICYmXG4gICAgICAgICAgICAgICAgKHR5cGVvZiBvcHRpb25zICE9PSAnYm9vbGVhbicgfHwgb3B0aW9ucyA9PT0gZXZlbnRSZWNvcmQub3B0aW9ucykpIHtcbiAgICAgICAgICAgICAgICB2YXIgZXZlbnRzID0gZXZlbnRSZWNvcmQudGFyZ2V0Ll9fZXZlbnRzX187XG4gICAgICAgICAgICAgICAgdmFyIHRhcmdldEFycmF5TG9va3VwID0gZXZlbnRzW2V2ZW50UmVjb3JkLmV2ZW50TmFtZV07XG4gICAgICAgICAgICAgICAgdmFyIHRhcmdldEFycmF5ID0gdGFyZ2V0QXJyYXlMb29rdXAgPyB0YXJnZXRBcnJheUxvb2t1cFt0aGlzLl9pZF0gOiBudWxsO1xuICAgICAgICAgICAgICAgIC8vIFdlIG1heSBoYXZlIGFscmVhZHkgdGFyZ2V0J3MgZW50cmllcywgc28gY2hlY2sgZm9yIG51bGwuXG4gICAgICAgICAgICAgICAgaWYgKHRhcmdldEFycmF5KSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0YXJnZXRBcnJheS5sZW5ndGggPT09IDEgfHwgIWNhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXRBcnJheUxvb2t1cC5jb3VudCAtPSB0YXJnZXRBcnJheS5sZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgZXZlbnRzW2V2ZW50UmVjb3JkLmV2ZW50TmFtZV1bdGhpcy5faWRdO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0QXJyYXlMb29rdXAuY291bnQtLTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldEFycmF5LnNwbGljZSh0YXJnZXRBcnJheS5pbmRleE9mKGV2ZW50UmVjb3JkKSwgMSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKCF0YXJnZXRBcnJheUxvb2t1cC5jb3VudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIGV2ZW50c1tldmVudFJlY29yZC5ldmVudE5hbWVdO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChldmVudFJlY29yZC5lbGVtZW50Q2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGV2ZW50UmVjb3JkLnRhcmdldC5yZW1vdmVFdmVudExpc3RlbmVyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBldmVudFJlY29yZC50YXJnZXQucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudFJlY29yZC5ldmVudE5hbWUsIGV2ZW50UmVjb3JkLmVsZW1lbnRDYWxsYmFjaywgZXZlbnRSZWNvcmQub3B0aW9ucyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoZXZlbnRSZWNvcmQudGFyZ2V0LmRldGFjaEV2ZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBJRThcbiAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50UmVjb3JkLnRhcmdldC5kZXRhY2hFdmVudCgnb24nICsgZXZlbnRSZWNvcmQuZXZlbnROYW1lLCBldmVudFJlY29yZC5lbGVtZW50Q2FsbGJhY2spO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMuX2V2ZW50UmVjb3Jkcy5zcGxpY2UoaS0tLCAxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgLyoqIFRyaWdnZXIgdGhlIGdpdmVuIGV2ZW50IGluIHRoZSBjb250ZXh0IG9mIHRoaXMgaW5zdGFuY2Ugb2YgRXZlbnRHcm91cC4gKi9cbiAgICBFdmVudEdyb3VwLnByb3RvdHlwZS5yYWlzZSA9IGZ1bmN0aW9uIChldmVudE5hbWUsIGV2ZW50QXJncywgYnViYmxlRXZlbnQpIHtcbiAgICAgICAgcmV0dXJuIEV2ZW50R3JvdXAucmFpc2UodGhpcy5fcGFyZW50LCBldmVudE5hbWUsIGV2ZW50QXJncywgYnViYmxlRXZlbnQpO1xuICAgIH07XG4gICAgLyoqIERlY2xhcmUgYW4gZXZlbnQgYXMgYmVpbmcgc3VwcG9ydGVkIGJ5IHRoaXMgaW5zdGFuY2Ugb2YgRXZlbnRHcm91cC4gKi9cbiAgICBFdmVudEdyb3VwLnByb3RvdHlwZS5kZWNsYXJlID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIHZhciBkZWNsYXJlZEV2ZW50cyA9ICh0aGlzLl9wYXJlbnQuX19kZWNsYXJlZEV2ZW50cyA9IHRoaXMuX3BhcmVudC5fX2RlY2xhcmVkRXZlbnRzIHx8IHt9KTtcbiAgICAgICAgaWYgKHR5cGVvZiBldmVudCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIGRlY2xhcmVkRXZlbnRzW2V2ZW50XSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGV2ZW50Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgZGVjbGFyZWRFdmVudHNbZXZlbnRbaV1dID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgRXZlbnRHcm91cC5fdW5pcXVlSWQgPSAwO1xuICAgIHJldHVybiBFdmVudEdyb3VwO1xufSgpKTtcbmV4cG9ydCB7IEV2ZW50R3JvdXAgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUV2ZW50R3JvdXAuanMubWFwIiwiLyogZXNsaW50LWRpc2FibGUgbm8tY29uc29sZSAqL1xudmFyIF93YXJuaW5nQ2FsbGJhY2sgPSB1bmRlZmluZWQ7XG4vKipcbiAqIFNlbmRzIGEgd2FybmluZyB0byBjb25zb2xlLCBpZiB0aGUgYXBpIGlzIHByZXNlbnQuXG4gKlxuICogQHB1YmxpY1xuICogQHBhcmFtIG1lc3NhZ2UgLSBXYXJuaW5nIG1lc3NhZ2UuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB3YXJuKG1lc3NhZ2UpIHtcbiAgICBpZiAoX3dhcm5pbmdDYWxsYmFjayAmJiBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIF93YXJuaW5nQ2FsbGJhY2sobWVzc2FnZSk7XG4gICAgfVxuICAgIGVsc2UgaWYgKGNvbnNvbGUgJiYgY29uc29sZS53YXJuKSB7XG4gICAgICAgIGNvbnNvbGUud2FybihtZXNzYWdlKTtcbiAgICB9XG59XG4vKipcbiAqIENvbmZpZ3VyZXMgdGhlIHdhcm5pbmcgY2FsbGJhY2suIFBhc3NpbmcgaW4gdW5kZWZpbmVkIHdpbGwgcmVzZXQgaXQgdG8gdXNlIHRoZSBkZWZhdWx0XG4gKiBjb25zb2xlLndhcm4gZnVuY3Rpb24uXG4gKlxuICogQHB1YmxpY1xuICogQHBhcmFtIHdhcm5pbmdDYWxsYmFjayAtIENhbGxiYWNrIHRvIG92ZXJyaWRlIHRoZSBnZW5lcmF0ZWQgd2FybmluZ3MuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzZXRXYXJuaW5nQ2FsbGJhY2sod2FybmluZ0NhbGxiYWNrKSB7XG4gICAgX3dhcm5pbmdDYWxsYmFjayA9IHdhcm5pbmdDYWxsYmFjaztcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXdhcm4uanMubWFwIiwiaW1wb3J0IHsgX19leHRlbmRzIH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBBc3luYyB9IGZyb20gJy4vQXN5bmMnO1xuaW1wb3J0IHsgRXZlbnRHcm91cCB9IGZyb20gJy4vRXZlbnRHcm91cCc7XG5pbXBvcnQgeyB3YXJuQ29uZGl0aW9uYWxseVJlcXVpcmVkUHJvcHMgfSBmcm9tICcuL3dhcm4vd2FybkNvbmRpdGlvbmFsbHlSZXF1aXJlZFByb3BzJztcbmltcG9ydCB7IHdhcm5NdXR1YWxseUV4Y2x1c2l2ZSB9IGZyb20gJy4vd2Fybi93YXJuTXV0dWFsbHlFeGNsdXNpdmUnO1xuaW1wb3J0IHsgd2FybkRlcHJlY2F0aW9ucyB9IGZyb20gJy4vd2Fybi93YXJuRGVwcmVjYXRpb25zJztcbi8qKlxuICogQmFzZUNvbXBvbmVudCBjbGFzcywgd2hpY2ggcHJvdmlkZXMgYmFzaWMgaGVscGVycyBmb3IgYWxsIGNvbXBvbmVudHMuXG4gKlxuICogQHB1YmxpY1xuICoge0Bkb2NDYXRlZ29yeSBCYXNlQ29tcG9uZW50fVxuICpcbiAqIEBkZXByZWNhdGVkIERvIG5vdCB1c2UuIFdlIGFyZSBtb3ZpbmcgYXdheSBmcm9tIGNsYXNzIGNvbXBvbmVudC5cbiAqL1xudmFyIEJhc2VDb21wb25lbnQgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKEJhc2VDb21wb25lbnQsIF9zdXBlcik7XG4gICAgLyoqXG4gICAgICogQmFzZUNvbXBvbmVudCBjb25zdHJ1Y3RvclxuICAgICAqIEBwYXJhbSBwcm9wcyAtIFRoZSBwcm9wcyBmb3IgdGhlIGNvbXBvbmVudC5cbiAgICAgKiBAcGFyYW0gY29udGV4dCAtIFRoZSBjb250ZXh0IGZvciB0aGUgY29tcG9uZW50LlxuICAgICAqL1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgZnVuY3Rpb24gQmFzZUNvbXBvbmVudChwcm9wcywgY29udGV4dCkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBwcm9wcywgY29udGV4dCkgfHwgdGhpcztcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGRlcHJlY2F0aW9uL2RlcHJlY2F0aW9uXG4gICAgICAgIF9tYWtlQWxsU2FmZShfdGhpcywgQmFzZUNvbXBvbmVudC5wcm90b3R5cGUsIFtcbiAgICAgICAgICAgICdjb21wb25lbnREaWRNb3VudCcsXG4gICAgICAgICAgICAnc2hvdWxkQ29tcG9uZW50VXBkYXRlJyxcbiAgICAgICAgICAgICdnZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZScsXG4gICAgICAgICAgICAncmVuZGVyJyxcbiAgICAgICAgICAgICdjb21wb25lbnREaWRVcGRhdGUnLFxuICAgICAgICAgICAgJ2NvbXBvbmVudFdpbGxVbm1vdW50JyxcbiAgICAgICAgXSk7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogV2hlbiB0aGUgY29tcG9uZW50IHJlY2VpdmVzIHByb3BzLCBtYWtlIHN1cmUgdGhlIGNvbXBvbmVudFJlZiBpcyB1cGRhdGVkLlxuICAgICAqL1xuICAgIEJhc2VDb21wb25lbnQucHJvdG90eXBlLmNvbXBvbmVudERpZFVwZGF0ZSA9IGZ1bmN0aW9uIChwcmV2UHJvcHMsIHByZXZTdGF0ZSkge1xuICAgICAgICB0aGlzLl91cGRhdGVDb21wb25lbnRSZWYocHJldlByb3BzLCB0aGlzLnByb3BzKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFdoZW4gdGhlIGNvbXBvbmVudCBoYXMgbW91bnRlZCwgdXBkYXRlIHRoZSBjb21wb25lbnRSZWYuXG4gICAgICovXG4gICAgQmFzZUNvbXBvbmVudC5wcm90b3R5cGUuY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuX3NldENvbXBvbmVudFJlZih0aGlzLnByb3BzLmNvbXBvbmVudFJlZiwgdGhpcyk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBJZiB3ZSBoYXZlIGRpc3Bvc2FibGVzLCBkaXNwb3NlIHRoZW0gYXV0b21hdGljYWxseSBvbiB1bm1vdW50LlxuICAgICAqL1xuICAgIEJhc2VDb21wb25lbnQucHJvdG90eXBlLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLl9zZXRDb21wb25lbnRSZWYodGhpcy5wcm9wcy5jb21wb25lbnRSZWYsIG51bGwpO1xuICAgICAgICBpZiAodGhpcy5fX2Rpc3Bvc2FibGVzKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gdGhpcy5fZGlzcG9zYWJsZXMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgZGlzcG9zYWJsZSA9IHRoaXMuX19kaXNwb3NhYmxlc1tpXTtcbiAgICAgICAgICAgICAgICBpZiAoZGlzcG9zYWJsZS5kaXNwb3NlKSB7XG4gICAgICAgICAgICAgICAgICAgIGRpc3Bvc2FibGUuZGlzcG9zZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuX19kaXNwb3NhYmxlcyA9IG51bGw7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShCYXNlQ29tcG9uZW50LnByb3RvdHlwZSwgXCJjbGFzc05hbWVcIiwge1xuICAgICAgICAvKipcbiAgICAgICAgICogR2V0cyB0aGUgb2JqZWN0J3MgY2xhc3MgbmFtZS5cbiAgICAgICAgICovXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKCF0aGlzLl9fY2xhc3NOYW1lKSB7XG4gICAgICAgICAgICAgICAgdmFyIGZ1bmNOYW1lUmVnZXggPSAvZnVuY3Rpb24gKC57MSx9KVxcKC87XG4gICAgICAgICAgICAgICAgdmFyIHJlc3VsdHMgPSBmdW5jTmFtZVJlZ2V4LmV4ZWModGhpcy5jb25zdHJ1Y3Rvci50b1N0cmluZygpKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9fY2xhc3NOYW1lID0gcmVzdWx0cyAmJiByZXN1bHRzLmxlbmd0aCA+IDEgPyByZXN1bHRzWzFdIDogJyc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fX2NsYXNzTmFtZTtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShCYXNlQ29tcG9uZW50LnByb3RvdHlwZSwgXCJfZGlzcG9zYWJsZXNcIiwge1xuICAgICAgICAvKipcbiAgICAgICAgICogQWxsb3dzIHN1YmNsYXNzZXMgdG8gcHVzaCB0aGluZ3MgdG8gdGhpcy5fZGlzcG9zYWJsZXMgdG8gYmUgYXV0byBkaXNwb3NlZC5cbiAgICAgICAgICovXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKCF0aGlzLl9fZGlzcG9zYWJsZXMpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9fZGlzcG9zYWJsZXMgPSBbXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9fZGlzcG9zYWJsZXM7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQmFzZUNvbXBvbmVudC5wcm90b3R5cGUsIFwiX2FzeW5jXCIsIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEdldHMgdGhlIGFzeW5jIGluc3RhbmNlIGFzc29jaWF0ZWQgd2l0aCB0aGUgY29tcG9uZW50LCBjcmVhdGVkIG9uIGRlbWFuZC4gVGhlIGFzeW5jIGluc3RhbmNlIGdpdmVzXG4gICAgICAgICAqIHN1YmNsYXNzZXMgYSB3YXkgdG8gZXhlY3V0ZSBzZXRUaW1lb3V0L3NldEludGVydmFsIGFzeW5jIGNhbGxzIHNhZmVseSwgd2hlcmUgdGhlIGNhbGxiYWNrc1xuICAgICAgICAgKiB3aWxsIGJlIGNsZWFyZWQvaWdub3JlZCBhdXRvbWF0aWNhbGx5IGFmdGVyIHVubW91bnRpbmcuIFRoZSBoZWxwZXJzIHdpdGhpbiB0aGUgYXN5bmMgb2JqZWN0IGFsc29cbiAgICAgICAgICogcHJlc2VydmUgdGhlIHRoaXMgcG9pbnRlciBzbyB0aGF0IHlvdSBkb24ndCBuZWVkIHRvIFwiYmluZFwiIHRoZSBjYWxsYmFja3MuXG4gICAgICAgICAqL1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmICghdGhpcy5fX2FzeW5jKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fX2FzeW5jID0gbmV3IEFzeW5jKHRoaXMpO1xuICAgICAgICAgICAgICAgIHRoaXMuX2Rpc3Bvc2FibGVzLnB1c2godGhpcy5fX2FzeW5jKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9fYXN5bmM7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQmFzZUNvbXBvbmVudC5wcm90b3R5cGUsIFwiX2V2ZW50c1wiLCB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBHZXRzIHRoZSBldmVudCBncm91cCBpbnN0YW5jZSBhc3NvY2FpdGVkIHdpdGggdGhlIGNvbXBvbmVudCwgY3JlYXRlZCBvbiBkZW1hbmQuIFRoZSBldmVudCBpbnN0YW5jZVxuICAgICAgICAgKiBwcm92aWRlcyBvbi9vZmYgbWV0aG9kcyBmb3IgbGlzdGVuaW5nIHRvIERPTSAob3IgcmVndWxhciBqYXZhc2NyaXB0IG9iamVjdCkgZXZlbnRzLiBUaGUgZXZlbnQgY2FsbGJhY2tzXG4gICAgICAgICAqIHdpbGwgYmUgYXV0b21hdGljYWxseSBkaXNjb25uZWN0ZWQgYWZ0ZXIgdW5tb3VudGluZy4gVGhlIGhlbHBlcnMgd2l0aGluIHRoZSBldmVudHMgb2JqZWN0IGFsc29cbiAgICAgICAgICogcHJlc2VydmUgdGhlIHRoaXMgcmVmZXJlbmNlIHNvIHRoYXQgeW91IGRvbid0IG5lZWQgdG8gXCJiaW5kXCIgdGhlIGNhbGxiYWNrcy5cbiAgICAgICAgICovXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKCF0aGlzLl9fZXZlbnRzKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fX2V2ZW50cyA9IG5ldyBFdmVudEdyb3VwKHRoaXMpO1xuICAgICAgICAgICAgICAgIHRoaXMuX2Rpc3Bvc2FibGVzLnB1c2godGhpcy5fX2V2ZW50cyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fX2V2ZW50cztcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIC8qKlxuICAgICAqIEhlbHBlciB0byByZXR1cm4gYSBtZW1vaXplZCByZWYgcmVzb2x2ZXIgZnVuY3Rpb24uXG4gICAgICogQHBhcmFtIHJlZk5hbWUgLSBOYW1lIG9mIHRoZSBtZW1iZXIgdG8gYXNzaWduIHRoZSByZWYgdG8uXG4gICAgICogQHJldHVybnMgQSBmdW5jdGlvbiBpbnN0YW5jZSBrZXllZCBmcm9tIHRoZSBnaXZlbiByZWZuYW1lLlxuICAgICAqIEBkZXByZWNhdGVkIFVzZSBgY3JlYXRlUmVmYCBmcm9tIFJlYWN0LmNyZWF0ZVJlZi5cbiAgICAgKi9cbiAgICBCYXNlQ29tcG9uZW50LnByb3RvdHlwZS5fcmVzb2x2ZVJlZiA9IGZ1bmN0aW9uIChyZWZOYW1lKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIGlmICghdGhpcy5fX3Jlc29sdmVzKSB7XG4gICAgICAgICAgICB0aGlzLl9fcmVzb2x2ZXMgPSB7fTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXRoaXMuX19yZXNvbHZlc1tyZWZOYW1lXSkge1xuICAgICAgICAgICAgdGhpcy5fX3Jlc29sdmVzW3JlZk5hbWVdID0gZnVuY3Rpb24gKHJlZikge1xuICAgICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgICAgICAgICAgICAgcmV0dXJuIChfdGhpc1tyZWZOYW1lXSA9IHJlZik7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl9fcmVzb2x2ZXNbcmVmTmFtZV07XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBVcGRhdGVzIHRoZSBjb21wb25lbnRSZWYgKGJ5IGNhbGxpbmcgaXQgd2l0aCBcInRoaXNcIiB3aGVuIG5lY2Vzc2FyeS4pXG4gICAgICovXG4gICAgQmFzZUNvbXBvbmVudC5wcm90b3R5cGUuX3VwZGF0ZUNvbXBvbmVudFJlZiA9IGZ1bmN0aW9uIChjdXJyZW50UHJvcHMsIG5ld1Byb3BzKSB7XG4gICAgICAgIGlmIChuZXdQcm9wcyA9PT0gdm9pZCAwKSB7IG5ld1Byb3BzID0ge307IH1cbiAgICAgICAgLy8gY3VycmVudFByb3BzICpzaG91bGQqIGFsd2F5cyBiZSBkZWZpbmVkLCBidXQgdmVyaWZ5IHRoYXQganVzdCBpbiBjYXNlIGEgc3ViY2xhc3MgaXMgbWFudWFsbHlcbiAgICAgICAgLy8gY2FsbGluZyBhIGxpZmVjeWNsZSBtZXRob2Qgd2l0aCBubyBwYXJhbWV0ZXJzICh3aGljaCBoYXMgaGFwcGVuZWQpIG9yIG90aGVyIG9kZCB1c2FnZS5cbiAgICAgICAgaWYgKGN1cnJlbnRQcm9wcyAmJiBuZXdQcm9wcyAmJiBjdXJyZW50UHJvcHMuY29tcG9uZW50UmVmICE9PSBuZXdQcm9wcy5jb21wb25lbnRSZWYpIHtcbiAgICAgICAgICAgIHRoaXMuX3NldENvbXBvbmVudFJlZihjdXJyZW50UHJvcHMuY29tcG9uZW50UmVmLCBudWxsKTtcbiAgICAgICAgICAgIHRoaXMuX3NldENvbXBvbmVudFJlZihuZXdQcm9wcy5jb21wb25lbnRSZWYsIHRoaXMpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBXYXJucyB3aGVuIGEgZGVwcmVjYXRlZCBwcm9wcyBhcmUgYmVpbmcgdXNlZC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBkZXByZWNhdGlvbk1hcCAtIFRoZSBtYXAgb2YgZGVwcmVjYXRpb25zLCB3aGVyZSBrZXkgaXMgdGhlIHByb3AgbmFtZSBhbmQgdGhlIHZhbHVlIGlzXG4gICAgICogZWl0aGVyIG51bGwgb3IgYSByZXBsYWNlbWVudCBwcm9wIG5hbWUuXG4gICAgICovXG4gICAgQmFzZUNvbXBvbmVudC5wcm90b3R5cGUuX3dhcm5EZXByZWNhdGlvbnMgPSBmdW5jdGlvbiAoZGVwcmVjYXRpb25NYXApIHtcbiAgICAgICAgd2FybkRlcHJlY2F0aW9ucyh0aGlzLmNsYXNzTmFtZSwgdGhpcy5wcm9wcywgZGVwcmVjYXRpb25NYXApO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogV2FybnMgd2hlbiBwcm9wcyB3aGljaCBhcmUgbXV0dWFsbHkgZXhjbHVzaXZlIHdpdGggZWFjaCBvdGhlciBhcmUgYm90aCB1c2VkLlxuICAgICAqXG4gICAgICogQHBhcmFtIG11dHVhbGx5RXhjbHVzaXZlTWFwIC0gVGhlIG1hcCBvZiBtdXR1YWxseSBleGNsdXNpdmUgcHJvcHMuXG4gICAgICovXG4gICAgQmFzZUNvbXBvbmVudC5wcm90b3R5cGUuX3dhcm5NdXR1YWxseUV4Y2x1c2l2ZSA9IGZ1bmN0aW9uIChtdXR1YWxseUV4Y2x1c2l2ZU1hcCkge1xuICAgICAgICB3YXJuTXV0dWFsbHlFeGNsdXNpdmUodGhpcy5jbGFzc05hbWUsIHRoaXMucHJvcHMsIG11dHVhbGx5RXhjbHVzaXZlTWFwKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFdhcm5zIHdoZW4gcHJvcHMgYXJlIHJlcXVpcmVkIGlmIGEgY29uZGl0aW9uIGlzIG1ldC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSByZXF1aXJlZFByb3BzIC0gVGhlIG5hbWUgb2YgdGhlIHByb3BzIHRoYXQgYXJlIHJlcXVpcmVkIHdoZW4gdGhlIGNvbmRpdGlvbiBpcyBtZXQuXG4gICAgICogQHBhcmFtIGNvbmRpdGlvbmFsUHJvcE5hbWUgLSBUaGUgbmFtZSBvZiB0aGUgcHJvcCB0aGF0IHRoZSBjb25kaXRpb24gaXMgYmFzZWQgb24uXG4gICAgICogQHBhcmFtIGNvbmRpdGlvbiAtIFdoZXRoZXIgdGhlIGNvbmRpdGlvbiBpcyBtZXQuXG4gICAgICovXG4gICAgQmFzZUNvbXBvbmVudC5wcm90b3R5cGUuX3dhcm5Db25kaXRpb25hbGx5UmVxdWlyZWRQcm9wcyA9IGZ1bmN0aW9uIChyZXF1aXJlZFByb3BzLCBjb25kaXRpb25hbFByb3BOYW1lLCBjb25kaXRpb24pIHtcbiAgICAgICAgd2FybkNvbmRpdGlvbmFsbHlSZXF1aXJlZFByb3BzKHRoaXMuY2xhc3NOYW1lLCB0aGlzLnByb3BzLCByZXF1aXJlZFByb3BzLCBjb25kaXRpb25hbFByb3BOYW1lLCBjb25kaXRpb24pO1xuICAgIH07XG4gICAgQmFzZUNvbXBvbmVudC5wcm90b3R5cGUuX3NldENvbXBvbmVudFJlZiA9IGZ1bmN0aW9uIChyZWYsIHZhbHVlKSB7XG4gICAgICAgIGlmICghdGhpcy5fc2tpcENvbXBvbmVudFJlZlJlc29sdXRpb24gJiYgcmVmKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHJlZiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgIHJlZih2YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodHlwZW9mIHJlZiA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgICAgICAgICAgICAgIHJlZi5jdXJyZW50ID0gdmFsdWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBCYXNlQ29tcG9uZW50O1xufShSZWFjdC5Db21wb25lbnQpKTtcbmV4cG9ydCB7IEJhc2VDb21wb25lbnQgfTtcbi8qKlxuICogSGVscGVyIHRvIG92ZXJyaWRlIGEgZ2l2ZW4gbWV0aG9kIHdpdGggYSB3cmFwcGVyIG1ldGhvZCB0aGF0IGNhbiB0cnkvY2F0Y2ggdGhlIG9yaWdpbmFsLCBidXQgYWxzb1xuICogZW5zdXJlcyB0aGF0IHRoZSBCYXNlQ29tcG9uZW50J3MgbWV0aG9kcyBhcmUgY2FsbGVkIGJlZm9yZSB0aGUgc3ViY2xhc3Mncy4gVGhpcyBlbnN1cmVzIHRoYXRcbiAqIGNvbXBvbmVudFdpbGxVbm1vdW50IGluIHRoZSBiYXNlIGlzIGNhbGxlZCBhbmQgdGhhdCB0aGluZ3MgaW4gdGhlIF9kaXNwb3NhYmxlcyBhcnJheSBhcmUgZGlzcG9zZWQuXG4gKi9cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBkZXByZWNhdGlvbi9kZXByZWNhdGlvblxuZnVuY3Rpb24gX21ha2VBbGxTYWZlKG9iaiwgcHJvdG90eXBlLCBtZXRob2ROYW1lcykge1xuICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBtZXRob2ROYW1lcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICBfbWFrZVNhZmUob2JqLCBwcm90b3R5cGUsIG1ldGhvZE5hbWVzW2ldKTtcbiAgICB9XG59XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZGVwcmVjYXRpb24vZGVwcmVjYXRpb25cbmZ1bmN0aW9uIF9tYWtlU2FmZShvYmosIHByb3RvdHlwZSwgbWV0aG9kTmFtZSkge1xuICAgIC8qIGVzbGludC1kaXNhYmxlIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnkgKi9cbiAgICB2YXIgY2xhc3NNZXRob2QgPSBvYmpbbWV0aG9kTmFtZV07XG4gICAgdmFyIHByb3RvdHlwZU1ldGhvZCA9IHByb3RvdHlwZVttZXRob2ROYW1lXTtcbiAgICBpZiAoY2xhc3NNZXRob2QgfHwgcHJvdG90eXBlTWV0aG9kKSB7XG4gICAgICAgIG9ialttZXRob2ROYW1lXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBhcmdzID0gW107XG4gICAgICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgICAgIGFyZ3NbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8qIGVzbGludC1lbmFibGUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueSAqL1xuICAgICAgICAgICAgdmFyIHJldFZhbDtcbiAgICAgICAgICAgIGlmIChwcm90b3R5cGVNZXRob2QpIHtcbiAgICAgICAgICAgICAgICByZXRWYWwgPSBwcm90b3R5cGVNZXRob2QuYXBwbHkodGhpcywgYXJncyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoY2xhc3NNZXRob2QgIT09IHByb3RvdHlwZU1ldGhvZCkge1xuICAgICAgICAgICAgICAgIHJldFZhbCA9IGNsYXNzTWV0aG9kLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHJldFZhbDtcbiAgICAgICAgfTtcbiAgICB9XG59XG4vKipcbiAqIFNpbXBsZSBjb25zdGFudCBmdW5jdGlvbiBmb3IgcmV0dXJuaW5nIG51bGwsIHVzZWQgdG8gcmVuZGVyIGVtcHR5IHRlbXBsYXRlcyBpbiBKU1guXG4gKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgZnVuY3Rpb24gbnVsbFJlbmRlcigpIHtcbiAgICByZXR1cm4gbnVsbDtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUJhc2VDb21wb25lbnQuanMubWFwIiwiaW1wb3J0IHsgZ2V0V2luZG93IH0gZnJvbSAnLi9kb20vZ2V0V2luZG93Jztcbi8qKlxuICogU3RvcmluZyBnbG9iYWwgc3RhdGUgaW4gbG9jYWwgbW9kdWxlIHZhcmlhYmxlcyBoYXMgaXNzdWVzIHdoZW4gbW9yZSB0aGFuIG9uZSBjb3B5XG4gKiBpZiB0aGUgbW9kdWxlIGdldHMgbG9hZGVkIG9uIHRoZSBwYWdlIChkdWUgdG8gYSBidW5kbGluZyBlcnJvciBvciBzaW1wbHkgYnkgY29uc3VtaW5nXG4gKiBhIHByZWJ1bmRsZWQgc2NyaXB0LilcbiAqXG4gKiBUaGlzIGZpbGUgY29udGFpbnMgaGVscGVycyB0byBkZWFsIHdpdGggdGhlIGdldHRpbmcgYW5kIHNldHRpbmcgbG9jYWwgc3RhdGUsIGFuZCBhbGxvd3NcbiAqIGNhbGxlcnMgdG8gZ2V0IGNhbGxlZCBiYWNrIHdoZW4gaXQgbXV0YXRlcy5cbiAqL1xudmFyIEdMT0JBTF9TRVRUSU5HU19QUk9QX05BTUUgPSAnX19nbG9iYWxTZXR0aW5nc19fJztcbnZhciBDQUxMQkFDS19TVEFURV9QUk9QX05BTUUgPSAnX19jYWxsYmFja3NfXyc7XG52YXIgX2NvdW50ZXIgPSAwO1xuLyoqXG4gKiBHbG9iYWwgc2V0dGluZ3MgaGVscGVyLCB3aGljaCBzdG9yZXMgc2V0dGluZ3MgaW4gdGhlIGdsb2JhbCAod2luZG93KSBuYW1lc3BhY2UuXG4gKiBJZiB3aW5kb3cgaXMgbm90IHByb3ZpZGVkLCBpdCB3aWxsIHN0b3JlIHNldHRpbmdzIGluIG1vZHVsZSBzY29wZS4gUHJvdmlkZXMgYVxuICogd2F5IHRvIG9ic2VydmUgY2hhbmdlcyBhcyB3ZWxsIHdoZW4gdGhlaXIgdmFsdWVzIGNoYW5nZS5cbiAqXG4gKiBAcHVibGljXG4gKiB7QGRvY0NhdGVnb3J5IEdsb2JhbFNldHRpbmdzfVxuICovXG52YXIgR2xvYmFsU2V0dGluZ3MgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gR2xvYmFsU2V0dGluZ3MoKSB7XG4gICAgfVxuICAgIEdsb2JhbFNldHRpbmdzLmdldFZhbHVlID0gZnVuY3Rpb24gKGtleSwgZGVmYXVsdFZhbHVlKSB7XG4gICAgICAgIHZhciBnbG9iYWxTZXR0aW5ncyA9IF9nZXRHbG9iYWxTZXR0aW5ncygpO1xuICAgICAgICBpZiAoZ2xvYmFsU2V0dGluZ3Nba2V5XSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBnbG9iYWxTZXR0aW5nc1trZXldID0gdHlwZW9mIGRlZmF1bHRWYWx1ZSA9PT0gJ2Z1bmN0aW9uJyA/IGRlZmF1bHRWYWx1ZSgpIDogZGVmYXVsdFZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBnbG9iYWxTZXR0aW5nc1trZXldO1xuICAgIH07XG4gICAgR2xvYmFsU2V0dGluZ3Muc2V0VmFsdWUgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICAgICAgICB2YXIgZ2xvYmFsU2V0dGluZ3MgPSBfZ2V0R2xvYmFsU2V0dGluZ3MoKTtcbiAgICAgICAgdmFyIGNhbGxiYWNrcyA9IGdsb2JhbFNldHRpbmdzW0NBTExCQUNLX1NUQVRFX1BST1BfTkFNRV07XG4gICAgICAgIHZhciBvbGRWYWx1ZSA9IGdsb2JhbFNldHRpbmdzW2tleV07XG4gICAgICAgIGlmICh2YWx1ZSAhPT0gb2xkVmFsdWUpIHtcbiAgICAgICAgICAgIGdsb2JhbFNldHRpbmdzW2tleV0gPSB2YWx1ZTtcbiAgICAgICAgICAgIHZhciBjaGFuZ2VEZXNjcmlwdGlvbiA9IHtcbiAgICAgICAgICAgICAgICBvbGRWYWx1ZTogb2xkVmFsdWUsXG4gICAgICAgICAgICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgICAgICAgICAgIGtleToga2V5LFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGZvciAodmFyIGlkIGluIGNhbGxiYWNrcykge1xuICAgICAgICAgICAgICAgIGlmIChjYWxsYmFja3MuaGFzT3duUHJvcGVydHkoaWQpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrc1tpZF0oY2hhbmdlRGVzY3JpcHRpb24pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfTtcbiAgICBHbG9iYWxTZXR0aW5ncy5hZGRDaGFuZ2VMaXN0ZW5lciA9IGZ1bmN0aW9uIChjYikge1xuICAgICAgICAvLyBOb3RlOiB3ZSB1c2UgZ2VuZXJhdGVkIGlkcyBvbiB0aGUgY2FsbGJhY2tzIHRvIGNyZWF0ZSBhIG1hcCBvZiB0aGUgY2FsbGJhY2tzLCB3aGljaCBvcHRpbWl6ZXMgcmVtb3ZhbC5cbiAgICAgICAgLy8gKEl0J3MgZmFzdGVyIHRvIGRlbGV0ZSBhIGtleSB0aGFuIGl0IGlzIHRvIGxvb2sgdXAgdGhlIGluZGV4IG9mIGFuIG9iamVjdCBhbmQgc3BsaWNlIGFuIGFycmF5LilcbiAgICAgICAgdmFyIGlkID0gY2IuX19pZF9fO1xuICAgICAgICB2YXIgY2FsbGJhY2tzID0gX2dldENhbGxiYWNrcygpO1xuICAgICAgICBpZiAoIWlkKSB7XG4gICAgICAgICAgICBpZCA9IGNiLl9faWRfXyA9IFN0cmluZyhfY291bnRlcisrKTtcbiAgICAgICAgfVxuICAgICAgICBjYWxsYmFja3NbaWRdID0gY2I7XG4gICAgfTtcbiAgICBHbG9iYWxTZXR0aW5ncy5yZW1vdmVDaGFuZ2VMaXN0ZW5lciA9IGZ1bmN0aW9uIChjYikge1xuICAgICAgICB2YXIgY2FsbGJhY2tzID0gX2dldENhbGxiYWNrcygpO1xuICAgICAgICBkZWxldGUgY2FsbGJhY2tzW2NiLl9faWRfX107XG4gICAgfTtcbiAgICByZXR1cm4gR2xvYmFsU2V0dGluZ3M7XG59KCkpO1xuZXhwb3J0IHsgR2xvYmFsU2V0dGluZ3MgfTtcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG5mdW5jdGlvbiBfZ2V0R2xvYmFsU2V0dGluZ3MoKSB7XG4gICAgdmFyIF9hO1xuICAgIHZhciB3aW4gPSBnZXRXaW5kb3coKTtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgIHZhciBnbG9iYWxPYmogPSB3aW4gfHwge307XG4gICAgaWYgKCFnbG9iYWxPYmpbR0xPQkFMX1NFVFRJTkdTX1BST1BfTkFNRV0pIHtcbiAgICAgICAgZ2xvYmFsT2JqW0dMT0JBTF9TRVRUSU5HU19QUk9QX05BTUVdID0gKF9hID0ge30sXG4gICAgICAgICAgICBfYVtDQUxMQkFDS19TVEFURV9QUk9QX05BTUVdID0ge30sXG4gICAgICAgICAgICBfYSk7XG4gICAgfVxuICAgIHJldHVybiBnbG9iYWxPYmpbR0xPQkFMX1NFVFRJTkdTX1BST1BfTkFNRV07XG59XG5mdW5jdGlvbiBfZ2V0Q2FsbGJhY2tzKCkge1xuICAgIHZhciBnbG9iYWxTZXR0aW5ncyA9IF9nZXRHbG9iYWxTZXR0aW5ncygpO1xuICAgIHJldHVybiBnbG9iYWxTZXR0aW5nc1tDQUxMQkFDS19TVEFURV9QUk9QX05BTUVdO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9R2xvYmFsU2V0dGluZ3MuanMubWFwIiwiaW1wb3J0IHsgX19hc3NpZ24gfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IEdsb2JhbFNldHRpbmdzIH0gZnJvbSAnLi4vR2xvYmFsU2V0dGluZ3MnO1xudmFyIEN1c3RvbWl6YXRpb25zR2xvYmFsS2V5ID0gJ2N1c3RvbWl6YXRpb25zJztcbnZhciBOT19DVVNUT01JWkFUSU9OUyA9IHsgc2V0dGluZ3M6IHt9LCBzY29wZWRTZXR0aW5nczoge30sIGluQ3VzdG9taXplckNvbnRleHQ6IGZhbHNlIH07XG52YXIgX2FsbFNldHRpbmdzID0gR2xvYmFsU2V0dGluZ3MuZ2V0VmFsdWUoQ3VzdG9taXphdGlvbnNHbG9iYWxLZXksIHtcbiAgICBzZXR0aW5nczoge30sXG4gICAgc2NvcGVkU2V0dGluZ3M6IHt9LFxuICAgIGluQ3VzdG9taXplckNvbnRleHQ6IGZhbHNlLFxufSk7XG52YXIgX2V2ZW50cyA9IFtdO1xudmFyIEN1c3RvbWl6YXRpb25zID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEN1c3RvbWl6YXRpb25zKCkge1xuICAgIH1cbiAgICBDdXN0b21pemF0aW9ucy5yZXNldCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX2FsbFNldHRpbmdzLnNldHRpbmdzID0ge307XG4gICAgICAgIF9hbGxTZXR0aW5ncy5zY29wZWRTZXR0aW5ncyA9IHt9O1xuICAgIH07XG4gICAgLyoqIEFwcGx5IGdsb2JhbCBDdXN0b21pemF0aW9uIHNldHRpbmdzLlxuICAgICAqIEBleGFtcGxlIEN1c3RvbWl6YXRpb25zLmFwcGx5U2V0dGluZ3MoXFx7IHRoZW1lOiBcXHsuLi5cXH0gXFx9KTtcbiAgICAgKi9cbiAgICBDdXN0b21pemF0aW9ucy5hcHBseVNldHRpbmdzID0gZnVuY3Rpb24gKHNldHRpbmdzKSB7XG4gICAgICAgIF9hbGxTZXR0aW5ncy5zZXR0aW5ncyA9IF9fYXNzaWduKF9fYXNzaWduKHt9LCBfYWxsU2V0dGluZ3Muc2V0dGluZ3MpLCBzZXR0aW5ncyk7XG4gICAgICAgIEN1c3RvbWl6YXRpb25zLl9yYWlzZUNoYW5nZSgpO1xuICAgIH07XG4gICAgLyoqIEFwcGx5IEN1c3RvbWl6YXRpb25zIHRvIGEgcGFydGljdWxhciBuYW1lZCBzY29wZSwgbGlrZSBhIGNvbXBvbmVudC5cbiAgICAgKiBAZXhhbXBsZSBDdXN0b21pemF0aW9ucy5hcHBseVNjb3BlZFNldHRpbmdzKCdOYXYnLCBcXHsgc3R5bGVzOiAoKSA9XFw+IFxce1xcfSBcXH0pO1xuICAgICAqL1xuICAgIEN1c3RvbWl6YXRpb25zLmFwcGx5U2NvcGVkU2V0dGluZ3MgPSBmdW5jdGlvbiAoc2NvcGVOYW1lLCBzZXR0aW5ncykge1xuICAgICAgICBfYWxsU2V0dGluZ3Muc2NvcGVkU2V0dGluZ3Nbc2NvcGVOYW1lXSA9IF9fYXNzaWduKF9fYXNzaWduKHt9LCBfYWxsU2V0dGluZ3Muc2NvcGVkU2V0dGluZ3Nbc2NvcGVOYW1lXSksIHNldHRpbmdzKTtcbiAgICAgICAgQ3VzdG9taXphdGlvbnMuX3JhaXNlQ2hhbmdlKCk7XG4gICAgfTtcbiAgICBDdXN0b21pemF0aW9ucy5nZXRTZXR0aW5ncyA9IGZ1bmN0aW9uIChwcm9wZXJ0aWVzLCBzY29wZU5hbWUsIGxvY2FsU2V0dGluZ3MpIHtcbiAgICAgICAgaWYgKGxvY2FsU2V0dGluZ3MgPT09IHZvaWQgMCkgeyBsb2NhbFNldHRpbmdzID0gTk9fQ1VTVE9NSVpBVElPTlM7IH1cbiAgICAgICAgdmFyIHNldHRpbmdzID0ge307XG4gICAgICAgIHZhciBsb2NhbFNjb3BlZFNldHRpbmdzID0gKHNjb3BlTmFtZSAmJiBsb2NhbFNldHRpbmdzLnNjb3BlZFNldHRpbmdzW3Njb3BlTmFtZV0pIHx8IHt9O1xuICAgICAgICB2YXIgZ2xvYmFsU2NvcGVkU2V0dGluZ3MgPSAoc2NvcGVOYW1lICYmIF9hbGxTZXR0aW5ncy5zY29wZWRTZXR0aW5nc1tzY29wZU5hbWVdKSB8fCB7fTtcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBwcm9wZXJ0aWVzXzEgPSBwcm9wZXJ0aWVzOyBfaSA8IHByb3BlcnRpZXNfMS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIHZhciBwcm9wZXJ0eSA9IHByb3BlcnRpZXNfMVtfaV07XG4gICAgICAgICAgICBzZXR0aW5nc1twcm9wZXJ0eV0gPVxuICAgICAgICAgICAgICAgIGxvY2FsU2NvcGVkU2V0dGluZ3NbcHJvcGVydHldIHx8XG4gICAgICAgICAgICAgICAgICAgIGxvY2FsU2V0dGluZ3Muc2V0dGluZ3NbcHJvcGVydHldIHx8XG4gICAgICAgICAgICAgICAgICAgIGdsb2JhbFNjb3BlZFNldHRpbmdzW3Byb3BlcnR5XSB8fFxuICAgICAgICAgICAgICAgICAgICBfYWxsU2V0dGluZ3Muc2V0dGluZ3NbcHJvcGVydHldO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzZXR0aW5ncztcbiAgICB9O1xuICAgIC8qKiBVc2VkIHRvIHJ1biBzb21lIGNvZGUgdGhhdCBzZXRzIEN1c3RvbWl6YXRpb25zIHdpdGhvdXQgdHJpZ2dlcmluZyBhbiB1cGRhdGUgdW50aWwgdGhlIGVuZC5cbiAgICAgKiBVc2VmdWwgZm9yIGFwcGx5aW5nIEN1c3RvbWl6YXRpb25zIHRoYXQgZG9uJ3QgYWZmZWN0IGFueXRoaW5nIGN1cnJlbnRseSByZW5kZXJlZCwgb3IgZm9yXG4gICAgICogYXBwbHlpbmcgbWFueSBjdXN0b21pemF0aW9ucyBhdCBvbmNlLlxuICAgICAqIEBwYXJhbSBzdXBwcmVzc1VwZGF0ZSAtIERvIG5vdCByYWlzZSB0aGUgY2hhbmdlIGV2ZW50IGF0IHRoZSBlbmQsIHByZXZlbnRpbmcgYWxsIHVwZGF0ZXNcbiAgICAgKi9cbiAgICBDdXN0b21pemF0aW9ucy5hcHBseUJhdGNoZWRVcGRhdGVzID0gZnVuY3Rpb24gKGNvZGUsIHN1cHByZXNzVXBkYXRlKSB7XG4gICAgICAgIEN1c3RvbWl6YXRpb25zLl9zdXBwcmVzc1VwZGF0ZXMgPSB0cnVlO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29kZSgpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChfYSkge1xuICAgICAgICAgICAgLyogZG8gbm90aGluZyAqL1xuICAgICAgICB9XG4gICAgICAgIEN1c3RvbWl6YXRpb25zLl9zdXBwcmVzc1VwZGF0ZXMgPSBmYWxzZTtcbiAgICAgICAgaWYgKCFzdXBwcmVzc1VwZGF0ZSkge1xuICAgICAgICAgICAgQ3VzdG9taXphdGlvbnMuX3JhaXNlQ2hhbmdlKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEN1c3RvbWl6YXRpb25zLm9ic2VydmUgPSBmdW5jdGlvbiAob25DaGFuZ2UpIHtcbiAgICAgICAgX2V2ZW50cy5wdXNoKG9uQ2hhbmdlKTtcbiAgICB9O1xuICAgIEN1c3RvbWl6YXRpb25zLnVub2JzZXJ2ZSA9IGZ1bmN0aW9uIChvbkNoYW5nZSkge1xuICAgICAgICBfZXZlbnRzID0gX2V2ZW50cy5maWx0ZXIoZnVuY3Rpb24gKGNiKSB7IHJldHVybiBjYiAhPT0gb25DaGFuZ2U7IH0pO1xuICAgIH07XG4gICAgQ3VzdG9taXphdGlvbnMuX3JhaXNlQ2hhbmdlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoIUN1c3RvbWl6YXRpb25zLl9zdXBwcmVzc1VwZGF0ZXMpIHtcbiAgICAgICAgICAgIF9ldmVudHMuZm9yRWFjaChmdW5jdGlvbiAoY2IpIHsgcmV0dXJuIGNiKCk7IH0pO1xuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gQ3VzdG9taXphdGlvbnM7XG59KCkpO1xuZXhwb3J0IHsgQ3VzdG9taXphdGlvbnMgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUN1c3RvbWl6YXRpb25zLmpzLm1hcCIsIi8qKlxuICogQWxsb3dzIHlvdSB0byBob2lzdCBzdGF0aWMgZnVuY3Rpb25zIGluIGNvbXBvbmVudHMuXG4gKiBDcmVhdGVkIGZvciB0aGUgcHVycG9zZSBvZiBmaXhpbmcgYnJva2VuIHN0YXRpYyBmdW5jdGlvbnMgaW4gY2xhc3Nlc1xuICogdGhhdCB1dGlsaXplIGRlY29yYXRvcnMuXG4gKlxuICogQHB1YmxpY1xuICogQHBhcmFtIHNvdXJjZSAtIFRoZSBvYmplY3Qgd2hlcmUgdGhlIG1ldGhvZHMgYXJlIGhvaXN0ZWQgZnJvbS5cbiAqIEBwYXJhbSBkZXN0IC0gVGhlIG9iamVjdCB0byBob2lzdCB0aGUgbWV0aG9kcyBvbnRvLlxuICogQHJldHVybnMgVGhlIGRlc3Qgb2JqZWN0IHdpdGggbWV0aG9kcyBhZGRlZFxuICovXG5leHBvcnQgZnVuY3Rpb24gaG9pc3RTdGF0aWNzKHNvdXJjZSwgZGVzdCkge1xuICAgIGZvciAodmFyIG5hbWVfMSBpbiBzb3VyY2UpIHtcbiAgICAgICAgaWYgKHNvdXJjZS5oYXNPd25Qcm9wZXJ0eShuYW1lXzEpKSB7XG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgICAgICAgICAgZGVzdFtuYW1lXzFdID0gc291cmNlW25hbWVfMV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGRlc3Q7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1ob2lzdFN0YXRpY3MuanMubWFwIiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuZXhwb3J0IHZhciBDdXN0b21pemVyQ29udGV4dCA9IFJlYWN0LmNyZWF0ZUNvbnRleHQoe1xuICAgIGN1c3RvbWl6YXRpb25zOiB7XG4gICAgICAgIGluQ3VzdG9taXplckNvbnRleHQ6IGZhbHNlLFxuICAgICAgICBzZXR0aW5nczoge30sXG4gICAgICAgIHNjb3BlZFNldHRpbmdzOiB7fSxcbiAgICB9LFxufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1DdXN0b21pemVyQ29udGV4dC5qcy5tYXAiLCJpbXBvcnQgeyBfX3NwcmVhZEFycmF5IH0gZnJvbSBcInRzbGliXCI7XG4vKipcbiAqIENvbWJpbmUgYSBzZXQgb2Ygc3R5bGVzIHRvZ2V0aGVyIChidXQgZG9lcyBub3QgcmVnaXN0ZXIgY3NzIGNsYXNzZXMpLlxuICogQHBhcmFtIHN0eWxlU2V0cyAtIE9uZSBvciBtb3JlIHN0eWxlc2V0cyB0byBiZSBtZXJnZWQgKGVhY2ggcGFyYW0gY2FuIGFsc28gYmUgZmFsc3kpLlxuICovXG5leHBvcnQgZnVuY3Rpb24gY29uY2F0U3R5bGVTZXRzKCkge1xuICAgIHZhciBzdHlsZVNldHMgPSBbXTtcbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICBzdHlsZVNldHNbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICB9XG4gICAgaWYgKHN0eWxlU2V0cyAmJiBzdHlsZVNldHMubGVuZ3RoID09PSAxICYmIHN0eWxlU2V0c1swXSAmJiAhc3R5bGVTZXRzWzBdLnN1YkNvbXBvbmVudFN0eWxlcykge1xuICAgICAgICByZXR1cm4gc3R5bGVTZXRzWzBdO1xuICAgIH1cbiAgICB2YXIgbWVyZ2VkU2V0ID0ge307XG4gICAgLy8gV2UgcHJvY2VzcyBzdWIgY29tcG9uZW50IHN0eWxlcyBpbiB0d28gcGhhc2VzLiBGaXJzdCB3ZSBjb2xsZWN0IHRoZW0sIHRoZW4gd2UgY29tYmluZSB0aGVtIGludG8gMSBzdHlsZSBmdW5jdGlvbi5cbiAgICB2YXIgd29ya2luZ1N1YmNvbXBvbmVudFN0eWxlcyA9IHt9O1xuICAgIGZvciAodmFyIF9hID0gMCwgc3R5bGVTZXRzXzEgPSBzdHlsZVNldHM7IF9hIDwgc3R5bGVTZXRzXzEubGVuZ3RoOyBfYSsrKSB7XG4gICAgICAgIHZhciBjdXJyZW50U2V0ID0gc3R5bGVTZXRzXzFbX2FdO1xuICAgICAgICBpZiAoY3VycmVudFNldCkge1xuICAgICAgICAgICAgZm9yICh2YXIgcHJvcCBpbiBjdXJyZW50U2V0KSB7XG4gICAgICAgICAgICAgICAgaWYgKGN1cnJlbnRTZXQuaGFzT3duUHJvcGVydHkocHJvcCkpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHByb3AgPT09ICdzdWJDb21wb25lbnRTdHlsZXMnICYmIGN1cnJlbnRTZXQuc3ViQ29tcG9uZW50U3R5bGVzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHN1YmNvbXBvbmVudCBzdHlsZXMgLSBzdHlsZSBmdW5jdGlvbnMgb3Igb2JqZWN0c1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGN1cnJlbnRDb21wb25lbnRTdHlsZXMgPSBjdXJyZW50U2V0LnN1YkNvbXBvbmVudFN0eWxlcztcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIHN1YkNvbXBQcm9wIGluIGN1cnJlbnRDb21wb25lbnRTdHlsZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY3VycmVudENvbXBvbmVudFN0eWxlcy5oYXNPd25Qcm9wZXJ0eShzdWJDb21wUHJvcCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHdvcmtpbmdTdWJjb21wb25lbnRTdHlsZXMuaGFzT3duUHJvcGVydHkoc3ViQ29tcFByb3ApKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3b3JraW5nU3ViY29tcG9uZW50U3R5bGVzW3N1YkNvbXBQcm9wXS5wdXNoKGN1cnJlbnRDb21wb25lbnRTdHlsZXNbc3ViQ29tcFByb3BdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdvcmtpbmdTdWJjb21wb25lbnRTdHlsZXNbc3ViQ29tcFByb3BdID0gW2N1cnJlbnRDb21wb25lbnRTdHlsZXNbc3ViQ29tcFByb3BdXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIC8vIHRoZSBhcyBhbnkgY2FzdHMgYmVsb3cgaXMgYSB3b3JrYXJvdW5kIGZvciB0cyAyLjguXG4gICAgICAgICAgICAgICAgICAgIC8vIHRvZG86IHJlbW92ZSBjYXN0IHRvIGFueSBpbiB0cyAyLjkuXG4gICAgICAgICAgICAgICAgICAgIHZhciBtZXJnZWRWYWx1ZSA9IG1lcmdlZFNldFtwcm9wXTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGN1cnJlbnRWYWx1ZSA9IGN1cnJlbnRTZXRbcHJvcF07XG4gICAgICAgICAgICAgICAgICAgIGlmIChtZXJnZWRWYWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtZXJnZWRTZXRbcHJvcF0gPSBjdXJyZW50VmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtZXJnZWRTZXRbcHJvcF0gPSBfX3NwcmVhZEFycmF5KF9fc3ByZWFkQXJyYXkoW10sIChBcnJheS5pc0FycmF5KG1lcmdlZFZhbHVlKSA/IG1lcmdlZFZhbHVlIDogW21lcmdlZFZhbHVlXSkpLCAoQXJyYXkuaXNBcnJheShjdXJyZW50VmFsdWUpID8gY3VycmVudFZhbHVlIDogW2N1cnJlbnRWYWx1ZV0pKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoT2JqZWN0LmtleXMod29ya2luZ1N1YmNvbXBvbmVudFN0eWxlcykubGVuZ3RoID4gMCkge1xuICAgICAgICBtZXJnZWRTZXQuc3ViQ29tcG9uZW50U3R5bGVzID0ge307XG4gICAgICAgIHZhciBtZXJnZWRTdWJTdHlsZXMgPSBtZXJnZWRTZXQuc3ViQ29tcG9uZW50U3R5bGVzO1xuICAgICAgICB2YXIgX2xvb3BfMSA9IGZ1bmN0aW9uIChzdWJDb21wUHJvcCkge1xuICAgICAgICAgICAgaWYgKHdvcmtpbmdTdWJjb21wb25lbnRTdHlsZXMuaGFzT3duUHJvcGVydHkoc3ViQ29tcFByb3ApKSB7XG4gICAgICAgICAgICAgICAgdmFyIHdvcmtpbmdTZXRfMSA9IHdvcmtpbmdTdWJjb21wb25lbnRTdHlsZXNbc3ViQ29tcFByb3BdO1xuICAgICAgICAgICAgICAgIG1lcmdlZFN1YlN0eWxlc1tzdWJDb21wUHJvcF0gPSBmdW5jdGlvbiAoc3R5bGVQcm9wcykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY29uY2F0U3R5bGVTZXRzLmFwcGx5KHZvaWQgMCwgd29ya2luZ1NldF8xLm1hcChmdW5jdGlvbiAoc3R5bGVGdW5jdGlvbk9yT2JqZWN0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHlwZW9mIHN0eWxlRnVuY3Rpb25Pck9iamVjdCA9PT0gJ2Z1bmN0aW9uJyA/IHN0eWxlRnVuY3Rpb25Pck9iamVjdChzdHlsZVByb3BzKSA6IHN0eWxlRnVuY3Rpb25Pck9iamVjdDtcbiAgICAgICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIC8vIG5vdyB3ZSBwcm9jZXNzIHRoZSBzdWJjb21wb25lbnQgc3R5bGVzIGlmIHRoZXJlIGFyZSBhbnlcbiAgICAgICAgZm9yICh2YXIgc3ViQ29tcFByb3AgaW4gd29ya2luZ1N1YmNvbXBvbmVudFN0eWxlcykge1xuICAgICAgICAgICAgX2xvb3BfMShzdWJDb21wUHJvcCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG1lcmdlZFNldDtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbmNhdFN0eWxlU2V0cy5qcy5tYXAiLCJpbXBvcnQgeyBfX2Fzc2lnbiwgX19leHRlbmRzIH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBDdXN0b21pemF0aW9ucyB9IGZyb20gJy4vQ3VzdG9taXphdGlvbnMnO1xuaW1wb3J0IHsgaG9pc3RTdGF0aWNzIH0gZnJvbSAnLi4vaG9pc3RTdGF0aWNzJztcbmltcG9ydCB7IEN1c3RvbWl6ZXJDb250ZXh0IH0gZnJvbSAnLi9DdXN0b21pemVyQ29udGV4dCc7XG5pbXBvcnQgeyBjb25jYXRTdHlsZVNldHMgfSBmcm9tICdAZmx1ZW50dWkvbWVyZ2Utc3R5bGVzJztcbmV4cG9ydCBmdW5jdGlvbiBjdXN0b21pemFibGUoc2NvcGUsIGZpZWxkcywgY29uY2F0U3R5bGVzKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICByZXR1cm4gZnVuY3Rpb24gY3VzdG9taXphYmxlRmFjdG9yeShDb21wb3NlZENvbXBvbmVudCkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIHZhciByZXN1bHRDbGFzcyA9IChfYSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICAgICAgICAgICAgICBfX2V4dGVuZHMoQ29tcG9uZW50V2l0aEluamVjdGVkUHJvcHMsIF9zdXBlcik7XG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gQ29tcG9uZW50V2l0aEluamVjdGVkUHJvcHMocHJvcHMpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgcHJvcHMpIHx8IHRoaXM7XG4gICAgICAgICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLl9zdHlsZUNhY2hlID0ge307XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLl9vblNldHRpbmdDaGFuZ2VkID0gX3RoaXMuX29uU2V0dGluZ0NoYW5nZWQuYmluZChfdGhpcyk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBfdGhpcztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgQ29tcG9uZW50V2l0aEluamVjdGVkUHJvcHMucHJvdG90eXBlLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBDdXN0b21pemF0aW9ucy5vYnNlcnZlKHRoaXMuX29uU2V0dGluZ0NoYW5nZWQpO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgQ29tcG9uZW50V2l0aEluamVjdGVkUHJvcHMucHJvdG90eXBlLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBDdXN0b21pemF0aW9ucy51bm9ic2VydmUodGhpcy5fb25TZXR0aW5nQ2hhbmdlZCk7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBDb21wb25lbnRXaXRoSW5qZWN0ZWRQcm9wcy5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gKFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ3VzdG9taXplckNvbnRleHQuQ29uc3VtZXIsIG51bGwsIGZ1bmN0aW9uIChjb250ZXh0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZGVmYXVsdFByb3BzID0gQ3VzdG9taXphdGlvbnMuZ2V0U2V0dGluZ3MoZmllbGRzLCBzY29wZSwgY29udGV4dC5jdXN0b21pemF0aW9ucyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNvbXBvbmVudFByb3BzID0gX3RoaXMucHJvcHM7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBJZiBkZWZhdWx0UHJvcHMuc3R5bGVzIGlzIGEgZnVuY3Rpb24sIGV2YWx1YXRlIGl0IGJlZm9yZSBjYWxsaW5nIGNvbmNhdFN0eWxlU2V0c1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRlZmF1bHRQcm9wcy5zdHlsZXMgJiYgdHlwZW9mIGRlZmF1bHRQcm9wcy5zdHlsZXMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0UHJvcHMuc3R5bGVzID0gZGVmYXVsdFByb3BzLnN0eWxlcyhfX2Fzc2lnbihfX2Fzc2lnbih7fSwgZGVmYXVsdFByb3BzKSwgY29tcG9uZW50UHJvcHMpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIElmIGNvbmNhdFN0eWxlcyBpcyB0cnVlIGFuZCBjdXN0b20gc3R5bGVzIGhhdmUgYmVlbiBkZWZpbmVkIGNvbXB1dGUgdGhvc2Ugc3R5bGVzXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY29uY2F0U3R5bGVzICYmIGRlZmF1bHRQcm9wcy5zdHlsZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoX3RoaXMuX3N0eWxlQ2FjaGUuZGVmYXVsdCAhPT0gZGVmYXVsdFByb3BzLnN0eWxlcyB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5fc3R5bGVDYWNoZS5jb21wb25lbnQgIT09IGNvbXBvbmVudFByb3BzLnN0eWxlcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbWVyZ2VkU3R5bGVzID0gY29uY2F0U3R5bGVTZXRzKGRlZmF1bHRQcm9wcy5zdHlsZXMsIGNvbXBvbmVudFByb3BzLnN0eWxlcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLl9zdHlsZUNhY2hlLmRlZmF1bHQgPSBkZWZhdWx0UHJvcHMuc3R5bGVzO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5fc3R5bGVDYWNoZS5jb21wb25lbnQgPSBjb21wb25lbnRQcm9wcy5zdHlsZXM7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLl9zdHlsZUNhY2hlLm1lcmdlZCA9IG1lcmdlZFN0eWxlcztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcG9zZWRDb21wb25lbnQsIF9fYXNzaWduKHt9LCBkZWZhdWx0UHJvcHMsIGNvbXBvbmVudFByb3BzLCB7IHN0eWxlczogX3RoaXMuX3N0eWxlQ2FjaGUubWVyZ2VkIH0pKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KENvbXBvc2VkQ29tcG9uZW50LCBfX2Fzc2lnbih7fSwgZGVmYXVsdFByb3BzLCBjb21wb25lbnRQcm9wcykpO1xuICAgICAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBDb21wb25lbnRXaXRoSW5qZWN0ZWRQcm9wcy5wcm90b3R5cGUuX29uU2V0dGluZ0NoYW5nZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZm9yY2VVcGRhdGUoKTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIHJldHVybiBDb21wb25lbnRXaXRoSW5qZWN0ZWRQcm9wcztcbiAgICAgICAgICAgIH0oUmVhY3QuQ29tcG9uZW50KSksXG4gICAgICAgICAgICBfYS5kaXNwbGF5TmFtZSA9ICdDdXN0b21pemVkJyArIHNjb3BlLFxuICAgICAgICAgICAgX2EpO1xuICAgICAgICByZXR1cm4gaG9pc3RTdGF0aWNzKENvbXBvc2VkQ29tcG9uZW50LCByZXN1bHRDbGFzcyk7XG4gICAgfTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWN1c3RvbWl6YWJsZS5qcy5tYXAiLCIvKipcbiAqIEhlbHBlciB0byBmaW5kIHRoZSBpbmRleCBvZiBhbiBpdGVtIHdpdGhpbiBhbiBhcnJheSwgdXNpbmcgYSBjYWxsYmFjayB0b1xuICogZGV0ZXJtaW5lIHRoZSBtYXRjaC5cbiAqXG4gKiBAcHVibGljXG4gKiBAcGFyYW0gYXJyYXkgLSBBcnJheSB0byBzZWFyY2guXG4gKiBAcGFyYW0gY2IgLSBDYWxsYmFjayB3aGljaCByZXR1cm5zIHRydWUgb24gbWF0Y2hlcy5cbiAqIEBwYXJhbSBmcm9tSW5kZXggLSBPcHRpb25hbCBpbmRleCB0byBzdGFydCBmcm9tIChkZWZhdWx0cyB0byAwKVxuICovXG5leHBvcnQgZnVuY3Rpb24gZmluZEluZGV4KGFycmF5LCBjYiwgZnJvbUluZGV4KSB7XG4gICAgaWYgKGZyb21JbmRleCA9PT0gdm9pZCAwKSB7IGZyb21JbmRleCA9IDA7IH1cbiAgICB2YXIgaW5kZXggPSAtMTtcbiAgICBmb3IgKHZhciBpID0gZnJvbUluZGV4OyBhcnJheSAmJiBpIDwgYXJyYXkubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKGNiKGFycmF5W2ldLCBpKSkge1xuICAgICAgICAgICAgaW5kZXggPSBpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGluZGV4O1xufVxuLyoqXG4gKiBIZWxwZXIgdG8gZmluZCB0aGUgZmlyc3QgaXRlbSB3aXRoaW4gYW4gYXJyYXkgdGhhdCBzYXRpc2ZpZXMgdGhlIGNhbGxiYWNrLlxuICogQHBhcmFtIGFycmF5IC0gQXJyYXkgdG8gc2VhcmNoXG4gKiBAcGFyYW0gY2IgLSBDYWxsYmFjayB3aGljaCByZXR1cm5zIHRydWUgb24gbWF0Y2hlc1xuICovXG5leHBvcnQgZnVuY3Rpb24gZmluZChhcnJheSwgY2IpIHtcbiAgICB2YXIgaW5kZXggPSBmaW5kSW5kZXgoYXJyYXksIGNiKTtcbiAgICBpZiAoaW5kZXggPCAwKSB7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIHJldHVybiBhcnJheVtpbmRleF07XG59XG4vKipcbiAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgYSBnaXZlbiBzaXplIGFuZCBoZWxwZXIgbWV0aG9kIHRvIHBvcHVsYXRlLlxuICpcbiAqIEBwdWJsaWNcbiAqIEBwYXJhbSBzaXplIC0gU2l6ZSBvZiBhcnJheS5cbiAqIEBwYXJhbSBnZXRJdGVtIC0gQ2FsbGJhY2sgdG8gcG9wdWxhdGUgZ2l2ZW4gY2VsbCBpbmRleC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUFycmF5KHNpemUsIGdldEl0ZW0pIHtcbiAgICB2YXIgYXJyYXkgPSBbXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNpemU7IGkrKykge1xuICAgICAgICBhcnJheS5wdXNoKGdldEl0ZW0oaSkpO1xuICAgIH1cbiAgICByZXR1cm4gYXJyYXk7XG59XG4vKipcbiAqIENvbnZlcnQgdGhlIGdpdmVuIGFycmF5IHRvIGEgbWF0cml4IHdpdGggY29sdW1uQ291bnQgbnVtYmVyXG4gKiBvZiBjb2x1bW5zLlxuICpcbiAqIEBwdWJsaWNcbiAqIEBwYXJhbSBpdGVtcyAtIFRoZSBhcnJheSB0byBjb252ZXJ0XG4gKiBAcGFyYW0gY29sdW1uQ291bnQgLSBUaGUgbnVtYmVyIG9mIGNvbHVtbnMgZm9yIHRoZSByZXN1bHRpbmcgbWF0cml4XG4gKiBAcmV0dXJucyBBIG1hdHJpeCBvZiBpdGVtc1xuICovXG5leHBvcnQgZnVuY3Rpb24gdG9NYXRyaXgoaXRlbXMsIGNvbHVtbkNvdW50KSB7XG4gICAgcmV0dXJuIGl0ZW1zLnJlZHVjZShmdW5jdGlvbiAocm93cywgY3VycmVudFZhbHVlLCBpbmRleCkge1xuICAgICAgICBpZiAoaW5kZXggJSBjb2x1bW5Db3VudCA9PT0gMCkge1xuICAgICAgICAgICAgcm93cy5wdXNoKFtjdXJyZW50VmFsdWVdKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJvd3Nbcm93cy5sZW5ndGggLSAxXS5wdXNoKGN1cnJlbnRWYWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJvd3M7XG4gICAgfSwgW10pO1xufVxuLyoqXG4gKiBHaXZlbiBhbiBhcnJheSwgaXQgcmV0dXJucyBhIG5ldyBhcnJheSB0aGF0IGRvZXMgbm90IGNvbnRhaW4gdGhlIGl0ZW0gYXQgdGhlIGdpdmVuIGluZGV4LlxuICogQHBhcmFtIGFycmF5IC0gVGhlIGFycmF5IHRvIG9wZXJhdGUgb25cbiAqIEBwYXJhbSBpbmRleCAtIFRoZSBpbmRleCBvZiB0aGUgZWxlbWVudCB0byByZW1vdmVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlbW92ZUluZGV4KGFycmF5LCBpbmRleCkge1xuICAgIHJldHVybiBhcnJheS5maWx0ZXIoZnVuY3Rpb24gKF8sIGkpIHsgcmV0dXJuIGluZGV4ICE9PSBpOyB9KTtcbn1cbi8qKlxuICogR2l2ZW4gYW4gYXJyYXksIHRoaXMgZnVuY3Rpb24gcmV0dXJucyBhIG5ldyBhcnJheSB3aGVyZSB0aGUgZWxlbWVudCBhdCBhIGdpdmVuIGluZGV4IGhhcyBiZWVuIHJlcGxhY2VkLlxuICogQHBhcmFtIGFycmF5IC0gVGhlIGFycmF5IHRvIG9wZXJhdGUgb25cbiAqIEBwYXJhbSBuZXdFbGVtZW50IC0gVGhlIGVsZW1lbnQgdGhhdCB3aWxsIGJlIHBsYWNlZCBpbiB0aGUgbmV3IGFycmF5XG4gKiBAcGFyYW0gaW5kZXggLSBUaGUgaW5kZXggb2YgdGhlIGVsZW1lbnQgdGhhdCBzaG91bGQgYmUgcmVwbGFjZWRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlcGxhY2VFbGVtZW50KGFycmF5LCBuZXdFbGVtZW50LCBpbmRleCkge1xuICAgIHZhciBjb3B5ID0gYXJyYXkuc2xpY2UoKTtcbiAgICBjb3B5W2luZGV4XSA9IG5ld0VsZW1lbnQ7XG4gICAgcmV0dXJuIGNvcHk7XG59XG4vKipcbiAqIEdpdmVuIGFuIGFycmF5LCB0aGlzIGZ1bmN0aW9uIHJldHVybnMgYSBuZXcgYXJyYXkgd2hlcmUgYW4gZWxlbWVudCBoYXMgYmVlbiBpbnNlcnRlZCBhdCB0aGUgZ2l2ZW4gaW5kZXguXG4gKiBAcGFyYW0gYXJyYXkgLSBUaGUgYXJyYXkgdG8gb3BlcmF0ZSBvblxuICogQHBhcmFtIGluZGV4IC0gVGhlIGluZGV4IHdoZXJlIGFuIGVsZW1lbnQgc2hvdWxkIGJlIGluc2VydGVkXG4gKiBAcGFyYW0gaXRlbVRvQWRkIC0gVGhlIGVsZW1lbnQgdG8gaW5zZXJ0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBhZGRFbGVtZW50QXRJbmRleChhcnJheSwgaW5kZXgsIGl0ZW1Ub0FkZCkge1xuICAgIHZhciBjb3B5ID0gYXJyYXkuc2xpY2UoKTtcbiAgICBjb3B5LnNwbGljZShpbmRleCwgMCwgaXRlbVRvQWRkKTtcbiAgICByZXR1cm4gY29weTtcbn1cbi8qKlxuICogR2l2ZW4gYW4gYXJyYXkgd2hlcmUgZWFjaCBlbGVtZW50IGlzIG9mIHR5cGUgVCBvciBUW10sIGZsYXR0ZW4gaXQgaW50byBhbiBhcnJheSBvZiBUXG4gKiBAcGFyYW0gYXJyYXkgLSBUaGUgYXJyYXkgd2hlcmUgZWFjaCBlbGVtZW50IGNhbiBvcHRpb25hbGx5IGFsc28gYmUgYW4gYXJyYXlcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGZsYXR0ZW4oYXJyYXkpIHtcbiAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgYXJyYXkuZm9yRWFjaChmdW5jdGlvbiAoaXRlbSkgeyByZXR1cm4gKHJlc3VsdCA9IHJlc3VsdC5jb25jYXQoaXRlbSkpOyB9KTtcbiAgICByZXR1cm4gcmVzdWx0O1xufVxuLyoqXG4gKiBSZXR1cm5zIGEgYm9vbGVhbiBpbmRpY2F0aW5nIGlmIHRoZSB0d28gZ2l2ZW4gYXJyYXlzIGFyZSBlcXVhbCBpbiBsZW5ndGggYW5kIHZhbHVlcy5cbiAqXG4gKiBAcGFyYW0gYXJyYXkxIC0gRmlyc3QgYXJyYXkgdG8gY29tcGFyZVxuICogQHBhcmFtIGFycmF5MiAtIFNlY29uZCBhcnJheSB0byBjb21wYXJlXG4gKiBAcmV0dXJucyBUcnVlIGlmIHRoZSBhcnJheXMgYXJlIHRoZSBzYW1lIGxlbmd0aCBhbmQgaGF2ZSB0aGUgc2FtZSB2YWx1ZXMgaW4gdGhlIHNhbWUgcG9zaXRpb25zLCBmYWxzZSBvdGhlcndpc2UuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBhcnJheXNFcXVhbChhcnJheTEsIGFycmF5Mikge1xuICAgIGlmIChhcnJheTEubGVuZ3RoICE9PSBhcnJheTIubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnJheTEubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKGFycmF5MVtpXSAhPT0gYXJyYXkyW2ldKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hcnJheS5qcy5tYXAiLCJpbXBvcnQgeyBhcnJheXNFcXVhbCB9IGZyb20gJy4vYXJyYXknO1xuLyoqXG4gKiBTZXQgdXAgYSByZWYgcmVzb2x2ZXIgZnVuY3Rpb24gZ2l2ZW4gaW50ZXJuYWwgc3RhdGUgbWFuYWdlZCBmb3IgdGhlIHJlZi5cbiAqIEBwYXJhbSBsb2NhbCBTZXRcbiAqL1xudmFyIGNyZWF0ZVJlc29sdmVyID0gZnVuY3Rpb24gKGxvY2FsKSB7IHJldHVybiBmdW5jdGlvbiAobmV3VmFsdWUpIHtcbiAgICBmb3IgKHZhciBfaSA9IDAsIF9hID0gbG9jYWwucmVmczsgX2kgPCBfYS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgdmFyIHJlZiA9IF9hW19pXTtcbiAgICAgICAgaWYgKHR5cGVvZiByZWYgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHJlZihuZXdWYWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAocmVmKSB7XG4gICAgICAgICAgICAvLyB3b3JrIGFyb3VuZCB0aGUgaW1tdXRhYmlsaXR5IG9mIHRoZSBSZWFjdC5SZWYgdHlwZVxuICAgICAgICAgICAgcmVmLmN1cnJlbnQgPSBuZXdWYWx1ZTtcbiAgICAgICAgfVxuICAgIH1cbn07IH07XG4vKipcbiAqIEhlbHBlciB0byBtZXJnZSByZWZzIGZyb20gd2l0aGluIGNsYXNzIGNvbXBvbmVudHMuXG4gKi9cbmV4cG9ydCB2YXIgY3JlYXRlTWVyZ2VkUmVmID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgdmFyIGxvY2FsID0ge1xuICAgICAgICByZWZzOiBbXSxcbiAgICB9O1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBuZXdSZWZzID0gW107XG4gICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICBuZXdSZWZzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFsb2NhbC5yZXNvbHZlciB8fCAhYXJyYXlzRXF1YWwobG9jYWwucmVmcywgbmV3UmVmcykpIHtcbiAgICAgICAgICAgIGxvY2FsLnJlc29sdmVyID0gY3JlYXRlUmVzb2x2ZXIobG9jYWwpO1xuICAgICAgICB9XG4gICAgICAgIGxvY2FsLnJlZnMgPSBuZXdSZWZzO1xuICAgICAgICByZXR1cm4gbG9jYWwucmVzb2x2ZXI7XG4gICAgfTtcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jcmVhdGVNZXJnZWRSZWYuanMubWFwIiwiaW1wb3J0IHsgX19hc3NpZ24gfSBmcm9tIFwidHNsaWJcIjtcbmV4cG9ydCB2YXIgSW5qZWN0aW9uTW9kZSA9IHtcbiAgICAvKipcbiAgICAgKiBBdm9pZHMgc3R5bGUgaW5qZWN0aW9uLCB1c2UgZ2V0UnVsZXMoKSB0byByZWFkIHRoZSBzdHlsZXMuXG4gICAgICovXG4gICAgbm9uZTogMCxcbiAgICAvKipcbiAgICAgKiBJbnNlcnRzIHJ1bGVzIHVzaW5nIHRoZSBpbnNlcnRSdWxlIGFwaS5cbiAgICAgKi9cbiAgICBpbnNlcnROb2RlOiAxLFxuICAgIC8qKlxuICAgICAqIEFwcGVuZHMgcnVsZXMgdXNpbmcgYXBwZW5kQ2hpbGQuXG4gICAgICovXG4gICAgYXBwZW5kQ2hpbGQ6IDIsXG59O1xudmFyIFNUWUxFU0hFRVRfU0VUVElORyA9ICdfX3N0eWxlc2hlZXRfXyc7XG4vKipcbiAqIE1TSUUgMTEgZG9lc24ndCBjYXNjYWRlIHN0eWxlcyBiYXNlZCBvbiBET00gb3JkZXJpbmcsIGJ1dCByYXRoZXIgb24gdGhlIG9yZGVyIHRoYXQgZWFjaCBzdHlsZSBub2RlXG4gKiBpcyBjcmVhdGVkLiBBcyBzdWNoLCB0byBtYWludGFpbiBjb25zaXN0ZW50IHByaW9yaXR5LCBJRTExIHNob3VsZCByZXVzZSBhIHNpbmdsZSBzdHlsZSBub2RlLlxuICovXG52YXIgUkVVU0VfU1RZTEVfTk9ERSA9IHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnICYmIC9ydjoxMS4wLy50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpO1xudmFyIF9nbG9iYWwgPSB7fTtcbi8vIEdyYWIgd2luZG93LlxudHJ5IHtcbiAgICBfZ2xvYmFsID0gd2luZG93IHx8IHt9O1xufVxuY2F0Y2ggKF9hKSB7XG4gICAgLyogbGVhdmUgYXMgYmxhbmsgb2JqZWN0ICovXG59XG52YXIgX3N0eWxlc2hlZXQ7XG4vKipcbiAqIFJlcHJlc2VudHMgdGhlIHN0YXRlIG9mIHN0eWxlcyByZWdpc3RlcmVkIGluIHRoZSBwYWdlLiBBYnN0cmFjdHNcbiAqIHRoZSBzdXJmYWNlIGZvciBhZGRpbmcgc3R5bGVzIHRvIHRoZSBzdHlsZXNoZWV0LCBleHBvc2VzIGhlbHBlcnNcbiAqIGZvciByZWFkaW5nIHRoZSBzdHlsZXMgcmVnaXN0ZXJlZCBpbiBzZXJ2ZXIgcmVuZGVyZWQgc2NlbmFyaW9zLlxuICpcbiAqIEBwdWJsaWNcbiAqL1xudmFyIFN0eWxlc2hlZXQgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gU3R5bGVzaGVldChjb25maWcsIHNlcmlhbGl6ZWRTdHlsZXNoZWV0KSB7XG4gICAgICAgIHZhciBfYSwgX2IsIF9jLCBfZCwgX2UsIF9mO1xuICAgICAgICB0aGlzLl9ydWxlcyA9IFtdO1xuICAgICAgICB0aGlzLl9wcmVzZXJ2ZWRSdWxlcyA9IFtdO1xuICAgICAgICB0aGlzLl9jb3VudGVyID0gMDtcbiAgICAgICAgdGhpcy5fa2V5VG9DbGFzc05hbWUgPSB7fTtcbiAgICAgICAgdGhpcy5fb25JbnNlcnRSdWxlQ2FsbGJhY2tzID0gW107XG4gICAgICAgIHRoaXMuX29uUmVzZXRDYWxsYmFja3MgPSBbXTtcbiAgICAgICAgdGhpcy5fY2xhc3NOYW1lVG9BcmdzID0ge307XG4gICAgICAgIHRoaXMuX2NvbmZpZyA9IF9fYXNzaWduKHsgXG4gICAgICAgICAgICAvLyBJZiB0aGVyZSBpcyBubyBkb2N1bWVudCB3ZSB3b24ndCBoYXZlIGFuIGVsZW1lbnQgdG8gaW5qZWN0IGludG8uXG4gICAgICAgICAgICBpbmplY3Rpb25Nb2RlOiB0eXBlb2YgZG9jdW1lbnQgPT09ICd1bmRlZmluZWQnID8gSW5qZWN0aW9uTW9kZS5ub25lIDogSW5qZWN0aW9uTW9kZS5pbnNlcnROb2RlLCBkZWZhdWx0UHJlZml4OiAnY3NzJywgbmFtZXNwYWNlOiB1bmRlZmluZWQsIGNzcFNldHRpbmdzOiB1bmRlZmluZWQgfSwgY29uZmlnKTtcbiAgICAgICAgdGhpcy5fY2xhc3NOYW1lVG9BcmdzID0gKF9hID0gc2VyaWFsaXplZFN0eWxlc2hlZXQgPT09IG51bGwgfHwgc2VyaWFsaXplZFN0eWxlc2hlZXQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHNlcmlhbGl6ZWRTdHlsZXNoZWV0LmNsYXNzTmFtZVRvQXJncykgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogdGhpcy5fY2xhc3NOYW1lVG9BcmdzO1xuICAgICAgICB0aGlzLl9jb3VudGVyID0gKF9iID0gc2VyaWFsaXplZFN0eWxlc2hlZXQgPT09IG51bGwgfHwgc2VyaWFsaXplZFN0eWxlc2hlZXQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHNlcmlhbGl6ZWRTdHlsZXNoZWV0LmNvdW50ZXIpICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6IHRoaXMuX2NvdW50ZXI7XG4gICAgICAgIHRoaXMuX2tleVRvQ2xhc3NOYW1lID0gKF9kID0gKF9jID0gdGhpcy5fY29uZmlnLmNsYXNzTmFtZUNhY2hlKSAhPT0gbnVsbCAmJiBfYyAhPT0gdm9pZCAwID8gX2MgOiBzZXJpYWxpemVkU3R5bGVzaGVldCA9PT0gbnVsbCB8fCBzZXJpYWxpemVkU3R5bGVzaGVldCA9PT0gdm9pZCAwID8gdm9pZCAwIDogc2VyaWFsaXplZFN0eWxlc2hlZXQua2V5VG9DbGFzc05hbWUpICE9PSBudWxsICYmIF9kICE9PSB2b2lkIDAgPyBfZCA6IHRoaXMuX2tleVRvQ2xhc3NOYW1lO1xuICAgICAgICB0aGlzLl9wcmVzZXJ2ZWRSdWxlcyA9IChfZSA9IHNlcmlhbGl6ZWRTdHlsZXNoZWV0ID09PSBudWxsIHx8IHNlcmlhbGl6ZWRTdHlsZXNoZWV0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBzZXJpYWxpemVkU3R5bGVzaGVldC5wcmVzZXJ2ZWRSdWxlcykgIT09IG51bGwgJiYgX2UgIT09IHZvaWQgMCA/IF9lIDogdGhpcy5fcHJlc2VydmVkUnVsZXM7XG4gICAgICAgIHRoaXMuX3J1bGVzID0gKF9mID0gc2VyaWFsaXplZFN0eWxlc2hlZXQgPT09IG51bGwgfHwgc2VyaWFsaXplZFN0eWxlc2hlZXQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHNlcmlhbGl6ZWRTdHlsZXNoZWV0LnJ1bGVzKSAhPT0gbnVsbCAmJiBfZiAhPT0gdm9pZCAwID8gX2YgOiB0aGlzLl9ydWxlcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgc2luZ2xldG9uIGluc3RhbmNlLlxuICAgICAqL1xuICAgIFN0eWxlc2hlZXQuZ2V0SW5zdGFuY2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIF9zdHlsZXNoZWV0ID0gX2dsb2JhbFtTVFlMRVNIRUVUX1NFVFRJTkddO1xuICAgICAgICBpZiAoIV9zdHlsZXNoZWV0IHx8IChfc3R5bGVzaGVldC5fbGFzdFN0eWxlRWxlbWVudCAmJiBfc3R5bGVzaGVldC5fbGFzdFN0eWxlRWxlbWVudC5vd25lckRvY3VtZW50ICE9PSBkb2N1bWVudCkpIHtcbiAgICAgICAgICAgIHZhciBmYWJyaWNDb25maWcgPSAoX2dsb2JhbCA9PT0gbnVsbCB8fCBfZ2xvYmFsID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZ2xvYmFsLkZhYnJpY0NvbmZpZykgfHwge307XG4gICAgICAgICAgICB2YXIgc3R5bGVzaGVldCA9IG5ldyBTdHlsZXNoZWV0KGZhYnJpY0NvbmZpZy5tZXJnZVN0eWxlcywgZmFicmljQ29uZmlnLnNlcmlhbGl6ZWRTdHlsZXNoZWV0KTtcbiAgICAgICAgICAgIF9zdHlsZXNoZWV0ID0gc3R5bGVzaGVldDtcbiAgICAgICAgICAgIF9nbG9iYWxbU1RZTEVTSEVFVF9TRVRUSU5HXSA9IHN0eWxlc2hlZXQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIF9zdHlsZXNoZWV0O1xuICAgIH07XG4gICAgLyoqXG4gICAgICogU2VyaWFsaXplcyB0aGUgU3R5bGVzaGVldCBpbnN0YW5jZSBpbnRvIGEgZm9ybWF0IHdoaWNoIGFsbG93cyByZWh5ZHJhdGlvbiBvbiBjcmVhdGlvbi5cbiAgICAgKiBAcmV0dXJucyBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgYElTZXJpYWxpemVkU3R5bGVzaGVldGAgaW50ZXJmYWNlLlxuICAgICAqL1xuICAgIFN0eWxlc2hlZXQucHJvdG90eXBlLnNlcmlhbGl6ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgICAgIGNsYXNzTmFtZVRvQXJnczogdGhpcy5fY2xhc3NOYW1lVG9BcmdzLFxuICAgICAgICAgICAgY291bnRlcjogdGhpcy5fY291bnRlcixcbiAgICAgICAgICAgIGtleVRvQ2xhc3NOYW1lOiB0aGlzLl9rZXlUb0NsYXNzTmFtZSxcbiAgICAgICAgICAgIHByZXNlcnZlZFJ1bGVzOiB0aGlzLl9wcmVzZXJ2ZWRSdWxlcyxcbiAgICAgICAgICAgIHJ1bGVzOiB0aGlzLl9ydWxlcyxcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBDb25maWd1cmVzIHRoZSBzdHlsZXNoZWV0LlxuICAgICAqL1xuICAgIFN0eWxlc2hlZXQucHJvdG90eXBlLnNldENvbmZpZyA9IGZ1bmN0aW9uIChjb25maWcpIHtcbiAgICAgICAgdGhpcy5fY29uZmlnID0gX19hc3NpZ24oX19hc3NpZ24oe30sIHRoaXMuX2NvbmZpZyksIGNvbmZpZyk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBDb25maWd1cmVzIGEgcmVzZXQgY2FsbGJhY2suXG4gICAgICpcbiAgICAgKiBAcGFyYW0gY2FsbGJhY2sgLSBBIGNhbGxiYWNrIHdoaWNoIHdpbGwgYmUgY2FsbGVkIHdoZW4gdGhlIFN0eWxlc2hlZXQgaXMgcmVzZXQuXG4gICAgICogQHJldHVybnMgZnVuY3Rpb24gd2hpY2ggd2hlbiBjYWxsZWQgdW4tcmVnaXN0ZXJzIHByb3ZpZGVkIGNhbGxiYWNrLlxuICAgICAqL1xuICAgIFN0eWxlc2hlZXQucHJvdG90eXBlLm9uUmVzZXQgPSBmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdGhpcy5fb25SZXNldENhbGxiYWNrcy5wdXNoKGNhbGxiYWNrKTtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIF90aGlzLl9vblJlc2V0Q2FsbGJhY2tzID0gX3RoaXMuX29uUmVzZXRDYWxsYmFja3MuZmlsdGVyKGZ1bmN0aW9uIChjYikgeyByZXR1cm4gY2IgIT09IGNhbGxiYWNrOyB9KTtcbiAgICAgICAgfTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIENvbmZpZ3VyZXMgYW4gaW5zZXJ0IHJ1bGUgY2FsbGJhY2suXG4gICAgICpcbiAgICAgKiBAcGFyYW0gY2FsbGJhY2sgLSBBIGNhbGxiYWNrIHdoaWNoIHdpbGwgYmUgY2FsbGVkIHdoZW4gYSBydWxlIGlzIGluc2VydGVkLlxuICAgICAqIEByZXR1cm5zIGZ1bmN0aW9uIHdoaWNoIHdoZW4gY2FsbGVkIHVuLXJlZ2lzdGVycyBwcm92aWRlZCBjYWxsYmFjay5cbiAgICAgKi9cbiAgICBTdHlsZXNoZWV0LnByb3RvdHlwZS5vbkluc2VydFJ1bGUgPSBmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdGhpcy5fb25JbnNlcnRSdWxlQ2FsbGJhY2tzLnB1c2goY2FsbGJhY2spO1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgX3RoaXMuX29uSW5zZXJ0UnVsZUNhbGxiYWNrcyA9IF90aGlzLl9vbkluc2VydFJ1bGVDYWxsYmFja3MuZmlsdGVyKGZ1bmN0aW9uIChjYikgeyByZXR1cm4gY2IgIT09IGNhbGxiYWNrOyB9KTtcbiAgICAgICAgfTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEdlbmVyYXRlcyBhIHVuaXF1ZSBjbGFzc25hbWUuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZGlzcGxheU5hbWUgLSBPcHRpb25hbCB2YWx1ZSB0byB1c2UgYXMgYSBwcmVmaXguXG4gICAgICovXG4gICAgU3R5bGVzaGVldC5wcm90b3R5cGUuZ2V0Q2xhc3NOYW1lID0gZnVuY3Rpb24gKGRpc3BsYXlOYW1lKSB7XG4gICAgICAgIHZhciBuYW1lc3BhY2UgPSB0aGlzLl9jb25maWcubmFtZXNwYWNlO1xuICAgICAgICB2YXIgcHJlZml4ID0gZGlzcGxheU5hbWUgfHwgdGhpcy5fY29uZmlnLmRlZmF1bHRQcmVmaXg7XG4gICAgICAgIHJldHVybiBcIlwiICsgKG5hbWVzcGFjZSA/IG5hbWVzcGFjZSArICctJyA6ICcnKSArIHByZWZpeCArIFwiLVwiICsgdGhpcy5fY291bnRlcisrO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogVXNlZCBpbnRlcm5hbGx5IHRvIGNhY2hlIGluZm9ybWF0aW9uIGFib3V0IGEgY2xhc3Mgd2hpY2ggd2FzXG4gICAgICogcmVnaXN0ZXJlZCB3aXRoIHRoZSBzdHlsZXNoZWV0LlxuICAgICAqL1xuICAgIFN0eWxlc2hlZXQucHJvdG90eXBlLmNhY2hlQ2xhc3NOYW1lID0gZnVuY3Rpb24gKGNsYXNzTmFtZSwga2V5LCBhcmdzLCBydWxlcykge1xuICAgICAgICB0aGlzLl9rZXlUb0NsYXNzTmFtZVtrZXldID0gY2xhc3NOYW1lO1xuICAgICAgICB0aGlzLl9jbGFzc05hbWVUb0FyZ3NbY2xhc3NOYW1lXSA9IHtcbiAgICAgICAgICAgIGFyZ3M6IGFyZ3MsXG4gICAgICAgICAgICBydWxlczogcnVsZXMsXG4gICAgICAgIH07XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBhcHByb3ByaWF0ZSBjbGFzc25hbWUgZ2l2ZW4gYSBrZXkgd2hpY2ggd2FzIHByZXZpb3VzbHlcbiAgICAgKiByZWdpc3RlcmVkIHVzaW5nIGNhY2hlQ2xhc3NOYW1lLlxuICAgICAqL1xuICAgIFN0eWxlc2hlZXQucHJvdG90eXBlLmNsYXNzTmFtZUZyb21LZXkgPSBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9rZXlUb0NsYXNzTmFtZVtrZXldO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogR2V0cyBhbGwgY2xhc3NuYW1lcyBjYWNoZSB3aXRoIHRoZSBzdHlsZXNoZWV0LlxuICAgICAqL1xuICAgIFN0eWxlc2hlZXQucHJvdG90eXBlLmdldENsYXNzTmFtZUNhY2hlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fa2V5VG9DbGFzc05hbWU7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBhcmd1bWVudHMgYXNzb2NpYXRlZCB3aXRoIGEgZ2l2ZW4gY2xhc3NuYW1lIHdoaWNoIHdhc1xuICAgICAqIHByZXZpb3VzbHkgcmVnaXN0ZXJlZCB1c2luZyBjYWNoZUNsYXNzTmFtZS5cbiAgICAgKi9cbiAgICBTdHlsZXNoZWV0LnByb3RvdHlwZS5hcmdzRnJvbUNsYXNzTmFtZSA9IGZ1bmN0aW9uIChjbGFzc05hbWUpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy5fY2xhc3NOYW1lVG9BcmdzW2NsYXNzTmFtZV07XG4gICAgICAgIHJldHVybiBlbnRyeSAmJiBlbnRyeS5hcmdzO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgcnVsZXMgYXNzb2NpYXRlZCB3aXRoIGEgZ2l2ZW4gY2xhc3NuYW1lIHdoaWNoIHdhc1xuICAgICAqIHByZXZpb3VzbHkgcmVnaXN0ZXJlZCB1c2luZyBjYWNoZUNsYXNzTmFtZS5cbiAgICAgKi9cbiAgICBTdHlsZXNoZWV0LnByb3RvdHlwZS5pbnNlcnRlZFJ1bGVzRnJvbUNsYXNzTmFtZSA9IGZ1bmN0aW9uIChjbGFzc05hbWUpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy5fY2xhc3NOYW1lVG9BcmdzW2NsYXNzTmFtZV07XG4gICAgICAgIHJldHVybiBlbnRyeSAmJiBlbnRyeS5ydWxlcztcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEluc2VydHMgYSBjc3MgcnVsZSBpbnRvIHRoZSBzdHlsZXNoZWV0LlxuICAgICAqIEBwYXJhbSBwcmVzZXJ2ZSAtIFByZXNlcnZlcyB0aGUgcnVsZSBiZXlvbmQgYSByZXNldCBib3VuZGFyeS5cbiAgICAgKi9cbiAgICBTdHlsZXNoZWV0LnByb3RvdHlwZS5pbnNlcnRSdWxlID0gZnVuY3Rpb24gKHJ1bGUsIHByZXNlcnZlKSB7XG4gICAgICAgIHZhciBpbmplY3Rpb25Nb2RlID0gdGhpcy5fY29uZmlnLmluamVjdGlvbk1vZGU7XG4gICAgICAgIHZhciBlbGVtZW50ID0gaW5qZWN0aW9uTW9kZSAhPT0gSW5qZWN0aW9uTW9kZS5ub25lID8gdGhpcy5fZ2V0U3R5bGVFbGVtZW50KCkgOiB1bmRlZmluZWQ7XG4gICAgICAgIGlmIChwcmVzZXJ2ZSkge1xuICAgICAgICAgICAgdGhpcy5fcHJlc2VydmVkUnVsZXMucHVzaChydWxlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZWxlbWVudCkge1xuICAgICAgICAgICAgc3dpdGNoIChpbmplY3Rpb25Nb2RlKSB7XG4gICAgICAgICAgICAgICAgY2FzZSBJbmplY3Rpb25Nb2RlLmluc2VydE5vZGU6XG4gICAgICAgICAgICAgICAgICAgIHZhciBzaGVldCA9IGVsZW1lbnQuc2hlZXQ7XG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzaGVldC5pbnNlcnRSdWxlKHJ1bGUsIHNoZWV0LmNzc1J1bGVzLmxlbmd0aCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRoZSBicm93c2VyIHdpbGwgdGhyb3cgZXhjZXB0aW9ucyBvbiB1bnN1cHBvcnRlZCBydWxlcyAoc3VjaCBhcyBhIG1veiBwcmVmaXggaW4gd2Via2l0LilcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFdlIG5lZWQgdG8gc3dhbGxvdyB0aGUgZXhjZXB0aW9ucyBmb3IgdGhpcyBzY2VuYXJpbywgb3RoZXJ3aXNlIHdlJ2QgbmVlZCB0byBmaWx0ZXJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHdoaWNoIGNvdWxkIGJlIHNsb3dlciBhbmQgYnVsa2llci5cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIEluamVjdGlvbk1vZGUuYXBwZW5kQ2hpbGQ6XG4gICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUocnVsZSkpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX3J1bGVzLnB1c2gocnVsZSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGRlcHJlY2F0aW9uL2RlcHJlY2F0aW9uXG4gICAgICAgIGlmICh0aGlzLl9jb25maWcub25JbnNlcnRSdWxlKSB7XG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZGVwcmVjYXRpb24vZGVwcmVjYXRpb25cbiAgICAgICAgICAgIHRoaXMuX2NvbmZpZy5vbkluc2VydFJ1bGUocnVsZSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fb25JbnNlcnRSdWxlQ2FsbGJhY2tzLmZvckVhY2goZnVuY3Rpb24gKGNhbGxiYWNrKSB7IHJldHVybiBjYWxsYmFjaygpOyB9KTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEdldHMgYWxsIHJ1bGVzIHJlZ2lzdGVyZWQgd2l0aCB0aGUgc3R5bGVzaGVldDsgb25seSB2YWxpZCB3aGVuXG4gICAgICogdXNpbmcgSW5zZXJ0aW9uTW9kZS5ub25lLlxuICAgICAqL1xuICAgIFN0eWxlc2hlZXQucHJvdG90eXBlLmdldFJ1bGVzID0gZnVuY3Rpb24gKGluY2x1ZGVQcmVzZXJ2ZWRSdWxlcykge1xuICAgICAgICByZXR1cm4gKGluY2x1ZGVQcmVzZXJ2ZWRSdWxlcyA/IHRoaXMuX3ByZXNlcnZlZFJ1bGVzLmpvaW4oJycpIDogJycpICsgdGhpcy5fcnVsZXMuam9pbignJyk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBSZXNldHMgdGhlIGludGVybmFsIHN0YXRlIG9mIHRoZSBzdHlsZXNoZWV0LiBPbmx5IHVzZWQgaW4gc2VydmVyXG4gICAgICogcmVuZGVyZWQgc2NlbmFyaW9zIHdoZXJlIHdlJ3JlIHVzaW5nIEluc2VydGlvbk1vZGUubm9uZS5cbiAgICAgKi9cbiAgICBTdHlsZXNoZWV0LnByb3RvdHlwZS5yZXNldCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5fcnVsZXMgPSBbXTtcbiAgICAgICAgdGhpcy5fY291bnRlciA9IDA7XG4gICAgICAgIHRoaXMuX2NsYXNzTmFtZVRvQXJncyA9IHt9O1xuICAgICAgICB0aGlzLl9rZXlUb0NsYXNzTmFtZSA9IHt9O1xuICAgICAgICB0aGlzLl9vblJlc2V0Q2FsbGJhY2tzLmZvckVhY2goZnVuY3Rpb24gKGNhbGxiYWNrKSB7IHJldHVybiBjYWxsYmFjaygpOyB9KTtcbiAgICB9O1xuICAgIC8vIEZvcmNlcyB0aGUgcmVnZW5lcmF0aW9uIG9mIGluY29taW5nIHN0eWxlcyB3aXRob3V0IHRvdGFsbHkgcmVzZXR0aW5nIHRoZSBzdHlsZXNoZWV0LlxuICAgIFN0eWxlc2hlZXQucHJvdG90eXBlLnJlc2V0S2V5cyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5fa2V5VG9DbGFzc05hbWUgPSB7fTtcbiAgICB9O1xuICAgIFN0eWxlc2hlZXQucHJvdG90eXBlLl9nZXRTdHlsZUVsZW1lbnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIGlmICghdGhpcy5fc3R5bGVFbGVtZW50ICYmIHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIHRoaXMuX3N0eWxlRWxlbWVudCA9IHRoaXMuX2NyZWF0ZVN0eWxlRWxlbWVudCgpO1xuICAgICAgICAgICAgaWYgKCFSRVVTRV9TVFlMRV9OT0RFKSB7XG4gICAgICAgICAgICAgICAgLy8gUmVzZXQgdGhlIHN0eWxlIGVsZW1lbnQgb24gdGhlIG5leHQgZnJhbWUuXG4gICAgICAgICAgICAgICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLl9zdHlsZUVsZW1lbnQgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX3N0eWxlRWxlbWVudDtcbiAgICB9O1xuICAgIFN0eWxlc2hlZXQucHJvdG90eXBlLl9jcmVhdGVTdHlsZUVsZW1lbnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBoZWFkID0gZG9jdW1lbnQuaGVhZDtcbiAgICAgICAgdmFyIHN0eWxlRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJyk7XG4gICAgICAgIHZhciBub2RlVG9JbnNlcnRCZWZvcmUgPSBudWxsO1xuICAgICAgICBzdHlsZUVsZW1lbnQuc2V0QXR0cmlidXRlKCdkYXRhLW1lcmdlLXN0eWxlcycsICd0cnVlJyk7XG4gICAgICAgIHZhciBjc3BTZXR0aW5ncyA9IHRoaXMuX2NvbmZpZy5jc3BTZXR0aW5ncztcbiAgICAgICAgaWYgKGNzcFNldHRpbmdzKSB7XG4gICAgICAgICAgICBpZiAoY3NwU2V0dGluZ3Mubm9uY2UpIHtcbiAgICAgICAgICAgICAgICBzdHlsZUVsZW1lbnQuc2V0QXR0cmlidXRlKCdub25jZScsIGNzcFNldHRpbmdzLm5vbmNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5fbGFzdFN0eWxlRWxlbWVudCkge1xuICAgICAgICAgICAgLy8gSWYgdGhlIGBuZXh0RWxlbWVudFNpYmxpbmdgIGlzIG51bGwsIHRoZW4gdGhlIGluc2VydEJlZm9yZSB3aWxsIGFjdCBhcyBhIHJlZ3VsYXIgYXBwZW5kLlxuICAgICAgICAgICAgLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL05vZGUvaW5zZXJ0QmVmb3JlI1N5bnRheFxuICAgICAgICAgICAgbm9kZVRvSW5zZXJ0QmVmb3JlID0gdGhpcy5fbGFzdFN0eWxlRWxlbWVudC5uZXh0RWxlbWVudFNpYmxpbmc7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB2YXIgcGxhY2Vob2xkZXJTdHlsZVRhZyA9IHRoaXMuX2ZpbmRQbGFjZWhvbGRlclN0eWxlVGFnKCk7XG4gICAgICAgICAgICBpZiAocGxhY2Vob2xkZXJTdHlsZVRhZykge1xuICAgICAgICAgICAgICAgIG5vZGVUb0luc2VydEJlZm9yZSA9IHBsYWNlaG9sZGVyU3R5bGVUYWcubmV4dEVsZW1lbnRTaWJsaW5nO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgbm9kZVRvSW5zZXJ0QmVmb3JlID0gaGVhZC5jaGlsZE5vZGVzWzBdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGhlYWQuaW5zZXJ0QmVmb3JlKHN0eWxlRWxlbWVudCwgaGVhZC5jb250YWlucyhub2RlVG9JbnNlcnRCZWZvcmUpID8gbm9kZVRvSW5zZXJ0QmVmb3JlIDogbnVsbCk7XG4gICAgICAgIHRoaXMuX2xhc3RTdHlsZUVsZW1lbnQgPSBzdHlsZUVsZW1lbnQ7XG4gICAgICAgIHJldHVybiBzdHlsZUVsZW1lbnQ7XG4gICAgfTtcbiAgICBTdHlsZXNoZWV0LnByb3RvdHlwZS5fZmluZFBsYWNlaG9sZGVyU3R5bGVUYWcgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBoZWFkID0gZG9jdW1lbnQuaGVhZDtcbiAgICAgICAgaWYgKGhlYWQpIHtcbiAgICAgICAgICAgIHJldHVybiBoZWFkLnF1ZXJ5U2VsZWN0b3IoJ3N0eWxlW2RhdGEtbWVyZ2Utc3R5bGVzXScpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH07XG4gICAgcmV0dXJuIFN0eWxlc2hlZXQ7XG59KCkpO1xuZXhwb3J0IHsgU3R5bGVzaGVldCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9U3R5bGVzaGVldC5qcy5tYXAiLCJpbXBvcnQgeyBTdHlsZXNoZWV0IH0gZnJvbSAnQGZsdWVudHVpL21lcmdlLXN0eWxlcyc7XG52YXIgX2luaXRpYWxpemVkU3R5bGVzaGVldFJlc2V0cyA9IGZhbHNlO1xudmFyIF9yZXNldENvdW50ZXIgPSAwO1xudmFyIF9lbXB0eU9iamVjdCA9IHsgZW1wdHk6IHRydWUgfTtcbnZhciBfZGljdGlvbmFyeSA9IHt9O1xudmFyIF93ZWFrTWFwID0gdHlwZW9mIFdlYWtNYXAgPT09ICd1bmRlZmluZWQnID8gbnVsbCA6IFdlYWtNYXA7XG4vKipcbiAqICBUZXN0IHV0aWxpdHkgZm9yIHByb3ZpZGluZyBhIGN1c3RvbSB3ZWFrbWFwLlxuICpcbiAqIEBpbnRlcm5hbFxuICogKi9cbmV4cG9ydCBmdW5jdGlvbiBzZXRNZW1vaXplV2Vha01hcCh3ZWFrTWFwKSB7XG4gICAgX3dlYWtNYXAgPSB3ZWFrTWFwO1xufVxuLyoqXG4gKiBSZXNldCBtZW1vaXphdGlvbnMuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZXNldE1lbW9pemF0aW9ucygpIHtcbiAgICBfcmVzZXRDb3VudGVyKys7XG59XG4vKipcbiAqIE1lbW9pemUgZGVjb3JhdG9yIHRvIGJlIHVzZWQgb24gY2xhc3MgbWV0aG9kcy4gV0FSTklORzogdGhlIGB0aGlzYCByZWZlcmVuY2VcbiAqIHdpbGwgYmUgaW5hY2Nlc3NpYmxlIHdpdGhpbiBhIG1lbW9pemVkIG1ldGhvZCwgZ2l2ZW4gdGhhdCBhIGNhY2hlZCBtZXRob2QncyBgdGhpc2BcbiAqIHdvdWxkIG5vdCBiZSBpbnN0YW5jZS1zcGVjaWZpYy5cbiAqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBtZW1vaXplKF90YXJnZXQsIF9rZXksIGRlc2NyaXB0b3IpIHtcbiAgICAvLyBXZSBiaW5kIHRvIFwibnVsbFwiIHRvIHByZXZlbnQgcGVvcGxlIGZyb20gaW5hZHZlcnRlbnRseSBwdWxsaW5nIHZhbHVlcyBmcm9tIFwidGhpc1wiLFxuICAgIC8vIHJhdGhlciB0aGFuIHBhc3NpbmcgdGhlbSBpbiBhcyBpbnB1dCB2YWx1ZXMgd2hpY2ggY2FuIGJlIG1lbW9pemVkLlxuICAgIHZhciBmbiA9IG1lbW9pemVGdW5jdGlvbihkZXNjcmlwdG9yLnZhbHVlICYmIGRlc2NyaXB0b3IudmFsdWUuYmluZChudWxsKSk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBmbjtcbiAgICAgICAgfSxcbiAgICB9O1xufVxuLyoqXG4gKiBNZW1vaXplcyBhIGZ1bmN0aW9uOyB3aGVuIHlvdSBwYXNzIGluIHRoZSBzYW1lIHBhcmFtZXRlcnMgbXVsdGlwbGUgdGltZXMsIGl0IHJldHVybnMgYSBjYWNoZWQgcmVzdWx0LlxuICogQmUgY2FyZWZ1bCB3aGVuIHBhc3NpbmcgaW4gb2JqZWN0cywgeW91IG5lZWQgdG8gcGFzcyBpbiB0aGUgc2FtZSBJTlNUQU5DRSBmb3IgY2FjaGluZyB0byB3b3JrLiBPdGhlcndpc2VcbiAqIGl0IHdpbGwgZ3JvdyB0aGUgY2FjaGUgdW5uZWNlc3NhcmlseS4gQWxzbyBhdm9pZCB1c2luZyBkZWZhdWx0IHZhbHVlcyB0aGF0IGV2YWx1YXRlIGZ1bmN0aW9uczsgcGFzc2luZyBpblxuICogdW5kZWZpbmVkIGZvciBhIHZhbHVlIGFuZCByZWx5aW5nIG9uIGEgZGVmYXVsdCBmdW5jdGlvbiB3aWxsIGV4ZWN1dGUgaXQgdGhlIGZpcnN0IHRpbWUsIGJ1dCB3aWxsIG5vdFxuICogcmUtZXZhbHVhdGUgc3Vic2VxdWVudCB0aW1lcyB3aGljaCBtYXkgaGF2ZSBiZWVuIHVuZXhwZWN0ZWQuXG4gKlxuICogQnkgZGVmYXVsdCwgdGhlIGNhY2hlIHdpbGwgcmVzZXQgYWZ0ZXIgMTAwIHBlcm11dGF0aW9ucywgdG8gYXZvaWQgYWJ1c2UgY2FzZXMgd2hlcmUgdGhlIGZ1bmN0aW9uIGlzXG4gKiB1bmludGVuZGVkbHkgY2FsbGVkIHdpdGggdW5pcXVlIG9iamVjdHMuIFdpdGhvdXQgYSByZXNldCwgdGhlIGNhY2hlIGNvdWxkIGdyb3cgaW5maW5pdGVseSwgc28gd2Ugc2FmZWd1YXJkXG4gKiBieSByZXNldHRpbmcuIFRvIG92ZXJyaWRlIHRoaXMgYmVoYXZpb3IsIHBhc3MgYSB2YWx1ZSBvZiAwIHRvIHRoZSBtYXhDYWNoZVNpemUgcGFyYW1ldGVyLlxuICpcbiAqIEBwdWJsaWNcbiAqIEBwYXJhbSBjYiAtIFRoZSBmdW5jdGlvbiB0byBtZW1vaXplLlxuICogQHBhcmFtIG1heENhY2hlU2l6ZSAtIE1heCByZXN1bHRzIHRvIGNhY2hlLiBJZiB0aGUgY2FjaGUgZXhjZWVkcyB0aGlzIHZhbHVlLCBpdCB3aWxsIHJlc2V0IG9uIHRoZSBuZXh0IGNhbGwuXG4gKiBAcGFyYW0gaWdub3JlTnVsbE9yVW5kZWZpbmVkUmVzdWx0IC0gRmxhZyB0byBkZWNpZGUgd2hldGhlciB0byBjYWNoZSBjYWxsYmFjayByZXN1bHQgaWYgaXQgaXMgdW5kZWZpbmVkL251bGwuXG4gKiBJZiB0aGUgZmxhZyBpcyBzZXQgdG8gdHJ1ZSwgdGhlIGNhbGxiYWNrIHJlc3VsdCBpcyByZWNvbXB1dGVkIGV2ZXJ5IHRpbWUgdGlsbCB0aGUgY2FsbGJhY2sgcmVzdWx0IGlzXG4gKiBub3QgdW5kZWZpbmVkL251bGwgZm9yIHRoZSBmaXJzdCB0aW1lLCBhbmQgdGhlbiB0aGUgbm9uLXVuZGVmaW5lZC9udWxsIHZlcnNpb24gZ2V0cyBjYWNoZWQuXG4gKiBAcmV0dXJucyBBIG1lbW9pemVkIHZlcnNpb24gb2YgdGhlIGZ1bmN0aW9uLlxuICovXG5leHBvcnQgZnVuY3Rpb24gbWVtb2l6ZUZ1bmN0aW9uKGNiLCBtYXhDYWNoZVNpemUsIGlnbm9yZU51bGxPclVuZGVmaW5lZFJlc3VsdCkge1xuICAgIGlmIChtYXhDYWNoZVNpemUgPT09IHZvaWQgMCkgeyBtYXhDYWNoZVNpemUgPSAxMDA7IH1cbiAgICBpZiAoaWdub3JlTnVsbE9yVW5kZWZpbmVkUmVzdWx0ID09PSB2b2lkIDApIHsgaWdub3JlTnVsbE9yVW5kZWZpbmVkUmVzdWx0ID0gZmFsc2U7IH1cbiAgICAvLyBBdm9pZCBicmVha2luZyBzY2VuYXJpb3Mgd2hpY2ggZG9uJ3QgaGF2ZSB3ZWFrIG1hcC5cbiAgICBpZiAoIV93ZWFrTWFwKSB7XG4gICAgICAgIHJldHVybiBjYjtcbiAgICB9XG4gICAgaWYgKCFfaW5pdGlhbGl6ZWRTdHlsZXNoZWV0UmVzZXRzKSB7XG4gICAgICAgIHZhciBzdHlsZXNoZWV0ID0gU3R5bGVzaGVldC5nZXRJbnN0YW5jZSgpO1xuICAgICAgICBpZiAoc3R5bGVzaGVldCAmJiBzdHlsZXNoZWV0Lm9uUmVzZXQpIHtcbiAgICAgICAgICAgIFN0eWxlc2hlZXQuZ2V0SW5zdGFuY2UoKS5vblJlc2V0KHJlc2V0TWVtb2l6YXRpb25zKTtcbiAgICAgICAgfVxuICAgICAgICBfaW5pdGlhbGl6ZWRTdHlsZXNoZWV0UmVzZXRzID0gdHJ1ZTtcbiAgICB9XG4gICAgdmFyIHJvb3ROb2RlO1xuICAgIHZhciBjYWNoZVNpemUgPSAwO1xuICAgIHZhciBsb2NhbFJlc2V0Q291bnRlciA9IF9yZXNldENvdW50ZXI7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIG1lbW9pemVkRnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBhcmdzID0gW107XG4gICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICBhcmdzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGN1cnJlbnROb2RlID0gcm9vdE5vZGU7XG4gICAgICAgIGlmIChyb290Tm9kZSA9PT0gdW5kZWZpbmVkIHx8XG4gICAgICAgICAgICBsb2NhbFJlc2V0Q291bnRlciAhPT0gX3Jlc2V0Q291bnRlciB8fFxuICAgICAgICAgICAgKG1heENhY2hlU2l6ZSA+IDAgJiYgY2FjaGVTaXplID4gbWF4Q2FjaGVTaXplKSkge1xuICAgICAgICAgICAgcm9vdE5vZGUgPSBfY3JlYXRlTm9kZSgpO1xuICAgICAgICAgICAgY2FjaGVTaXplID0gMDtcbiAgICAgICAgICAgIGxvY2FsUmVzZXRDb3VudGVyID0gX3Jlc2V0Q291bnRlcjtcbiAgICAgICAgfVxuICAgICAgICBjdXJyZW50Tm9kZSA9IHJvb3ROb2RlO1xuICAgICAgICAvLyBUcmF2ZXJzZSB0aGUgdHJlZSB1bnRpbCB3ZSBmaW5kIHRoZSBtYXRjaC5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmdzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgYXJnID0gX25vcm1hbGl6ZUFyZyhhcmdzW2ldKTtcbiAgICAgICAgICAgIGlmICghY3VycmVudE5vZGUubWFwLmhhcyhhcmcpKSB7XG4gICAgICAgICAgICAgICAgY3VycmVudE5vZGUubWFwLnNldChhcmcsIF9jcmVhdGVOb2RlKCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY3VycmVudE5vZGUgPSBjdXJyZW50Tm9kZS5tYXAuZ2V0KGFyZyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFjdXJyZW50Tm9kZS5oYXNPd25Qcm9wZXJ0eSgndmFsdWUnKSkge1xuICAgICAgICAgICAgY3VycmVudE5vZGUudmFsdWUgPSBjYi5hcHBseSh2b2lkIDAsIGFyZ3MpO1xuICAgICAgICAgICAgY2FjaGVTaXplKys7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlnbm9yZU51bGxPclVuZGVmaW5lZFJlc3VsdCAmJiAoY3VycmVudE5vZGUudmFsdWUgPT09IG51bGwgfHwgY3VycmVudE5vZGUudmFsdWUgPT09IHVuZGVmaW5lZCkpIHtcbiAgICAgICAgICAgIGN1cnJlbnROb2RlLnZhbHVlID0gY2IuYXBwbHkodm9pZCAwLCBhcmdzKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY3VycmVudE5vZGUudmFsdWU7XG4gICAgfTtcbn1cbi8qKlxuICogQ3JlYXRlcyBhIG1lbW9pemVyIGZvciBhIHNpbmdsZS12YWx1ZSBmdW5jdGlvbiwgYmFja2VkIGJ5IGEgV2Vha01hcC5cbiAqIFdpdGggYSBXZWFrTWFwLCB0aGUgbWVtb2l6ZWQgdmFsdWVzIGFyZSBvbmx5IGtlcHQgYXMgbG9uZyBhcyB0aGUgc291cmNlIG9iamVjdHMsXG4gKiBlbnN1cmluZyB0aGF0IHRoZXJlIGlzIG5vIG1lbW9yeSBsZWFrLlxuICpcbiAqIFRoaXMgZnVuY3Rpb24gYXNzdW1lcyB0aGF0IHRoZSBpbnB1dCB2YWx1ZXMgcGFzc2VkIHRvIHRoZSB3cmFwcGVkIGZ1bmN0aW9uIHdpbGwgYmVcbiAqIGBmdW5jdGlvbmAgb3IgYG9iamVjdGAgdHlwZXMuIFRvIG1lbW9pemUgZnVuY3Rpb25zIHdoaWNoIGFjY2VwdCBvdGhlciBpbnB1dHMsIHVzZVxuICogYG1lbW9pemVGdW5jdGlvbmAsIHdoaWNoIG1lbW9pemVzIGFnYWluc3QgYXJiaXRyYXJ5IGlucHV0cyB1c2luZyBhIGxvb2t1cCBjYWNoZS5cbiAqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVNZW1vaXplcihnZXRWYWx1ZSkge1xuICAgIGlmICghX3dlYWtNYXApIHtcbiAgICAgICAgLy8gV2l0aG91dCBhIGBXZWFrTWFwYCBpbXBsZW1lbnRhdGlvbiwgbWVtb2l6YXRpb24gaXMgbm90IHBvc3NpYmxlLlxuICAgICAgICByZXR1cm4gZ2V0VmFsdWU7XG4gICAgfVxuICAgIHZhciBjYWNoZSA9IG5ldyBfd2Vha01hcCgpO1xuICAgIGZ1bmN0aW9uIG1lbW9pemVkR2V0VmFsdWUoaW5wdXQpIHtcbiAgICAgICAgaWYgKCFpbnB1dCB8fCAodHlwZW9mIGlucHV0ICE9PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBpbnB1dCAhPT0gJ29iamVjdCcpKSB7XG4gICAgICAgICAgICAvLyBBIFdlYWtNYXAgY2FuIG9ubHkgYmUgdXNlZCB0byB0ZXN0IGFnYWluc3QgcmVmZXJlbmNlIHZhbHVlcywgaS5lLiAnZnVuY3Rpb24nIGFuZCAnb2JqZWN0Jy5cbiAgICAgICAgICAgIC8vIEFsbCBvdGhlciBpbnB1dHMgY2Fubm90IGJlIG1lbW9pemVkIGFnYWluc3QgaW4gdGhpcyBtYW5uZXIuXG4gICAgICAgICAgICByZXR1cm4gZ2V0VmFsdWUoaW5wdXQpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjYWNoZS5oYXMoaW5wdXQpKSB7XG4gICAgICAgICAgICByZXR1cm4gY2FjaGUuZ2V0KGlucHV0KTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgdmFsdWUgPSBnZXRWYWx1ZShpbnB1dCk7XG4gICAgICAgIGNhY2hlLnNldChpbnB1dCwgdmFsdWUpO1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuICAgIHJldHVybiBtZW1vaXplZEdldFZhbHVlO1xufVxuZnVuY3Rpb24gX25vcm1hbGl6ZUFyZyh2YWwpIHtcbiAgICBpZiAoIXZhbCkge1xuICAgICAgICByZXR1cm4gX2VtcHR5T2JqZWN0O1xuICAgIH1cbiAgICBlbHNlIGlmICh0eXBlb2YgdmFsID09PSAnb2JqZWN0JyB8fCB0eXBlb2YgdmFsID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHJldHVybiB2YWw7XG4gICAgfVxuICAgIGVsc2UgaWYgKCFfZGljdGlvbmFyeVt2YWxdKSB7XG4gICAgICAgIF9kaWN0aW9uYXJ5W3ZhbF0gPSB7IHZhbDogdmFsIH07XG4gICAgfVxuICAgIHJldHVybiBfZGljdGlvbmFyeVt2YWxdO1xufVxuZnVuY3Rpb24gX2NyZWF0ZU5vZGUoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgbWFwOiBfd2Vha01hcCA/IG5ldyBfd2Vha01hcCgpIDogbnVsbCxcbiAgICB9O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWVtb2l6ZS5qcy5tYXAiLCIvKipcbiAqIENvbmNhdGluYXRpb24gaGVscGVyLCB3aGljaCBjYW4gbWVyZ2UgY2xhc3MgbmFtZXMgdG9nZXRoZXIuIFNraXBzIG92ZXIgZmFsc2V5IHZhbHVlcy5cbiAqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjc3MoKSB7XG4gICAgdmFyIGFyZ3MgPSBbXTtcbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICBhcmdzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgfVxuICAgIHZhciBjbGFzc2VzID0gW107XG4gICAgZm9yICh2YXIgX2EgPSAwLCBhcmdzXzEgPSBhcmdzOyBfYSA8IGFyZ3NfMS5sZW5ndGg7IF9hKyspIHtcbiAgICAgICAgdmFyIGFyZyA9IGFyZ3NfMVtfYV07XG4gICAgICAgIGlmIChhcmcpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgYXJnID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgIGNsYXNzZXMucHVzaChhcmcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoYXJnLmhhc093blByb3BlcnR5KCd0b1N0cmluZycpICYmIHR5cGVvZiBhcmcudG9TdHJpbmcgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICBjbGFzc2VzLnB1c2goYXJnLnRvU3RyaW5nKCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBrZXkgaW4gYXJnKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgICAgICAgICAgICAgICAgIGlmIChhcmdba2V5XSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3Nlcy5wdXNoKGtleSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGNsYXNzZXMuam9pbignICcpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y3NzLmpzLm1hcCIsImltcG9ydCB7IGdldFZpcnR1YWxQYXJlbnQgfSBmcm9tICcuL2dldFZpcnR1YWxQYXJlbnQnO1xuLyoqXG4gKiBHZXRzIHRoZSBlbGVtZW50IHdoaWNoIGlzIHRoZSBwYXJlbnQgb2YgYSBnaXZlbiBlbGVtZW50LlxuICogSWYgYGFsbG93VmlydHVhUGFyZW50c2AgaXMgYHRydWVgLCB0aGlzIG1ldGhvZCBwcmVmZXJzIHRoZSB2aXJ0dWFsIHBhcmVudCBvdmVyXG4gKiByZWFsIERPTSBwYXJlbnQgd2hlbiBwcmVzZW50LlxuICpcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldFBhcmVudChjaGlsZCwgYWxsb3dWaXJ0dWFsUGFyZW50cykge1xuICAgIGlmIChhbGxvd1ZpcnR1YWxQYXJlbnRzID09PSB2b2lkIDApIHsgYWxsb3dWaXJ0dWFsUGFyZW50cyA9IHRydWU7IH1cbiAgICByZXR1cm4gKGNoaWxkICYmXG4gICAgICAgICgoYWxsb3dWaXJ0dWFsUGFyZW50cyAmJiBnZXRWaXJ0dWFsUGFyZW50KGNoaWxkKSkgfHwgKGNoaWxkLnBhcmVudE5vZGUgJiYgY2hpbGQucGFyZW50Tm9kZSkpKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWdldFBhcmVudC5qcy5tYXAiLCJpbXBvcnQgeyBpc1ZpcnR1YWxFbGVtZW50IH0gZnJvbSAnLi9pc1ZpcnR1YWxFbGVtZW50Jztcbi8qKlxuICogR2V0cyB0aGUgdmlydHVhbCBwYXJlbnQgZ2l2ZW4gdGhlIGNoaWxkIGVsZW1lbnQsIGlmIGl0IGV4aXN0cy5cbiAqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRWaXJ0dWFsUGFyZW50KGNoaWxkKSB7XG4gICAgdmFyIHBhcmVudDtcbiAgICBpZiAoY2hpbGQgJiYgaXNWaXJ0dWFsRWxlbWVudChjaGlsZCkpIHtcbiAgICAgICAgcGFyZW50ID0gY2hpbGQuX3ZpcnR1YWwucGFyZW50O1xuICAgIH1cbiAgICByZXR1cm4gcGFyZW50O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Z2V0VmlydHVhbFBhcmVudC5qcy5tYXAiLCIvKipcbiAqIERldGVybWluZXMgd2hldGhlciBvciBub3QgYW4gZWxlbWVudCBoYXMgdGhlIHZpcnR1YWwgaGllcmFyY2h5IGV4dGVuc2lvbi5cbiAqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc1ZpcnR1YWxFbGVtZW50KGVsZW1lbnQpIHtcbiAgICByZXR1cm4gZWxlbWVudCAmJiAhIWVsZW1lbnQuX3ZpcnR1YWw7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pc1ZpcnR1YWxFbGVtZW50LmpzLm1hcCIsImltcG9ydCB7IGdldFBhcmVudCB9IGZyb20gJy4vZ2V0UGFyZW50Jztcbi8qKlxuICogRmluZHMgdGhlIGZpcnN0IHBhcmVudCBlbGVtZW50IHdoZXJlIHRoZSBtYXRjaEZ1bmN0aW9uIHJldHVybnMgdHJ1ZVxuICogQHBhcmFtIGVsZW1lbnQgLSBlbGVtZW50IHRvIHN0YXJ0IHNlYXJjaGluZyBhdFxuICogQHBhcmFtIG1hdGNoRnVuY3Rpb24gLSB0aGUgZnVuY3Rpb24gdGhhdCBkZXRlcm1pbmVzIGlmIHRoZSBlbGVtZW50IGlzIGEgbWF0Y2hcbiAqIEByZXR1cm5zIHRoZSBtYXRjaGVkIGVsZW1lbnQgb3IgbnVsbCBubyBtYXRjaCB3YXMgZm91bmRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGZpbmRFbGVtZW50UmVjdXJzaXZlKGVsZW1lbnQsIG1hdGNoRnVuY3Rpb24pIHtcbiAgICBpZiAoIWVsZW1lbnQgfHwgZWxlbWVudCA9PT0gZG9jdW1lbnQuYm9keSkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIG1hdGNoRnVuY3Rpb24oZWxlbWVudCkgPyBlbGVtZW50IDogZmluZEVsZW1lbnRSZWN1cnNpdmUoZ2V0UGFyZW50KGVsZW1lbnQpLCBtYXRjaEZ1bmN0aW9uKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZpbmRFbGVtZW50UmVjdXJzaXZlLmpzLm1hcCIsImltcG9ydCB7IGZpbmRFbGVtZW50UmVjdXJzaXZlIH0gZnJvbSAnLi9maW5kRWxlbWVudFJlY3Vyc2l2ZSc7XG5pbXBvcnQgeyBEQVRBX1BPUlRBTF9BVFRSSUJVVEUgfSBmcm9tICcuL3NldFBvcnRhbEF0dHJpYnV0ZSc7XG4vKipcbiAqIERldGVybWluZSB3aGV0aGVyIGEgdGFyZ2V0IGlzIHdpdGhpbiBhIHBvcnRhbCBmcm9tIHBlcnNwZWN0aXZlIG9mIHJvb3Qgb3Igb3B0aW9uYWwgcGFyZW50LlxuICogVGhpcyBmdW5jdGlvbiBvbmx5IHdvcmtzIGFnYWluc3QgcG9ydGFsIGNvbXBvbmVudHMgdGhhdCB1c2UgdGhlIHNldFBvcnRhbEF0dHJpYnV0ZSBmdW5jdGlvbi5cbiAqIElmIGJvdGggcGFyZW50IGFuZCBjaGlsZCBhcmUgd2l0aGluIHRoZSBzYW1lIHBvcnRhbCB0aGlzIGZ1bmN0aW9uIHdpbGwgcmV0dXJuIGZhbHNlLlxuICogQHBhcmFtIHRhcmdldCAtIEVsZW1lbnQgdG8gcXVlcnkgcG9ydGFsIGNvbnRhaW5tZW50IHN0YXR1cyBvZi5cbiAqIEBwYXJhbSBwYXJlbnQgLSBPcHRpb25hbCBwYXJlbnQgcGVyc3BlY3RpdmUuIFNlYXJjaCBmb3IgY29udGFpbmluZyBwb3J0YWwgc3RvcHMgYXQgcGFyZW50XG4gKiAob3Igcm9vdCBpZiBwYXJlbnQgaXMgdW5kZWZpbmVkIG9yIGludmFsaWQuKVxuICovXG5leHBvcnQgZnVuY3Rpb24gcG9ydGFsQ29udGFpbnNFbGVtZW50KHRhcmdldCwgcGFyZW50KSB7XG4gICAgdmFyIGVsZW1lbnRNYXRjaCA9IGZpbmRFbGVtZW50UmVjdXJzaXZlKHRhcmdldCwgZnVuY3Rpb24gKHRlc3RFbGVtZW50KSB7IHJldHVybiBwYXJlbnQgPT09IHRlc3RFbGVtZW50IHx8IHRlc3RFbGVtZW50Lmhhc0F0dHJpYnV0ZShEQVRBX1BPUlRBTF9BVFRSSUJVVEUpOyB9KTtcbiAgICByZXR1cm4gZWxlbWVudE1hdGNoICE9PSBudWxsICYmIGVsZW1lbnRNYXRjaC5oYXNBdHRyaWJ1dGUoREFUQV9QT1JUQUxfQVRUUklCVVRFKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBvcnRhbENvbnRhaW5zRWxlbWVudC5qcy5tYXAiLCJleHBvcnQgdmFyIERBVEFfUE9SVEFMX0FUVFJJQlVURSA9ICdkYXRhLXBvcnRhbC1lbGVtZW50Jztcbi8qKlxuICogSWRlbnRpZnkgZWxlbWVudCBhcyBhIHBvcnRhbCBieSBzZXR0aW5nIGFuIGF0dHJpYnV0ZS5cbiAqIEBwYXJhbSBlbGVtZW50IC0gRWxlbWVudCB0byBtYXJrIGFzIGEgcG9ydGFsLlxuICovXG5leHBvcnQgZnVuY3Rpb24gc2V0UG9ydGFsQXR0cmlidXRlKGVsZW1lbnQpIHtcbiAgICBlbGVtZW50LnNldEF0dHJpYnV0ZShEQVRBX1BPUlRBTF9BVFRSSUJVVEUsICd0cnVlJyk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zZXRQb3J0YWxBdHRyaWJ1dGUuanMubWFwIiwiLyoqXG4gKiBTaW11bGF0ZWQgZW51bSBmb3Iga2V5Y29kZXMuIFRoZXNlIHdpbGwgZ2V0IGlubGluZWQgYnkgdWdsaWZ5IHdoZW4gdXNlZCBtdWNoIGxpa2UgYW4gZW51bVxuICpcbiAqIEBwdWJsaWNcbiAqIHtAZG9jQ2F0ZWdvcnkgS2V5Q29kZXN9XG4gKi9cbmV4cG9ydCB2YXIgS2V5Q29kZXMgPSB7XG4gICAgYmFja3NwYWNlOiA4LFxuICAgIHRhYjogOSxcbiAgICBlbnRlcjogMTMsXG4gICAgc2hpZnQ6IDE2LFxuICAgIGN0cmw6IDE3LFxuICAgIGFsdDogMTgsXG4gICAgcGF1c2VCcmVhazogMTksXG4gICAgY2Fwc2xvY2s6IDIwLFxuICAgIGVzY2FwZTogMjcsXG4gICAgc3BhY2U6IDMyLFxuICAgIHBhZ2VVcDogMzMsXG4gICAgcGFnZURvd246IDM0LFxuICAgIGVuZDogMzUsXG4gICAgaG9tZTogMzYsXG4gICAgbGVmdDogMzcsXG4gICAgdXA6IDM4LFxuICAgIHJpZ2h0OiAzOSxcbiAgICBkb3duOiA0MCxcbiAgICBpbnNlcnQ6IDQ1LFxuICAgIGRlbDogNDYsXG4gICAgemVybzogNDgsXG4gICAgb25lOiA0OSxcbiAgICB0d286IDUwLFxuICAgIHRocmVlOiA1MSxcbiAgICBmb3VyOiA1MixcbiAgICBmaXZlOiA1MyxcbiAgICBzaXg6IDU0LFxuICAgIHNldmVuOiA1NSxcbiAgICBlaWdodDogNTYsXG4gICAgbmluZTogNTcsXG4gICAgY29sb246IDU4LFxuICAgIGE6IDY1LFxuICAgIGI6IDY2LFxuICAgIGM6IDY3LFxuICAgIGQ6IDY4LFxuICAgIGU6IDY5LFxuICAgIGY6IDcwLFxuICAgIGc6IDcxLFxuICAgIGg6IDcyLFxuICAgIGk6IDczLFxuICAgIGo6IDc0LFxuICAgIGs6IDc1LFxuICAgIGw6IDc2LFxuICAgIG06IDc3LFxuICAgIG46IDc4LFxuICAgIG86IDc5LFxuICAgIHA6IDgwLFxuICAgIHE6IDgxLFxuICAgIHI6IDgyLFxuICAgIHM6IDgzLFxuICAgIHQ6IDg0LFxuICAgIHU6IDg1LFxuICAgIHY6IDg2LFxuICAgIHc6IDg3LFxuICAgIHg6IDg4LFxuICAgIHk6IDg5LFxuICAgIHo6IDkwLFxuICAgIGxlZnRXaW5kb3c6IDkxLFxuICAgIHJpZ2h0V2luZG93OiA5MixcbiAgICBzZWxlY3Q6IDkzLFxuICAgIC8qIGVzbGludC1kaXNhYmxlIEB0eXBlc2NyaXB0LWVzbGludC9uYW1pbmctY29udmVudGlvbiAqL1xuICAgIHplcm9fbnVtcGFkOiA5NixcbiAgICBvbmVfbnVtcGFkOiA5NyxcbiAgICB0d29fbnVtcGFkOiA5OCxcbiAgICB0aHJlZV9udW1wYWQ6IDk5LFxuICAgIGZvdXJfbnVtcGFkOiAxMDAsXG4gICAgZml2ZV9udW1wYWQ6IDEwMSxcbiAgICBzaXhfbnVtcGFkOiAxMDIsXG4gICAgc2V2ZW5fbnVtcGFkOiAxMDMsXG4gICAgZWlnaHRfbnVtcGFkOiAxMDQsXG4gICAgbmluZV9udW1wYWQ6IDEwNSxcbiAgICAvKiBlc2xpbnQtZW5hYmxlIEB0eXBlc2NyaXB0LWVzbGludC9uYW1pbmctY29udmVudGlvbiAqL1xuICAgIG11bHRpcGx5OiAxMDYsXG4gICAgYWRkOiAxMDcsXG4gICAgc3VidHJhY3Q6IDEwOSxcbiAgICBkZWNpbWFsUG9pbnQ6IDExMCxcbiAgICBkaXZpZGU6IDExMSxcbiAgICBmMTogMTEyLFxuICAgIGYyOiAxMTMsXG4gICAgZjM6IDExNCxcbiAgICBmNDogMTE1LFxuICAgIGY1OiAxMTYsXG4gICAgZjY6IDExNyxcbiAgICBmNzogMTE4LFxuICAgIGY4OiAxMTksXG4gICAgZjk6IDEyMCxcbiAgICBmMTA6IDEyMSxcbiAgICBmMTE6IDEyMixcbiAgICBmMTI6IDEyMyxcbiAgICBudW1sb2NrOiAxNDQsXG4gICAgc2Nyb2xsTG9jazogMTQ1LFxuICAgIHNlbWljb2xvbjogMTg2LFxuICAgIGVxdWFsU2lnbjogMTg3LFxuICAgIGNvbW1hOiAxODgsXG4gICAgZGFzaDogMTg5LFxuICAgIHBlcmlvZDogMTkwLFxuICAgIGZvcndhcmRTbGFzaDogMTkxLFxuICAgIGdyYXZlQWNjZW50OiAxOTIsXG4gICAgb3BlbkJyYWNrZXQ6IDIxOSxcbiAgICBiYWNrU2xhc2g6IDIyMCxcbiAgICBjbG9zZUJyYWNrZXQ6IDIyMSxcbiAgICBzaW5nbGVRdW90ZTogMjIyLFxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUtleUNvZGVzLmpzLm1hcCIsImltcG9ydCB7IGdldFdpbmRvdyB9IGZyb20gJy4vZG9tL2dldFdpbmRvdyc7XG5leHBvcnQgdmFyIElzRm9jdXNWaXNpYmxlQ2xhc3NOYW1lID0gJ21zLUZhYnJpYy0taXNGb2N1c1Zpc2libGUnO1xuZXhwb3J0IHZhciBJc0ZvY3VzSGlkZGVuQ2xhc3NOYW1lID0gJ21zLUZhYnJpYy0taXNGb2N1c0hpZGRlbic7XG4vKipcbiAqIFNldHMgdGhlIHZpc2liaWxpdHkgb2YgZm9jdXMgc3R5bGluZy5cbiAqXG4gKiBCeSBkZWZhdWx0LCBmb2N1cyBzdHlsZXMgKHRoZSBib3ggc3Vycm91bmRpbmcgYSBmb2N1c2VkIEJ1dHRvbiwgZm9yIGV4YW1wbGUpIG9ubHkgc2hvdyB1cCB3aGVuIG5hdmlnYXRpb25hbFxuICoga2V5cHJlc3NlcyBvY2N1ciAodGhyb3VnaCBUYWIsIGFycm93cywgUGdVcC9QZ0RuLCBIb21lIGFuZCBFbmQpLCBhbmQgYXJlIGhpZGRlbiB3aGVuIG1vdXNlIGludGVyYWN0aW9ucyBvY2N1ci5cbiAqIFRoaXMgQVBJIHByb3ZpZGVzIGFuIGltcGVyYXRpdmUgd2F5IHRvIHR1cm4gdGhlbSBvbi9vZmYuXG4gKlxuICogQSB1c2UgY2FzZSBtaWdodCBiZSB3aGVuIHlvdSBoYXZlIGEga2V5cHJlc3MgbGlrZSBjdHJsLWY2IG5hdmlnYXRlIHRvIGEgcGFydGljdWxhciByZWdpb24gb24gdGhlIHBhZ2UsXG4gKiBhbmQgd2FudCBmb2N1cyB0byBzaG93IHVwLlxuICpcbiAqIEBwYXJhbSBlbmFibGVkIC0gd2hldGhlciB0byByZW1vdmUgb3IgYWRkIGZvY3VzXG4gKiBAcGFyYW0gdGFyZ2V0IC0gb3B0aW9uYWwgdGFyZ2V0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzZXRGb2N1c1Zpc2liaWxpdHkoZW5hYmxlZCwgdGFyZ2V0KSB7XG4gICAgdmFyIHdpbiA9IHRhcmdldCA/IGdldFdpbmRvdyh0YXJnZXQpIDogZ2V0V2luZG93KCk7XG4gICAgaWYgKHdpbikge1xuICAgICAgICB2YXIgY2xhc3NMaXN0ID0gd2luLmRvY3VtZW50LmJvZHkuY2xhc3NMaXN0O1xuICAgICAgICBjbGFzc0xpc3QuYWRkKGVuYWJsZWQgPyBJc0ZvY3VzVmlzaWJsZUNsYXNzTmFtZSA6IElzRm9jdXNIaWRkZW5DbGFzc05hbWUpO1xuICAgICAgICBjbGFzc0xpc3QucmVtb3ZlKGVuYWJsZWQgPyBJc0ZvY3VzSGlkZGVuQ2xhc3NOYW1lIDogSXNGb2N1c1Zpc2libGVDbGFzc05hbWUpO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNldEZvY3VzVmlzaWJpbGl0eS5qcy5tYXAiLCIvKiBlc2xpbnQtZGlzYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55ICovXG4vKipcbiAqIFJldHVybnMgYSBzaW5nbGUgZnVuY3Rpb24gd2hpY2ggd2lsbCBjYWxsIGVhY2ggb2YgdGhlIGdpdmVuIGZ1bmN0aW9ucyBpbiB0aGUgY29udGV4dCBvZiB0aGVcbiAqIHBhcmVudC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGFwcGVuZEZ1bmN0aW9uKHBhcmVudCkge1xuICAgIHZhciBmdW5jdGlvbnMgPSBbXTtcbiAgICBmb3IgKHZhciBfaSA9IDE7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICBmdW5jdGlvbnNbX2kgLSAxXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgfVxuICAgIGlmIChmdW5jdGlvbnMubGVuZ3RoIDwgMikge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb25zWzBdO1xuICAgIH1cbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgYXJncyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgYXJnc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9ucy5mb3JFYWNoKGZ1bmN0aW9uIChmKSB7IHJldHVybiBmICYmIGYuYXBwbHkocGFyZW50LCBhcmdzKTsgfSk7XG4gICAgfTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFwcGVuZEZ1bmN0aW9uLmpzLm1hcCIsImltcG9ydCB7IGV4dGVuZENvbXBvbmVudCB9IGZyb20gJy4vZXh0ZW5kQ29tcG9uZW50Jztcbi8qKlxuICogSGVscGVyIHRvIG1hbmFnZSBjb21wb25lbnRSZWYgcmVzb2x1dGlvbi4gSW50ZXJuYWxseSBhcHBlbmRzIGxvZ2ljIHRvXG4gKiBsaWZldGltZSBtZXRob2RzIHRvIHJlc29sdmUgY29tcG9uZW50UmVmIHRvIHRoZSBwYXNzZWQgaW4gb2JqZWN0LlxuICpcbiAqIFVzYWdlOiBjYWxsIGluaXRpYWxpemVDb21wb25lbnRSZWYodGhpcykgaW4gdGhlIGNvbnN0cnVjdG9yLFxuICovXG5leHBvcnQgZnVuY3Rpb24gaW5pdGlhbGl6ZUNvbXBvbmVudFJlZihvYmopIHtcbiAgICBleHRlbmRDb21wb25lbnQob2JqLCB7XG4gICAgICAgIGNvbXBvbmVudERpZE1vdW50OiBfb25Nb3VudCxcbiAgICAgICAgY29tcG9uZW50RGlkVXBkYXRlOiBfb25VcGRhdGUsXG4gICAgICAgIGNvbXBvbmVudFdpbGxVbm1vdW50OiBfb25Vbm1vdW50LFxuICAgIH0pO1xufVxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbmZ1bmN0aW9uIF9vbk1vdW50KCkge1xuICAgIF9zZXRDb21wb25lbnRSZWYodGhpcy5wcm9wcy5jb21wb25lbnRSZWYsIHRoaXMpO1xufVxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbmZ1bmN0aW9uIF9vblVwZGF0ZShwcmV2UHJvcHMpIHtcbiAgICBpZiAocHJldlByb3BzLmNvbXBvbmVudFJlZiAhPT0gdGhpcy5wcm9wcy5jb21wb25lbnRSZWYpIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICAgICAgX3NldENvbXBvbmVudFJlZihwcmV2UHJvcHMuY29tcG9uZW50UmVmLCBudWxsKTtcbiAgICAgICAgX3NldENvbXBvbmVudFJlZih0aGlzLnByb3BzLmNvbXBvbmVudFJlZiwgdGhpcyk7XG4gICAgfVxufVxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbmZ1bmN0aW9uIF9vblVubW91bnQoKSB7XG4gICAgX3NldENvbXBvbmVudFJlZih0aGlzLnByb3BzLmNvbXBvbmVudFJlZiwgbnVsbCk7XG59XG5mdW5jdGlvbiBfc2V0Q29tcG9uZW50UmVmKGNvbXBvbmVudFJlZiwgdmFsdWUpIHtcbiAgICBpZiAoY29tcG9uZW50UmVmKSB7XG4gICAgICAgIGlmICh0eXBlb2YgY29tcG9uZW50UmVmID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgY29tcG9uZW50UmVmLmN1cnJlbnQgPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0eXBlb2YgY29tcG9uZW50UmVmID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjb21wb25lbnRSZWYodmFsdWUpO1xuICAgICAgICB9XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5pdGlhbGl6ZUNvbXBvbmVudFJlZi5qcy5tYXAiLCJpbXBvcnQgeyBhcHBlbmRGdW5jdGlvbiB9IGZyb20gJy4vYXBwZW5kRnVuY3Rpb24nO1xuLyoqXG4gKiBFeHRlbmRzIGEgY29tcG9uZW50J3MgbGlmZXRpbWUgbWV0aG9kcyBieSBhcHBlbmRpbmcgbmV3IGZ1bmN0aW9ucyB0byB0aGUgZXhpc3RpbmcgbGlmZXRpbWUgZnVuY3Rpb25zLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZXh0ZW5kQ29tcG9uZW50KHBhcmVudCwgbWV0aG9kcykge1xuICAgIGZvciAodmFyIG5hbWVfMSBpbiBtZXRob2RzKSB7XG4gICAgICAgIGlmIChtZXRob2RzLmhhc093blByb3BlcnR5KG5hbWVfMSkpIHtcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgICAgICAgICBwYXJlbnRbbmFtZV8xXSA9IGFwcGVuZEZ1bmN0aW9uKHBhcmVudCwgcGFyZW50W25hbWVfMV0sIG1ldGhvZHNbbmFtZV8xXSk7XG4gICAgICAgIH1cbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1leHRlbmRDb21wb25lbnQuanMubWFwIiwiaW1wb3J0IHsgZ2V0V2luZG93IH0gZnJvbSAnLi9kb20vZ2V0V2luZG93JztcbmltcG9ydCB7IFN0eWxlc2hlZXQgfSBmcm9tICdAZmx1ZW50dWkvbWVyZ2Utc3R5bGVzJztcbi8vIEluaXRpYWxpemUgZ2xvYmFsIHdpbmRvdyBpZC5cbnZhciBDVVJSRU5UX0lEX1BST1BFUlRZID0gJ19fY3VycmVudElkX18nO1xudmFyIERFRkFVTFRfSURfU1RSSU5HID0gJ2lkX18nO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbnZhciBfZ2xvYmFsID0gZ2V0V2luZG93KCkgfHwge307XG5pZiAoX2dsb2JhbFtDVVJSRU5UX0lEX1BST1BFUlRZXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgX2dsb2JhbFtDVVJSRU5UX0lEX1BST1BFUlRZXSA9IDA7XG59XG52YXIgX2luaXRpYWxpemVkU3R5bGVzaGVldFJlc2V0cyA9IGZhbHNlO1xuLyoqXG4gKiBHZW5lcmF0ZXMgYSB1bmlxdWUgaWQgaW4gdGhlIGdsb2JhbCBzY29wZSAodGhpcyBzcGFucyBhY3Jvc3MgZHVwbGljYXRlIGNvcGllcyBvZiB0aGUgc2FtZSBsaWJyYXJ5LilcbiAqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRJZChwcmVmaXgpIHtcbiAgICBpZiAoIV9pbml0aWFsaXplZFN0eWxlc2hlZXRSZXNldHMpIHtcbiAgICAgICAgLy8gQ29uZmlndXJlIGlkcyB0byByZXNldCBvbiBzdHlsZXNoZWV0IHJlc2V0cy5cbiAgICAgICAgdmFyIHN0eWxlc2hlZXQgPSBTdHlsZXNoZWV0LmdldEluc3RhbmNlKCk7XG4gICAgICAgIGlmIChzdHlsZXNoZWV0ICYmIHN0eWxlc2hlZXQub25SZXNldCkge1xuICAgICAgICAgICAgc3R5bGVzaGVldC5vblJlc2V0KHJlc2V0SWRzKTtcbiAgICAgICAgfVxuICAgICAgICBfaW5pdGlhbGl6ZWRTdHlsZXNoZWV0UmVzZXRzID0gdHJ1ZTtcbiAgICB9XG4gICAgdmFyIGluZGV4ID0gX2dsb2JhbFtDVVJSRU5UX0lEX1BST1BFUlRZXSsrO1xuICAgIHJldHVybiAocHJlZml4ID09PSB1bmRlZmluZWQgPyBERUZBVUxUX0lEX1NUUklORyA6IHByZWZpeCkgKyBpbmRleDtcbn1cbi8qKlxuICogUmVzZXRzIGlkIGNvdW50ZXIgdG8gYW4gKG9wdGlvbmFsKSBudW1iZXIuXG4gKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgZnVuY3Rpb24gcmVzZXRJZHMoY291bnRlcikge1xuICAgIGlmIChjb3VudGVyID09PSB2b2lkIDApIHsgY291bnRlciA9IDA7IH1cbiAgICBfZ2xvYmFsW0NVUlJFTlRfSURfUFJPUEVSVFldID0gY291bnRlcjtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWdldElkLmpzLm1hcCIsInZhciB0b09iamVjdE1hcCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgaXRlbXMgPSBbXTtcbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICBpdGVtc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgIH1cbiAgICB2YXIgcmVzdWx0ID0ge307XG4gICAgZm9yICh2YXIgX2EgPSAwLCBpdGVtc18xID0gaXRlbXM7IF9hIDwgaXRlbXNfMS5sZW5ndGg7IF9hKyspIHtcbiAgICAgICAgdmFyIGl0ZW0gPSBpdGVtc18xW19hXTtcbiAgICAgICAgdmFyIGtleXMgPSBBcnJheS5pc0FycmF5KGl0ZW0pID8gaXRlbSA6IE9iamVjdC5rZXlzKGl0ZW0pO1xuICAgICAgICBmb3IgKHZhciBfYiA9IDAsIGtleXNfMSA9IGtleXM7IF9iIDwga2V5c18xLmxlbmd0aDsgX2IrKykge1xuICAgICAgICAgICAgdmFyIGtleSA9IGtleXNfMVtfYl07XG4gICAgICAgICAgICByZXN1bHRba2V5XSA9IDE7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbn07XG4vKipcbiAqIEFuIGFycmF5IG9mIGV2ZW50cyB0aGF0IGFyZSBhbGxvd2VkIG9uIGV2ZXJ5IGh0bWwgZWxlbWVudCB0eXBlLlxuICpcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IHZhciBiYXNlRWxlbWVudEV2ZW50cyA9IHRvT2JqZWN0TWFwKFtcbiAgICAnb25Db3B5JyxcbiAgICAnb25DdXQnLFxuICAgICdvblBhc3RlJyxcbiAgICAnb25Db21wb3NpdGlvbkVuZCcsXG4gICAgJ29uQ29tcG9zaXRpb25TdGFydCcsXG4gICAgJ29uQ29tcG9zaXRpb25VcGRhdGUnLFxuICAgICdvbkZvY3VzJyxcbiAgICAnb25Gb2N1c0NhcHR1cmUnLFxuICAgICdvbkJsdXInLFxuICAgICdvbkJsdXJDYXB0dXJlJyxcbiAgICAnb25DaGFuZ2UnLFxuICAgICdvbklucHV0JyxcbiAgICAnb25TdWJtaXQnLFxuICAgICdvbkxvYWQnLFxuICAgICdvbkVycm9yJyxcbiAgICAnb25LZXlEb3duJyxcbiAgICAnb25LZXlEb3duQ2FwdHVyZScsXG4gICAgJ29uS2V5UHJlc3MnLFxuICAgICdvbktleVVwJyxcbiAgICAnb25BYm9ydCcsXG4gICAgJ29uQ2FuUGxheScsXG4gICAgJ29uQ2FuUGxheVRocm91Z2gnLFxuICAgICdvbkR1cmF0aW9uQ2hhbmdlJyxcbiAgICAnb25FbXB0aWVkJyxcbiAgICAnb25FbmNyeXB0ZWQnLFxuICAgICdvbkVuZGVkJyxcbiAgICAnb25Mb2FkZWREYXRhJyxcbiAgICAnb25Mb2FkZWRNZXRhZGF0YScsXG4gICAgJ29uTG9hZFN0YXJ0JyxcbiAgICAnb25QYXVzZScsXG4gICAgJ29uUGxheScsXG4gICAgJ29uUGxheWluZycsXG4gICAgJ29uUHJvZ3Jlc3MnLFxuICAgICdvblJhdGVDaGFuZ2UnLFxuICAgICdvblNlZWtlZCcsXG4gICAgJ29uU2Vla2luZycsXG4gICAgJ29uU3RhbGxlZCcsXG4gICAgJ29uU3VzcGVuZCcsXG4gICAgJ29uVGltZVVwZGF0ZScsXG4gICAgJ29uVm9sdW1lQ2hhbmdlJyxcbiAgICAnb25XYWl0aW5nJyxcbiAgICAnb25DbGljaycsXG4gICAgJ29uQ2xpY2tDYXB0dXJlJyxcbiAgICAnb25Db250ZXh0TWVudScsXG4gICAgJ29uRG91YmxlQ2xpY2snLFxuICAgICdvbkRyYWcnLFxuICAgICdvbkRyYWdFbmQnLFxuICAgICdvbkRyYWdFbnRlcicsXG4gICAgJ29uRHJhZ0V4aXQnLFxuICAgICdvbkRyYWdMZWF2ZScsXG4gICAgJ29uRHJhZ092ZXInLFxuICAgICdvbkRyYWdTdGFydCcsXG4gICAgJ29uRHJvcCcsXG4gICAgJ29uTW91c2VEb3duJyxcbiAgICAnb25Nb3VzZURvd25DYXB0dXJlJyxcbiAgICAnb25Nb3VzZUVudGVyJyxcbiAgICAnb25Nb3VzZUxlYXZlJyxcbiAgICAnb25Nb3VzZU1vdmUnLFxuICAgICdvbk1vdXNlT3V0JyxcbiAgICAnb25Nb3VzZU92ZXInLFxuICAgICdvbk1vdXNlVXAnLFxuICAgICdvbk1vdXNlVXBDYXB0dXJlJyxcbiAgICAnb25TZWxlY3QnLFxuICAgICdvblRvdWNoQ2FuY2VsJyxcbiAgICAnb25Ub3VjaEVuZCcsXG4gICAgJ29uVG91Y2hNb3ZlJyxcbiAgICAnb25Ub3VjaFN0YXJ0JyxcbiAgICAnb25TY3JvbGwnLFxuICAgICdvbldoZWVsJyxcbiAgICAnb25Qb2ludGVyQ2FuY2VsJyxcbiAgICAnb25Qb2ludGVyRG93bicsXG4gICAgJ29uUG9pbnRlckVudGVyJyxcbiAgICAnb25Qb2ludGVyTGVhdmUnLFxuICAgICdvblBvaW50ZXJNb3ZlJyxcbiAgICAnb25Qb2ludGVyT3V0JyxcbiAgICAnb25Qb2ludGVyT3ZlcicsXG4gICAgJ29uUG9pbnRlclVwJyxcbiAgICAnb25Hb3RQb2ludGVyQ2FwdHVyZScsXG4gICAgJ29uTG9zdFBvaW50ZXJDYXB0dXJlJyxcbl0pO1xuLyoqXG4gKiBBbiBhcnJheSBvZiBlbGVtZW50IGF0dHJpYnV0ZXMgd2hpY2ggYXJlIGFsbG93ZWQgb24gZXZlcnkgaHRtbCBlbGVtZW50IHR5cGUuXG4gKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgdmFyIGJhc2VFbGVtZW50UHJvcGVydGllcyA9IHRvT2JqZWN0TWFwKFtcbiAgICAnYWNjZXNzS2V5JyxcbiAgICAnY2hpbGRyZW4nLFxuICAgICdjbGFzc05hbWUnLFxuICAgICdjb250ZW50RWRpdGFibGUnLFxuICAgICdkaXInLFxuICAgICdkcmFnZ2FibGUnLFxuICAgICdoaWRkZW4nLFxuICAgICdodG1sRm9yJyxcbiAgICAnaWQnLFxuICAgICdsYW5nJyxcbiAgICAncmVmJyxcbiAgICAncm9sZScsXG4gICAgJ3N0eWxlJyxcbiAgICAndGFiSW5kZXgnLFxuICAgICd0aXRsZScsXG4gICAgJ3RyYW5zbGF0ZScsXG4gICAgJ3NwZWxsQ2hlY2snLFxuICAgICduYW1lJywgLy8gZ2xvYmFsXG5dKTtcbi8qKlxuICogQW4gYXJyYXkgb2YgSFRNTCBlbGVtZW50IHByb3BlcnRpZXMgYW5kIGV2ZW50cy5cbiAqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCB2YXIgaHRtbEVsZW1lbnRQcm9wZXJ0aWVzID0gdG9PYmplY3RNYXAoYmFzZUVsZW1lbnRQcm9wZXJ0aWVzLCBiYXNlRWxlbWVudEV2ZW50cyk7XG4vKipcbiAqIEFuIGFycmF5IG9mIExBQkVMIHRhZyBwcm9wZXJ0aWVzIGFuZCBldmVudHMuXG4gKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgdmFyIGxhYmVsUHJvcGVydGllcyA9IHRvT2JqZWN0TWFwKGh0bWxFbGVtZW50UHJvcGVydGllcywgW1xuICAgICdmb3JtJywgLy8gYnV0dG9uLCBmaWVsZHNldCwgaW5wdXQsIGxhYmVsLCBtZXRlciwgb2JqZWN0LCBvdXRwdXQsIHNlbGVjdCwgdGV4dGFyZWFcbl0pO1xuLyoqXG4gKiBBbiBhcnJheSBvZiBBVURJTyB0YWcgcHJvcGVydGllcyBhbmQgZXZlbnRzLlxuXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCB2YXIgYXVkaW9Qcm9wZXJ0aWVzID0gdG9PYmplY3RNYXAoaHRtbEVsZW1lbnRQcm9wZXJ0aWVzLCBbXG4gICAgJ2hlaWdodCcsXG4gICAgJ2xvb3AnLFxuICAgICdtdXRlZCcsXG4gICAgJ3ByZWxvYWQnLFxuICAgICdzcmMnLFxuICAgICd3aWR0aCcsIC8vIGNhbnZhcywgZW1iZWQsIGlmcmFtZSwgaW1nLCBpbnB1dCwgb2JqZWN0LCB2aWRlb1xuXSk7XG4vKipcbiAqIEFuIGFycmF5IG9mIFZJREVPIHRhZyBwcm9wZXJ0aWVzIGFuZCBldmVudHMuXG4gKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgdmFyIHZpZGVvUHJvcGVydGllcyA9IHRvT2JqZWN0TWFwKGF1ZGlvUHJvcGVydGllcywgW1xuICAgICdwb3N0ZXInLCAvLyB2aWRlb1xuXSk7XG4vKipcbiAqIEFuIGFycmF5IG9mIE9MIHRhZyBwcm9wZXJ0aWVzIGFuZCBldmVudHMuXG4gKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgdmFyIG9sUHJvcGVydGllcyA9IHRvT2JqZWN0TWFwKGh0bWxFbGVtZW50UHJvcGVydGllcywgW1xuICAgICdzdGFydCcsIC8vIG9sXG5dKTtcbi8qKlxuICogQW4gYXJyYXkgb2YgTEkgdGFnIHByb3BlcnRpZXMgYW5kIGV2ZW50cy5cbiAqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCB2YXIgbGlQcm9wZXJ0aWVzID0gdG9PYmplY3RNYXAoaHRtbEVsZW1lbnRQcm9wZXJ0aWVzLCBbXG4gICAgJ3ZhbHVlJywgLy8gYnV0dG9uLCBpbnB1dCwgbGksIG9wdGlvbiwgbWV0ZXIsIHByb2dyZXNzLCBwYXJhbVxuXSk7XG4vKipcbiAqIEFuIGFycmF5IG9mIEEgdGFnIHByb3BlcnRpZXMgYW5kIGV2ZW50cy5cbiAqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCB2YXIgYW5jaG9yUHJvcGVydGllcyA9IHRvT2JqZWN0TWFwKGh0bWxFbGVtZW50UHJvcGVydGllcywgW1xuICAgICdkb3dubG9hZCcsXG4gICAgJ2hyZWYnLFxuICAgICdocmVmTGFuZycsXG4gICAgJ21lZGlhJyxcbiAgICAncmVsJyxcbiAgICAndGFyZ2V0JyxcbiAgICAndHlwZScsIC8vIGEsIGJ1dHRvbiwgaW5wdXQsIGxpbmssIG1lbnUsIG9iamVjdCwgc2NyaXB0LCBzb3VyY2UsIHN0eWxlXG5dKTtcbi8qKlxuICogQW4gYXJyYXkgb2YgQlVUVE9OIHRhZyBwcm9wZXJ0aWVzIGFuZCBldmVudHMuXG4gKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgdmFyIGJ1dHRvblByb3BlcnRpZXMgPSB0b09iamVjdE1hcChodG1sRWxlbWVudFByb3BlcnRpZXMsIFtcbiAgICAnYXV0b0ZvY3VzJyxcbiAgICAnZGlzYWJsZWQnLFxuICAgICdmb3JtJyxcbiAgICAnZm9ybUFjdGlvbicsXG4gICAgJ2Zvcm1FbmNUeXBlJyxcbiAgICAnZm9ybU1ldGhvZCcsXG4gICAgJ2Zvcm1Ob1ZhbGlkYXRlJyxcbiAgICAnZm9ybVRhcmdldCcsXG4gICAgJ3R5cGUnLFxuICAgICd2YWx1ZScsIC8vIGJ1dHRvbiwgaW5wdXQsIGxpLCBvcHRpb24sIG1ldGVyLCBwcm9ncmVzcywgcGFyYW0sXG5dKTtcbi8qKlxuICogQW4gYXJyYXkgb2YgSU5QVVQgdGFnIHByb3BlcnRpZXMgYW5kIGV2ZW50cy5cbiAqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCB2YXIgaW5wdXRQcm9wZXJ0aWVzID0gdG9PYmplY3RNYXAoYnV0dG9uUHJvcGVydGllcywgW1xuICAgICdhY2NlcHQnLFxuICAgICdhbHQnLFxuICAgICdhdXRvQ2FwaXRhbGl6ZScsXG4gICAgJ2F1dG9Db21wbGV0ZScsXG4gICAgJ2NoZWNrZWQnLFxuICAgICdkaXJuYW1lJyxcbiAgICAnZm9ybScsXG4gICAgJ2hlaWdodCcsXG4gICAgJ2lucHV0TW9kZScsXG4gICAgJ2xpc3QnLFxuICAgICdtYXgnLFxuICAgICdtYXhMZW5ndGgnLFxuICAgICdtaW4nLFxuICAgICdtaW5MZW5ndGgnLFxuICAgICdtdWx0aXBsZScsXG4gICAgJ3BhdHRlcm4nLFxuICAgICdwbGFjZWhvbGRlcicsXG4gICAgJ3JlYWRPbmx5JyxcbiAgICAncmVxdWlyZWQnLFxuICAgICdzcmMnLFxuICAgICdzdGVwJyxcbiAgICAnc2l6ZScsXG4gICAgJ3R5cGUnLFxuICAgICd2YWx1ZScsXG4gICAgJ3dpZHRoJywgLy8gY2FudmFzLCBlbWJlZCwgaWZyYW1lLCBpbWcsIGlucHV0LCBvYmplY3QsIHZpZGVvXG5dKTtcbi8qKlxuICogQW4gYXJyYXkgb2YgVEVYVEFSRUEgdGFnIHByb3BlcnRpZXMgYW5kIGV2ZW50cy5cbiAqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCB2YXIgdGV4dEFyZWFQcm9wZXJ0aWVzID0gdG9PYmplY3RNYXAoYnV0dG9uUHJvcGVydGllcywgW1xuICAgICdhdXRvQ2FwaXRhbGl6ZScsXG4gICAgJ2NvbHMnLFxuICAgICdkaXJuYW1lJyxcbiAgICAnZm9ybScsXG4gICAgJ21heExlbmd0aCcsXG4gICAgJ21pbkxlbmd0aCcsXG4gICAgJ3BsYWNlaG9sZGVyJyxcbiAgICAncmVhZE9ubHknLFxuICAgICdyZXF1aXJlZCcsXG4gICAgJ3Jvd3MnLFxuICAgICd3cmFwJywgLy8gdGV4dGFyZWFcbl0pO1xuLyoqXG4gKiBBbiBhcnJheSBvZiBTRUxFQ1QgdGFnIHByb3BlcnRpZXMgYW5kIGV2ZW50cy5cbiAqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCB2YXIgc2VsZWN0UHJvcGVydGllcyA9IHRvT2JqZWN0TWFwKGJ1dHRvblByb3BlcnRpZXMsIFtcbiAgICAnZm9ybScsXG4gICAgJ211bHRpcGxlJyxcbiAgICAncmVxdWlyZWQnLCAvLyBpbnB1dCwgc2VsZWN0LCB0ZXh0YXJlYVxuXSk7XG5leHBvcnQgdmFyIG9wdGlvblByb3BlcnRpZXMgPSB0b09iamVjdE1hcChodG1sRWxlbWVudFByb3BlcnRpZXMsIFtcbiAgICAnc2VsZWN0ZWQnLFxuICAgICd2YWx1ZScsIC8vIGJ1dHRvbiwgaW5wdXQsIGxpLCBvcHRpb24sIG1ldGVyLCBwcm9ncmVzcywgcGFyYW1cbl0pO1xuLyoqXG4gKiBBbiBhcnJheSBvZiBUQUJMRSB0YWcgcHJvcGVydGllcyBhbmQgZXZlbnRzLlxuICpcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IHZhciB0YWJsZVByb3BlcnRpZXMgPSB0b09iamVjdE1hcChodG1sRWxlbWVudFByb3BlcnRpZXMsIFtcbiAgICAnY2VsbFBhZGRpbmcnLFxuICAgICdjZWxsU3BhY2luZycsIC8vIHRhYmxlXG5dKTtcbi8qKlxuICogQW4gYXJyYXkgb2YgVFIgdGFnIHByb3BlcnRpZXMgYW5kIGV2ZW50cy5cbiAqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCB2YXIgdHJQcm9wZXJ0aWVzID0gaHRtbEVsZW1lbnRQcm9wZXJ0aWVzO1xuLyoqXG4gKiBBbiBhcnJheSBvZiBUSCB0YWcgcHJvcGVydGllcyBhbmQgZXZlbnRzLlxuICpcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IHZhciB0aFByb3BlcnRpZXMgPSB0b09iamVjdE1hcChodG1sRWxlbWVudFByb3BlcnRpZXMsIFtcbiAgICAncm93U3BhbicsXG4gICAgJ3Njb3BlJywgLy8gdGhcbl0pO1xuLyoqXG4gKiBBbiBhcnJheSBvZiBURCB0YWcgcHJvcGVydGllcyBhbmQgZXZlbnRzLlxuICpcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IHZhciB0ZFByb3BlcnRpZXMgPSB0b09iamVjdE1hcChodG1sRWxlbWVudFByb3BlcnRpZXMsIFtcbiAgICAnY29sU3BhbicsXG4gICAgJ2hlYWRlcnMnLFxuICAgICdyb3dTcGFuJyxcbiAgICAnc2NvcGUnLCAvLyB0aFxuXSk7XG5leHBvcnQgdmFyIGNvbEdyb3VwUHJvcGVydGllcyA9IHRvT2JqZWN0TWFwKGh0bWxFbGVtZW50UHJvcGVydGllcywgW1xuICAgICdzcGFuJywgLy8gY29sLCBjb2xncm91cFxuXSk7XG5leHBvcnQgdmFyIGNvbFByb3BlcnRpZXMgPSB0b09iamVjdE1hcChodG1sRWxlbWVudFByb3BlcnRpZXMsIFtcbiAgICAnc3BhbicsIC8vIGNvbCwgY29sZ3JvdXBcbl0pO1xuLyoqXG4gKiBBbiBhcnJheSBvZiBGT1JNIHRhZyBwcm9wZXJ0aWVzIGFuZCBldmVudHMuXG4gKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgdmFyIGZvcm1Qcm9wZXJ0aWVzID0gdG9PYmplY3RNYXAoaHRtbEVsZW1lbnRQcm9wZXJ0aWVzLCBbXG4gICAgJ2FjY2VwdENoYXJzZXQnLFxuICAgICdhY3Rpb24nLFxuICAgICdlbmNUeXBlJyxcbiAgICAnZW5jVHlwZScsXG4gICAgJ21ldGhvZCcsXG4gICAgJ25vVmFsaWRhdGUnLFxuICAgICd0YXJnZXQnLCAvLyBmb3JtXG5dKTtcbi8qKlxuICogQW4gYXJyYXkgb2YgSUZSQU1FIHRhZyBwcm9wZXJ0aWVzIGFuZCBldmVudHMuXG4gKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgdmFyIGlmcmFtZVByb3BlcnRpZXMgPSB0b09iamVjdE1hcChodG1sRWxlbWVudFByb3BlcnRpZXMsIFtcbiAgICAnYWxsb3cnLFxuICAgICdhbGxvd0Z1bGxTY3JlZW4nLFxuICAgICdhbGxvd1BheW1lbnRSZXF1ZXN0JyxcbiAgICAnYWxsb3dUcmFuc3BhcmVuY3knLFxuICAgICdjc3AnLFxuICAgICdoZWlnaHQnLFxuICAgICdpbXBvcnRhbmNlJyxcbiAgICAncmVmZXJyZXJQb2xpY3knLFxuICAgICdzYW5kYm94JyxcbiAgICAnc3JjJyxcbiAgICAnc3JjRG9jJyxcbiAgICAnd2lkdGgnLCAvLyBjYW52YXMsIGVtYmVkLCBpZnJhbWUsIGltZywgaW5wdXQsIG9iamVjdCwgdmlkZW8sXG5dKTtcbi8qKlxuICogQW4gYXJyYXkgb2YgSU1BR0UgdGFnIHByb3BlcnRpZXMgYW5kIGV2ZW50cy5cbiAqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCB2YXIgaW1nUHJvcGVydGllcyA9IHRvT2JqZWN0TWFwKGh0bWxFbGVtZW50UHJvcGVydGllcywgW1xuICAgICdhbHQnLFxuICAgICdjcm9zc09yaWdpbicsXG4gICAgJ2hlaWdodCcsXG4gICAgJ3NyYycsXG4gICAgJ3NyY1NldCcsXG4gICAgJ3VzZU1hcCcsXG4gICAgJ3dpZHRoJywgLy8gY2FudmFzLCBlbWJlZCwgaWZyYW1lLCBpbWcsIGlucHV0LCBvYmplY3QsIHZpZGVvXG5dKTtcbi8qKlxuICogQGRlcHJlY2F0ZWQgVXNlIGltZ1Byb3BlcnRpZXMgZm9yIGltZyBlbGVtZW50cy5cbiAqL1xuZXhwb3J0IHZhciBpbWFnZVByb3BlcnRpZXMgPSBpbWdQcm9wZXJ0aWVzO1xuLyoqXG4gKiBBbiBhcnJheSBvZiBESVYgdGFnIHByb3BlcnRpZXMgYW5kIGV2ZW50cy5cbiAqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCB2YXIgZGl2UHJvcGVydGllcyA9IGh0bWxFbGVtZW50UHJvcGVydGllcztcbi8qKlxuICogR2V0cyBuYXRpdmUgc3VwcG9ydGVkIHByb3BzIGZvciBhbiBodG1sIGVsZW1lbnQgcHJvdmlkZWQgdGhlIGFsbG93YW5jZSBzZXQuIFVzZSBvbmUgb2YgdGhlIHByb3BlcnR5XG4gKiBzZXRzIGRlZmluZWQgKGRpdlByb3BlcnRpZXMsIGJ1dHRvblByb3BlcnRlcywgZXRjKSB0byBmaWx0ZXIgb3V0IHN1cHBvcnRlZCBwcm9wZXJ0aWVzIGZyb20gYSBnaXZlblxuICogcHJvcHMgc2V0LiBOb3RlIHRoYXQgYWxsIGRhdGEtIGFuZCBhcmlhLSBwcmVmaXhlZCBhdHRyaWJ1dGVzIHdpbGwgYmUgYWxsb3dlZC5cbiAqIE5PVEU6IGdldE5hdGl2ZVByb3BzIHNob3VsZCBhbHdheXMgYmUgYXBwbGllZCBmaXJzdCB3aGVuIGFkZGluZyBwcm9wcyB0byBhIHJlYWN0IGNvbXBvbmVudC4gVGhlXG4gKiBub24tbmF0aXZlIHByb3BzIHNob3VsZCBiZSBhcHBsaWVkIHNlY29uZC4gVGhpcyB3aWxsIHByZXZlbnQgZ2V0TmF0aXZlUHJvcHMgZnJvbSBvdmVycmlkaW5nIHlvdXIgY3VzdG9tIHByb3BzLlxuICogRm9yIGV4YW1wbGUsIGlmIHByb3BzIHBhc3NlZCB0byBnZXROYXRpdmVQcm9wcyBoYXMgYW4gb25DbGljayBmdW5jdGlvbiBhbmQgZ2V0TmF0aXZlUHJvcHMgaXMgYWRkZWQgdG9cbiAqIHRoZSBjb21wb25lbnQgYWZ0ZXIgYW4gb25DbGljayBmdW5jdGlvbiBpcyBhZGRlZCwgdGhlbiB0aGUgZ2V0TmF0aXZlUHJvcHMgb25DbGljayB3aWxsIG92ZXJyaWRlIGl0LlxuICpcbiAqIEBwdWJsaWNcbiAqIEBwYXJhbSBwcm9wcyAtIFRoZSB1bmZpbHRlcmVkIGlucHV0IHByb3BzXG4gKiBAcGFyYW0gYWxsb3dlZFByb3BzTmFtZXMgLSBUaGUgYXJyYXkgb3IgcmVjb3JkIG9mIGFsbG93ZWQgcHJvcCBuYW1lcy5cbiAqIEByZXR1cm5zIFRoZSBmaWx0ZXJlZCBwcm9wc1xuICovXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuZXhwb3J0IGZ1bmN0aW9uIGdldE5hdGl2ZVByb3BzKFxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbnByb3BzLCBhbGxvd2VkUHJvcE5hbWVzLCBleGNsdWRlZFByb3BOYW1lcykge1xuICAgIC8vIEl0J2QgYmUgZ3JlYXQgdG8gcHJvcGVybHkgdHlwZSB0aGlzIHdoaWxlIGFsbG93aW5nICdhcmlhLWAgYW5kICdkYXRhLScgYXR0cmlidXRlcyBsaWtlIFR5cGVTY3JpcHQgZG9lcyBmb3JcbiAgICAvLyBKU1ggYXR0cmlidXRlcywgYnV0IHRoYXQgYWJpbGl0eSBpcyBoYXJkY29kZWQgaW50byB0aGUgVFMgY29tcGlsZXIgd2l0aCBubyBhbmFsb2cgaW4gVHlwZVNjcmlwdCB0eXBpbmdzLlxuICAgIC8vIFRoZW4gd2UnZCBiZSBhYmxlIHRvIGVuZm9yY2UgcHJvcHMgZXh0ZW5kcyBuYXRpdmUgcHJvcHMgKGluY2x1ZGluZyBhcmlhLSBhbmQgZGF0YS0gYXR0cmlidXRlcyksIGFuZCB0aGVuXG4gICAgLy8gcmV0dXJuIG5hdGl2ZSBwcm9wcy5cbiAgICAvLyBXZSBzaG91bGQgYmUgYWJsZSB0byBkbyB0aGlzIG9uY2UgdGhpcyBQUiBpcyBtZXJnZWQ6IGh0dHBzOi8vZ2l0aHViLmNvbS9taWNyb3NvZnQvVHlwZVNjcmlwdC9wdWxsLzI2Nzk3XG4gICAgdmFyIGlzQXJyYXkgPSBBcnJheS5pc0FycmF5KGFsbG93ZWRQcm9wTmFtZXMpO1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMocHJvcHMpO1xuICAgIGZvciAodmFyIF9pID0gMCwga2V5c18yID0ga2V5czsgX2kgPCBrZXlzXzIubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgIHZhciBrZXkgPSBrZXlzXzJbX2ldO1xuICAgICAgICB2YXIgaXNOYXRpdmVQcm9wID0gKCFpc0FycmF5ICYmIGFsbG93ZWRQcm9wTmFtZXNba2V5XSkgfHxcbiAgICAgICAgICAgIChpc0FycmF5ICYmIGFsbG93ZWRQcm9wTmFtZXMuaW5kZXhPZihrZXkpID49IDApIHx8XG4gICAgICAgICAgICBrZXkuaW5kZXhPZignZGF0YS0nKSA9PT0gMCB8fFxuICAgICAgICAgICAga2V5LmluZGV4T2YoJ2FyaWEtJykgPT09IDA7XG4gICAgICAgIGlmIChpc05hdGl2ZVByb3AgJiYgKCFleGNsdWRlZFByb3BOYW1lcyB8fCAoZXhjbHVkZWRQcm9wTmFtZXMgPT09IG51bGwgfHwgZXhjbHVkZWRQcm9wTmFtZXMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGV4Y2x1ZGVkUHJvcE5hbWVzLmluZGV4T2Yoa2V5KSkgPT09IC0xKSkge1xuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICAgICAgICAgIHJlc3VsdFtrZXldID0gcHJvcHNba2V5XTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cHJvcGVydGllcy5qcy5tYXAiLCJ2YXIgX2E7XG5pbXBvcnQgeyBLZXlDb2RlcyB9IGZyb20gJy4vS2V5Q29kZXMnO1xudmFyIERpcmVjdGlvbmFsS2V5Q29kZXMgPSAoX2EgPSB7fSxcbiAgICBfYVtLZXlDb2Rlcy51cF0gPSAxLFxuICAgIF9hW0tleUNvZGVzLmRvd25dID0gMSxcbiAgICBfYVtLZXlDb2Rlcy5sZWZ0XSA9IDEsXG4gICAgX2FbS2V5Q29kZXMucmlnaHRdID0gMSxcbiAgICBfYVtLZXlDb2Rlcy5ob21lXSA9IDEsXG4gICAgX2FbS2V5Q29kZXMuZW5kXSA9IDEsXG4gICAgX2FbS2V5Q29kZXMudGFiXSA9IDEsXG4gICAgX2FbS2V5Q29kZXMucGFnZVVwXSA9IDEsXG4gICAgX2FbS2V5Q29kZXMucGFnZURvd25dID0gMSxcbiAgICBfYSk7XG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiB0aGUga2V5Y29kZSBpcyBhIGRpcmVjdGlvbmFsIGtleWJvYXJkIGtleS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzRGlyZWN0aW9uYWxLZXlDb2RlKHdoaWNoKSB7XG4gICAgcmV0dXJuICEhRGlyZWN0aW9uYWxLZXlDb2Rlc1t3aGljaF07XG59XG4vKipcbiAqIEFkZHMgYSBrZXljb2RlIHRvIHRoZSBsaXN0IG9mIGtleXMgdGhhdCwgd2hlbiBwcmVzc2VkLCBzaG91bGQgY2F1c2UgdGhlIGZvY3VzIG91dGxpbmVzIHRvIGJlIHZpc2libGUuXG4gKiBUaGlzIGNhbiBiZSB1c2VkIHRvIGFkZCBnbG9iYWwgc2hvcnRjdXQga2V5cyB0aGF0IGRpcmVjdGlvbmFsbHkgbW92ZSBmcm9tIHNlY3Rpb24gdG8gc2VjdGlvbiB3aXRoaW5cbiAqIGFuIGFwcCBvciBiZXR3ZWVuIGZvY3VzIHRyYXAgem9uZXMuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBhZGREaXJlY3Rpb25hbEtleUNvZGUod2hpY2gpIHtcbiAgICBEaXJlY3Rpb25hbEtleUNvZGVzW3doaWNoXSA9IDE7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1rZXlib2FyZC5qcy5tYXAiLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBnZXRXaW5kb3cgfSBmcm9tICcuL2RvbS9nZXRXaW5kb3cnO1xuaW1wb3J0IHsgaXNEaXJlY3Rpb25hbEtleUNvZGUgfSBmcm9tICcuL2tleWJvYXJkJztcbmltcG9ydCB7IHNldEZvY3VzVmlzaWJpbGl0eSB9IGZyb20gJy4vc2V0Rm9jdXNWaXNpYmlsaXR5Jztcbi8qKlxuICogQ291bnRlciBmb3IgbW91bnRlZCBjb21wb25lbnQgdGhhdCB1c2VzIGZvY3VzIHJlY3RhbmdsZS5cbiAqIFdlIHdhbnQgdG8gY2xlYW51cCB0aGUgbGlzdG5lcnMgYmVmb3JlIGxhc3QgY29tcG9uZW50IHRoYXQgdXNlcyBmb2N1cyByZWN0YW5nbGUgdW5tb3VudHMuXG4gKi9cbnZhciBtb3VudENvdW50ZXJzID0gbmV3IFdlYWtNYXAoKTtcbmZ1bmN0aW9uIHNldE1vdW50Q291bnRlcnMoa2V5LCBkZWx0YSkge1xuICAgIHZhciBuZXdWYWx1ZTtcbiAgICB2YXIgY3VyclZhbHVlID0gbW91bnRDb3VudGVycy5nZXQoa2V5KTtcbiAgICBpZiAoY3VyclZhbHVlKSB7XG4gICAgICAgIG5ld1ZhbHVlID0gY3VyclZhbHVlICsgZGVsdGE7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBuZXdWYWx1ZSA9IDE7XG4gICAgfVxuICAgIG1vdW50Q291bnRlcnMuc2V0KGtleSwgbmV3VmFsdWUpO1xuICAgIHJldHVybiBuZXdWYWx1ZTtcbn1cbi8qKlxuICogSW5pdGlhbGl6ZXMgdGhlIGxvZ2ljIHdoaWNoOlxuICpcbiAqIDEuIFN1YnNjcmliZXMga2V5ZG93biBhbmQgbW91c2Vkb3duIGV2ZW50cy4gKEl0IHdpbGwgb25seSBkbyBpdCBvbmNlIHBlciB3aW5kb3csXG4gKiAgICBzbyBpdCdzIHNhZmUgdG8gY2FsbCB0aGlzIG1ldGhvZCBtdWx0aXBsZSB0aW1lcy4pXG4gKiAyLiBXaGVuIHRoZSB1c2VyIHByZXNzZXMgZGlyZWN0aW9uYWwga2V5Ym9hcmQga2V5cywgYWRkcyB0aGUgJ21zLUZhYnJpYy0taXNGb2N1c1Zpc2libGUnIGNsYXNzbmFtZVxuICogICAgdG8gdGhlIGRvY3VtZW50IGJvZHksIHJlbW92ZXMgdGhlICdtcy1GYWJyaWMtaXNGb2N1c0hpZGRlbicgY2xhc3NuYW1lLlxuICogMy4gV2hlbiB0aGUgdXNlciBjbGlja3MgYSBtb3VzZSBidXR0b24sIGFkZHMgdGhlICdtcy1GYWJyaWMtaXNGb2N1c0hpZGRlbicgY2xhc3NuYW1lIHRvIHRoZVxuICogICAgZG9jdW1lbnQgYm9keSwgcmVtb3ZlcyB0aGUgJ21zLUZhYnJpYy0taXNGb2N1c1Zpc2libGUnIGNsYXNzbmFtZS5cbiAqXG4gKiBUaGlzIGxvZ2ljIGFsbG93cyBjb21wb25lbnRzIG9uIHRoZSBwYWdlIHRvIGNvbmRpdGlvbmFsbHkgcmVuZGVyIGZvY3VzIHRyZWF0bWVudHMgYmFzZWQgb25cbiAqIHRoZSBleGlzdGVuY2Ugb2YgZ2xvYmFsIGNsYXNzbmFtZXMsIHdoaWNoIHNpbXBsaWZpZXMgbG9naWMgb3ZlcmFsbC5cbiAqXG4gKiBAcGFyYW0gcm9vdFJlZiAtIEEgUmVmIG9iamVjdC4gRm9jdXMgcmVjdGFuZ2xlIGNhbiBiZSBhcHBsaWVkIG9uIGl0c2VsZiBhbmQgYWxsIGl0cyBjaGlsZHJlbi5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVzZUZvY3VzUmVjdHMocm9vdFJlZikge1xuICAgIFJlYWN0LnVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgdmFyIHdpbiA9IGdldFdpbmRvdyhyb290UmVmID09PSBudWxsIHx8IHJvb3RSZWYgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJvb3RSZWYuY3VycmVudCk7XG4gICAgICAgIGlmICghd2luIHx8ICgoX2EgPSB3aW4uRmFicmljQ29uZmlnKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuZGlzYWJsZUZvY3VzUmVjdHMpID09PSB0cnVlKSB7XG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIHZhciBjb3VudCA9IHNldE1vdW50Q291bnRlcnMod2luLCAxKTtcbiAgICAgICAgaWYgKGNvdW50IDw9IDEpIHtcbiAgICAgICAgICAgIHdpbi5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCBfb25Nb3VzZURvd24sIHRydWUpO1xuICAgICAgICAgICAgd2luLmFkZEV2ZW50TGlzdGVuZXIoJ3BvaW50ZXJkb3duJywgX29uUG9pbnRlckRvd24sIHRydWUpO1xuICAgICAgICAgICAgd2luLmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCBfb25LZXlEb3duLCB0cnVlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIF9hO1xuICAgICAgICAgICAgaWYgKCF3aW4gfHwgKChfYSA9IHdpbi5GYWJyaWNDb25maWcpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5kaXNhYmxlRm9jdXNSZWN0cykgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb3VudCA9IHNldE1vdW50Q291bnRlcnMod2luLCAtMSk7XG4gICAgICAgICAgICBpZiAoY291bnQgPT09IDApIHtcbiAgICAgICAgICAgICAgICB3aW4ucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgX29uTW91c2VEb3duLCB0cnVlKTtcbiAgICAgICAgICAgICAgICB3aW4ucmVtb3ZlRXZlbnRMaXN0ZW5lcigncG9pbnRlcmRvd24nLCBfb25Qb2ludGVyRG93biwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgd2luLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCBfb25LZXlEb3duLCB0cnVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9LCBbcm9vdFJlZl0pO1xufVxuLyoqXG4gKiBGdW5jdGlvbiBDb21wb25lbnQgd3JhcHBlciB3aGljaCBlbmFibGVzIGNhbGxpbmcgYHVzZUZvY3VzUmVjdHNgIGhvb2suXG4gKiBSZW5kZXJzIG5vdGhpbmcuXG4gKi9cbmV4cG9ydCB2YXIgRm9jdXNSZWN0cyA9IGZ1bmN0aW9uIChwcm9wcykge1xuICAgIHVzZUZvY3VzUmVjdHMocHJvcHMucm9vdFJlZik7XG4gICAgcmV0dXJuIG51bGw7XG59O1xuZnVuY3Rpb24gX29uTW91c2VEb3duKGV2KSB7XG4gICAgc2V0Rm9jdXNWaXNpYmlsaXR5KGZhbHNlLCBldi50YXJnZXQpO1xufVxuZnVuY3Rpb24gX29uUG9pbnRlckRvd24oZXYpIHtcbiAgICBpZiAoZXYucG9pbnRlclR5cGUgIT09ICdtb3VzZScpIHtcbiAgICAgICAgc2V0Rm9jdXNWaXNpYmlsaXR5KGZhbHNlLCBldi50YXJnZXQpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIF9vbktleURvd24oZXYpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZGVwcmVjYXRpb24vZGVwcmVjYXRpb25cbiAgICBpZiAoaXNEaXJlY3Rpb25hbEtleUNvZGUoZXYud2hpY2gpKSB7XG4gICAgICAgIHNldEZvY3VzVmlzaWJpbGl0eSh0cnVlLCBldi50YXJnZXQpO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXVzZUZvY3VzUmVjdHMuanMubWFwIiwiLyoqXG4gKiBBUklBIGhlbHBlciB0byBjb25jYXRlbmF0ZSBhdHRyaWJ1dGVzLCByZXR1cm5pbmcgdW5kZWZpbmVkIGlmIGFsbCBhdHRyaWJ1dGVzXG4gKiBhcmUgdW5kZWZpbmVkLiAoRW1wdHkgc3RyaW5ncyBhcmUgbm90IGEgdmFsaWQgQVJJQSBhdHRyaWJ1dGUgdmFsdWUuKVxuICpcbiAqIEBwYXJhbSBhcmlhQXR0cmlidXRlcyAtIEFSSUEgYXR0cmlidXRlcyB0byBtZXJnZVxuICovXG5leHBvcnQgZnVuY3Rpb24gbWVyZ2VBcmlhQXR0cmlidXRlVmFsdWVzKCkge1xuICAgIHZhciBhcmlhQXR0cmlidXRlcyA9IFtdO1xuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgIGFyaWFBdHRyaWJ1dGVzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgfVxuICAgIHZhciBtZXJnZWRBdHRyaWJ1dGUgPSBhcmlhQXR0cmlidXRlc1xuICAgICAgICAuZmlsdGVyKGZ1bmN0aW9uIChhcmcpIHsgcmV0dXJuIGFyZzsgfSlcbiAgICAgICAgLmpvaW4oJyAnKVxuICAgICAgICAudHJpbSgpO1xuICAgIHJldHVybiBtZXJnZWRBdHRyaWJ1dGUgPT09ICcnID8gdW5kZWZpbmVkIDogbWVyZ2VkQXR0cmlidXRlO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXJpYS5qcy5tYXAiLCJpbXBvcnQgeyBjb25jYXRTdHlsZVNldHMgfSBmcm9tICcuL2NvbmNhdFN0eWxlU2V0cyc7XG4vKipcbiAqIENvbmNhdGVuYXRlcyBzdHlsZSBzZXRzIGludG8gb25lLCBidXQgcmVzb2x2ZXMgZnVuY3Rpb25hbCBzZXRzIHVzaW5nIHRoZSBnaXZlbiBwcm9wcy5cbiAqIEBwYXJhbSBzdHlsZVByb3BzIC0gUHJvcHMgdXNlZCB0byByZXNvbHZlIGZ1bmN0aW9uYWwgc2V0cy5cbiAqIEBwYXJhbSBhbGxTdHlsZXMgLSBTdHlsZSBzZXRzLCB3aGljaCBjYW4gYmUgZnVuY3Rpb25zIG9yIG9iamVjdHMuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjb25jYXRTdHlsZVNldHNXaXRoUHJvcHMoc3R5bGVQcm9wcykge1xuICAgIHZhciBhbGxTdHlsZXMgPSBbXTtcbiAgICBmb3IgKHZhciBfaSA9IDE7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICBhbGxTdHlsZXNbX2kgLSAxXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgfVxuICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICBmb3IgKHZhciBfYSA9IDAsIGFsbFN0eWxlc18xID0gYWxsU3R5bGVzOyBfYSA8IGFsbFN0eWxlc18xLmxlbmd0aDsgX2ErKykge1xuICAgICAgICB2YXIgc3R5bGVzID0gYWxsU3R5bGVzXzFbX2FdO1xuICAgICAgICBpZiAoc3R5bGVzKSB7XG4gICAgICAgICAgICByZXN1bHQucHVzaCh0eXBlb2Ygc3R5bGVzID09PSAnZnVuY3Rpb24nID8gc3R5bGVzKHN0eWxlUHJvcHMpIDogc3R5bGVzKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAocmVzdWx0Lmxlbmd0aCA9PT0gMSkge1xuICAgICAgICByZXR1cm4gcmVzdWx0WzBdO1xuICAgIH1cbiAgICBlbHNlIGlmIChyZXN1bHQubGVuZ3RoKSB7XG4gICAgICAgIC8vIGNsaWZma29oOiBJIGNhbm5vdCBmaWd1cmUgb3V0IGhvdyB0byBhdm9pZCB0aGUgY2FzdCB0byBhbnkgaGVyZS5cbiAgICAgICAgLy8gSXQgaXMgc29tZXRoaW5nIHRvIGRvIHdpdGggdGhlIHVzZSBvZiBPbWl0IGluIElTdHlsZVNldC5cbiAgICAgICAgLy8gSXQgbWlnaHQgbm90IGJlIG5lY2Vzc2FyeSBvbmNlICBPbWl0IGJlY29tZXMgcGFydCBvZiBsaWIuZC50cyAod2hlbiB3ZSByZW1vdmUgb3VyIG93biBPbWl0IGFuZCByZWx5IG9uXG4gICAgICAgIC8vIHRoZSBvZmZpY2lhbCB2ZXJzaW9uKS5cbiAgICAgICAgcmV0dXJuIGNvbmNhdFN0eWxlU2V0cy5hcHBseSh2b2lkIDAsIHJlc3VsdCk7XG4gICAgfVxuICAgIHJldHVybiB7fTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbmNhdFN0eWxlU2V0c1dpdGhQcm9wcy5qcy5tYXAiLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBDdXN0b21pemF0aW9ucyB9IGZyb20gJy4vQ3VzdG9taXphdGlvbnMnO1xuaW1wb3J0IHsgQ3VzdG9taXplckNvbnRleHQgfSBmcm9tICcuL0N1c3RvbWl6ZXJDb250ZXh0Jztcbi8qKlxuICogSG9vayB0byBnZXQgQ3VzdG9taXphdGlvbnMgc2V0dGluZ3MgZnJvbSBDdXN0b21pemF0aW9ucyBzaW5nbGV0b24gb3IgQ3VzdG9taXplckNvbnRleHQuXG4gKiBJdCB3aWxsIHRyaWdnZXIgY29tcG9uZW50IHN0YXRlIHVwZGF0ZSBvbiBzZXR0aW5ncyBjaGFuZ2Ugb2JzZXJ2ZWQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1c2VDdXN0b21pemF0aW9uU2V0dGluZ3MocHJvcGVydGllcywgc2NvcGVOYW1lKSB7XG4gICAgdmFyIGZvcmNlVXBkYXRlID0gdXNlRm9yY2VVcGRhdGUoKTtcbiAgICB2YXIgY3VzdG9taXphdGlvbnMgPSBSZWFjdC51c2VDb250ZXh0KEN1c3RvbWl6ZXJDb250ZXh0KS5jdXN0b21pemF0aW9ucztcbiAgICB2YXIgaW5DdXN0b21pemVyQ29udGV4dCA9IGN1c3RvbWl6YXRpb25zLmluQ3VzdG9taXplckNvbnRleHQ7XG4gICAgUmVhY3QudXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKCFpbkN1c3RvbWl6ZXJDb250ZXh0KSB7XG4gICAgICAgICAgICBDdXN0b21pemF0aW9ucy5vYnNlcnZlKGZvcmNlVXBkYXRlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKCFpbkN1c3RvbWl6ZXJDb250ZXh0KSB7XG4gICAgICAgICAgICAgICAgQ3VzdG9taXphdGlvbnMudW5vYnNlcnZlKGZvcmNlVXBkYXRlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0LWhvb2tzL2V4aGF1c3RpdmUtZGVwcyAtLSBleGNsdWRlIGZvcmNlVXBkYXRlXG4gICAgfSwgW2luQ3VzdG9taXplckNvbnRleHRdKTtcbiAgICByZXR1cm4gQ3VzdG9taXphdGlvbnMuZ2V0U2V0dGluZ3MocHJvcGVydGllcywgc2NvcGVOYW1lLCBjdXN0b21pemF0aW9ucyk7XG59XG5mdW5jdGlvbiB1c2VGb3JjZVVwZGF0ZSgpIHtcbiAgICB2YXIgX2EgPSBSZWFjdC51c2VTdGF0ZSgwKSwgc2V0VmFsdWUgPSBfYVsxXTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkgeyByZXR1cm4gc2V0VmFsdWUoZnVuY3Rpb24gKHZhbHVlKSB7IHJldHVybiArK3ZhbHVlOyB9KTsgfTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXVzZUN1c3RvbWl6YXRpb25TZXR0aW5ncy5qcy5tYXAiLCJpbXBvcnQgeyBfX2Fzc2lnbiwgX19yZXN0IH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBjb25jYXRTdHlsZVNldHNXaXRoUHJvcHMgfSBmcm9tICdAZmx1ZW50dWkvbWVyZ2Utc3R5bGVzJztcbmltcG9ydCB7IHVzZUN1c3RvbWl6YXRpb25TZXR0aW5ncyB9IGZyb20gJy4vY3VzdG9taXphdGlvbnMvdXNlQ3VzdG9taXphdGlvblNldHRpbmdzJztcbnZhciBEZWZhdWx0RmllbGRzID0gWyd0aGVtZScsICdzdHlsZXMnXTtcbmV4cG9ydCBmdW5jdGlvbiBzdHlsZWQoQ29tcG9uZW50LCBiYXNlU3R5bGVzLCBnZXRQcm9wcywgY3VzdG9taXphYmxlLCBwdXJlKSB7XG4gICAgY3VzdG9taXphYmxlID0gY3VzdG9taXphYmxlIHx8IHsgc2NvcGU6ICcnLCBmaWVsZHM6IHVuZGVmaW5lZCB9O1xuICAgIHZhciBzY29wZSA9IGN1c3RvbWl6YWJsZS5zY29wZSwgX2EgPSBjdXN0b21pemFibGUuZmllbGRzLCBmaWVsZHMgPSBfYSA9PT0gdm9pZCAwID8gRGVmYXVsdEZpZWxkcyA6IF9hO1xuICAgIHZhciBXcmFwcGVkID0gUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiAocHJvcHMsIGZvcndhcmRlZFJlZikge1xuICAgICAgICB2YXIgc3R5bGVzID0gUmVhY3QudXNlUmVmKCk7XG4gICAgICAgIHZhciBzZXR0aW5ncyA9IHVzZUN1c3RvbWl6YXRpb25TZXR0aW5ncyhmaWVsZHMsIHNjb3BlKTtcbiAgICAgICAgdmFyIGN1c3RvbWl6ZWRTdHlsZXMgPSBzZXR0aW5ncy5zdHlsZXMsIGRpciA9IHNldHRpbmdzLmRpciwgcmVzdCA9IF9fcmVzdChzZXR0aW5ncywgW1wic3R5bGVzXCIsIFwiZGlyXCJdKTtcbiAgICAgICAgdmFyIGFkZGl0aW9uYWxQcm9wcyA9IGdldFByb3BzID8gZ2V0UHJvcHMocHJvcHMpIDogdW5kZWZpbmVkO1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgICAgICB2YXIgY2FjaGUgPSAoc3R5bGVzLmN1cnJlbnQgJiYgc3R5bGVzLmN1cnJlbnQuX19jYWNoZWRJbnB1dHNfXykgfHwgW107XG4gICAgICAgIHZhciBwcm9wU3R5bGVzID0gcHJvcHMuc3R5bGVzO1xuICAgICAgICBpZiAoIXN0eWxlcy5jdXJyZW50IHx8IGN1c3RvbWl6ZWRTdHlsZXMgIT09IGNhY2hlWzFdIHx8IHByb3BTdHlsZXMgIT09IGNhY2hlWzJdKSB7XG4gICAgICAgICAgICAvLyBVc2luZyBzdHlsZWQgY29tcG9uZW50cyBhcyB0aGUgQ29tcG9uZW50IGFyZyB3aWxsIHJlc3VsdCBpbiBuZXN0ZWQgc3R5bGluZyBhcnJheXMuXG4gICAgICAgICAgICAvLyBUaGUgZnVuY3Rpb24gY2FuIGJlIGNhY2hlZCBhbmQgaW4gb3JkZXIgdG8gcHJldmVudCB0aGUgcHJvcHMgZnJvbSBiZWluZyByZXRhaW5lZCB3aXRoaW4gaXQncyBjbG9zdXJlXG4gICAgICAgICAgICAvLyB3ZSBwYXNzIGluIGp1c3QgdGhlIHN0eWxlcyBhbmQgbm90IHRoZSBlbnRpcmUgcHJvcHNcbiAgICAgICAgICAgIHZhciBjb25jYXRlbmF0ZWRTdHlsZXMgPSBmdW5jdGlvbiAoc3R5bGVQcm9wcykge1xuICAgICAgICAgICAgICAgIHJldHVybiBjb25jYXRTdHlsZVNldHNXaXRoUHJvcHMoc3R5bGVQcm9wcywgYmFzZVN0eWxlcywgY3VzdG9taXplZFN0eWxlcywgcHJvcFN0eWxlcyk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgLy8gVGhlIF9fY2FjaGVkSW5wdXRzX18gYXJyYXkgaXMgYXR0YWNoZWQgdG8gdGhlIGZ1bmN0aW9uIGFuZCBjb25zdW1lZCBieSB0aGVcbiAgICAgICAgICAgIC8vIGNsYXNzTmFtZXNGdW5jdGlvbiBhcyBhIGxpc3Qgb2Yga2V5cyB0byBpbmNsdWRlIGZvciBtZW1vaXppbmcgY2xhc3NuYW1lcy5cbiAgICAgICAgICAgIGNvbmNhdGVuYXRlZFN0eWxlcy5fX2NhY2hlZElucHV0c19fID0gW1xuICAgICAgICAgICAgICAgIGJhc2VTdHlsZXMsXG4gICAgICAgICAgICAgICAgY3VzdG9taXplZFN0eWxlcyxcbiAgICAgICAgICAgICAgICBwcm9wU3R5bGVzLFxuICAgICAgICAgICAgXTtcbiAgICAgICAgICAgIGNvbmNhdGVuYXRlZFN0eWxlcy5fX25vU3R5bGVPdmVycmlkZV9fID1cbiAgICAgICAgICAgICAgICAhY3VzdG9taXplZFN0eWxlcyAmJiAhcHJvcFN0eWxlcztcbiAgICAgICAgICAgIHN0eWxlcy5jdXJyZW50ID0gY29uY2F0ZW5hdGVkU3R5bGVzO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwgX19hc3NpZ24oeyByZWY6IGZvcndhcmRlZFJlZiB9LCByZXN0LCBhZGRpdGlvbmFsUHJvcHMsIHByb3BzLCB7IHN0eWxlczogc3R5bGVzLmN1cnJlbnQgfSkpO1xuICAgIH0pO1xuICAgIC8vIEZ1bmN0aW9uLnByb3RvdHlwZS5uYW1lIGlzIGFuIEVTNiBmZWF0dXJlLCBzbyB0aGUgY2FzdCB0byBhbnkgaXMgcmVxdWlyZWQgdW50aWwgd2UncmVcbiAgICAvLyBhYmxlIHRvIGRyb3AgSUUgMTEgc3VwcG9ydCBhbmQgY29tcGlsZSB3aXRoIEVTNiBsaWJzXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICBXcmFwcGVkLmRpc3BsYXlOYW1lID0gXCJTdHlsZWRcIiArIChDb21wb25lbnQuZGlzcGxheU5hbWUgfHwgQ29tcG9uZW50Lm5hbWUpO1xuICAgIC8vIFRoaXMgcHJlc2VydmVzIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5LlxuICAgIHZhciBwdXJlQ29tcG9uZW50ID0gcHVyZSA/IFJlYWN0Lm1lbW8oV3JhcHBlZCkgOiBXcmFwcGVkO1xuICAgIC8vIENoZWNrIGlmIHRoZSB3cmFwcGVyIGhhcyBhIGRpc3BsYXlOYW1lIGFmdGVyIGl0IGhhcyBiZWVuIG1lbW9pemVkLiBUaGVuIGFzc2lnbiBpdCB0byB0aGUgcHVyZSBjb21wb25lbnQuXG4gICAgaWYgKFdyYXBwZWQuZGlzcGxheU5hbWUpIHtcbiAgICAgICAgcHVyZUNvbXBvbmVudC5kaXNwbGF5TmFtZSA9IFdyYXBwZWQuZGlzcGxheU5hbWU7XG4gICAgfVxuICAgIHJldHVybiBwdXJlQ29tcG9uZW50O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3R5bGVkLmpzLm1hcCIsIi8qKlxuICogQGRlcHJlY2F0ZWQgSWNvbiB0eXBlIGlzIGluZmVycmVkIGJhc2VkIG9uIHByZXNlbmNlIG9mIGBJSWNvblByb3BzLmltYWdlUHJvcHNgXG4gKiB7QGRvY0NhdGVnb3J5IEljb259XG4gKi9cbmV4cG9ydCB2YXIgSWNvblR5cGU7XG4oZnVuY3Rpb24gKEljb25UeXBlKSB7XG4gICAgLyoqXG4gICAgICogUmVuZGVyIHVzaW5nIHRoZSBmYWJyaWMgaWNvbiBmb250LlxuICAgICAqIEBkZXByZWNhdGVkIEljb24gdHlwZSBpcyBpbmZlcnJlZCBiYXNlZCBvbiBwcmVzZW5jZSBvZiBgSUljb25Qcm9wcy5pbWFnZVByb3BzYFxuICAgICAqL1xuICAgIEljb25UeXBlW0ljb25UeXBlW1wiZGVmYXVsdFwiXSA9IDBdID0gXCJkZWZhdWx0XCI7XG4gICAgLyoqXG4gICAgICogUmVuZGVyIHVzaW5nIGFuIGltYWdlLCB3aGVyZSBpbWFnZVByb3BzIHdvdWxkIGJlIHVzZWQuXG4gICAgICogQGRlcHJlY2F0ZWQgSWNvbiB0eXBlIGlzIGluZmVycmVkIGJhc2VkIG9uIHByZXNlbmNlIG9mIGBJSWNvblByb3BzLmltYWdlUHJvcHNgXG4gICAgICovXG4gICAgSWNvblR5cGVbSWNvblR5cGVbXCJpbWFnZVwiXSA9IDFdID0gXCJpbWFnZVwiO1xuICAgIC8qKlxuICAgICAqIEBkZXByZWNhdGVkIEljb24gdHlwZSBpcyBpbmZlcnJlZCBiYXNlZCBvbiBwcmVzZW5jZSBvZiBgSUljb25Qcm9wcy5pbWFnZVByb3BzYFxuICAgICAqL1xuICAgIEljb25UeXBlW0ljb25UeXBlW1wiRGVmYXVsdFwiXSA9IDEwMDAwMF0gPSBcIkRlZmF1bHRcIjtcbiAgICAvKipcbiAgICAgKiBAZGVwcmVjYXRlZCBJY29uIHR5cGUgaXMgaW5mZXJyZWQgYmFzZWQgb24gcHJlc2VuY2Ugb2YgYElJY29uUHJvcHMuaW1hZ2VQcm9wc2BcbiAgICAgKi9cbiAgICBJY29uVHlwZVtJY29uVHlwZVtcIkltYWdlXCJdID0gMTAwMDAxXSA9IFwiSW1hZ2VcIjtcbn0pKEljb25UeXBlIHx8IChJY29uVHlwZSA9IHt9KSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1JY29uLnR5cGVzLmpzLm1hcCIsIi8qKlxuICogU2V0cyB0aGUgY3VycmVudCBSVEwgdmFsdWUuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzZXRSVEwoaXNSVEwpIHtcbiAgICBpZiAoX3J0bCAhPT0gaXNSVEwpIHtcbiAgICAgICAgX3J0bCA9IGlzUlRMO1xuICAgIH1cbn1cbi8qKlxuICogR2V0cyB0aGUgY3VycmVudCBSVEwgdmFsdWUuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRSVEwoKSB7XG4gICAgaWYgKF9ydGwgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBfcnRsID1cbiAgICAgICAgICAgIHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgICAgICAgICAgICAhIWRvY3VtZW50LmRvY3VtZW50RWxlbWVudCAmJlxuICAgICAgICAgICAgICAgIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2RpcicpID09PSAncnRsJztcbiAgICB9XG4gICAgcmV0dXJuIF9ydGw7XG59XG4vLyBUaGlzIGhhcyBiZWVuIHNwbGl0IGludG8gMiBsaW5lcyBiZWNhdXNlIGl0IHdhcyB3b3JraW5nIGluIEZhYnJpYyBkdWUgdG8gdGhlIGNvZGUgYmVpbmcgdHJhbnNwaWxlZCB0byBlczUsIHNvIHRoaXNcbi8vIHdhcyBjb252ZXJ0ZWQgdG8gdmFyIHdoaWxlIG5vdCB3b3JraW5nIGluIEZsdWVudCB0aGF0IHVzZXMgYmFiZWwgdG8gdHJhbnNwaWxlIHRoZSBjb2RlIHRvIGJlIGVzNi1saWtlLiBTcGxpdHRpbmcgdGhlXG4vLyBsb2dpYyBpbnRvIHR3byBsaW5lcywgaG93ZXZlciwgYWxsb3dzIGl0IHRvIHdvcmsgaW4gYm90aCBzY2VuYXJpb3MuXG52YXIgX3J0bDtcbl9ydGwgPSBnZXRSVEwoKTtcbmV4cG9ydCBmdW5jdGlvbiBnZXRTdHlsZU9wdGlvbnMoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgcnRsOiBnZXRSVEwoKSxcbiAgICB9O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9U3R5bGVPcHRpb25zU3RhdGUuanMubWFwIiwiaW1wb3J0IHsgU3R5bGVzaGVldCB9IGZyb20gJy4vU3R5bGVzaGVldCc7XG4vKipcbiAqIFNlcGFyYXRlcyB0aGUgY2xhc3NlcyBhbmQgc3R5bGUgb2JqZWN0cy4gQW55IGNsYXNzZXMgdGhhdCBhcmUgcHJlLXJlZ2lzdGVyZWRcbiAqIGFyZ3MgYXJlIGF1dG8gZXhwYW5kZWQgaW50byBvYmplY3RzLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZXh0cmFjdFN0eWxlUGFydHMoKSB7XG4gICAgdmFyIGFyZ3MgPSBbXTtcbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICBhcmdzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgfVxuICAgIHZhciBjbGFzc2VzID0gW107XG4gICAgdmFyIG9iamVjdHMgPSBbXTtcbiAgICB2YXIgc3R5bGVzaGVldCA9IFN0eWxlc2hlZXQuZ2V0SW5zdGFuY2UoKTtcbiAgICBmdW5jdGlvbiBfcHJvY2Vzc0FyZ3MoYXJnc0xpc3QpIHtcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBhcmdzTGlzdF8xID0gYXJnc0xpc3Q7IF9pIDwgYXJnc0xpc3RfMS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIHZhciBhcmcgPSBhcmdzTGlzdF8xW19pXTtcbiAgICAgICAgICAgIGlmIChhcmcpIHtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGFyZyA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGFyZy5pbmRleE9mKCcgJykgPj0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgX3Byb2Nlc3NBcmdzKGFyZy5zcGxpdCgnICcpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0cmFuc2xhdGVkQXJncyA9IHN0eWxlc2hlZXQuYXJnc0Zyb21DbGFzc05hbWUoYXJnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0cmFuc2xhdGVkQXJncykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9wcm9jZXNzQXJncyh0cmFuc2xhdGVkQXJncyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBBdm9pZCBhZGRpbmcgdGhlIHNhbWUgY2xhc3MgdHdpY2UuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNsYXNzZXMuaW5kZXhPZihhcmcpID09PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc2VzLnB1c2goYXJnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoQXJyYXkuaXNBcnJheShhcmcpKSB7XG4gICAgICAgICAgICAgICAgICAgIF9wcm9jZXNzQXJncyhhcmcpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgYXJnID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgICAgICAgICBvYmplY3RzLnB1c2goYXJnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgX3Byb2Nlc3NBcmdzKGFyZ3MpO1xuICAgIHJldHVybiB7XG4gICAgICAgIGNsYXNzZXM6IGNsYXNzZXMsXG4gICAgICAgIG9iamVjdHM6IG9iamVjdHMsXG4gICAgfTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWV4dHJhY3RTdHlsZVBhcnRzLmpzLm1hcCIsInZhciBydWxlcyA9IHt9O1xuZXhwb3J0IGZ1bmN0aW9uIGtlYmFiUnVsZXMocnVsZVBhaXJzLCBpbmRleCkge1xuICAgIHZhciBydWxlID0gcnVsZVBhaXJzW2luZGV4XTtcbiAgICBpZiAocnVsZS5jaGFyQXQoMCkgIT09ICctJykge1xuICAgICAgICBydWxlUGFpcnNbaW5kZXhdID0gcnVsZXNbcnVsZV0gPSBydWxlc1tydWxlXSB8fCBydWxlLnJlcGxhY2UoLyhbQS1aXSkvZywgJy0kMScpLnRvTG93ZXJDYXNlKCk7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9a2ViYWJSdWxlcy5qcy5tYXAiLCJ2YXIgX3ZlbmRvclNldHRpbmdzO1xuZXhwb3J0IGZ1bmN0aW9uIGdldFZlbmRvclNldHRpbmdzKCkge1xuICAgIHZhciBfYTtcbiAgICBpZiAoIV92ZW5kb3JTZXR0aW5ncykge1xuICAgICAgICB2YXIgZG9jID0gdHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJyA/IGRvY3VtZW50IDogdW5kZWZpbmVkO1xuICAgICAgICB2YXIgbmF2ID0gdHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgPyBuYXZpZ2F0b3IgOiB1bmRlZmluZWQ7XG4gICAgICAgIHZhciB1c2VyQWdlbnQgPSAoX2EgPSBuYXYgPT09IG51bGwgfHwgbmF2ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBuYXYudXNlckFnZW50KSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgaWYgKCFkb2MpIHtcbiAgICAgICAgICAgIF92ZW5kb3JTZXR0aW5ncyA9IHtcbiAgICAgICAgICAgICAgICBpc1dlYmtpdDogdHJ1ZSxcbiAgICAgICAgICAgICAgICBpc01vejogdHJ1ZSxcbiAgICAgICAgICAgICAgICBpc09wZXJhOiB0cnVlLFxuICAgICAgICAgICAgICAgIGlzTXM6IHRydWUsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgX3ZlbmRvclNldHRpbmdzID0ge1xuICAgICAgICAgICAgICAgIGlzV2Via2l0OiAhIShkb2MgJiYgJ1dlYmtpdEFwcGVhcmFuY2UnIGluIGRvYy5kb2N1bWVudEVsZW1lbnQuc3R5bGUpLFxuICAgICAgICAgICAgICAgIGlzTW96OiAhISh1c2VyQWdlbnQgJiYgdXNlckFnZW50LmluZGV4T2YoJ2ZpcmVmb3gnKSA+IC0xKSxcbiAgICAgICAgICAgICAgICBpc09wZXJhOiAhISh1c2VyQWdlbnQgJiYgdXNlckFnZW50LmluZGV4T2YoJ29wZXJhJykgPiAtMSksXG4gICAgICAgICAgICAgICAgaXNNczogISEobmF2ICYmICgvcnY6MTEuMC9pLnRlc3QobmF2LnVzZXJBZ2VudCkgfHwgL0VkZ2VcXC9cXGQuL2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KSkpLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gX3ZlbmRvclNldHRpbmdzO1xufVxuLyoqXG4gKiBTZXRzIHRoZSB2ZW5kb3Igc2V0dGluZ3MgZm9yIHByZWZpeGluZyBhbmQgdmVuZG9yIHNwZWNpZmljIG9wZXJhdGlvbnMuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzZXRWZW5kb3JTZXR0aW5ncyh2ZW5kb3JTZXR0aW5ncykge1xuICAgIF92ZW5kb3JTZXR0aW5ncyA9IHZlbmRvclNldHRpbmdzO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Z2V0VmVuZG9yU2V0dGluZ3MuanMubWFwIiwiaW1wb3J0IHsgZ2V0VmVuZG9yU2V0dGluZ3MgfSBmcm9tICcuLi9nZXRWZW5kb3JTZXR0aW5ncyc7XG52YXIgYXV0b1ByZWZpeE5hbWVzID0ge1xuICAgICd1c2VyLXNlbGVjdCc6IDEsXG59O1xuZXhwb3J0IGZ1bmN0aW9uIHByZWZpeFJ1bGVzKHJ1bGVQYWlycywgaW5kZXgpIHtcbiAgICB2YXIgdmVuZG9yU2V0dGluZ3MgPSBnZXRWZW5kb3JTZXR0aW5ncygpO1xuICAgIHZhciBuYW1lID0gcnVsZVBhaXJzW2luZGV4XTtcbiAgICBpZiAoYXV0b1ByZWZpeE5hbWVzW25hbWVdKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IHJ1bGVQYWlyc1tpbmRleCArIDFdO1xuICAgICAgICBpZiAoYXV0b1ByZWZpeE5hbWVzW25hbWVdKSB7XG4gICAgICAgICAgICBpZiAodmVuZG9yU2V0dGluZ3MuaXNXZWJraXQpIHtcbiAgICAgICAgICAgICAgICBydWxlUGFpcnMucHVzaCgnLXdlYmtpdC0nICsgbmFtZSwgdmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHZlbmRvclNldHRpbmdzLmlzTW96KSB7XG4gICAgICAgICAgICAgICAgcnVsZVBhaXJzLnB1c2goJy1tb3otJyArIG5hbWUsIHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh2ZW5kb3JTZXR0aW5ncy5pc01zKSB7XG4gICAgICAgICAgICAgICAgcnVsZVBhaXJzLnB1c2goJy1tcy0nICsgbmFtZSwgdmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHZlbmRvclNldHRpbmdzLmlzT3BlcmEpIHtcbiAgICAgICAgICAgICAgICBydWxlUGFpcnMucHVzaCgnLW8tJyArIG5hbWUsIHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXByZWZpeFJ1bGVzLmpzLm1hcCIsInZhciBOT05fUElYRUxfTlVNQkVSX1BST1BTID0gW1xuICAgICdjb2x1bW4tY291bnQnLFxuICAgICdmb250LXdlaWdodCcsXG4gICAgJ2ZsZXgnLFxuICAgICdmbGV4LWdyb3cnLFxuICAgICdmbGV4LXNocmluaycsXG4gICAgJ2ZpbGwtb3BhY2l0eScsXG4gICAgJ29wYWNpdHknLFxuICAgICdvcmRlcicsXG4gICAgJ3otaW5kZXgnLFxuICAgICd6b29tJyxcbl07XG5leHBvcnQgZnVuY3Rpb24gcHJvdmlkZVVuaXRzKHJ1bGVQYWlycywgaW5kZXgpIHtcbiAgICB2YXIgbmFtZSA9IHJ1bGVQYWlyc1tpbmRleF07XG4gICAgdmFyIHZhbHVlID0gcnVsZVBhaXJzW2luZGV4ICsgMV07XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgdmFyIGlzTm9uUGl4ZWxQcm9wID0gTk9OX1BJWEVMX05VTUJFUl9QUk9QUy5pbmRleE9mKG5hbWUpID4gLTE7XG4gICAgICAgIHZhciBpc1ZhcmlhYmxlT3JQcmVmaXhlZCA9IG5hbWUuaW5kZXhPZignLS0nKSA+IC0xO1xuICAgICAgICB2YXIgdW5pdCA9IGlzTm9uUGl4ZWxQcm9wIHx8IGlzVmFyaWFibGVPclByZWZpeGVkID8gJycgOiAncHgnO1xuICAgICAgICBydWxlUGFpcnNbaW5kZXggKyAxXSA9IFwiXCIgKyB2YWx1ZSArIHVuaXQ7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cHJvdmlkZVVuaXRzLmpzLm1hcCIsInZhciBfYTtcbnZhciBMRUZUID0gJ2xlZnQnO1xudmFyIFJJR0hUID0gJ3JpZ2h0JztcbnZhciBOT19GTElQID0gJ0Bub2ZsaXAnO1xudmFyIE5BTUVfUkVQTEFDRU1FTlRTID0gKF9hID0ge30sXG4gICAgX2FbTEVGVF0gPSBSSUdIVCxcbiAgICBfYVtSSUdIVF0gPSBMRUZULFxuICAgIF9hKTtcbnZhciBWQUxVRV9SRVBMQUNFTUVOVFMgPSB7XG4gICAgJ3ctcmVzaXplJzogJ2UtcmVzaXplJyxcbiAgICAnc3ctcmVzaXplJzogJ3NlLXJlc2l6ZScsXG4gICAgJ253LXJlc2l6ZSc6ICduZS1yZXNpemUnLFxufTtcbi8qKlxuICogUlRMaWZpZXMgdGhlIHJ1bGVQYWlyIGluIHRoZSBhcnJheSBhdCB0aGUgY3VycmVudCBpbmRleC4gVGhpcyBtdXRhdGVzIHRoZSBhcnJheSBmb3IgcGVyZm9ybWFuY2VcbiAqIHJlYXNvbnMuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBydGxpZnlSdWxlcyhvcHRpb25zLCBydWxlUGFpcnMsIGluZGV4KSB7XG4gICAgaWYgKG9wdGlvbnMucnRsKSB7XG4gICAgICAgIHZhciBuYW1lXzEgPSBydWxlUGFpcnNbaW5kZXhdO1xuICAgICAgICBpZiAoIW5hbWVfMSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHZhciB2YWx1ZSA9IHJ1bGVQYWlyc1tpbmRleCArIDFdO1xuICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyAmJiB2YWx1ZS5pbmRleE9mKE5PX0ZMSVApID49IDApIHtcbiAgICAgICAgICAgIHJ1bGVQYWlyc1tpbmRleCArIDFdID0gdmFsdWUucmVwbGFjZSgvXFxzKig/OlxcL1xcKlxccyopP1xcQG5vZmxpcFxcYig/OlxccypcXCpcXC8pP1xccyo/L2csICcnKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChuYW1lXzEuaW5kZXhPZihMRUZUKSA+PSAwKSB7XG4gICAgICAgICAgICBydWxlUGFpcnNbaW5kZXhdID0gbmFtZV8xLnJlcGxhY2UoTEVGVCwgUklHSFQpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKG5hbWVfMS5pbmRleE9mKFJJR0hUKSA+PSAwKSB7XG4gICAgICAgICAgICBydWxlUGFpcnNbaW5kZXhdID0gbmFtZV8xLnJlcGxhY2UoUklHSFQsIExFRlQpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKFN0cmluZyh2YWx1ZSkuaW5kZXhPZihMRUZUKSA+PSAwKSB7XG4gICAgICAgICAgICBydWxlUGFpcnNbaW5kZXggKyAxXSA9IHZhbHVlLnJlcGxhY2UoTEVGVCwgUklHSFQpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKFN0cmluZyh2YWx1ZSkuaW5kZXhPZihSSUdIVCkgPj0gMCkge1xuICAgICAgICAgICAgcnVsZVBhaXJzW2luZGV4ICsgMV0gPSB2YWx1ZS5yZXBsYWNlKFJJR0hULCBMRUZUKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChOQU1FX1JFUExBQ0VNRU5UU1tuYW1lXzFdKSB7XG4gICAgICAgICAgICBydWxlUGFpcnNbaW5kZXhdID0gTkFNRV9SRVBMQUNFTUVOVFNbbmFtZV8xXTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChWQUxVRV9SRVBMQUNFTUVOVFNbdmFsdWVdKSB7XG4gICAgICAgICAgICBydWxlUGFpcnNbaW5kZXggKyAxXSA9IFZBTFVFX1JFUExBQ0VNRU5UU1t2YWx1ZV07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBzd2l0Y2ggKG5hbWVfMSkge1xuICAgICAgICAgICAgICAgIGNhc2UgJ21hcmdpbic6XG4gICAgICAgICAgICAgICAgY2FzZSAncGFkZGluZyc6XG4gICAgICAgICAgICAgICAgICAgIHJ1bGVQYWlyc1tpbmRleCArIDFdID0gZmxpcFF1YWQodmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdib3gtc2hhZG93JzpcbiAgICAgICAgICAgICAgICAgICAgcnVsZVBhaXJzW2luZGV4ICsgMV0gPSBuZWdhdGVOdW0odmFsdWUsIDApO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cbi8qKlxuICogR2l2ZW4gYSBzdHJpbmcgdmFsdWUgaW4gYSBzcGFjZSBkZWxpbWl0ZWQgZm9ybWF0IChlLmcuIFwiMSAyIDMgNFwiKSwgbmVnYXRlcyBhIHBhcnRpY3VsYXIgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIG5lZ2F0ZU51bSh2YWx1ZSwgcGFydEluZGV4KSB7XG4gICAgdmFyIHBhcnRzID0gdmFsdWUuc3BsaXQoJyAnKTtcbiAgICB2YXIgbnVtYmVyVmFsID0gcGFyc2VJbnQocGFydHNbcGFydEluZGV4XSwgMTApO1xuICAgIHBhcnRzWzBdID0gcGFydHNbMF0ucmVwbGFjZShTdHJpbmcobnVtYmVyVmFsKSwgU3RyaW5nKG51bWJlclZhbCAqIC0xKSk7XG4gICAgcmV0dXJuIHBhcnRzLmpvaW4oJyAnKTtcbn1cbi8qKlxuICogR2l2ZW4gYSBzdHJpbmcgcXVhZCwgZmxpcHMgdGhlIGxlZnQgYW5kIHJpZ2h0IHZhbHVlcy5cbiAqL1xuZnVuY3Rpb24gZmxpcFF1YWQodmFsdWUpIHtcbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xuICAgICAgICB2YXIgcGFydHMgPSB2YWx1ZS5zcGxpdCgnICcpO1xuICAgICAgICBpZiAocGFydHMubGVuZ3RoID09PSA0KSB7XG4gICAgICAgICAgICByZXR1cm4gcGFydHNbMF0gKyBcIiBcIiArIHBhcnRzWzNdICsgXCIgXCIgKyBwYXJ0c1syXSArIFwiIFwiICsgcGFydHNbMV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHZhbHVlO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cnRsaWZ5UnVsZXMuanMubWFwIiwiaW1wb3J0IHsgX19zcHJlYWRBcnJheSB9IGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgU3R5bGVzaGVldCB9IGZyb20gJy4vU3R5bGVzaGVldCc7XG5pbXBvcnQgeyBrZWJhYlJ1bGVzIH0gZnJvbSAnLi90cmFuc2Zvcm1zL2tlYmFiUnVsZXMnO1xuaW1wb3J0IHsgcHJlZml4UnVsZXMgfSBmcm9tICcuL3RyYW5zZm9ybXMvcHJlZml4UnVsZXMnO1xuaW1wb3J0IHsgcHJvdmlkZVVuaXRzIH0gZnJvbSAnLi90cmFuc2Zvcm1zL3Byb3ZpZGVVbml0cyc7XG5pbXBvcnQgeyBydGxpZnlSdWxlcyB9IGZyb20gJy4vdHJhbnNmb3Jtcy9ydGxpZnlSdWxlcyc7XG5pbXBvcnQgeyB0b2tlbml6ZVdpdGhQYXJlbnRoZXNlcyB9IGZyb20gJy4vdG9rZW5pemVXaXRoUGFyZW50aGVzZXMnO1xudmFyIERJU1BMQVlfTkFNRSA9ICdkaXNwbGF5TmFtZSc7XG5mdW5jdGlvbiBnZXREaXNwbGF5TmFtZShydWxlcykge1xuICAgIHZhciByb290U3R5bGUgPSBydWxlcyAmJiBydWxlc1snJiddO1xuICAgIHJldHVybiByb290U3R5bGUgPyByb290U3R5bGUuZGlzcGxheU5hbWUgOiB1bmRlZmluZWQ7XG59XG52YXIgZ2xvYmFsU2VsZWN0b3JSZWdFeHAgPSAvXFw6Z2xvYmFsXFwoKC4rPylcXCkvZztcbi8qKlxuICogRmluZHMgY29tbWEgc2VwYXJhdGVkIHNlbGVjdG9ycyBpbiBhIDpnbG9iYWwoKSBlLmcuIFwiOmdsb2JhbCguY2xhc3MxLCAuY2xhc3MyLCAuY2xhc3MzKVwiXG4gKiBhbmQgd3JhcHMgdGhlbSBlYWNoIGluIHRoZWlyIG93biBnbG9iYWwgXCI6Z2xvYmFsKC5jbGFzczEpLCA6Z2xvYmFsKC5jbGFzczIpLCA6Z2xvYmFsKC5jbGFzczMpXCJcbiAqXG4gKiBAcGFyYW0gc2VsZWN0b3JXaXRoR2xvYmFscyBUaGUgc2VsZWN0b3IgdG8gcHJvY2Vzc1xuICogQHJldHVybnMgVGhlIHVwZGF0ZWQgc2VsZWN0b3JcbiAqL1xuZnVuY3Rpb24gZXhwYW5kQ29tbWFTZXBhcmF0ZWRHbG9iYWxzKHNlbGVjdG9yV2l0aEdsb2JhbHMpIHtcbiAgICAvLyBXZSB0aGUgc2VsZWN0b3IgZG9lcyBub3QgaGF2ZSBhIDpnbG9iYWwoKSB3ZSBjYW4gc2hvcnRjdXRcbiAgICBpZiAoIWdsb2JhbFNlbGVjdG9yUmVnRXhwLnRlc3Qoc2VsZWN0b3JXaXRoR2xvYmFscykpIHtcbiAgICAgICAgcmV0dXJuIHNlbGVjdG9yV2l0aEdsb2JhbHM7XG4gICAgfVxuICAgIHZhciByZXBsYWNlbWVudEluZm8gPSBbXTtcbiAgICB2YXIgZmluZEdsb2JhbCA9IC9cXDpnbG9iYWxcXCgoLis/KVxcKS9nO1xuICAgIHZhciBtYXRjaCA9IG51bGw7XG4gICAgLy8gQ3JlYXRlIGEgcmVzdWx0IGxpc3QgZm9yIGdsb2JhbCBzZWxlY3RvcnMgc28gd2UgY2FuIHJlcGxhY2UgdGhlbS5cbiAgICB3aGlsZSAoKG1hdGNoID0gZmluZEdsb2JhbC5leGVjKHNlbGVjdG9yV2l0aEdsb2JhbHMpKSkge1xuICAgICAgICAvLyBPbmx5IGlmIHRoZSBmb3VuZCBzZWxlY3RvciBpcyBhIGNvbW1hIHNlcGFyYXRlZCBsaXN0IHdlJ2xsIHByb2Nlc3MgaXQuXG4gICAgICAgIGlmIChtYXRjaFsxXS5pbmRleE9mKCcsJykgPiAtMSkge1xuICAgICAgICAgICAgcmVwbGFjZW1lbnRJbmZvLnB1c2goW1xuICAgICAgICAgICAgICAgIG1hdGNoLmluZGV4LFxuICAgICAgICAgICAgICAgIG1hdGNoLmluZGV4ICsgbWF0Y2hbMF0ubGVuZ3RoLFxuICAgICAgICAgICAgICAgIC8vIFdyYXAgZWFjaCBvZiB0aGUgZm91bmQgc2VsZWN0b3JzIGluIDpnbG9iYWwoKVxuICAgICAgICAgICAgICAgIG1hdGNoWzFdXG4gICAgICAgICAgICAgICAgICAgIC5zcGxpdCgnLCcpXG4gICAgICAgICAgICAgICAgICAgIC5tYXAoZnVuY3Rpb24gKHYpIHsgcmV0dXJuIFwiOmdsb2JhbChcIiArIHYudHJpbSgpICsgXCIpXCI7IH0pXG4gICAgICAgICAgICAgICAgICAgIC5qb2luKCcsICcpLFxuICAgICAgICAgICAgXSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8gUmVwbGFjZSB0aGUgZm91bmQgc2VsZWN0b3JzIHdpdGggdGhlaXIgd3JhcHBlZCB2YXJpYW50cyBpbiByZXZlcnNlIG9yZGVyXG4gICAgcmV0dXJuIHJlcGxhY2VtZW50SW5mb1xuICAgICAgICAucmV2ZXJzZSgpXG4gICAgICAgIC5yZWR1Y2UoZnVuY3Rpb24gKHNlbGVjdG9yLCBfYSkge1xuICAgICAgICB2YXIgbWF0Y2hJbmRleCA9IF9hWzBdLCBtYXRjaEVuZEluZGV4ID0gX2FbMV0sIHJlcGxhY2VtZW50ID0gX2FbMl07XG4gICAgICAgIHZhciBwcmVmaXggPSBzZWxlY3Rvci5zbGljZSgwLCBtYXRjaEluZGV4KTtcbiAgICAgICAgdmFyIHN1ZmZpeCA9IHNlbGVjdG9yLnNsaWNlKG1hdGNoRW5kSW5kZXgpO1xuICAgICAgICByZXR1cm4gcHJlZml4ICsgcmVwbGFjZW1lbnQgKyBzdWZmaXg7XG4gICAgfSwgc2VsZWN0b3JXaXRoR2xvYmFscyk7XG59XG5mdW5jdGlvbiBleHBhbmRTZWxlY3RvcihuZXdTZWxlY3RvciwgY3VycmVudFNlbGVjdG9yKSB7XG4gICAgaWYgKG5ld1NlbGVjdG9yLmluZGV4T2YoJzpnbG9iYWwoJykgPj0gMCkge1xuICAgICAgICByZXR1cm4gbmV3U2VsZWN0b3IucmVwbGFjZShnbG9iYWxTZWxlY3RvclJlZ0V4cCwgJyQxJyk7XG4gICAgfVxuICAgIGVsc2UgaWYgKG5ld1NlbGVjdG9yLmluZGV4T2YoJzonKSA9PT0gMCkge1xuICAgICAgICByZXR1cm4gY3VycmVudFNlbGVjdG9yICsgbmV3U2VsZWN0b3I7XG4gICAgfVxuICAgIGVsc2UgaWYgKG5ld1NlbGVjdG9yLmluZGV4T2YoJyYnKSA8IDApIHtcbiAgICAgICAgcmV0dXJuIGN1cnJlbnRTZWxlY3RvciArICcgJyArIG5ld1NlbGVjdG9yO1xuICAgIH1cbiAgICByZXR1cm4gbmV3U2VsZWN0b3I7XG59XG5mdW5jdGlvbiBleHRyYWN0U2VsZWN0b3IoY3VycmVudFNlbGVjdG9yLCBydWxlcywgc2VsZWN0b3IsIHZhbHVlKSB7XG4gICAgaWYgKHJ1bGVzID09PSB2b2lkIDApIHsgcnVsZXMgPSB7IF9fb3JkZXI6IFtdIH07IH1cbiAgICBpZiAoc2VsZWN0b3IuaW5kZXhPZignQCcpID09PSAwKSB7XG4gICAgICAgIHNlbGVjdG9yID0gc2VsZWN0b3IgKyAneycgKyBjdXJyZW50U2VsZWN0b3I7XG4gICAgICAgIGV4dHJhY3RSdWxlcyhbdmFsdWVdLCBydWxlcywgc2VsZWN0b3IpO1xuICAgIH1cbiAgICBlbHNlIGlmIChzZWxlY3Rvci5pbmRleE9mKCcsJykgPiAtMSkge1xuICAgICAgICBleHBhbmRDb21tYVNlcGFyYXRlZEdsb2JhbHMoc2VsZWN0b3IpXG4gICAgICAgICAgICAuc3BsaXQoJywnKVxuICAgICAgICAgICAgLm1hcChmdW5jdGlvbiAocykgeyByZXR1cm4gcy50cmltKCk7IH0pXG4gICAgICAgICAgICAuZm9yRWFjaChmdW5jdGlvbiAoc2VwYXJhdGVkU2VsZWN0b3IpIHtcbiAgICAgICAgICAgIHJldHVybiBleHRyYWN0UnVsZXMoW3ZhbHVlXSwgcnVsZXMsIGV4cGFuZFNlbGVjdG9yKHNlcGFyYXRlZFNlbGVjdG9yLCBjdXJyZW50U2VsZWN0b3IpKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBleHRyYWN0UnVsZXMoW3ZhbHVlXSwgcnVsZXMsIGV4cGFuZFNlbGVjdG9yKHNlbGVjdG9yLCBjdXJyZW50U2VsZWN0b3IpKTtcbiAgICB9XG59XG5mdW5jdGlvbiBleHRyYWN0UnVsZXMoYXJncywgcnVsZXMsIGN1cnJlbnRTZWxlY3Rvcikge1xuICAgIGlmIChydWxlcyA9PT0gdm9pZCAwKSB7IHJ1bGVzID0geyBfX29yZGVyOiBbXSB9OyB9XG4gICAgaWYgKGN1cnJlbnRTZWxlY3RvciA9PT0gdm9pZCAwKSB7IGN1cnJlbnRTZWxlY3RvciA9ICcmJzsgfVxuICAgIHZhciBzdHlsZXNoZWV0ID0gU3R5bGVzaGVldC5nZXRJbnN0YW5jZSgpO1xuICAgIHZhciBjdXJyZW50UnVsZXMgPSBydWxlc1tjdXJyZW50U2VsZWN0b3JdO1xuICAgIGlmICghY3VycmVudFJ1bGVzKSB7XG4gICAgICAgIGN1cnJlbnRSdWxlcyA9IHt9O1xuICAgICAgICBydWxlc1tjdXJyZW50U2VsZWN0b3JdID0gY3VycmVudFJ1bGVzO1xuICAgICAgICBydWxlcy5fX29yZGVyLnB1c2goY3VycmVudFNlbGVjdG9yKTtcbiAgICB9XG4gICAgZm9yICh2YXIgX2kgPSAwLCBhcmdzXzEgPSBhcmdzOyBfaSA8IGFyZ3NfMS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgdmFyIGFyZyA9IGFyZ3NfMVtfaV07XG4gICAgICAgIC8vIElmIHRoZSBhcmcgaXMgYSBzdHJpbmcsIHdlIG5lZWQgdG8gbG9vayB1cCB0aGUgY2xhc3MgbWFwIGFuZCBtZXJnZS5cbiAgICAgICAgaWYgKHR5cGVvZiBhcmcgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICB2YXIgZXhwYW5kZWRSdWxlcyA9IHN0eWxlc2hlZXQuYXJnc0Zyb21DbGFzc05hbWUoYXJnKTtcbiAgICAgICAgICAgIGlmIChleHBhbmRlZFJ1bGVzKSB7XG4gICAgICAgICAgICAgICAgZXh0cmFjdFJ1bGVzKGV4cGFuZGVkUnVsZXMsIHJ1bGVzLCBjdXJyZW50U2VsZWN0b3IpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gRWxzZSBpZiB0aGUgYXJnIGlzIGFuIGFycmF5LCB3ZSBuZWVkIHRvIHJlY3Vyc2UgaW4uXG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoQXJyYXkuaXNBcnJheShhcmcpKSB7XG4gICAgICAgICAgICBleHRyYWN0UnVsZXMoYXJnLCBydWxlcywgY3VycmVudFNlbGVjdG9yKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGZvciAodmFyIHByb3AgaW4gYXJnKSB7XG4gICAgICAgICAgICAgICAgaWYgKGFyZy5oYXNPd25Qcm9wZXJ0eShwcm9wKSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgcHJvcFZhbHVlID0gYXJnW3Byb3BdO1xuICAgICAgICAgICAgICAgICAgICBpZiAocHJvcCA9PT0gJ3NlbGVjdG9ycycpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGV2ZXJ5IGNoaWxkIGlzIGEgc2VsZWN0b3IuXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgc2VsZWN0b3JzID0gYXJnLnNlbGVjdG9ycztcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIG5ld1NlbGVjdG9yIGluIHNlbGVjdG9ycykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzZWxlY3RvcnMuaGFzT3duUHJvcGVydHkobmV3U2VsZWN0b3IpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4dHJhY3RTZWxlY3RvcihjdXJyZW50U2VsZWN0b3IsIHJ1bGVzLCBuZXdTZWxlY3Rvciwgc2VsZWN0b3JzW25ld1NlbGVjdG9yXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiBwcm9wVmFsdWUgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBwcm9wIGlzIGEgc2VsZWN0b3IuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocHJvcFZhbHVlICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXh0cmFjdFNlbGVjdG9yKGN1cnJlbnRTZWxlY3RvciwgcnVsZXMsIHByb3AsIHByb3BWYWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocHJvcFZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBFbHNlLCBhZGQgdGhlIHJ1bGUgdG8gdGhlIGN1cnJlbnRTZWxlY3Rvci5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocHJvcCA9PT0gJ21hcmdpbicgfHwgcHJvcCA9PT0gJ3BhZGRpbmcnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4cGFuZFF1YWRzKGN1cnJlbnRSdWxlcywgcHJvcCwgcHJvcFZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRSdWxlc1twcm9wXSA9IHByb3BWYWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJ1bGVzO1xufVxuZnVuY3Rpb24gZXhwYW5kUXVhZHMoY3VycmVudFJ1bGVzLCBuYW1lLCB2YWx1ZSkge1xuICAgIHZhciBwYXJ0cyA9IHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgPyB0b2tlbml6ZVdpdGhQYXJlbnRoZXNlcyh2YWx1ZSkgOiBbdmFsdWVdO1xuICAgIGlmIChwYXJ0cy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcGFydHMucHVzaCh2YWx1ZSk7XG4gICAgfVxuICAgIGlmIChwYXJ0c1twYXJ0cy5sZW5ndGggLSAxXSA9PT0gJyFpbXBvcnRhbnQnKSB7XG4gICAgICAgIC8vIFJlbW92ZSAhaW1wb3J0YW50IGZyb20gcGFydHMsIGFuZCBhcHBlbmQgaXQgdG8gZWFjaCBwYXJ0IGluZGl2aWR1YWxseVxuICAgICAgICBwYXJ0cyA9IHBhcnRzLnNsaWNlKDAsIC0xKS5tYXAoZnVuY3Rpb24gKHApIHsgcmV0dXJuIHAgKyAnICFpbXBvcnRhbnQnOyB9KTtcbiAgICB9XG4gICAgY3VycmVudFJ1bGVzW25hbWUgKyAnVG9wJ10gPSBwYXJ0c1swXTtcbiAgICBjdXJyZW50UnVsZXNbbmFtZSArICdSaWdodCddID0gcGFydHNbMV0gfHwgcGFydHNbMF07XG4gICAgY3VycmVudFJ1bGVzW25hbWUgKyAnQm90dG9tJ10gPSBwYXJ0c1syXSB8fCBwYXJ0c1swXTtcbiAgICBjdXJyZW50UnVsZXNbbmFtZSArICdMZWZ0J10gPSBwYXJ0c1szXSB8fCBwYXJ0c1sxXSB8fCBwYXJ0c1swXTtcbn1cbmZ1bmN0aW9uIGdldEtleUZvclJ1bGVzKG9wdGlvbnMsIHJ1bGVzKSB7XG4gICAgdmFyIHNlcmlhbGl6ZWQgPSBbb3B0aW9ucy5ydGwgPyAncnRsJyA6ICdsdHInXTtcbiAgICB2YXIgaGFzUHJvcHMgPSBmYWxzZTtcbiAgICBmb3IgKHZhciBfaSA9IDAsIF9hID0gcnVsZXMuX19vcmRlcjsgX2kgPCBfYS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgdmFyIHNlbGVjdG9yID0gX2FbX2ldO1xuICAgICAgICBzZXJpYWxpemVkLnB1c2goc2VsZWN0b3IpO1xuICAgICAgICB2YXIgcnVsZXNGb3JTZWxlY3RvciA9IHJ1bGVzW3NlbGVjdG9yXTtcbiAgICAgICAgZm9yICh2YXIgcHJvcE5hbWUgaW4gcnVsZXNGb3JTZWxlY3Rvcikge1xuICAgICAgICAgICAgaWYgKHJ1bGVzRm9yU2VsZWN0b3IuaGFzT3duUHJvcGVydHkocHJvcE5hbWUpICYmIHJ1bGVzRm9yU2VsZWN0b3JbcHJvcE5hbWVdICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBoYXNQcm9wcyA9IHRydWU7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZC5wdXNoKHByb3BOYW1lLCBydWxlc0ZvclNlbGVjdG9yW3Byb3BOYW1lXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGhhc1Byb3BzID8gc2VyaWFsaXplZC5qb2luKCcnKSA6IHVuZGVmaW5lZDtcbn1cbmZ1bmN0aW9uIHJlcGVhdFN0cmluZyh0YXJnZXQsIGNvdW50KSB7XG4gICAgaWYgKGNvdW50IDw9IDApIHtcbiAgICAgICAgcmV0dXJuICcnO1xuICAgIH1cbiAgICBpZiAoY291bnQgPT09IDEpIHtcbiAgICAgICAgcmV0dXJuIHRhcmdldDtcbiAgICB9XG4gICAgcmV0dXJuIHRhcmdldCArIHJlcGVhdFN0cmluZyh0YXJnZXQsIGNvdW50IC0gMSk7XG59XG5leHBvcnQgZnVuY3Rpb24gc2VyaWFsaXplUnVsZUVudHJpZXMob3B0aW9ucywgcnVsZUVudHJpZXMpIHtcbiAgICBpZiAoIXJ1bGVFbnRyaWVzKSB7XG4gICAgICAgIHJldHVybiAnJztcbiAgICB9XG4gICAgdmFyIGFsbEVudHJpZXMgPSBbXTtcbiAgICBmb3IgKHZhciBlbnRyeSBpbiBydWxlRW50cmllcykge1xuICAgICAgICBpZiAocnVsZUVudHJpZXMuaGFzT3duUHJvcGVydHkoZW50cnkpICYmIGVudHJ5ICE9PSBESVNQTEFZX05BTUUgJiYgcnVsZUVudHJpZXNbZW50cnldICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGFsbEVudHJpZXMucHVzaChlbnRyeSwgcnVsZUVudHJpZXNbZW50cnldKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyBBcHBseSB0cmFuc2Zvcm1zLlxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYWxsRW50cmllcy5sZW5ndGg7IGkgKz0gMikge1xuICAgICAgICBrZWJhYlJ1bGVzKGFsbEVudHJpZXMsIGkpO1xuICAgICAgICBwcm92aWRlVW5pdHMoYWxsRW50cmllcywgaSk7XG4gICAgICAgIHJ0bGlmeVJ1bGVzKG9wdGlvbnMsIGFsbEVudHJpZXMsIGkpO1xuICAgICAgICBwcmVmaXhSdWxlcyhhbGxFbnRyaWVzLCBpKTtcbiAgICB9XG4gICAgLy8gQXBwbHkgcHVuY3R1YXRpb24uXG4gICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhbGxFbnRyaWVzLmxlbmd0aDsgaSArPSA0KSB7XG4gICAgICAgIGFsbEVudHJpZXMuc3BsaWNlKGksIDEsICc6JywgYWxsRW50cmllc1tpXSwgJzsnKTtcbiAgICB9XG4gICAgcmV0dXJuIGFsbEVudHJpZXMuam9pbignJyk7XG59XG5leHBvcnQgZnVuY3Rpb24gc3R5bGVUb1JlZ2lzdHJhdGlvbihvcHRpb25zKSB7XG4gICAgdmFyIGFyZ3MgPSBbXTtcbiAgICBmb3IgKHZhciBfaSA9IDE7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICBhcmdzW19pIC0gMV0gPSBhcmd1bWVudHNbX2ldO1xuICAgIH1cbiAgICB2YXIgcnVsZXMgPSBleHRyYWN0UnVsZXMoYXJncyk7XG4gICAgdmFyIGtleSA9IGdldEtleUZvclJ1bGVzKG9wdGlvbnMsIHJ1bGVzKTtcbiAgICBpZiAoa2V5KSB7XG4gICAgICAgIHZhciBzdHlsZXNoZWV0ID0gU3R5bGVzaGVldC5nZXRJbnN0YW5jZSgpO1xuICAgICAgICB2YXIgcmVnaXN0cmF0aW9uID0ge1xuICAgICAgICAgICAgY2xhc3NOYW1lOiBzdHlsZXNoZWV0LmNsYXNzTmFtZUZyb21LZXkoa2V5KSxcbiAgICAgICAgICAgIGtleToga2V5LFxuICAgICAgICAgICAgYXJnczogYXJncyxcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKCFyZWdpc3RyYXRpb24uY2xhc3NOYW1lKSB7XG4gICAgICAgICAgICByZWdpc3RyYXRpb24uY2xhc3NOYW1lID0gc3R5bGVzaGVldC5nZXRDbGFzc05hbWUoZ2V0RGlzcGxheU5hbWUocnVsZXMpKTtcbiAgICAgICAgICAgIHZhciBydWxlc1RvSW5zZXJ0ID0gW107XG4gICAgICAgICAgICBmb3IgKHZhciBfYSA9IDAsIF9iID0gcnVsZXMuX19vcmRlcjsgX2EgPCBfYi5sZW5ndGg7IF9hKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgc2VsZWN0b3IgPSBfYltfYV07XG4gICAgICAgICAgICAgICAgcnVsZXNUb0luc2VydC5wdXNoKHNlbGVjdG9yLCBzZXJpYWxpemVSdWxlRW50cmllcyhvcHRpb25zLCBydWxlc1tzZWxlY3Rvcl0pKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJlZ2lzdHJhdGlvbi5ydWxlc1RvSW5zZXJ0ID0gcnVsZXNUb0luc2VydDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVnaXN0cmF0aW9uO1xuICAgIH1cbiAgICByZXR1cm4gdW5kZWZpbmVkO1xufVxuLyoqXG4gKiBJbnNlcnQgc3R5bGUgdG8gc3R5bGVzaGVldC5cbiAqIEBwYXJhbSByZWdpc3RyYXRpb24gU3R5bGUgcmVnaXN0cmF0aW9uLlxuICogQHBhcmFtIHNwZWNpZmljaXR5TXVsdGlwbGllciBOdW1iZXIgb2YgdGltZXMgY2xhc3NuYW1lIHNlbGVjdG9yIGlzIHJlcGVhdGVkIGluIHRoZSBjc3MgcnVsZS5cbiAqIFRoaXMgaXMgdG8gaW5jcmVhc2UgY3NzIHNwZWNpZmljaXR5IGluIGNhc2UgaXQncyBuZWVkZWQuIERlZmF1bHQgdG8gMS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGFwcGx5UmVnaXN0cmF0aW9uKHJlZ2lzdHJhdGlvbiwgc3BlY2lmaWNpdHlNdWx0aXBsaWVyKSB7XG4gICAgaWYgKHNwZWNpZmljaXR5TXVsdGlwbGllciA9PT0gdm9pZCAwKSB7IHNwZWNpZmljaXR5TXVsdGlwbGllciA9IDE7IH1cbiAgICB2YXIgc3R5bGVzaGVldCA9IFN0eWxlc2hlZXQuZ2V0SW5zdGFuY2UoKTtcbiAgICB2YXIgY2xhc3NOYW1lID0gcmVnaXN0cmF0aW9uLmNsYXNzTmFtZSwga2V5ID0gcmVnaXN0cmF0aW9uLmtleSwgYXJncyA9IHJlZ2lzdHJhdGlvbi5hcmdzLCBydWxlc1RvSW5zZXJ0ID0gcmVnaXN0cmF0aW9uLnJ1bGVzVG9JbnNlcnQ7XG4gICAgaWYgKHJ1bGVzVG9JbnNlcnQpIHtcbiAgICAgICAgLy8gcnVsZXNUb0luc2VydCBpcyBhbiBvcmRlcmVkIGFycmF5IG9mIHNlbGVjdG9yL3J1bGUgcGFpcnMuXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcnVsZXNUb0luc2VydC5sZW5ndGg7IGkgKz0gMikge1xuICAgICAgICAgICAgdmFyIHJ1bGVzID0gcnVsZXNUb0luc2VydFtpICsgMV07XG4gICAgICAgICAgICBpZiAocnVsZXMpIHtcbiAgICAgICAgICAgICAgICB2YXIgc2VsZWN0b3IgPSBydWxlc1RvSW5zZXJ0W2ldO1xuICAgICAgICAgICAgICAgIHNlbGVjdG9yID0gc2VsZWN0b3IucmVwbGFjZSgvJi9nLCByZXBlYXRTdHJpbmcoXCIuXCIgKyByZWdpc3RyYXRpb24uY2xhc3NOYW1lLCBzcGVjaWZpY2l0eU11bHRpcGxpZXIpKTtcbiAgICAgICAgICAgICAgICAvLyBJbnNlcnQuIE5vdGUgaWYgYSBtZWRpYSBxdWVyeSwgd2UgbXVzdCBjbG9zZSB0aGUgcXVlcnkgd2l0aCBhIGZpbmFsIGJyYWNrZXQuXG4gICAgICAgICAgICAgICAgdmFyIHByb2Nlc3NlZFJ1bGUgPSBzZWxlY3RvciArIFwie1wiICsgcnVsZXMgKyBcIn1cIiArIChzZWxlY3Rvci5pbmRleE9mKCdAJykgPT09IDAgPyAnfScgOiAnJyk7XG4gICAgICAgICAgICAgICAgc3R5bGVzaGVldC5pbnNlcnRSdWxlKHByb2Nlc3NlZFJ1bGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHN0eWxlc2hlZXQuY2FjaGVDbGFzc05hbWUoY2xhc3NOYW1lLCBrZXksIGFyZ3MsIHJ1bGVzVG9JbnNlcnQpO1xuICAgIH1cbn1cbmV4cG9ydCBmdW5jdGlvbiBzdHlsZVRvQ2xhc3NOYW1lKG9wdGlvbnMpIHtcbiAgICB2YXIgYXJncyA9IFtdO1xuICAgIGZvciAodmFyIF9pID0gMTsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgIGFyZ3NbX2kgLSAxXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgfVxuICAgIHZhciByZWdpc3RyYXRpb24gPSBzdHlsZVRvUmVnaXN0cmF0aW9uLmFwcGx5KHZvaWQgMCwgX19zcHJlYWRBcnJheShbb3B0aW9uc10sIGFyZ3MpKTtcbiAgICBpZiAocmVnaXN0cmF0aW9uKSB7XG4gICAgICAgIGFwcGx5UmVnaXN0cmF0aW9uKHJlZ2lzdHJhdGlvbiwgb3B0aW9ucy5zcGVjaWZpY2l0eU11bHRpcGxpZXIpO1xuICAgICAgICByZXR1cm4gcmVnaXN0cmF0aW9uLmNsYXNzTmFtZTtcbiAgICB9XG4gICAgcmV0dXJuICcnO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3R5bGVUb0NsYXNzTmFtZS5qcy5tYXAiLCIvKipcbiAqIFNwbGl0IGEgc3RyaW5nIGludG8gdG9rZW5zIHNlcGFyYXRlZCBieSB3aGl0ZXNwYWNlLCBleGNlcHQgYWxsIHRleHQgd2l0aGluIHBhcmVudGhlc2VzXG4gKiBpcyB0cmVhdGVkIGFzIGEgc2luZ2xlIHRva2VuICh3aGl0ZXNwYWNlIGlzIGlnbm9yZWQgd2l0aGluIHBhcmVudGhlc2VzKS5cbiAqXG4gKiBVbmxpa2UgU3RyaW5nLnNwbGl0KCcgJyksIG11bHRpcGxlIGNvbnNlY3V0aXZlIHNwYWNlIGNoYXJhY3RlcnMgYXJlIGNvbGxhcHNlZCBhbmRcbiAqIHJlbW92ZWQgZnJvbSB0aGUgcmV0dXJuZWQgYXJyYXkgKGluY2x1ZGluZyBsZWFkaW5nIGFuZCB0cmFpbGluZyBzcGFjZXMpLlxuICpcbiAqIEZvciBleGFtcGxlOlxuICogYHRva2VuaXplV2l0aFBhcmVudGhlc2VzKFwiM3B4IGNhbGModmFyKC0teCkgLyAyKSA5cHggICAgMCBcIilgXG4gKiAgID0+IGBbXCIzcHhcIiwgXCJjYWxjKHZhcigtLXgpIC8gMilcIiwgXCI5cHhcIiwgXCIwXCJdYFxuICpcbiAqIEByZXR1cm5zIFRoZSBhcnJheSBvZiB0b2tlbnMuIFJldHVybnMgYW4gZW1wdHkgYXJyYXkgaWYgdGhlIHN0cmluZyB3YXMgZW1wdHkgb3IgY29udGFpbmVkIG9ubHkgd2hpdGVzcGFjZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRva2VuaXplV2l0aFBhcmVudGhlc2VzKHZhbHVlKSB7XG4gICAgdmFyIHBhcnRzID0gW107XG4gICAgdmFyIHBhcnRTdGFydCA9IDA7XG4gICAgdmFyIHBhcmVucyA9IDA7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB2YWx1ZS5sZW5ndGg7IGkrKykge1xuICAgICAgICBzd2l0Y2ggKHZhbHVlW2ldKSB7XG4gICAgICAgICAgICBjYXNlICcoJzpcbiAgICAgICAgICAgICAgICBwYXJlbnMrKztcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJyknOlxuICAgICAgICAgICAgICAgIGlmIChwYXJlbnMpIHtcbiAgICAgICAgICAgICAgICAgICAgcGFyZW5zLS07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnXFx0JzpcbiAgICAgICAgICAgIGNhc2UgJyAnOlxuICAgICAgICAgICAgICAgIGlmICghcGFyZW5zKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIEFkZCB0aGUgbmV3IHBhcnQgaWYgaXQncyBub3QgYW4gZW1wdHkgc3RyaW5nXG4gICAgICAgICAgICAgICAgICAgIGlmIChpID4gcGFydFN0YXJ0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJ0cy5wdXNoKHZhbHVlLnN1YnN0cmluZyhwYXJ0U3RhcnQsIGkpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBwYXJ0U3RhcnQgPSBpICsgMTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8gQWRkIHRoZSBsYXN0IHBhcnRcbiAgICBpZiAocGFydFN0YXJ0IDwgdmFsdWUubGVuZ3RoKSB7XG4gICAgICAgIHBhcnRzLnB1c2godmFsdWUuc3Vic3RyaW5nKHBhcnRTdGFydCkpO1xuICAgIH1cbiAgICByZXR1cm4gcGFydHM7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD10b2tlbml6ZVdpdGhQYXJlbnRoZXNlcy5qcy5tYXAiLCJpbXBvcnQgeyBjb25jYXRTdHlsZVNldHMgfSBmcm9tICcuL2NvbmNhdFN0eWxlU2V0cyc7XG5pbXBvcnQgeyBleHRyYWN0U3R5bGVQYXJ0cyB9IGZyb20gJy4vZXh0cmFjdFN0eWxlUGFydHMnO1xuaW1wb3J0IHsgZ2V0U3R5bGVPcHRpb25zIH0gZnJvbSAnLi9TdHlsZU9wdGlvbnNTdGF0ZSc7XG5pbXBvcnQgeyBhcHBseVJlZ2lzdHJhdGlvbiwgc3R5bGVUb1JlZ2lzdHJhdGlvbiB9IGZyb20gJy4vc3R5bGVUb0NsYXNzTmFtZSc7XG4vKipcbiAqIFRha2VzIGluIG9uZSBvciBtb3JlIHN0eWxlIHNldCBvYmplY3RzLCBlYWNoIGNvbnNpc3Rpbmcgb2YgYSBzZXQgb2YgYXJlYXMsXG4gKiBlYWNoIHdoaWNoIHdpbGwgcHJvZHVjZSBhIGNsYXNzIG5hbWUuIFVzaW5nIHRoaXMgaXMgYW5hbG9nb3VzIHRvIGNhbGxpbmdcbiAqIGBtZXJnZVN0eWxlc2AgZm9yIGVhY2ggcHJvcGVydHkgaW4gdGhlIG9iamVjdCwgYnV0IGVuc3VyZXMgd2UgbWFpbnRhaW4gdGhlXG4gKiBzZXQgb3JkZXJpbmcgd2hlbiBtdWx0aXBsZSBzdHlsZSBzZXRzIGFyZSBtZXJnZWQuXG4gKlxuICogQHBhcmFtIHN0eWxlU2V0cyAtIE9uZSBvciBtb3JlIHN0eWxlIHNldHMgdG8gYmUgbWVyZ2VkLlxuICovXG5leHBvcnQgZnVuY3Rpb24gbWVyZ2VTdHlsZVNldHMoKSB7XG4gICAgdmFyIHN0eWxlU2V0cyA9IFtdO1xuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgIHN0eWxlU2V0c1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgIH1cbiAgICByZXR1cm4gbWVyZ2VDc3NTZXRzKHN0eWxlU2V0cywgZ2V0U3R5bGVPcHRpb25zKCkpO1xufVxuLyoqXG4gKiBUYWtlcyBpbiBvbmUgb3IgbW9yZSBzdHlsZSBzZXQgb2JqZWN0cywgZWFjaDFjb25zaXN0aW5nIG9mIGEgc2V0IG9mIGFyZWFzLFxuICogZWFjaCB3aGljaCB3aWxsIHByb2R1Y2UgYSBjbGFzcyBuYW1lLiBVc2luZyB0aGlzIGlzIGFuYWxvZ291cyB0byBjYWxsaW5nXG4gKiBgbWVyZ2VDc3NgIGZvciBlYWNoIHByb3BlcnR5IGluIHRoZSBvYmplY3QsIGJ1dCBlbnN1cmVzIHRoZVxuICogc2V0IG9yZGVyaW5nIHdoZW4gbXVsdGlwbGUgc3R5bGUgc2V0cyBhcmUgbWVyZ2VkLlxuICpcbiAqIEBwYXJhbSBzdHlsZVNldHMgLSBPbmUgb3IgbW9yZSBzdHlsZSBzZXRzIHRvIGJlIG1lcmdlZC5cbiAqIEBwYXJhbSBvcHRpb25zIC0gKG9wdGlvbmFsKSBPcHRpb25zIHRvIHVzZSB3aGVuIGNyZWF0aW5nIHJ1bGVzLlxuICovXG5leHBvcnQgZnVuY3Rpb24gbWVyZ2VDc3NTZXRzKHN0eWxlU2V0cywgb3B0aW9ucykge1xuICAgIHZhciBjbGFzc05hbWVTZXQgPSB7IHN1YkNvbXBvbmVudFN0eWxlczoge30gfTtcbiAgICB2YXIgc3R5bGVTZXQgPSBzdHlsZVNldHNbMF07XG4gICAgaWYgKCFzdHlsZVNldCAmJiBzdHlsZVNldHMubGVuZ3RoIDw9IDEpIHtcbiAgICAgICAgcmV0dXJuIHsgc3ViQ29tcG9uZW50U3R5bGVzOiB7fSB9O1xuICAgIH1cbiAgICB2YXIgY29uY2F0ZW5hdGVkU3R5bGVTZXQgPSBjb25jYXRTdHlsZVNldHMuYXBwbHkodm9pZCAwLCBzdHlsZVNldHMpO1xuICAgIHZhciByZWdpc3RyYXRpb25zID0gW107XG4gICAgZm9yICh2YXIgc3R5bGVTZXRBcmVhIGluIGNvbmNhdGVuYXRlZFN0eWxlU2V0KSB7XG4gICAgICAgIGlmIChjb25jYXRlbmF0ZWRTdHlsZVNldC5oYXNPd25Qcm9wZXJ0eShzdHlsZVNldEFyZWEpKSB7XG4gICAgICAgICAgICBpZiAoc3R5bGVTZXRBcmVhID09PSAnc3ViQ29tcG9uZW50U3R5bGVzJykge1xuICAgICAgICAgICAgICAgIGNsYXNzTmFtZVNldC5zdWJDb21wb25lbnRTdHlsZXMgPSBjb25jYXRlbmF0ZWRTdHlsZVNldC5zdWJDb21wb25lbnRTdHlsZXMgfHwge307XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgc3R5bGVzID0gY29uY2F0ZW5hdGVkU3R5bGVTZXRbc3R5bGVTZXRBcmVhXTtcbiAgICAgICAgICAgIHZhciBfYSA9IGV4dHJhY3RTdHlsZVBhcnRzKHN0eWxlcyksIGNsYXNzZXMgPSBfYS5jbGFzc2VzLCBvYmplY3RzID0gX2Eub2JqZWN0cztcbiAgICAgICAgICAgIGlmIChvYmplY3RzID09PSBudWxsIHx8IG9iamVjdHMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9iamVjdHMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgdmFyIHJlZ2lzdHJhdGlvbiA9IHN0eWxlVG9SZWdpc3RyYXRpb24ob3B0aW9ucyB8fCB7fSwgeyBkaXNwbGF5TmFtZTogc3R5bGVTZXRBcmVhIH0sIG9iamVjdHMpO1xuICAgICAgICAgICAgICAgIGlmIChyZWdpc3RyYXRpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgcmVnaXN0cmF0aW9ucy5wdXNoKHJlZ2lzdHJhdGlvbik7XG4gICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZVNldFtzdHlsZVNldEFyZWFdID0gY2xhc3Nlcy5jb25jYXQoW3JlZ2lzdHJhdGlvbi5jbGFzc05hbWVdKS5qb2luKCcgJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lU2V0W3N0eWxlU2V0QXJlYV0gPSBjbGFzc2VzLmpvaW4oJyAnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBmb3IgKHZhciBfaSA9IDAsIHJlZ2lzdHJhdGlvbnNfMSA9IHJlZ2lzdHJhdGlvbnM7IF9pIDwgcmVnaXN0cmF0aW9uc18xLmxlbmd0aDsgX2krKykge1xuICAgICAgICB2YXIgcmVnaXN0cmF0aW9uID0gcmVnaXN0cmF0aW9uc18xW19pXTtcbiAgICAgICAgaWYgKHJlZ2lzdHJhdGlvbikge1xuICAgICAgICAgICAgYXBwbHlSZWdpc3RyYXRpb24ocmVnaXN0cmF0aW9uLCBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuc3BlY2lmaWNpdHlNdWx0aXBsaWVyKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gY2xhc3NOYW1lU2V0O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWVyZ2VTdHlsZVNldHMuanMubWFwIiwiaW1wb3J0IHsgX2lzU1NSIH0gZnJvbSAnLi9zZXRTU1InO1xuLyoqXG4gKiBIZWxwZXIgdG8gZ2V0IHRoZSBkb2N1bWVudCBvYmplY3QuIE5vdGUgdGhhdCBpbiBwb3B1cCB3aW5kb3cgY2FzZXMsIGRvY3VtZW50XG4gKiBtaWdodCBiZSB0aGUgd3JvbmcgZG9jdW1lbnQsIHdoaWNoIGlzIHdoeSB3ZSBsb29rIGF0IG93bmVyRG9jdW1lbnQgZm9yIHRoZVxuICogdHJ1dGguIEFsc28gbm90ZSB0aGF0IHRoZSBTU1IgZmxhZyBpcyB1c2VkIHRvIHRlc3Qgc3NyIHNjZW5hcmlvcyBldmVuIGlmXG4gKiBkb2N1bWVudCBpcyBkZWZpbmVkIChmcm9tIEpTRE9NIGZvciBleGFtcGxlLilcbiAqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXREb2N1bWVudChyb290RWxlbWVudCkge1xuICAgIGlmIChfaXNTU1IgfHwgdHlwZW9mIGRvY3VtZW50ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgdmFyIGVsID0gcm9vdEVsZW1lbnQ7XG4gICAgICAgIHJldHVybiBlbCAmJiBlbC5vd25lckRvY3VtZW50ID8gZWwub3duZXJEb2N1bWVudCA6IGRvY3VtZW50O1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWdldERvY3VtZW50LmpzLm1hcCIsImltcG9ydCB7IGdldFdpbmRvdyB9IGZyb20gJy4vZG9tL2dldFdpbmRvdyc7XG4vKipcbiAqIEZldGNoZXMgYW4gaXRlbSBmcm9tIHNlc3Npb24gc3RvcmFnZSB3aXRob3V0IHRocm93aW5nIGFuIGV4Y2VwdGlvblxuICogQHBhcmFtIGtleSBUaGUga2V5IG9mIHRoZSBpdGVtIHRvIGZldGNoIGZyb20gc2Vzc2lvbiBzdG9yYWdlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRJdGVtKGtleSkge1xuICAgIHZhciByZXN1bHQgPSBudWxsO1xuICAgIHRyeSB7XG4gICAgICAgIHZhciB3aW4gPSBnZXRXaW5kb3coKTtcbiAgICAgICAgcmVzdWx0ID0gd2luID8gd2luLnNlc3Npb25TdG9yYWdlLmdldEl0ZW0oa2V5KSA6IG51bGw7XG4gICAgfVxuICAgIGNhdGNoIChlKSB7XG4gICAgICAgIC8qIEVhdCB0aGUgZXhjZXB0aW9uICovXG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59XG4vKipcbiAqIEluc2VydHMgYW4gaXRlbSBpbnRvIHNlc3Npb24gc3RvcmFnZSB3aXRob3V0IHRocm93aW5nIGFuIGV4Y2VwdGlvblxuICogQHBhcmFtIGtleSBUaGUga2V5IG9mIHRoZSBpdGVtIHRvIGFkZCB0byBzZXNzaW9uIHN0b3JhZ2VcbiAqIEBwYXJhbSBkYXRhIFRoZSBkYXRhIHRvIHB1dCBpbnRvIHNlc3Npb24gc3RvcmFnZVxuICovXG5leHBvcnQgZnVuY3Rpb24gc2V0SXRlbShrZXksIGRhdGEpIHtcbiAgICB2YXIgX2E7XG4gICAgdHJ5IHtcbiAgICAgICAgKF9hID0gZ2V0V2luZG93KCkpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5zZXNzaW9uU3RvcmFnZS5zZXRJdGVtKGtleSwgZGF0YSk7XG4gICAgfVxuICAgIGNhdGNoIChlKSB7XG4gICAgICAgIC8qIEVhdCB0aGUgZXhjZXB0aW9uICovXG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2Vzc2lvblN0b3JhZ2UuanMubWFwIiwiaW1wb3J0IHsgS2V5Q29kZXMgfSBmcm9tICcuL0tleUNvZGVzJztcbmltcG9ydCB7IGdldERvY3VtZW50IH0gZnJvbSAnLi9kb20vZ2V0RG9jdW1lbnQnO1xuaW1wb3J0IHsgZ2V0SXRlbSwgc2V0SXRlbSB9IGZyb20gJy4vc2Vzc2lvblN0b3JhZ2UnO1xuaW1wb3J0IHsgc2V0UlRMIGFzIG1lcmdlU3R5bGVzU2V0UlRMIH0gZnJvbSAnQGZsdWVudHVpL21lcmdlLXN0eWxlcyc7XG52YXIgUlRMX0xPQ0FMX1NUT1JBR0VfS0VZID0gJ2lzUlRMJztcbi8vIERlZmF1bHQgdG8gdW5kZWZpbmVkIHNvIHRoYXQgd2UgaW5pdGlhbGl6ZSBvbiBmaXJzdCByZWFkLlxudmFyIF9pc1JUTDtcbi8qKlxuICogR2V0cyB0aGUgcnRsIHN0YXRlIG9mIHRoZSBwYWdlIChyZXR1cm5zIHRydWUgaWYgaW4gcnRsLilcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldFJUTCh0aGVtZSkge1xuICAgIGlmICh0aGVtZSA9PT0gdm9pZCAwKSB7IHRoZW1lID0ge307IH1cbiAgICBpZiAodGhlbWUucnRsICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIHRoZW1lLnJ0bDtcbiAgICB9XG4gICAgaWYgKF9pc1JUTCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIC8vIEZhYnJpYyBzdXBwb3J0cyBwZXJzaXN0aW5nIHRoZSBSVEwgc2V0dGluZyBiZXR3ZWVuIHBhZ2UgcmVmcmVzaGVzIHZpYSBzZXNzaW9uIHN0b3JhZ2VcbiAgICAgICAgdmFyIHNhdmVkUlRMID0gZ2V0SXRlbShSVExfTE9DQUxfU1RPUkFHRV9LRVkpO1xuICAgICAgICBpZiAoc2F2ZWRSVEwgIT09IG51bGwpIHtcbiAgICAgICAgICAgIF9pc1JUTCA9IHNhdmVkUlRMID09PSAnMSc7XG4gICAgICAgICAgICBzZXRSVEwoX2lzUlRMKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgZG9jID0gZ2V0RG9jdW1lbnQoKTtcbiAgICAgICAgaWYgKF9pc1JUTCA9PT0gdW5kZWZpbmVkICYmIGRvYykge1xuICAgICAgICAgICAgX2lzUlRMID0gKChkb2MuYm9keSAmJiBkb2MuYm9keS5nZXRBdHRyaWJ1dGUoJ2RpcicpKSB8fCBkb2MuZG9jdW1lbnRFbGVtZW50LmdldEF0dHJpYnV0ZSgnZGlyJykpID09PSAncnRsJztcbiAgICAgICAgICAgIG1lcmdlU3R5bGVzU2V0UlRMKF9pc1JUTCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuICEhX2lzUlRMO1xufVxuLyoqXG4gKiBTZXRzIHRoZSBydGwgc3RhdGUgb2YgdGhlIHBhZ2UgKGJ5IGFkanVzdGluZyB0aGUgZGlyIGF0dHJpYnV0ZSBvZiB0aGUgaHRtbCBlbGVtZW50LilcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNldFJUTChpc1JUTCwgcGVyc2lzdFNldHRpbmcpIHtcbiAgICBpZiAocGVyc2lzdFNldHRpbmcgPT09IHZvaWQgMCkgeyBwZXJzaXN0U2V0dGluZyA9IGZhbHNlOyB9XG4gICAgdmFyIGRvYyA9IGdldERvY3VtZW50KCk7XG4gICAgaWYgKGRvYykge1xuICAgICAgICBkb2MuZG9jdW1lbnRFbGVtZW50LnNldEF0dHJpYnV0ZSgnZGlyJywgaXNSVEwgPyAncnRsJyA6ICdsdHInKTtcbiAgICB9XG4gICAgaWYgKHBlcnNpc3RTZXR0aW5nKSB7XG4gICAgICAgIHNldEl0ZW0oUlRMX0xPQ0FMX1NUT1JBR0VfS0VZLCBpc1JUTCA/ICcxJyA6ICcwJyk7XG4gICAgfVxuICAgIF9pc1JUTCA9IGlzUlRMO1xuICAgIG1lcmdlU3R5bGVzU2V0UlRMKF9pc1JUTCk7XG59XG4vKipcbiAqIFJldHVybnMgdGhlIGdpdmVuIGtleSwgYnV0IGZsaXBzIHJpZ2h0L2xlZnQgYXJyb3dzIGlmIG5lY2Vzc2FyeS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldFJUTFNhZmVLZXlDb2RlKGtleSwgdGhlbWUpIHtcbiAgICBpZiAodGhlbWUgPT09IHZvaWQgMCkgeyB0aGVtZSA9IHt9OyB9XG4gICAgaWYgKGdldFJUTCh0aGVtZSkpIHtcbiAgICAgICAgaWYgKGtleSA9PT0gS2V5Q29kZXMubGVmdCkge1xuICAgICAgICAgICAga2V5ID0gS2V5Q29kZXMucmlnaHQ7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoa2V5ID09PSBLZXlDb2Rlcy5yaWdodCkge1xuICAgICAgICAgICAga2V5ID0gS2V5Q29kZXMubGVmdDtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4ga2V5O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cnRsLmpzLm1hcCIsImltcG9ydCB7IG1lcmdlQ3NzU2V0cywgU3R5bGVzaGVldCB9IGZyb20gJ0BmbHVlbnR1aS9tZXJnZS1zdHlsZXMnO1xuaW1wb3J0IHsgZ2V0UlRMIH0gZnJvbSAnLi9ydGwnO1xuaW1wb3J0IHsgZ2V0V2luZG93IH0gZnJvbSAnLi9kb20nO1xudmFyIE1BWF9DQUNIRV9DT1VOVCA9IDUwO1xudmFyIERFRkFVTFRfU1BFQ0lGSUNJVFlfTVVMVElQTElFUiA9IDU7XG52YXIgX21lbW9pemVkQ2xhc3NOYW1lcyA9IDA7XG52YXIgc3R5bGVzaGVldCA9IFN0eWxlc2hlZXQuZ2V0SW5zdGFuY2UoKTtcbmlmIChzdHlsZXNoZWV0ICYmIHN0eWxlc2hlZXQub25SZXNldCkge1xuICAgIHN0eWxlc2hlZXQub25SZXNldChmdW5jdGlvbiAoKSB7IHJldHVybiBfbWVtb2l6ZWRDbGFzc05hbWVzKys7IH0pO1xufVxuLy8gTm90ZSB0aGF0IGJlY2F1c2Ugb2YgdGhlIGNhY2hpbmcgbmF0dXJlIHdpdGhpbiB0aGUgY2xhc3NOYW1lcyBtZW1vaXphdGlvbixcbi8vIEkndmUgZGlzYWJsZWQgdGhpcyBydWxlIHRvIHNpbXBseSBiZSBhYmxlIHRvIHdvcmsgd2l0aCBhbnkgdHlwZXMuXG4vKiBlc2xpbnQtZGlzYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55ICovXG4vLyBUaGlzIHJlcHJlc2VudHMgYSBwcm9wIHdlIGF0dGFjaCB0byBlYWNoIE1hcCB0byBpbmRpY2F0ZSB0aGUgY2FjaGVkIHJldHVybiB2YWx1ZVxuLy8gYXNzb2NpYXRlZCB3aXRoIHRoZSBncmFwaCBub2RlLlxudmFyIHJldFZhbCA9ICdfX3JldHZhbF9fJztcbi8qKlxuICogQ3JlYXRlcyBhIGdldENsYXNzTmFtZXMgZnVuY3Rpb24gd2hpY2ggY2FsbHMgZ2V0U3R5bGVzIGdpdmVuIHRoZSBwcm9wcywgYW5kIGluamVjdHMgdGhlbVxuICogaW50byBtZXJnZVN0eWxlU2V0cy5cbiAqXG4gKiBOb3RlIHRoYXQgdGhlIHByb3BzIHlvdSBwYXNzIGluIG9uIGV2ZXJ5IHJlbmRlciBzaG91bGQgYmUgaW4gdGhlIHNhbWUgb3JkZXIgYW5kXG4gKiBpbW11dGFibGUgKG51bWJlcnMsIHN0cmluZ3MsIGFuZCBib29sZWFucykuIFRoaXMgd2lsbCBhbGxvdyB0aGUgcmVzdWx0cyB0byBiZSBtZW1vaXplZC4gVmlvbGF0aW5nXG4gKiB0aGVzZSB3aWxsIGNhdXNlIGV4dHJhIHJlY2FsY3MgdG8gb2NjdXIuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjbGFzc05hbWVzRnVuY3Rpb24ob3B0aW9ucykge1xuICAgIC8vIFdlIGJ1aWxkIGEgdHJpZSB3aGVyZSBlYWNoIG5vZGUgaXMgYSBNYXAuIFRoZSBtYXAgZW50cnkga2V5IHJlcHJlc2VudHMgYW4gYXJndW1lbnRcbiAgICAvLyB2YWx1ZSwgYW5kIHRoZSBlbnRyeSB2YWx1ZSBpcyBhbm90aGVyIG5vZGUgKE1hcCkuIEVhY2ggbm9kZSBoYXMgYSBgX19yZXR2YWxfX2BcbiAgICAvLyBwcm9wZXJ0eSB3aGljaCBpcyB1c2VkIHRvIGhvbGQgdGhlIGNhY2hlZCByZXNwb25zZS5cbiAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7IG9wdGlvbnMgPSB7fTsgfVxuICAgIC8vIFRvIGRlcml2ZSB0aGUgcmVzcG9uc2UsIHdlIGNhbiBzaW1wbHkgZW5zdXJlIHRoZSBhcmd1bWVudHMgYXJlIGFkZGVkIG9yIGFscmVhZHlcbiAgICAvLyBleGlzdCBpbiB0aGUgdHJpZS4gQXQgdGhlIGxhc3Qgbm9kZSwgaWYgdGhlcmUgaXMgYSBgX19yZXR2YWxfX2Agd2UgcmV0dXJuIHRoYXQuIE90aGVyd2lzZVxuICAgIC8vIHdlIGNhbGwgdGhlIGBnZXRTdHlsZXNgIGFwaSB0byBldmFsdWF0ZSwgY2FjaGUgb24gdGhlIHByb3BlcnR5LCBhbmQgcmV0dXJuIHRoYXQuXG4gICAgdmFyIG1hcCA9IG5ldyBNYXAoKTtcbiAgICB2YXIgc3R5bGVDYWxjQ291bnQgPSAwO1xuICAgIHZhciBnZXRDbGFzc05hbWVzQ291bnQgPSAwO1xuICAgIHZhciBjdXJyZW50TWVtb2l6ZWRDbGFzc05hbWVzID0gX21lbW9pemVkQ2xhc3NOYW1lcztcbiAgICB2YXIgZ2V0Q2xhc3NOYW1lcyA9IGZ1bmN0aW9uIChzdHlsZUZ1bmN0aW9uT3JPYmplY3QsIHN0eWxlUHJvcHMpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICBpZiAoc3R5bGVQcm9wcyA9PT0gdm9pZCAwKSB7IHN0eWxlUHJvcHMgPSB7fTsgfVxuICAgICAgICAvLyBJZiB1c2VTdGF0aWNTdHlsZXMgaXMgdHJ1ZSwgc3R5bGVGdW5jdGlvbk9yT2JqZWN0IHJldHVybnMgc2xvdCB0byBjbGFzc25hbWUgbWFwcGluZ3MuXG4gICAgICAgIC8vIElmIHRoZXJlIGlzIGFsc28gbm8gc3R5bGUgb3ZlcnJpZGVzLCB3ZSBjYW4gc2tpcCBtZXJnZSBzdHlsZXMgY29tcGxldGVseSBhbmRcbiAgICAgICAgLy8gc2ltcGx5IHJldHVybiB0aGUgcmVzdWx0IGZyb20gdGhlIHN0eWxlIGZ1bmNpb24uXG4gICAgICAgIGlmIChvcHRpb25zLnVzZVN0YXRpY1N0eWxlcyAmJlxuICAgICAgICAgICAgdHlwZW9mIHN0eWxlRnVuY3Rpb25Pck9iamVjdCA9PT0gJ2Z1bmN0aW9uJyAmJlxuICAgICAgICAgICAgc3R5bGVGdW5jdGlvbk9yT2JqZWN0Ll9fbm9TdHlsZU92ZXJyaWRlX18pIHtcbiAgICAgICAgICAgIHJldHVybiBzdHlsZUZ1bmN0aW9uT3JPYmplY3Qoc3R5bGVQcm9wcyk7XG4gICAgICAgIH1cbiAgICAgICAgZ2V0Q2xhc3NOYW1lc0NvdW50Kys7XG4gICAgICAgIHZhciBjdXJyZW50ID0gbWFwO1xuICAgICAgICB2YXIgdGhlbWUgPSBzdHlsZVByb3BzLnRoZW1lO1xuICAgICAgICB2YXIgcnRsID0gdGhlbWUgJiYgdGhlbWUucnRsICE9PSB1bmRlZmluZWQgPyB0aGVtZS5ydGwgOiBnZXRSVEwoKTtcbiAgICAgICAgdmFyIGRpc2FibGVDYWNoaW5nID0gb3B0aW9ucy5kaXNhYmxlQ2FjaGluZztcbiAgICAgICAgLy8gT24gcmVzZXQgb2Ygb3VyIHN0eWxlc2hlZXQsIHJlc2V0IG1lbW9pemVkIGNhY2hlLlxuICAgICAgICBpZiAoY3VycmVudE1lbW9pemVkQ2xhc3NOYW1lcyAhPT0gX21lbW9pemVkQ2xhc3NOYW1lcykge1xuICAgICAgICAgICAgY3VycmVudE1lbW9pemVkQ2xhc3NOYW1lcyA9IF9tZW1vaXplZENsYXNzTmFtZXM7XG4gICAgICAgICAgICBtYXAgPSBuZXcgTWFwKCk7XG4gICAgICAgICAgICBzdHlsZUNhbGNDb3VudCA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFvcHRpb25zLmRpc2FibGVDYWNoaW5nKSB7XG4gICAgICAgICAgICBjdXJyZW50ID0gX3RyYXZlcnNlTWFwKG1hcCwgc3R5bGVGdW5jdGlvbk9yT2JqZWN0KTtcbiAgICAgICAgICAgIGN1cnJlbnQgPSBfdHJhdmVyc2VNYXAoY3VycmVudCwgc3R5bGVQcm9wcyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRpc2FibGVDYWNoaW5nIHx8ICFjdXJyZW50W3JldFZhbF0pIHtcbiAgICAgICAgICAgIGlmIChzdHlsZUZ1bmN0aW9uT3JPYmplY3QgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGN1cnJlbnRbcmV0VmFsXSA9IHt9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgY3VycmVudFtyZXRWYWxdID0gbWVyZ2VDc3NTZXRzKFtcbiAgICAgICAgICAgICAgICAgICAgKHR5cGVvZiBzdHlsZUZ1bmN0aW9uT3JPYmplY3QgPT09ICdmdW5jdGlvbidcbiAgICAgICAgICAgICAgICAgICAgICAgID8gc3R5bGVGdW5jdGlvbk9yT2JqZWN0KHN0eWxlUHJvcHMpXG4gICAgICAgICAgICAgICAgICAgICAgICA6IHN0eWxlRnVuY3Rpb25Pck9iamVjdCksXG4gICAgICAgICAgICAgICAgXSwgeyBydGw6ICEhcnRsLCBzcGVjaWZpY2l0eU11bHRpcGxpZXI6IG9wdGlvbnMudXNlU3RhdGljU3R5bGVzID8gREVGQVVMVF9TUEVDSUZJQ0lUWV9NVUxUSVBMSUVSIDogdW5kZWZpbmVkIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFkaXNhYmxlQ2FjaGluZykge1xuICAgICAgICAgICAgICAgIHN0eWxlQ2FsY0NvdW50Kys7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHN0eWxlQ2FsY0NvdW50ID4gKG9wdGlvbnMuY2FjaGVTaXplIHx8IE1BWF9DQUNIRV9DT1VOVCkpIHtcbiAgICAgICAgICAgIHZhciB3aW4gPSBnZXRXaW5kb3coKTtcbiAgICAgICAgICAgIGlmICgoX2EgPSB3aW4gPT09IG51bGwgfHwgd2luID09PSB2b2lkIDAgPyB2b2lkIDAgOiB3aW4uRmFicmljQ29uZmlnKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuZW5hYmxlQ2xhc3NOYW1lQ2FjaGVGdWxsV2FybmluZykge1xuICAgICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKFwiU3R5bGVzIGFyZSBiZWluZyByZWNhbGN1bGF0ZWQgdG9vIGZyZXF1ZW50bHkuIENhY2hlIG1pc3MgcmF0ZSBpcyBcIiArIHN0eWxlQ2FsY0NvdW50ICsgXCIvXCIgKyBnZXRDbGFzc05hbWVzQ291bnQgKyBcIi5cIik7XG4gICAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICAgICAgICAgICAgICBjb25zb2xlLnRyYWNlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBtYXAuY2xlYXIoKTtcbiAgICAgICAgICAgIHN0eWxlQ2FsY0NvdW50ID0gMDtcbiAgICAgICAgICAgIC8vIE11dGF0ZSB0aGUgb3B0aW9ucyBwYXNzZWQgaW4sIHRoYXQncyBhbGwgd2UgY2FuIGRvLlxuICAgICAgICAgICAgb3B0aW9ucy5kaXNhYmxlQ2FjaGluZyA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgLy8gTm90ZTogdGhlIHJldFZhbCBpcyBhbiBhdHRhY2hlZCBwcm9wZXJ0eSBvbiB0aGUgTWFwOyBub3QgYSBrZXkgaW4gdGhlIE1hcC4gV2UgdXNlIHRoaXMgYXR0YWNoZWQgcHJvcGVydHkgdG9cbiAgICAgICAgLy8gY2FjaGUgdGhlIHJldHVybiB2YWx1ZSBmb3IgdGhpcyBicmFuY2ggb2YgdGhlIGdyYXBoLlxuICAgICAgICByZXR1cm4gY3VycmVudFtyZXRWYWxdO1xuICAgIH07XG4gICAgcmV0dXJuIGdldENsYXNzTmFtZXM7XG59XG5mdW5jdGlvbiBfdHJhdmVyc2VFZGdlKGN1cnJlbnQsIHZhbHVlKSB7XG4gICAgdmFsdWUgPSBfbm9ybWFsaXplVmFsdWUodmFsdWUpO1xuICAgIGlmICghY3VycmVudC5oYXModmFsdWUpKSB7XG4gICAgICAgIGN1cnJlbnQuc2V0KHZhbHVlLCBuZXcgTWFwKCkpO1xuICAgIH1cbiAgICByZXR1cm4gY3VycmVudC5nZXQodmFsdWUpO1xufVxuZnVuY3Rpb24gX3RyYXZlcnNlTWFwKGN1cnJlbnQsIGlucHV0cykge1xuICAgIGlmICh0eXBlb2YgaW5wdXRzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHZhciBjYWNoZWRJbnB1dHNGcm9tU3R5bGVkID0gaW5wdXRzLl9fY2FjaGVkSW5wdXRzX187XG4gICAgICAgIGlmIChjYWNoZWRJbnB1dHNGcm9tU3R5bGVkKSB7XG4gICAgICAgICAgICAvLyBUaGUgc3R5bGVkIGhlbHBlciB3aWxsIGdlbmVyYXRlIHRoZSBzdHlsZXMgZnVuY3Rpb24gYW5kIHdpbGwgYXR0YWNoIHRoZSBjYWNoZWRcbiAgICAgICAgICAgIC8vIGlucHV0cyAoY29uc2lzdGluZyBvZiB0aGUgZGVmYXVsdCBzdHlsZXMsIGN1c3RvbXppZWQgc3R5bGVzLCBhbmQgdXNlciBwcm92aWRlZCBzdHlsZXMuKVxuICAgICAgICAgICAgLy8gVGhlc2Ugc2hvdWxkIGJlIHVzZWQgYXMgY2FjaGUga2V5cyBmb3IgZGVyaXZpbmcgdGhlIG1lbW9pemVkIHZhbHVlLlxuICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBfYSA9IGlucHV0cy5fX2NhY2hlZElucHV0c19fOyBfaSA8IF9hLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgICAgIHZhciBpbnB1dCA9IF9hW19pXTtcbiAgICAgICAgICAgICAgICBjdXJyZW50ID0gX3RyYXZlcnNlRWRnZShjdXJyZW50LCBpbnB1dCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjdXJyZW50ID0gX3RyYXZlcnNlRWRnZShjdXJyZW50LCBpbnB1dHMpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2UgaWYgKHR5cGVvZiBpbnB1dHMgPT09ICdvYmplY3QnKSB7XG4gICAgICAgIGZvciAodmFyIHByb3BOYW1lIGluIGlucHV0cykge1xuICAgICAgICAgICAgaWYgKGlucHV0cy5oYXNPd25Qcm9wZXJ0eShwcm9wTmFtZSkpIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50ID0gX3RyYXZlcnNlRWRnZShjdXJyZW50LCBpbnB1dHNbcHJvcE5hbWVdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gY3VycmVudDtcbn1cbmZ1bmN0aW9uIF9ub3JtYWxpemVWYWx1ZSh2YWx1ZSkge1xuICAgIHN3aXRjaCAodmFsdWUpIHtcbiAgICAgICAgY2FzZSB1bmRlZmluZWQ6XG4gICAgICAgICAgICByZXR1cm4gJ19fdW5kZWZpbmVkX18nO1xuICAgICAgICBjYXNlIG51bGw6XG4gICAgICAgICAgICByZXR1cm4gJ19fbnVsbF9fJztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jbGFzc05hbWVzRnVuY3Rpb24uanMubWFwIiwiLyoqXG4gKiBUaGUgcG9zc2libGUgbWV0aG9kcyB0aGF0IGNhbiBiZSB1c2VkIHRvIGZpdCB0aGUgaW1hZ2UuXG4gKiB7QGRvY0NhdGVnb3J5IEltYWdlfVxuICovXG5leHBvcnQgdmFyIEltYWdlRml0O1xuKGZ1bmN0aW9uIChJbWFnZUZpdCkge1xuICAgIC8qKlxuICAgICAqIFRoZSBpbWFnZSBpcyBub3Qgc2NhbGVkLiBUaGUgaW1hZ2UgaXMgY2VudGVyZWQgYW5kIGNyb3BwZWQgd2l0aGluIHRoZSBjb250ZW50IGJveC5cbiAgICAgKi9cbiAgICBJbWFnZUZpdFtJbWFnZUZpdFtcImNlbnRlclwiXSA9IDBdID0gXCJjZW50ZXJcIjtcbiAgICAvKipcbiAgICAgKiBUaGUgaW1hZ2UgaXMgc2NhbGVkIHRvIG1haW50YWluIGl0cyBhc3BlY3QgcmF0aW8gd2hpbGUgYmVpbmcgZnVsbHkgY29udGFpbmVkIHdpdGhpbiB0aGUgZnJhbWUuIFRoZSBpbWFnZSB3aWxsXG4gICAgICogYmUgY2VudGVyZWQgaG9yaXpvbnRhbGx5IGFuZCB2ZXJ0aWNhbGx5IHdpdGhpbiB0aGUgZnJhbWUuIFRoZSBzcGFjZSBpbiB0aGUgdG9wIGFuZCBib3R0b20gb3IgaW4gdGhlIHNpZGVzIG9mXG4gICAgICogdGhlIGZyYW1lIHdpbGwgYmUgZW1wdHkgZGVwZW5kaW5nIG9uIHRoZSBkaWZmZXJlbmNlIGluIGFzcGVjdCByYXRpbyBiZXR3ZWVuIHRoZSBpbWFnZSBhbmQgdGhlIGZyYW1lLlxuICAgICAqL1xuICAgIEltYWdlRml0W0ltYWdlRml0W1wiY29udGFpblwiXSA9IDFdID0gXCJjb250YWluXCI7XG4gICAgLyoqXG4gICAgICogVGhlIGltYWdlIGlzIHNjYWxlZCB0byBtYWludGFpbiBpdHMgYXNwZWN0IHJhdGlvIHdoaWxlIGZpbGxpbmcgdGhlIGZyYW1lLiBQb3J0aW9ucyBvZiB0aGUgaW1hZ2Ugd2lsbCBiZSBjcm9wcGVkXG4gICAgICogZnJvbSB0aGUgdG9wIGFuZCBib3R0b20sIG9yIHRoZSBzaWRlcywgZGVwZW5kaW5nIG9uIHRoZSBkaWZmZXJlbmNlIGluIGFzcGVjdCByYXRpbyBiZXR3ZWVuIHRoZSBpbWFnZSBhbmQgdGhlIGZyYW1lLlxuICAgICAqL1xuICAgIEltYWdlRml0W0ltYWdlRml0W1wiY292ZXJcIl0gPSAyXSA9IFwiY292ZXJcIjtcbiAgICAvKipcbiAgICAgKiBOZWl0aGVyIHRoZSBpbWFnZSBub3IgdGhlIGZyYW1lIGFyZSBzY2FsZWQuIElmIHRoZWlyIHNpemVzIGRvIG5vdCBtYXRjaCwgdGhlIGltYWdlIHdpbGwgZWl0aGVyIGJlIGNyb3BwZWQgb3IgdGhlXG4gICAgICogZnJhbWUgd2lsbCBoYXZlIGVtcHR5IHNwYWNlLlxuICAgICAqL1xuICAgIEltYWdlRml0W0ltYWdlRml0W1wibm9uZVwiXSA9IDNdID0gXCJub25lXCI7XG4gICAgLyoqXG4gICAgICogVGhlIGltYWdlIHdpbGwgYmUgY2VudGVyZWQgaG9yaXpvbnRhbGx5IGFuZCB2ZXJ0aWNhbGx5IHdpdGhpbiB0aGUgZnJhbWUgYW5kIG1haW50YWlucyBpdHMgYXNwZWN0IHJhdGlvLiBJdCB3aWxsXG4gICAgICogYmVoYXZlIGFzIEltYWdlRml0LmNlbnRlciBpZiB0aGUgaW1hZ2UncyBuYXR1cmFsIGhlaWdodCBvciB3aWR0aCBpcyBsZXNzIHRoYW4gdGhlIEltYWdlIGZyYW1lJ3MgaGVpZ2h0IG9yIHdpZHRoLFxuICAgICAqIGJ1dCBpZiBib3RoIG5hdHVyYWwgaGVpZ2h0IGFuZCB3aWR0aCBhcmUgbGFyZ2VyIHRoYW4gdGhlIGZyYW1lIGl0IHdpbGwgYmVoYXZlIGFzIEltYWdlRml0LmNvdmVyLlxuICAgICAqL1xuICAgIEltYWdlRml0W0ltYWdlRml0W1wiY2VudGVyQ292ZXJcIl0gPSA0XSA9IFwiY2VudGVyQ292ZXJcIjtcbiAgICAvKipcbiAgICAgKiBUaGUgaW1hZ2Ugd2lsbCBiZSBjZW50ZXJlZCBob3Jpem9udGFsbHkgYW5kIHZlcnRpY2FsbHkgd2l0aGluIHRoZSBmcmFtZSBhbmQgbWFpbnRhaW5zIGl0cyBhc3BlY3QgcmF0aW8uIEl0IHdpbGxcbiAgICAgKiBiZWhhdmUgYXMgSW1hZ2VGaXQuY2VudGVyIGlmIHRoZSBpbWFnZSdzIG5hdHVyYWwgaGVpZ2h0IGFuZCB3aWR0aCBpcyBsZXNzIHRoYW4gdGhlIEltYWdlIGZyYW1lJ3MgaGVpZ2h0IGFuZCB3aWR0aCxcbiAgICAgKiBidXQgaWYgZWl0aGVyIG5hdHVyYWwgaGVpZ2h0IG9yIHdpZHRoIGFyZSBsYXJnZXIgdGhhbiB0aGUgZnJhbWUgaXQgd2lsbCBiZWhhdmUgYXMgSW1hZ2VGaXQuY29udGFpbi5cbiAgICAgKi9cbiAgICBJbWFnZUZpdFtJbWFnZUZpdFtcImNlbnRlckNvbnRhaW5cIl0gPSA1XSA9IFwiY2VudGVyQ29udGFpblwiO1xufSkoSW1hZ2VGaXQgfHwgKEltYWdlRml0ID0ge30pKTtcbi8qKlxuICogVGhlIGNvdmVyIHN0eWxlIHRvIGJlIHVzZWQgb24gdGhlIGltYWdlXG4gKiB7QGRvY0NhdGVnb3J5IEltYWdlfVxuICovXG5leHBvcnQgdmFyIEltYWdlQ292ZXJTdHlsZTtcbihmdW5jdGlvbiAoSW1hZ2VDb3ZlclN0eWxlKSB7XG4gICAgLyoqXG4gICAgICogVGhlIGltYWdlIHdpbGwgYmUgc2hvd24gYXQgMTAwJSBoZWlnaHQgb2YgY29udGFpbmVyIGFuZCB0aGUgd2lkdGggd2lsbCBiZSBzY2FsZWQgYWNjb3JkaW5nbHlcbiAgICAgKi9cbiAgICBJbWFnZUNvdmVyU3R5bGVbSW1hZ2VDb3ZlclN0eWxlW1wibGFuZHNjYXBlXCJdID0gMF0gPSBcImxhbmRzY2FwZVwiO1xuICAgIC8qKlxuICAgICAqIFRoZSBpbWFnZSB3aWxsIGJlIHNob3duIGF0IDEwMCUgd2lkdGggb2YgY29udGFpbmVyIGFuZCB0aGUgaGVpZ2h0IHdpbGwgYmUgc2NhbGVkIGFjY29yZGluZ2x5XG4gICAgICovXG4gICAgSW1hZ2VDb3ZlclN0eWxlW0ltYWdlQ292ZXJTdHlsZVtcInBvcnRyYWl0XCJdID0gMV0gPSBcInBvcnRyYWl0XCI7XG59KShJbWFnZUNvdmVyU3R5bGUgfHwgKEltYWdlQ292ZXJTdHlsZSA9IHt9KSk7XG4vKipcbiAqIHtAZG9jQ2F0ZWdvcnkgSW1hZ2V9XG4gKi9cbmV4cG9ydCB2YXIgSW1hZ2VMb2FkU3RhdGU7XG4oZnVuY3Rpb24gKEltYWdlTG9hZFN0YXRlKSB7XG4gICAgLyoqXG4gICAgICogVGhlIGltYWdlIGhhcyBub3QgeWV0IGJlZW4gbG9hZGVkLCBhbmQgdGhlcmUgaXMgbm8gZXJyb3IgeWV0LlxuICAgICAqL1xuICAgIEltYWdlTG9hZFN0YXRlW0ltYWdlTG9hZFN0YXRlW1wibm90TG9hZGVkXCJdID0gMF0gPSBcIm5vdExvYWRlZFwiO1xuICAgIC8qKlxuICAgICAqIFRoZSBpbWFnZSBoYXMgYmVlbiBsb2FkZWQgc3VjY2Vzc2Z1bGx5LlxuICAgICAqL1xuICAgIEltYWdlTG9hZFN0YXRlW0ltYWdlTG9hZFN0YXRlW1wibG9hZGVkXCJdID0gMV0gPSBcImxvYWRlZFwiO1xuICAgIC8qKlxuICAgICAqIEFuIGVycm9yIGhhcyBiZWVuIGVuY291bnRlcmVkIHdoaWxlIGxvYWRpbmcgdGhlIGltYWdlLlxuICAgICAqL1xuICAgIEltYWdlTG9hZFN0YXRlW0ltYWdlTG9hZFN0YXRlW1wiZXJyb3JcIl0gPSAyXSA9IFwiZXJyb3JcIjtcbiAgICAvKipcbiAgICAgKiBAZGVwcmVjYXRlZCBOb3QgdXNlZC4gVXNlIGBvbkxvYWRpbmdTdGF0ZUNoYW5nZWAgYW5kIHJlLXJlbmRlciB0aGUgSW1hZ2Ugd2l0aCBhIGRpZmZlcmVudCBzcmMuXG4gICAgICovXG4gICAgSW1hZ2VMb2FkU3RhdGVbSW1hZ2VMb2FkU3RhdGVbXCJlcnJvckxvYWRlZFwiXSA9IDNdID0gXCJlcnJvckxvYWRlZFwiO1xufSkoSW1hZ2VMb2FkU3RhdGUgfHwgKEltYWdlTG9hZFN0YXRlID0ge30pKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUltYWdlLnR5cGVzLmpzLm1hcCIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IF9pc1NTUiB9IGZyb20gJy4vZG9tL3NldFNTUic7XG4vLyBUaGlzIGhvb2sgbXVzdCBsaXZlIGluIEBmbHVlbnR1aS91dGlsaXRpZXMgYmVjYXVzZSBfaXNTU1IgaXMgbm90IGV4cG9ydGVkXG4vKipcbiAqIFJlYWN0IGN1cnJlbnRseSB0aHJvd3MgYSB3YXJuaW5nIHdoZW4gdXNpbmcgYHVzZUxheW91dEVmZmVjdGAgb24gdGhlIHNlcnZlci4gVG8gZ2V0IGFyb3VuZCBpdCxcbiAqIHRoaXMgaG9vayBjYWxscyBgdXNlRWZmZWN0YCBvbiB0aGUgc2VydmVyIChuby1vcCkgYW5kIGB1c2VMYXlvdXRFZmZlY3RgIGluIHRoZSBicm93c2VyLlxuICpcbiAqIFByZWZlciBgdXNlRWZmZWN0YCB1bmxlc3MgeW91IGhhdmUgYSBzcGVjaWZpYyBuZWVkIHRvIGRvIHNvbWV0aGluZyBhZnRlciBtb3VudCBhbmQgYmVmb3JlIHBhaW50LFxuICogc3VjaCBhcyB0byBhdm9pZCBhIHJlbmRlciBmbGFzaCBmb3IgY2VydGFpbiBvcGVyYXRpb25zLlxuICpcbiAqIFNlcnZlci1zaWRlIHJlbmRlcmluZyBpcyBkZXRlY3RlZCBiYXNlZCBvbiBgc2V0U1NSYCBmcm9tIGBAZmx1ZW50dWkvdXRpbGl0aWVzYC5cbiAqXG4gKiBodHRwczovL2dpc3QuZ2l0aHViLmNvbS9nYWVhcm9uL2U3ZDk3Y2RmMzhhMjkwNzkyNGVhMTJlNGViZGYzYzg1XG4gKiBodHRwczovL2dpdGh1Yi5jb20vcmVkdXhqcy9yZWFjdC1yZWR1eC9ibG9iL21hc3Rlci9zcmMvdXRpbHMvdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdC5qc1xuICovXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcmVzdHJpY3RlZC1wcm9wZXJ0aWVzXG5leHBvcnQgdmFyIHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QgPSBfaXNTU1IgPyBSZWFjdC51c2VFZmZlY3QgOiBSZWFjdC51c2VMYXlvdXRFZmZlY3Q7XG4vLyMgc291cmNlTWFwcGluZ1VSTD11c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0LmpzLm1hcCIsImltcG9ydCB7IF9fc3ByZWFkQXJyYXkgfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0Jztcbi8qKlxuICogUmVhY3QgaG9vayB0byBtZXJnZSBtdWx0aXBsZSBSZWFjdCByZWZzIChlaXRoZXIgTXV0YWJsZVJlZk9iamVjdHMgb3IgcmVmIGNhbGxiYWNrcykgaW50byBhIHNpbmdsZSByZWYgY2FsbGJhY2sgdGhhdFxuICogdXBkYXRlcyBhbGwgcHJvdmlkZWQgcmVmc1xuICogQHBhcmFtIHJlZnMgLSBSZWZzIHRvIGNvbGxlY3RpdmVseSB1cGRhdGUgd2l0aCBvbmUgcmVmIHZhbHVlLlxuICogQHJldHVybnMgQSBmdW5jdGlvbiB3aXRoIGFuIGF0dGFjaGVkIFwiY3VycmVudFwiIHByb3AsIHNvIHRoYXQgaXQgY2FuIGJlIHRyZWF0ZWQgbGlrZSBhIFJlZk9iamVjdC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVzZU1lcmdlZFJlZnMoKSB7XG4gICAgdmFyIHJlZnMgPSBbXTtcbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICByZWZzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgfVxuICAgIHZhciBtZXJnZWRDYWxsYmFjayA9IFJlYWN0LnVzZUNhbGxiYWNrKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAvLyBVcGRhdGUgdGhlIFwiY3VycmVudFwiIHByb3AgaGFuZ2luZyBvbiB0aGUgZnVuY3Rpb24uXG4gICAgICAgIG1lcmdlZENhbGxiYWNrLmN1cnJlbnQgPSB2YWx1ZTtcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwLCByZWZzXzEgPSByZWZzOyBfaSA8IHJlZnNfMS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIHZhciByZWYgPSByZWZzXzFbX2ldO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiByZWYgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICByZWYodmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAocmVmKSB7XG4gICAgICAgICAgICAgICAgLy8gd29yayBhcm91bmQgdGhlIGltbXV0YWJpbGl0eSBvZiB0aGUgUmVhY3QuUmVmIHR5cGVcbiAgICAgICAgICAgICAgICByZWYuY3VycmVudCA9IHZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSwgX19zcHJlYWRBcnJheShbXSwgcmVmcykpO1xuICAgIHJldHVybiBtZXJnZWRDYWxsYmFjaztcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXVzZU1lcmdlZFJlZnMuanMubWFwIiwiaW1wb3J0IHsgX19hc3NpZ24gfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGNsYXNzTmFtZXNGdW5jdGlvbiwgZ2V0TmF0aXZlUHJvcHMsIGltZ1Byb3BlcnRpZXMgfSBmcm9tICcuLi8uLi9VdGlsaXRpZXMnO1xuaW1wb3J0IHsgSW1hZ2VDb3ZlclN0eWxlLCBJbWFnZUZpdCwgSW1hZ2VMb2FkU3RhdGUgfSBmcm9tICcuL0ltYWdlLnR5cGVzJztcbmltcG9ydCB7IHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QsIHVzZU1lcmdlZFJlZnMgfSBmcm9tICdAZmx1ZW50dWkvcmVhY3QtaG9va3MnO1xudmFyIGdldENsYXNzTmFtZXMgPSBjbGFzc05hbWVzRnVuY3Rpb24oKTtcbnZhciBTVkdfUkVHRVggPSAvXFwuc3ZnJC9pO1xudmFyIEtFWV9QUkVGSVggPSAnZmFicmljSW1hZ2UnO1xuZnVuY3Rpb24gdXNlTG9hZFN0YXRlKHByb3BzLCBpbWFnZUVsZW1lbnQpIHtcbiAgICB2YXIgb25Mb2FkaW5nU3RhdGVDaGFuZ2UgPSBwcm9wcy5vbkxvYWRpbmdTdGF0ZUNoYW5nZSwgb25Mb2FkID0gcHJvcHMub25Mb2FkLCBvbkVycm9yID0gcHJvcHMub25FcnJvciwgc3JjID0gcHJvcHMuc3JjO1xuICAgIHZhciBfYSA9IFJlYWN0LnVzZVN0YXRlKEltYWdlTG9hZFN0YXRlLm5vdExvYWRlZCksIGxvYWRTdGF0ZSA9IF9hWzBdLCBzZXRMb2FkU3RhdGUgPSBfYVsxXTtcbiAgICB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLy8gSWYgdGhlIHNyYyBwcm9wZXJ0eSBjaGFuZ2VzLCByZXNldCB0aGUgbG9hZCBzdGF0ZVxuICAgICAgICAvLyAoZG9lcyBub3RoaW5nIGlmIHRoZSBsb2FkIHN0YXRlIGlzIGFscmVhZHkgbm90TG9hZGVkKVxuICAgICAgICBzZXRMb2FkU3RhdGUoSW1hZ2VMb2FkU3RhdGUubm90TG9hZGVkKTtcbiAgICB9LCBbc3JjXSk7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0LWhvb2tzL2V4aGF1c3RpdmUtZGVwcyAtLSBpbnRlbmRlZCB0byBydW4gZXZlcnkgcmVuZGVyXG4gICAgUmVhY3QudXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKGxvYWRTdGF0ZSA9PT0gSW1hZ2VMb2FkU3RhdGUubm90TG9hZGVkKSB7XG4gICAgICAgICAgICAvLyB0ZXN0aW5nIGlmIG5hdHVyYWxXaWR0aCBhbmQgbmF0dXJhbEhlaWdodCBhcmUgZ3JlYXRlciB0aGFuIHplcm8gaXMgYmV0dGVyIHRoYW4gY2hlY2tpbmdcbiAgICAgICAgICAgIC8vIC5jb21wbGV0ZSwgYmVjYXVzZSAuY29tcGxldGUgd2lsbCBhbHNvIGJlIHNldCB0byB0cnVlIGlmIHRoZSBpbWFnZSBicmVha3MuIEhvd2V2ZXIsXG4gICAgICAgICAgICAvLyBmb3Igc29tZSBicm93c2VycywgU1ZHIGltYWdlcyBkbyBub3QgaGF2ZSBhIG5hdHVyYWxXaWR0aCBvciBuYXR1cmFsSGVpZ2h0LCBzbyBmYWxsIGJhY2tcbiAgICAgICAgICAgIC8vIHRvIGNoZWNraW5nIC5jb21wbGV0ZSBmb3IgdGhlc2UgaW1hZ2VzLlxuICAgICAgICAgICAgdmFyIGlzTG9hZGVkID0gaW1hZ2VFbGVtZW50LmN1cnJlbnRcbiAgICAgICAgICAgICAgICA/IChzcmMgJiYgaW1hZ2VFbGVtZW50LmN1cnJlbnQubmF0dXJhbFdpZHRoID4gMCAmJiBpbWFnZUVsZW1lbnQuY3VycmVudC5uYXR1cmFsSGVpZ2h0ID4gMCkgfHxcbiAgICAgICAgICAgICAgICAgICAgKGltYWdlRWxlbWVudC5jdXJyZW50LmNvbXBsZXRlICYmIFNWR19SRUdFWC50ZXN0KHNyYykpXG4gICAgICAgICAgICAgICAgOiBmYWxzZTtcbiAgICAgICAgICAgIGlmIChpc0xvYWRlZCkge1xuICAgICAgICAgICAgICAgIHNldExvYWRTdGF0ZShJbWFnZUxvYWRTdGF0ZS5sb2FkZWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSk7XG4gICAgUmVhY3QudXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgb25Mb2FkaW5nU3RhdGVDaGFuZ2UgPT09IG51bGwgfHwgb25Mb2FkaW5nU3RhdGVDaGFuZ2UgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9uTG9hZGluZ1N0YXRlQ2hhbmdlKGxvYWRTdGF0ZSk7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9leGhhdXN0aXZlLWRlcHMgLS0gc2hvdWxkIG9ubHkgcnVuIHdoZW4gbG9hZFN0YXRlIGNoYW5nZXNcbiAgICB9LCBbbG9hZFN0YXRlXSk7XG4gICAgdmFyIG9uSW1hZ2VMb2FkZWQgPSBSZWFjdC51c2VDYWxsYmFjayhmdW5jdGlvbiAoZXYpIHtcbiAgICAgICAgb25Mb2FkID09PSBudWxsIHx8IG9uTG9hZCA9PT0gdm9pZCAwID8gdm9pZCAwIDogb25Mb2FkKGV2KTtcbiAgICAgICAgaWYgKHNyYykge1xuICAgICAgICAgICAgc2V0TG9hZFN0YXRlKEltYWdlTG9hZFN0YXRlLmxvYWRlZCk7XG4gICAgICAgIH1cbiAgICB9LCBbc3JjLCBvbkxvYWRdKTtcbiAgICB2YXIgb25JbWFnZUVycm9yID0gUmVhY3QudXNlQ2FsbGJhY2soZnVuY3Rpb24gKGV2KSB7XG4gICAgICAgIG9uRXJyb3IgPT09IG51bGwgfHwgb25FcnJvciA9PT0gdm9pZCAwID8gdm9pZCAwIDogb25FcnJvcihldik7XG4gICAgICAgIHNldExvYWRTdGF0ZShJbWFnZUxvYWRTdGF0ZS5lcnJvcik7XG4gICAgfSwgW29uRXJyb3JdKTtcbiAgICByZXR1cm4gW2xvYWRTdGF0ZSwgb25JbWFnZUxvYWRlZCwgb25JbWFnZUVycm9yXTtcbn1cbmV4cG9ydCB2YXIgSW1hZ2VCYXNlID0gUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiAocHJvcHMsIGZvcndhcmRlZFJlZikge1xuICAgIHZhciBmcmFtZUVsZW1lbnQgPSBSZWFjdC51c2VSZWYoKTtcbiAgICB2YXIgaW1hZ2VFbGVtZW50ID0gUmVhY3QudXNlUmVmKCk7XG4gICAgdmFyIF9hID0gdXNlTG9hZFN0YXRlKHByb3BzLCBpbWFnZUVsZW1lbnQpLCBsb2FkU3RhdGUgPSBfYVswXSwgb25JbWFnZUxvYWRlZCA9IF9hWzFdLCBvbkltYWdlRXJyb3IgPSBfYVsyXTtcbiAgICB2YXIgaW1hZ2VQcm9wcyA9IGdldE5hdGl2ZVByb3BzKHByb3BzLCBpbWdQcm9wZXJ0aWVzLCBbXG4gICAgICAgICd3aWR0aCcsXG4gICAgICAgICdoZWlnaHQnLFxuICAgIF0pO1xuICAgIHZhciBzcmMgPSBwcm9wcy5zcmMsIGFsdCA9IHByb3BzLmFsdCwgd2lkdGggPSBwcm9wcy53aWR0aCwgaGVpZ2h0ID0gcHJvcHMuaGVpZ2h0LCBfYiA9IHByb3BzLnNob3VsZEZhZGVJbiwgc2hvdWxkRmFkZUluID0gX2IgPT09IHZvaWQgMCA/IHRydWUgOiBfYiwgc2hvdWxkU3RhcnRWaXNpYmxlID0gcHJvcHMuc2hvdWxkU3RhcnRWaXNpYmxlLCBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUsIGltYWdlRml0ID0gcHJvcHMuaW1hZ2VGaXQsIHJvbGUgPSBwcm9wcy5yb2xlLCBtYXhpbWl6ZUZyYW1lID0gcHJvcHMubWF4aW1pemVGcmFtZSwgc3R5bGVzID0gcHJvcHMuc3R5bGVzLCB0aGVtZSA9IHByb3BzLnRoZW1lLCBsb2FkaW5nID0gcHJvcHMubG9hZGluZztcbiAgICB2YXIgY292ZXJTdHlsZSA9IHVzZUNvdmVyU3R5bGUocHJvcHMsIGxvYWRTdGF0ZSwgaW1hZ2VFbGVtZW50LCBmcmFtZUVsZW1lbnQpO1xuICAgIHZhciBjbGFzc05hbWVzID0gZ2V0Q2xhc3NOYW1lcyhzdHlsZXMsIHtcbiAgICAgICAgdGhlbWU6IHRoZW1lLFxuICAgICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZSxcbiAgICAgICAgd2lkdGg6IHdpZHRoLFxuICAgICAgICBoZWlnaHQ6IGhlaWdodCxcbiAgICAgICAgbWF4aW1pemVGcmFtZTogbWF4aW1pemVGcmFtZSxcbiAgICAgICAgc2hvdWxkRmFkZUluOiBzaG91bGRGYWRlSW4sXG4gICAgICAgIHNob3VsZFN0YXJ0VmlzaWJsZTogc2hvdWxkU3RhcnRWaXNpYmxlLFxuICAgICAgICBpc0xvYWRlZDogbG9hZFN0YXRlID09PSBJbWFnZUxvYWRTdGF0ZS5sb2FkZWQgfHwgKGxvYWRTdGF0ZSA9PT0gSW1hZ2VMb2FkU3RhdGUubm90TG9hZGVkICYmIHByb3BzLnNob3VsZFN0YXJ0VmlzaWJsZSksXG4gICAgICAgIGlzTGFuZHNjYXBlOiBjb3ZlclN0eWxlID09PSBJbWFnZUNvdmVyU3R5bGUubGFuZHNjYXBlLFxuICAgICAgICBpc0NlbnRlcjogaW1hZ2VGaXQgPT09IEltYWdlRml0LmNlbnRlcixcbiAgICAgICAgaXNDZW50ZXJDb250YWluOiBpbWFnZUZpdCA9PT0gSW1hZ2VGaXQuY2VudGVyQ29udGFpbixcbiAgICAgICAgaXNDZW50ZXJDb3ZlcjogaW1hZ2VGaXQgPT09IEltYWdlRml0LmNlbnRlckNvdmVyLFxuICAgICAgICBpc0NvbnRhaW46IGltYWdlRml0ID09PSBJbWFnZUZpdC5jb250YWluLFxuICAgICAgICBpc0NvdmVyOiBpbWFnZUZpdCA9PT0gSW1hZ2VGaXQuY292ZXIsXG4gICAgICAgIGlzTm9uZTogaW1hZ2VGaXQgPT09IEltYWdlRml0Lm5vbmUsXG4gICAgICAgIGlzRXJyb3I6IGxvYWRTdGF0ZSA9PT0gSW1hZ2VMb2FkU3RhdGUuZXJyb3IsXG4gICAgICAgIGlzTm90SW1hZ2VGaXQ6IGltYWdlRml0ID09PSB1bmRlZmluZWQsXG4gICAgfSk7XG4gICAgLy8gSWYgaW1hZ2UgZGltZW5zaW9ucyBhcmVuJ3Qgc3BlY2lmaWVkLCB0aGUgbmF0dXJhbCBzaXplIG9mIHRoZSBpbWFnZSBpcyB1c2VkLlxuICAgIHJldHVybiAoUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7IGNsYXNzTmFtZTogY2xhc3NOYW1lcy5yb290LCBzdHlsZTogeyB3aWR0aDogd2lkdGgsIGhlaWdodDogaGVpZ2h0IH0sIHJlZjogZnJhbWVFbGVtZW50IH0sXG4gICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJpbWdcIiwgX19hc3NpZ24oe30sIGltYWdlUHJvcHMsIHsgb25Mb2FkOiBvbkltYWdlTG9hZGVkLCBvbkVycm9yOiBvbkltYWdlRXJyb3IsIGtleTogS0VZX1BSRUZJWCArIHByb3BzLnNyYyB8fCAnJywgY2xhc3NOYW1lOiBjbGFzc05hbWVzLmltYWdlLCByZWY6IHVzZU1lcmdlZFJlZnMoaW1hZ2VFbGVtZW50LCBmb3J3YXJkZWRSZWYpLCBzcmM6IHNyYywgYWx0OiBhbHQsIHJvbGU6IHJvbGUsIGxvYWRpbmc6IGxvYWRpbmcgfSkpKSk7XG59KTtcbkltYWdlQmFzZS5kaXNwbGF5TmFtZSA9ICdJbWFnZUJhc2UnO1xuZnVuY3Rpb24gdXNlQ292ZXJTdHlsZShwcm9wcywgbG9hZFN0YXRlLCBpbWFnZUVsZW1lbnQsIGZyYW1lRWxlbWVudCkge1xuICAgIHZhciBwcmV2aW91c0xvYWRTdGF0ZSA9IFJlYWN0LnVzZVJlZihsb2FkU3RhdGUpO1xuICAgIHZhciBjb3ZlclN0eWxlID0gUmVhY3QudXNlUmVmKCk7XG4gICAgaWYgKGNvdmVyU3R5bGUgPT09IHVuZGVmaW5lZCB8fFxuICAgICAgICAocHJldmlvdXNMb2FkU3RhdGUuY3VycmVudCA9PT0gSW1hZ2VMb2FkU3RhdGUubm90TG9hZGVkICYmIGxvYWRTdGF0ZSA9PT0gSW1hZ2VMb2FkU3RhdGUubG9hZGVkKSkge1xuICAgICAgICBjb3ZlclN0eWxlLmN1cnJlbnQgPSBjb21wdXRlQ292ZXJTdHlsZShwcm9wcywgbG9hZFN0YXRlLCBpbWFnZUVsZW1lbnQsIGZyYW1lRWxlbWVudCk7XG4gICAgfVxuICAgIHByZXZpb3VzTG9hZFN0YXRlLmN1cnJlbnQgPSBsb2FkU3RhdGU7XG4gICAgcmV0dXJuIGNvdmVyU3R5bGUuY3VycmVudDtcbn1cbmZ1bmN0aW9uIGNvbXB1dGVDb3ZlclN0eWxlKHByb3BzLCBsb2FkU3RhdGUsIGltYWdlRWxlbWVudCwgZnJhbWVFbGVtZW50KSB7XG4gICAgdmFyIGltYWdlRml0ID0gcHJvcHMuaW1hZ2VGaXQsIHdpZHRoID0gcHJvcHMud2lkdGgsIGhlaWdodCA9IHByb3BzLmhlaWdodDtcbiAgICAvLyBEbyBub3QgY29tcHV0ZSBjb3ZlciBzdHlsZSBpZiBpdCB3YXMgYWxyZWFkeSBzcGVjaWZpZWQgaW4gcHJvcHNcbiAgICBpZiAocHJvcHMuY292ZXJTdHlsZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiBwcm9wcy5jb3ZlclN0eWxlO1xuICAgIH1cbiAgICBlbHNlIGlmIChsb2FkU3RhdGUgPT09IEltYWdlTG9hZFN0YXRlLmxvYWRlZCAmJlxuICAgICAgICAoaW1hZ2VGaXQgPT09IEltYWdlRml0LmNvdmVyIHx8XG4gICAgICAgICAgICBpbWFnZUZpdCA9PT0gSW1hZ2VGaXQuY29udGFpbiB8fFxuICAgICAgICAgICAgaW1hZ2VGaXQgPT09IEltYWdlRml0LmNlbnRlckNvbnRhaW4gfHxcbiAgICAgICAgICAgIGltYWdlRml0ID09PSBJbWFnZUZpdC5jZW50ZXJDb3ZlcikgJiZcbiAgICAgICAgaW1hZ2VFbGVtZW50LmN1cnJlbnQgJiZcbiAgICAgICAgZnJhbWVFbGVtZW50LmN1cnJlbnQpIHtcbiAgICAgICAgLy8gRGV0ZXJtaW5lIHRoZSBkZXNpcmVkIHJhdGlvIHVzaW5nIHRoZSB3aWR0aCBhbmQgaGVpZ2h0IHByb3BzLlxuICAgICAgICAvLyBJZiB0aG9zZSBwcm9wcyBhcmVuJ3QgYXZhaWxhYmxlLCBtZWFzdXJlIG1lYXN1cmUgdGhlIGZyYW1lLlxuICAgICAgICB2YXIgZGVzaXJlZFJhdGlvID0gdm9pZCAwO1xuICAgICAgICBpZiAodHlwZW9mIHdpZHRoID09PSAnbnVtYmVyJyAmJlxuICAgICAgICAgICAgdHlwZW9mIGhlaWdodCA9PT0gJ251bWJlcicgJiZcbiAgICAgICAgICAgIGltYWdlRml0ICE9PSBJbWFnZUZpdC5jZW50ZXJDb250YWluICYmXG4gICAgICAgICAgICBpbWFnZUZpdCAhPT0gSW1hZ2VGaXQuY2VudGVyQ292ZXIpIHtcbiAgICAgICAgICAgIGRlc2lyZWRSYXRpbyA9IHdpZHRoIC8gaGVpZ2h0O1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZGVzaXJlZFJhdGlvID0gZnJhbWVFbGVtZW50LmN1cnJlbnQuY2xpZW50V2lkdGggLyBmcmFtZUVsZW1lbnQuY3VycmVudC5jbGllbnRIZWlnaHQ7XG4gICAgICAgIH1cbiAgICAgICAgLy8gRXhhbWluZSB0aGUgc291cmNlIGltYWdlIHRvIGRldGVybWluZSBpdHMgb3JpZ2luYWwgcmF0aW8uXG4gICAgICAgIHZhciBuYXR1cmFsUmF0aW8gPSBpbWFnZUVsZW1lbnQuY3VycmVudC5uYXR1cmFsV2lkdGggLyBpbWFnZUVsZW1lbnQuY3VycmVudC5uYXR1cmFsSGVpZ2h0O1xuICAgICAgICAvLyBTaG91bGQgd2UgY3JvcCBmcm9tIHRoZSB0b3Agb3IgdGhlIHNpZGVzP1xuICAgICAgICBpZiAobmF0dXJhbFJhdGlvID4gZGVzaXJlZFJhdGlvKSB7XG4gICAgICAgICAgICByZXR1cm4gSW1hZ2VDb3ZlclN0eWxlLmxhbmRzY2FwZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gSW1hZ2VDb3ZlclN0eWxlLnBvcnRyYWl0O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9SW1hZ2UuYmFzZS5qcy5tYXAiLCJpbXBvcnQgeyBleHRyYWN0U3R5bGVQYXJ0cyB9IGZyb20gJy4vZXh0cmFjdFN0eWxlUGFydHMnO1xuaW1wb3J0IHsgZ2V0U3R5bGVPcHRpb25zIH0gZnJvbSAnLi9TdHlsZU9wdGlvbnNTdGF0ZSc7XG5pbXBvcnQgeyBzdHlsZVRvQ2xhc3NOYW1lIH0gZnJvbSAnLi9zdHlsZVRvQ2xhc3NOYW1lJztcbi8qKlxuICogQ29uY2F0ZW5hdGlvbiBoZWxwZXIsIHdoaWNoIGNhbiBtZXJnZSBjbGFzcyBuYW1lcyB0b2dldGhlci4gU2tpcHMgb3ZlciBmYWxzZXkgdmFsdWVzLlxuICpcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG1lcmdlU3R5bGVzKCkge1xuICAgIHZhciBhcmdzID0gW107XG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgYXJnc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgIH1cbiAgICByZXR1cm4gbWVyZ2VDc3MoYXJncywgZ2V0U3R5bGVPcHRpb25zKCkpO1xufVxuLyoqXG4gKiBDb25jYXRlbmF0aW9uIGhlbHBlciwgd2hpY2ggY2FuIG1lcmdlIGNsYXNzIG5hbWVzIHRvZ2V0aGVyLiBTa2lwcyBvdmVyIGZhbHNleSB2YWx1ZXMuXG4gKiBBY2NlcHRzIGEgc2V0IG9mIG9wdGlvbnMgdGhhdCB3aWxsIGJlIHVzZWQgd2hlbiBjYWxjdWxhdGluZyBzdHlsZXMuXG4gKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgZnVuY3Rpb24gbWVyZ2VDc3MoYXJncywgb3B0aW9ucykge1xuICAgIHZhciBzdHlsZUFyZ3MgPSBhcmdzIGluc3RhbmNlb2YgQXJyYXkgPyBhcmdzIDogW2FyZ3NdO1xuICAgIHZhciBfYSA9IGV4dHJhY3RTdHlsZVBhcnRzKHN0eWxlQXJncyksIGNsYXNzZXMgPSBfYS5jbGFzc2VzLCBvYmplY3RzID0gX2Eub2JqZWN0cztcbiAgICBpZiAob2JqZWN0cy5sZW5ndGgpIHtcbiAgICAgICAgY2xhc3Nlcy5wdXNoKHN0eWxlVG9DbGFzc05hbWUob3B0aW9ucyB8fCB7fSwgb2JqZWN0cykpO1xuICAgIH1cbiAgICByZXR1cm4gY2xhc3Nlcy5qb2luKCcgJyk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tZXJnZVN0eWxlcy5qcy5tYXAiLCJpbXBvcnQgeyBnZXRTdHlsZU9wdGlvbnMgfSBmcm9tICcuL1N0eWxlT3B0aW9uc1N0YXRlJztcbmltcG9ydCB7IFN0eWxlc2hlZXQgfSBmcm9tICcuL1N0eWxlc2hlZXQnO1xuaW1wb3J0IHsgc2VyaWFsaXplUnVsZUVudHJpZXMgfSBmcm9tICcuL3N0eWxlVG9DbGFzc05hbWUnO1xuLyoqXG4gKiBSZWdpc3RlcnMga2V5ZnJhbWUgZGVmaW5pdGlvbnMuXG4gKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgZnVuY3Rpb24ga2V5ZnJhbWVzKHRpbWVsaW5lKSB7XG4gICAgdmFyIHN0eWxlc2hlZXQgPSBTdHlsZXNoZWV0LmdldEluc3RhbmNlKCk7XG4gICAgdmFyIHJ1bGVzQXJyYXkgPSBbXTtcbiAgICBmb3IgKHZhciBwcm9wIGluIHRpbWVsaW5lKSB7XG4gICAgICAgIGlmICh0aW1lbGluZS5oYXNPd25Qcm9wZXJ0eShwcm9wKSkge1xuICAgICAgICAgICAgcnVsZXNBcnJheS5wdXNoKHByb3AsICd7Jywgc2VyaWFsaXplUnVsZUVudHJpZXMoZ2V0U3R5bGVPcHRpb25zKCksIHRpbWVsaW5lW3Byb3BdKSwgJ30nKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICB2YXIgcnVsZXMgPSBydWxlc0FycmF5LmpvaW4oJycpO1xuICAgIHZhciBjbGFzc05hbWUgPSBzdHlsZXNoZWV0LmNsYXNzTmFtZUZyb21LZXkocnVsZXMpO1xuICAgIGlmIChjbGFzc05hbWUpIHtcbiAgICAgICAgcmV0dXJuIGNsYXNzTmFtZTtcbiAgICB9XG4gICAgdmFyIG5hbWUgPSBzdHlsZXNoZWV0LmdldENsYXNzTmFtZSgpO1xuICAgIHN0eWxlc2hlZXQuaW5zZXJ0UnVsZShcIkBrZXlmcmFtZXMgXCIgKyBuYW1lICsgXCJ7XCIgKyBydWxlcyArIFwifVwiLCB0cnVlKTtcbiAgICBzdHlsZXNoZWV0LmNhY2hlQ2xhc3NOYW1lKG5hbWUsIHJ1bGVzLCBbXSwgWydrZXlmcmFtZXMnLCBydWxlc10pO1xuICAgIHJldHVybiBuYW1lO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9a2V5ZnJhbWVzLmpzLm1hcCIsImltcG9ydCB7IGtleWZyYW1lcyB9IGZyb20gJ0BmbHVlbnR1aS9tZXJnZS1zdHlsZXMnO1xuLyogUmVnaXN0ZXIgdGhlIGtleWZyYW1lcyAqL1xudmFyIEVBU0lOR19GVU5DVElPTl8xID0gJ2N1YmljLWJlemllciguMSwuOSwuMiwxKSc7XG52YXIgRUFTSU5HX0ZVTkNUSU9OXzIgPSAnY3ViaWMtYmV6aWVyKC4xLC4yNSwuNzUsLjkpJztcbnZhciBEVVJBVElPTl8xID0gJzAuMTY3cyc7XG52YXIgRFVSQVRJT05fMiA9ICcwLjI2N3MnO1xudmFyIERVUkFUSU9OXzMgPSAnMC4zNjdzJztcbnZhciBEVVJBVElPTl80ID0gJzAuNDY3cyc7XG52YXIgRkFERV9JTiA9IGtleWZyYW1lcyh7XG4gICAgZnJvbTogeyBvcGFjaXR5OiAwIH0sXG4gICAgdG86IHsgb3BhY2l0eTogMSB9LFxufSk7XG52YXIgRkFERV9PVVQgPSBrZXlmcmFtZXMoe1xuICAgIGZyb206IHsgb3BhY2l0eTogMSB9LFxuICAgIHRvOiB7IG9wYWNpdHk6IDAsIHZpc2liaWxpdHk6ICdoaWRkZW4nIH0sXG59KTtcbnZhciBTTElERV9SSUdIVF9JTjEwID0gX2NyZWF0ZVNsaWRlSW5YKC0xMCk7XG52YXIgU0xJREVfUklHSFRfSU4yMCA9IF9jcmVhdGVTbGlkZUluWCgtMjApO1xudmFyIFNMSURFX1JJR0hUX0lONDAgPSBfY3JlYXRlU2xpZGVJblgoLTQwKTtcbnZhciBTTElERV9SSUdIVF9JTjQwMCA9IF9jcmVhdGVTbGlkZUluWCgtNDAwKTtcbnZhciBTTElERV9MRUZUX0lOMTAgPSBfY3JlYXRlU2xpZGVJblgoMTApO1xudmFyIFNMSURFX0xFRlRfSU4yMCA9IF9jcmVhdGVTbGlkZUluWCgyMCk7XG52YXIgU0xJREVfTEVGVF9JTjQwID0gX2NyZWF0ZVNsaWRlSW5YKDQwKTtcbnZhciBTTElERV9MRUZUX0lONDAwID0gX2NyZWF0ZVNsaWRlSW5YKDQwMCk7XG52YXIgU0xJREVfVVBfSU4xMCA9IF9jcmVhdGVTbGlkZUluWSgxMCk7XG52YXIgU0xJREVfVVBfSU4yMCA9IF9jcmVhdGVTbGlkZUluWSgyMCk7XG52YXIgU0xJREVfRE9XTl9JTjEwID0gX2NyZWF0ZVNsaWRlSW5ZKC0xMCk7XG52YXIgU0xJREVfRE9XTl9JTjIwID0gX2NyZWF0ZVNsaWRlSW5ZKC0yMCk7XG52YXIgU0xJREVfUklHSFRfT1VUMTAgPSBfY3JlYXRlU2xpZGVPdXRYKDEwKTtcbnZhciBTTElERV9SSUdIVF9PVVQyMCA9IF9jcmVhdGVTbGlkZU91dFgoMjApO1xudmFyIFNMSURFX1JJR0hUX09VVDQwID0gX2NyZWF0ZVNsaWRlT3V0WCg0MCk7XG52YXIgU0xJREVfUklHSFRfT1VUNDAwID0gX2NyZWF0ZVNsaWRlT3V0WCg0MDApO1xudmFyIFNMSURFX0xFRlRfT1VUMTAgPSBfY3JlYXRlU2xpZGVPdXRYKC0xMCk7XG52YXIgU0xJREVfTEVGVF9PVVQyMCA9IF9jcmVhdGVTbGlkZU91dFgoLTIwKTtcbnZhciBTTElERV9MRUZUX09VVDQwID0gX2NyZWF0ZVNsaWRlT3V0WCgtNDApO1xudmFyIFNMSURFX0xFRlRfT1VUNDAwID0gX2NyZWF0ZVNsaWRlT3V0WCgtNDAwKTtcbnZhciBTTElERV9VUF9PVVQxMCA9IF9jcmVhdGVTbGlkZU91dFkoLTEwKTtcbnZhciBTTElERV9VUF9PVVQyMCA9IF9jcmVhdGVTbGlkZU91dFkoLTIwKTtcbnZhciBTTElERV9ET1dOX09VVDEwID0gX2NyZWF0ZVNsaWRlT3V0WSgxMCk7XG52YXIgU0xJREVfRE9XTl9PVVQyMCA9IF9jcmVhdGVTbGlkZU91dFkoMjApO1xudmFyIFNDQUxFX1VQMTAwID0ga2V5ZnJhbWVzKHtcbiAgICBmcm9tOiB7IHRyYW5zZm9ybTogJ3NjYWxlM2QoLjk4LC45OCwxKScgfSxcbiAgICB0bzogeyB0cmFuc2Zvcm06ICdzY2FsZTNkKDEsMSwxKScgfSxcbn0pO1xudmFyIFNDQUxFX0RPV045OCA9IGtleWZyYW1lcyh7XG4gICAgZnJvbTogeyB0cmFuc2Zvcm06ICdzY2FsZTNkKDEsMSwxKScgfSxcbiAgICB0bzogeyB0cmFuc2Zvcm06ICdzY2FsZTNkKC45OCwuOTgsMSknIH0sXG59KTtcbnZhciBTQ0FMRV9ET1dOMTAwID0ga2V5ZnJhbWVzKHtcbiAgICBmcm9tOiB7IHRyYW5zZm9ybTogJ3NjYWxlM2QoMS4wMywxLjAzLDEpJyB9LFxuICAgIHRvOiB7IHRyYW5zZm9ybTogJ3NjYWxlM2QoMSwxLDEpJyB9LFxufSk7XG52YXIgU0NBTEVfVVAxMDMgPSBrZXlmcmFtZXMoe1xuICAgIGZyb206IHsgdHJhbnNmb3JtOiAnc2NhbGUzZCgxLDEsMSknIH0sXG4gICAgdG86IHsgdHJhbnNmb3JtOiAnc2NhbGUzZCgxLjAzLDEuMDMsMSknIH0sXG59KTtcbnZhciBST1RBVEU5MCA9IGtleWZyYW1lcyh7XG4gICAgZnJvbTogeyB0cmFuc2Zvcm06ICdyb3RhdGVaKDBkZWcpJyB9LFxuICAgIHRvOiB7IHRyYW5zZm9ybTogJ3JvdGF0ZVooOTBkZWcpJyB9LFxufSk7XG52YXIgUk9UQVRFX045MCA9IGtleWZyYW1lcyh7XG4gICAgZnJvbTogeyB0cmFuc2Zvcm06ICdyb3RhdGVaKDBkZWcpJyB9LFxuICAgIHRvOiB7IHRyYW5zZm9ybTogJ3JvdGF0ZVooLTkwZGVnKScgfSxcbn0pO1xuLyoqXG4gKiBFeHBvcnRpbmcgcmF3IGR1cmFjdGlvbiB2YWx1ZXMgYW5kIGVhc2luZyBmdW5jdGlvbnMgdG8gYmUgdXNlZCBpbiBjdXN0b20gYW5pbWF0aW9uc1xuICovXG5leHBvcnQgdmFyIEFuaW1hdGlvblZhcmlhYmxlcyA9IHtcbiAgICBlYXNlRnVuY3Rpb24xOiBFQVNJTkdfRlVOQ1RJT05fMSxcbiAgICBlYXNlRnVuY3Rpb24yOiBFQVNJTkdfRlVOQ1RJT05fMixcbiAgICBkdXJhdGlvblZhbHVlMTogRFVSQVRJT05fMSxcbiAgICBkdXJhdGlvblZhbHVlMjogRFVSQVRJT05fMixcbiAgICBkdXJhdGlvblZhbHVlMzogRFVSQVRJT05fMyxcbiAgICBkdXJhdGlvblZhbHVlNDogRFVSQVRJT05fNCxcbn07XG4vKipcbiAqIEFsbCBGYWJyaWMgc3RhbmRhcmQgYW5pbWF0aW9ucywgZXhwb3NlZCBhcyBqc29uIG9iamVjdHMgcmVmZXJlbmNpbmcgcHJlZGVmaW5lZFxuICoga2V5ZnJhbWVzLiBUaGVzZSBvYmplY3RzIGNhbiBiZSBtaXhlZCBpbiB3aXRoIG90aGVyIGNsYXNzIGRlZmluaXRpb25zLlxuICovXG5leHBvcnQgdmFyIEFuaW1hdGlvblN0eWxlcyA9IHtcbiAgICBzbGlkZVJpZ2h0SW4xMDogX2NyZWF0ZUFuaW1hdGlvbihGQURFX0lOICsgXCIsXCIgKyBTTElERV9SSUdIVF9JTjEwLCBEVVJBVElPTl8zLCBFQVNJTkdfRlVOQ1RJT05fMSksXG4gICAgc2xpZGVSaWdodEluMjA6IF9jcmVhdGVBbmltYXRpb24oRkFERV9JTiArIFwiLFwiICsgU0xJREVfUklHSFRfSU4yMCwgRFVSQVRJT05fMywgRUFTSU5HX0ZVTkNUSU9OXzEpLFxuICAgIHNsaWRlUmlnaHRJbjQwOiBfY3JlYXRlQW5pbWF0aW9uKEZBREVfSU4gKyBcIixcIiArIFNMSURFX1JJR0hUX0lONDAsIERVUkFUSU9OXzMsIEVBU0lOR19GVU5DVElPTl8xKSxcbiAgICBzbGlkZVJpZ2h0SW40MDA6IF9jcmVhdGVBbmltYXRpb24oRkFERV9JTiArIFwiLFwiICsgU0xJREVfUklHSFRfSU40MDAsIERVUkFUSU9OXzMsIEVBU0lOR19GVU5DVElPTl8xKSxcbiAgICBzbGlkZUxlZnRJbjEwOiBfY3JlYXRlQW5pbWF0aW9uKEZBREVfSU4gKyBcIixcIiArIFNMSURFX0xFRlRfSU4xMCwgRFVSQVRJT05fMywgRUFTSU5HX0ZVTkNUSU9OXzEpLFxuICAgIHNsaWRlTGVmdEluMjA6IF9jcmVhdGVBbmltYXRpb24oRkFERV9JTiArIFwiLFwiICsgU0xJREVfTEVGVF9JTjIwLCBEVVJBVElPTl8zLCBFQVNJTkdfRlVOQ1RJT05fMSksXG4gICAgc2xpZGVMZWZ0SW40MDogX2NyZWF0ZUFuaW1hdGlvbihGQURFX0lOICsgXCIsXCIgKyBTTElERV9MRUZUX0lONDAsIERVUkFUSU9OXzMsIEVBU0lOR19GVU5DVElPTl8xKSxcbiAgICBzbGlkZUxlZnRJbjQwMDogX2NyZWF0ZUFuaW1hdGlvbihGQURFX0lOICsgXCIsXCIgKyBTTElERV9MRUZUX0lONDAwLCBEVVJBVElPTl8zLCBFQVNJTkdfRlVOQ1RJT05fMSksXG4gICAgc2xpZGVVcEluMTA6IF9jcmVhdGVBbmltYXRpb24oRkFERV9JTiArIFwiLFwiICsgU0xJREVfVVBfSU4xMCwgRFVSQVRJT05fMywgRUFTSU5HX0ZVTkNUSU9OXzEpLFxuICAgIHNsaWRlVXBJbjIwOiBfY3JlYXRlQW5pbWF0aW9uKEZBREVfSU4gKyBcIixcIiArIFNMSURFX1VQX0lOMjAsIERVUkFUSU9OXzMsIEVBU0lOR19GVU5DVElPTl8xKSxcbiAgICBzbGlkZURvd25JbjEwOiBfY3JlYXRlQW5pbWF0aW9uKEZBREVfSU4gKyBcIixcIiArIFNMSURFX0RPV05fSU4xMCwgRFVSQVRJT05fMywgRUFTSU5HX0ZVTkNUSU9OXzEpLFxuICAgIHNsaWRlRG93bkluMjA6IF9jcmVhdGVBbmltYXRpb24oRkFERV9JTiArIFwiLFwiICsgU0xJREVfRE9XTl9JTjIwLCBEVVJBVElPTl8zLCBFQVNJTkdfRlVOQ1RJT05fMSksXG4gICAgc2xpZGVSaWdodE91dDEwOiBfY3JlYXRlQW5pbWF0aW9uKEZBREVfT1VUICsgXCIsXCIgKyBTTElERV9SSUdIVF9PVVQxMCwgRFVSQVRJT05fMywgRUFTSU5HX0ZVTkNUSU9OXzEpLFxuICAgIHNsaWRlUmlnaHRPdXQyMDogX2NyZWF0ZUFuaW1hdGlvbihGQURFX09VVCArIFwiLFwiICsgU0xJREVfUklHSFRfT1VUMjAsIERVUkFUSU9OXzMsIEVBU0lOR19GVU5DVElPTl8xKSxcbiAgICBzbGlkZVJpZ2h0T3V0NDA6IF9jcmVhdGVBbmltYXRpb24oRkFERV9PVVQgKyBcIixcIiArIFNMSURFX1JJR0hUX09VVDQwLCBEVVJBVElPTl8zLCBFQVNJTkdfRlVOQ1RJT05fMSksXG4gICAgc2xpZGVSaWdodE91dDQwMDogX2NyZWF0ZUFuaW1hdGlvbihGQURFX09VVCArIFwiLFwiICsgU0xJREVfUklHSFRfT1VUNDAwLCBEVVJBVElPTl8zLCBFQVNJTkdfRlVOQ1RJT05fMSksXG4gICAgc2xpZGVMZWZ0T3V0MTA6IF9jcmVhdGVBbmltYXRpb24oRkFERV9PVVQgKyBcIixcIiArIFNMSURFX0xFRlRfT1VUMTAsIERVUkFUSU9OXzMsIEVBU0lOR19GVU5DVElPTl8xKSxcbiAgICBzbGlkZUxlZnRPdXQyMDogX2NyZWF0ZUFuaW1hdGlvbihGQURFX09VVCArIFwiLFwiICsgU0xJREVfTEVGVF9PVVQyMCwgRFVSQVRJT05fMywgRUFTSU5HX0ZVTkNUSU9OXzEpLFxuICAgIHNsaWRlTGVmdE91dDQwOiBfY3JlYXRlQW5pbWF0aW9uKEZBREVfT1VUICsgXCIsXCIgKyBTTElERV9MRUZUX09VVDQwLCBEVVJBVElPTl8zLCBFQVNJTkdfRlVOQ1RJT05fMSksXG4gICAgc2xpZGVMZWZ0T3V0NDAwOiBfY3JlYXRlQW5pbWF0aW9uKEZBREVfT1VUICsgXCIsXCIgKyBTTElERV9MRUZUX09VVDQwMCwgRFVSQVRJT05fMywgRUFTSU5HX0ZVTkNUSU9OXzEpLFxuICAgIHNsaWRlVXBPdXQxMDogX2NyZWF0ZUFuaW1hdGlvbihGQURFX09VVCArIFwiLFwiICsgU0xJREVfVVBfT1VUMTAsIERVUkFUSU9OXzMsIEVBU0lOR19GVU5DVElPTl8xKSxcbiAgICBzbGlkZVVwT3V0MjA6IF9jcmVhdGVBbmltYXRpb24oRkFERV9PVVQgKyBcIixcIiArIFNMSURFX1VQX09VVDIwLCBEVVJBVElPTl8zLCBFQVNJTkdfRlVOQ1RJT05fMSksXG4gICAgc2xpZGVEb3duT3V0MTA6IF9jcmVhdGVBbmltYXRpb24oRkFERV9PVVQgKyBcIixcIiArIFNMSURFX0RPV05fT1VUMTAsIERVUkFUSU9OXzMsIEVBU0lOR19GVU5DVElPTl8xKSxcbiAgICBzbGlkZURvd25PdXQyMDogX2NyZWF0ZUFuaW1hdGlvbihGQURFX09VVCArIFwiLFwiICsgU0xJREVfRE9XTl9PVVQyMCwgRFVSQVRJT05fMywgRUFTSU5HX0ZVTkNUSU9OXzEpLFxuICAgIHNjYWxlVXBJbjEwMDogX2NyZWF0ZUFuaW1hdGlvbihGQURFX0lOICsgXCIsXCIgKyBTQ0FMRV9VUDEwMCwgRFVSQVRJT05fMywgRUFTSU5HX0ZVTkNUSU9OXzEpLFxuICAgIHNjYWxlRG93bkluMTAwOiBfY3JlYXRlQW5pbWF0aW9uKEZBREVfSU4gKyBcIixcIiArIFNDQUxFX0RPV04xMDAsIERVUkFUSU9OXzMsIEVBU0lOR19GVU5DVElPTl8xKSxcbiAgICBzY2FsZVVwT3V0MTAzOiBfY3JlYXRlQW5pbWF0aW9uKEZBREVfT1VUICsgXCIsXCIgKyBTQ0FMRV9VUDEwMywgRFVSQVRJT05fMSwgRUFTSU5HX0ZVTkNUSU9OXzIpLFxuICAgIHNjYWxlRG93bk91dDk4OiBfY3JlYXRlQW5pbWF0aW9uKEZBREVfT1VUICsgXCIsXCIgKyBTQ0FMRV9ET1dOOTgsIERVUkFUSU9OXzEsIEVBU0lOR19GVU5DVElPTl8yKSxcbiAgICBmYWRlSW4xMDA6IF9jcmVhdGVBbmltYXRpb24oRkFERV9JTiwgRFVSQVRJT05fMSwgRUFTSU5HX0ZVTkNUSU9OXzIpLFxuICAgIGZhZGVJbjIwMDogX2NyZWF0ZUFuaW1hdGlvbihGQURFX0lOLCBEVVJBVElPTl8yLCBFQVNJTkdfRlVOQ1RJT05fMiksXG4gICAgZmFkZUluNDAwOiBfY3JlYXRlQW5pbWF0aW9uKEZBREVfSU4sIERVUkFUSU9OXzMsIEVBU0lOR19GVU5DVElPTl8yKSxcbiAgICBmYWRlSW41MDA6IF9jcmVhdGVBbmltYXRpb24oRkFERV9JTiwgRFVSQVRJT05fNCwgRUFTSU5HX0ZVTkNUSU9OXzIpLFxuICAgIGZhZGVPdXQxMDA6IF9jcmVhdGVBbmltYXRpb24oRkFERV9PVVQsIERVUkFUSU9OXzEsIEVBU0lOR19GVU5DVElPTl8yKSxcbiAgICBmYWRlT3V0MjAwOiBfY3JlYXRlQW5pbWF0aW9uKEZBREVfT1VULCBEVVJBVElPTl8yLCBFQVNJTkdfRlVOQ1RJT05fMiksXG4gICAgZmFkZU91dDQwMDogX2NyZWF0ZUFuaW1hdGlvbihGQURFX09VVCwgRFVSQVRJT05fMywgRUFTSU5HX0ZVTkNUSU9OXzIpLFxuICAgIGZhZGVPdXQ1MDA6IF9jcmVhdGVBbmltYXRpb24oRkFERV9PVVQsIERVUkFUSU9OXzQsIEVBU0lOR19GVU5DVElPTl8yKSxcbiAgICByb3RhdGU5MGRlZzogX2NyZWF0ZUFuaW1hdGlvbihST1RBVEU5MCwgJzAuMXMnLCBFQVNJTkdfRlVOQ1RJT05fMiksXG4gICAgcm90YXRlTjkwZGVnOiBfY3JlYXRlQW5pbWF0aW9uKFJPVEFURV9OOTAsICcwLjFzJywgRUFTSU5HX0ZVTkNUSU9OXzIpLFxuICAgIC8vIGV4cGFuZENvbGxhcHNlIDEwMC8yMDAvNDAwLCBkZWxheSAxMDAvMjAwXG59O1xuZnVuY3Rpb24gX2NyZWF0ZUFuaW1hdGlvbihhbmltYXRpb25OYW1lLCBhbmltYXRpb25EdXJhdGlvbiwgYW5pbWF0aW9uVGltaW5nRnVuY3Rpb24pIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBhbmltYXRpb25OYW1lOiBhbmltYXRpb25OYW1lLFxuICAgICAgICBhbmltYXRpb25EdXJhdGlvbjogYW5pbWF0aW9uRHVyYXRpb24sXG4gICAgICAgIGFuaW1hdGlvblRpbWluZ0Z1bmN0aW9uOiBhbmltYXRpb25UaW1pbmdGdW5jdGlvbixcbiAgICAgICAgYW5pbWF0aW9uRmlsbE1vZGU6ICdib3RoJyxcbiAgICB9O1xufVxuZnVuY3Rpb24gX2NyZWF0ZVNsaWRlSW5YKGZyb21YKSB7XG4gICAgcmV0dXJuIGtleWZyYW1lcyh7XG4gICAgICAgIGZyb206IHsgdHJhbnNmb3JtOiBcInRyYW5zbGF0ZTNkKFwiICsgZnJvbVggKyBcInB4LDAsMClcIiwgcG9pbnRlckV2ZW50czogJ25vbmUnIH0sXG4gICAgICAgIHRvOiB7IHRyYW5zZm9ybTogXCJ0cmFuc2xhdGUzZCgwLDAsMClcIiwgcG9pbnRlckV2ZW50czogJ2F1dG8nIH0sXG4gICAgfSk7XG59XG5mdW5jdGlvbiBfY3JlYXRlU2xpZGVJblkoZnJvbVkpIHtcbiAgICByZXR1cm4ga2V5ZnJhbWVzKHtcbiAgICAgICAgZnJvbTogeyB0cmFuc2Zvcm06IFwidHJhbnNsYXRlM2QoMCxcIiArIGZyb21ZICsgXCJweCwwKVwiLCBwb2ludGVyRXZlbnRzOiAnbm9uZScgfSxcbiAgICAgICAgdG86IHsgdHJhbnNmb3JtOiBcInRyYW5zbGF0ZTNkKDAsMCwwKVwiLCBwb2ludGVyRXZlbnRzOiAnYXV0bycgfSxcbiAgICB9KTtcbn1cbmZ1bmN0aW9uIF9jcmVhdGVTbGlkZU91dFgodG9YKSB7XG4gICAgcmV0dXJuIGtleWZyYW1lcyh7XG4gICAgICAgIGZyb206IHsgdHJhbnNmb3JtOiBcInRyYW5zbGF0ZTNkKDAsMCwwKVwiIH0sXG4gICAgICAgIHRvOiB7IHRyYW5zZm9ybTogXCJ0cmFuc2xhdGUzZChcIiArIHRvWCArIFwicHgsMCwwKVwiIH0sXG4gICAgfSk7XG59XG5mdW5jdGlvbiBfY3JlYXRlU2xpZGVPdXRZKHRvWSkge1xuICAgIHJldHVybiBrZXlmcmFtZXMoe1xuICAgICAgICBmcm9tOiB7IHRyYW5zZm9ybTogXCJ0cmFuc2xhdGUzZCgwLDAsMClcIiB9LFxuICAgICAgICB0bzogeyB0cmFuc2Zvcm06IFwidHJhbnNsYXRlM2QoMCxcIiArIHRvWSArIFwicHgsMClcIiB9LFxuICAgIH0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9QW5pbWF0aW9uU3R5bGVzLmpzLm1hcCIsImltcG9ydCB7IGJ1aWxkQ2xhc3NNYXAgfSBmcm9tICcuLi91dGlsaXRpZXMvaW5kZXgnO1xuaW1wb3J0IHsgQW5pbWF0aW9uU3R5bGVzIH0gZnJvbSAnLi4vc3R5bGVzL2luZGV4Jztcbi8qKlxuICoge0Bkb2NDYXRlZ29yeSBBbmltYXRpb25DbGFzc05hbWVzfVxuICovXG5leHBvcnQgdmFyIEFuaW1hdGlvbkNsYXNzTmFtZXMgPSBidWlsZENsYXNzTWFwKEFuaW1hdGlvblN0eWxlcyk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1BbmltYXRpb25DbGFzc05hbWVzLmpzLm1hcCIsIi8vIEZvbnQgZmFjZSBuYW1lcyB0byBiZSByZWdpc3RlcmVkLlxuZXhwb3J0IHZhciBMb2NhbGl6ZWRGb250TmFtZXM7XG4oZnVuY3Rpb24gKExvY2FsaXplZEZvbnROYW1lcykge1xuICAgIExvY2FsaXplZEZvbnROYW1lcy5BcmFiaWMgPSAnU2Vnb2UgVUkgV2ViIChBcmFiaWMpJztcbiAgICBMb2NhbGl6ZWRGb250TmFtZXMuQ3lyaWxsaWMgPSAnU2Vnb2UgVUkgV2ViIChDeXJpbGxpYyknO1xuICAgIExvY2FsaXplZEZvbnROYW1lcy5FYXN0RXVyb3BlYW4gPSAnU2Vnb2UgVUkgV2ViIChFYXN0IEV1cm9wZWFuKSc7XG4gICAgTG9jYWxpemVkRm9udE5hbWVzLkdyZWVrID0gJ1NlZ29lIFVJIFdlYiAoR3JlZWspJztcbiAgICBMb2NhbGl6ZWRGb250TmFtZXMuSGVicmV3ID0gJ1NlZ29lIFVJIFdlYiAoSGVicmV3KSc7XG4gICAgTG9jYWxpemVkRm9udE5hbWVzLlRoYWkgPSAnTGVlbGF3YWRlZSBVSSBXZWInO1xuICAgIExvY2FsaXplZEZvbnROYW1lcy5WaWV0bmFtZXNlID0gJ1NlZ29lIFVJIFdlYiAoVmlldG5hbWVzZSknO1xuICAgIExvY2FsaXplZEZvbnROYW1lcy5XZXN0RXVyb3BlYW4gPSAnU2Vnb2UgVUkgV2ViIChXZXN0IEV1cm9wZWFuKSc7XG4gICAgTG9jYWxpemVkRm9udE5hbWVzLlNlbGF3aWsgPSAnU2VsYXdpayBXZWInO1xuICAgIExvY2FsaXplZEZvbnROYW1lcy5Bcm1lbmlhbiA9ICdTZWdvZSBVSSBXZWIgKEFybWVuaWFuKSc7XG4gICAgTG9jYWxpemVkRm9udE5hbWVzLkdlb3JnaWFuID0gJ1NlZ29lIFVJIFdlYiAoR2VvcmdpYW4pJztcbn0pKExvY2FsaXplZEZvbnROYW1lcyB8fCAoTG9jYWxpemVkRm9udE5hbWVzID0ge30pKTtcbi8vIEZvbnQgZmFtaWxpZXMgd2l0aCBmYWxsYmFja3MsIGZvciB0aGUgZ2VuZXJhbCByZWdpb25zLlxuZXhwb3J0IHZhciBMb2NhbGl6ZWRGb250RmFtaWxpZXM7XG4oZnVuY3Rpb24gKExvY2FsaXplZEZvbnRGYW1pbGllcykge1xuICAgIExvY2FsaXplZEZvbnRGYW1pbGllcy5BcmFiaWMgPSBcIidcIiArIExvY2FsaXplZEZvbnROYW1lcy5BcmFiaWMgKyBcIidcIjtcbiAgICBMb2NhbGl6ZWRGb250RmFtaWxpZXMuQ2hpbmVzZVNpbXBsaWZpZWQgPSBcIidNaWNyb3NvZnQgWWFoZWkgVUknLCBWZXJkYW5hLCBTaW1zdW5cIjtcbiAgICBMb2NhbGl6ZWRGb250RmFtaWxpZXMuQ2hpbmVzZVRyYWRpdGlvbmFsID0gXCInTWljcm9zb2Z0IEpoZW5naGVpIFVJJywgUG1pbmdsaXVcIjtcbiAgICBMb2NhbGl6ZWRGb250RmFtaWxpZXMuQ3lyaWxsaWMgPSBcIidcIiArIExvY2FsaXplZEZvbnROYW1lcy5DeXJpbGxpYyArIFwiJ1wiO1xuICAgIExvY2FsaXplZEZvbnRGYW1pbGllcy5FYXN0RXVyb3BlYW4gPSBcIidcIiArIExvY2FsaXplZEZvbnROYW1lcy5FYXN0RXVyb3BlYW4gKyBcIidcIjtcbiAgICBMb2NhbGl6ZWRGb250RmFtaWxpZXMuR3JlZWsgPSBcIidcIiArIExvY2FsaXplZEZvbnROYW1lcy5HcmVlayArIFwiJ1wiO1xuICAgIExvY2FsaXplZEZvbnRGYW1pbGllcy5IZWJyZXcgPSBcIidcIiArIExvY2FsaXplZEZvbnROYW1lcy5IZWJyZXcgKyBcIidcIjtcbiAgICBMb2NhbGl6ZWRGb250RmFtaWxpZXMuSGluZGkgPSBcIidOaXJtYWxhIFVJJ1wiO1xuICAgIExvY2FsaXplZEZvbnRGYW1pbGllcy5KYXBhbmVzZSA9IFwiJ1l1IEdvdGhpYyBVSScsICdNZWlyeW8gVUknLCBNZWlyeW8sICdNUyBQZ290aGljJywgT3Nha2FcIjtcbiAgICBMb2NhbGl6ZWRGb250RmFtaWxpZXMuS29yZWFuID0gXCInTWFsZ3VuIEdvdGhpYycsIEd1bGltXCI7XG4gICAgTG9jYWxpemVkRm9udEZhbWlsaWVzLlNlbGF3aWsgPSBcIidcIiArIExvY2FsaXplZEZvbnROYW1lcy5TZWxhd2lrICsgXCInXCI7XG4gICAgTG9jYWxpemVkRm9udEZhbWlsaWVzLlRoYWkgPSBcIidMZWVsYXdhZGVlIFVJIFdlYicsICdLbWVyIFVJJ1wiO1xuICAgIExvY2FsaXplZEZvbnRGYW1pbGllcy5WaWV0bmFtZXNlID0gXCInXCIgKyBMb2NhbGl6ZWRGb250TmFtZXMuVmlldG5hbWVzZSArIFwiJ1wiO1xuICAgIExvY2FsaXplZEZvbnRGYW1pbGllcy5XZXN0RXVyb3BlYW4gPSBcIidcIiArIExvY2FsaXplZEZvbnROYW1lcy5XZXN0RXVyb3BlYW4gKyBcIidcIjtcbiAgICBMb2NhbGl6ZWRGb250RmFtaWxpZXMuQXJtZW5pYW4gPSBcIidcIiArIExvY2FsaXplZEZvbnROYW1lcy5Bcm1lbmlhbiArIFwiJ1wiO1xuICAgIExvY2FsaXplZEZvbnRGYW1pbGllcy5HZW9yZ2lhbiA9IFwiJ1wiICsgTG9jYWxpemVkRm9udE5hbWVzLkdlb3JnaWFuICsgXCInXCI7XG59KShMb2NhbGl6ZWRGb250RmFtaWxpZXMgfHwgKExvY2FsaXplZEZvbnRGYW1pbGllcyA9IHt9KSk7XG4vLyBTdGFuZGFyZCBmb250IHNpemVzLlxuZXhwb3J0IHZhciBGb250U2l6ZXM7XG4oZnVuY3Rpb24gKEZvbnRTaXplcykge1xuICAgIEZvbnRTaXplcy5zaXplMTAgPSAnMTBweCc7XG4gICAgRm9udFNpemVzLnNpemUxMiA9ICcxMnB4JztcbiAgICBGb250U2l6ZXMuc2l6ZTE0ID0gJzE0cHgnO1xuICAgIEZvbnRTaXplcy5zaXplMTYgPSAnMTZweCc7XG4gICAgRm9udFNpemVzLnNpemUxOCA9ICcxOHB4JztcbiAgICBGb250U2l6ZXMuc2l6ZTIwID0gJzIwcHgnO1xuICAgIEZvbnRTaXplcy5zaXplMjQgPSAnMjRweCc7XG4gICAgRm9udFNpemVzLnNpemUyOCA9ICcyOHB4JztcbiAgICBGb250U2l6ZXMuc2l6ZTMyID0gJzMycHgnO1xuICAgIEZvbnRTaXplcy5zaXplNDIgPSAnNDJweCc7XG4gICAgRm9udFNpemVzLnNpemU2OCA9ICc2OHB4JztcbiAgICBGb250U2l6ZXMubWluaSA9ICcxMHB4JztcbiAgICBGb250U2l6ZXMueFNtYWxsID0gJzEwcHgnO1xuICAgIEZvbnRTaXplcy5zbWFsbCA9ICcxMnB4JztcbiAgICBGb250U2l6ZXMuc21hbGxQbHVzID0gJzEycHgnO1xuICAgIEZvbnRTaXplcy5tZWRpdW0gPSAnMTRweCc7XG4gICAgRm9udFNpemVzLm1lZGl1bVBsdXMgPSAnMTZweCc7XG4gICAgRm9udFNpemVzLmljb24gPSAnMTZweCc7XG4gICAgRm9udFNpemVzLmxhcmdlID0gJzE4cHgnO1xuICAgIEZvbnRTaXplcy54TGFyZ2UgPSAnMjBweCc7XG4gICAgRm9udFNpemVzLnhMYXJnZVBsdXMgPSAnMjRweCc7XG4gICAgRm9udFNpemVzLnh4TGFyZ2UgPSAnMjhweCc7XG4gICAgRm9udFNpemVzLnh4TGFyZ2VQbHVzID0gJzMycHgnO1xuICAgIEZvbnRTaXplcy5zdXBlckxhcmdlID0gJzQycHgnO1xuICAgIEZvbnRTaXplcy5tZWdhID0gJzY4cHgnO1xufSkoRm9udFNpemVzIHx8IChGb250U2l6ZXMgPSB7fSkpO1xuLy8gU3RhbmRhcmQgZm9udCB3ZWlnaHRzLlxuZXhwb3J0IHZhciBGb250V2VpZ2h0cztcbihmdW5jdGlvbiAoRm9udFdlaWdodHMpIHtcbiAgICBGb250V2VpZ2h0cy5saWdodCA9IDEwMDtcbiAgICBGb250V2VpZ2h0cy5zZW1pbGlnaHQgPSAzMDA7XG4gICAgRm9udFdlaWdodHMucmVndWxhciA9IDQwMDtcbiAgICBGb250V2VpZ2h0cy5zZW1pYm9sZCA9IDYwMDtcbiAgICBGb250V2VpZ2h0cy5ib2xkID0gNzAwO1xufSkoRm9udFdlaWdodHMgfHwgKEZvbnRXZWlnaHRzID0ge30pKTtcbi8vIFN0YW5kYXJkIEljb24gU2l6ZXMuXG5leHBvcnQgdmFyIEljb25Gb250U2l6ZXM7XG4oZnVuY3Rpb24gKEljb25Gb250U2l6ZXMpIHtcbiAgICBJY29uRm9udFNpemVzLnhTbWFsbCA9ICcxMHB4JztcbiAgICBJY29uRm9udFNpemVzLnNtYWxsID0gJzEycHgnO1xuICAgIEljb25Gb250U2l6ZXMubWVkaXVtID0gJzE2cHgnO1xuICAgIEljb25Gb250U2l6ZXMubGFyZ2UgPSAnMjBweCc7XG59KShJY29uRm9udFNpemVzIHx8IChJY29uRm9udFNpemVzID0ge30pKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUZsdWVudEZvbnRzLmpzLm1hcCIsImltcG9ydCB7IG1lcmdlU3R5bGVzIH0gZnJvbSAnLi4vTWVyZ2VTdHlsZXMnO1xuLyoqXG4gKiBCdWlsZHMgYSBjbGFzcyBuYW1lcyBvYmplY3QgZnJvbSBhIGdpdmVuIG1hcC5cbiAqXG4gKiBAcGFyYW0gc3R5bGVzIC0gTWFwIG9mIHVucHJvY2Vzc2VkIHN0eWxlcy5cbiAqIEByZXR1cm5zIE1hcCBvZiBwcm9wZXJ0eSBuYW1lIHRvIGNsYXNzIG5hbWUuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBidWlsZENsYXNzTWFwKHN0eWxlcykge1xuICAgIHZhciBjbGFzc2VzID0ge307XG4gICAgdmFyIF9sb29wXzEgPSBmdW5jdGlvbiAoc3R5bGVOYW1lKSB7XG4gICAgICAgIGlmIChzdHlsZXMuaGFzT3duUHJvcGVydHkoc3R5bGVOYW1lKSkge1xuICAgICAgICAgICAgdmFyIGNsYXNzTmFtZV8xO1xuICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGNsYXNzZXMsIHN0eWxlTmFtZSwge1xuICAgICAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoY2xhc3NOYW1lXzEgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZV8xID0gbWVyZ2VTdHlsZXMoc3R5bGVzW3N0eWxlTmFtZV0pLnRvU3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNsYXNzTmFtZV8xO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgZm9yICh2YXIgc3R5bGVOYW1lIGluIHN0eWxlcykge1xuICAgICAgICBfbG9vcF8xKHN0eWxlTmFtZSk7XG4gICAgfVxuICAgIHJldHVybiBjbGFzc2VzO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YnVpbGRDbGFzc01hcC5qcy5tYXAiLCJleHBvcnQgdmFyIEhpZ2hDb250cmFzdFNlbGVjdG9yID0gJ0BtZWRpYSBzY3JlZW4gYW5kICgtbXMtaGlnaC1jb250cmFzdDogYWN0aXZlKSwgKGZvcmNlZC1jb2xvcnM6IGFjdGl2ZSknO1xuZXhwb3J0IHZhciBIaWdoQ29udHJhc3RTZWxlY3RvcldoaXRlID0gJ0BtZWRpYSBzY3JlZW4gYW5kICgtbXMtaGlnaC1jb250cmFzdDogYmxhY2stb24td2hpdGUpLCAoZm9yY2VkLWNvbG9yczogYmxhY2stb24td2hpdGUpJztcbmV4cG9ydCB2YXIgSGlnaENvbnRyYXN0U2VsZWN0b3JCbGFjayA9ICdAbWVkaWEgc2NyZWVuIGFuZCAoLW1zLWhpZ2gtY29udHJhc3Q6IHdoaXRlLW9uLWJsYWNrKSwgKGZvcmNlZC1jb2xvcnM6IHdoaXRlLW9uLWJsYWNrKSc7XG5leHBvcnQgdmFyIEVkZ2VDaHJvbWl1bUhpZ2hDb250cmFzdFNlbGVjdG9yID0gJ0BtZWRpYSBzY3JlZW4gYW5kIChmb3JjZWQtY29sb3JzOiBhY3RpdmUpJztcbmV4cG9ydCB2YXIgU2NyZWVuV2lkdGhNaW5TbWFsbCA9IDMyMDtcbmV4cG9ydCB2YXIgU2NyZWVuV2lkdGhNaW5NZWRpdW0gPSA0ODA7XG5leHBvcnQgdmFyIFNjcmVlbldpZHRoTWluTGFyZ2UgPSA2NDA7XG5leHBvcnQgdmFyIFNjcmVlbldpZHRoTWluWExhcmdlID0gMTAyNDtcbmV4cG9ydCB2YXIgU2NyZWVuV2lkdGhNaW5YWExhcmdlID0gMTM2NjtcbmV4cG9ydCB2YXIgU2NyZWVuV2lkdGhNaW5YWFhMYXJnZSA9IDE5MjA7XG5leHBvcnQgdmFyIFNjcmVlbldpZHRoTWF4U21hbGwgPSBTY3JlZW5XaWR0aE1pbk1lZGl1bSAtIDE7XG5leHBvcnQgdmFyIFNjcmVlbldpZHRoTWF4TWVkaXVtID0gU2NyZWVuV2lkdGhNaW5MYXJnZSAtIDE7XG5leHBvcnQgdmFyIFNjcmVlbldpZHRoTWF4TGFyZ2UgPSBTY3JlZW5XaWR0aE1pblhMYXJnZSAtIDE7XG5leHBvcnQgdmFyIFNjcmVlbldpZHRoTWF4WExhcmdlID0gU2NyZWVuV2lkdGhNaW5YWExhcmdlIC0gMTtcbmV4cG9ydCB2YXIgU2NyZWVuV2lkdGhNYXhYWExhcmdlID0gU2NyZWVuV2lkdGhNaW5YWFhMYXJnZSAtIDE7XG5leHBvcnQgdmFyIFNjcmVlbldpZHRoTWluVWhmTW9iaWxlID0gNzY4O1xuZXhwb3J0IGZ1bmN0aW9uIGdldFNjcmVlblNlbGVjdG9yKG1pbiwgbWF4KSB7XG4gICAgdmFyIG1pblNlbGVjdG9yID0gdHlwZW9mIG1pbiA9PT0gJ251bWJlcicgPyBcIiBhbmQgKG1pbi13aWR0aDogXCIgKyBtaW4gKyBcInB4KVwiIDogJyc7XG4gICAgdmFyIG1heFNlbGVjdG9yID0gdHlwZW9mIG1heCA9PT0gJ251bWJlcicgPyBcIiBhbmQgKG1heC13aWR0aDogXCIgKyBtYXggKyBcInB4KVwiIDogJyc7XG4gICAgcmV0dXJuIFwiQG1lZGlhIG9ubHkgc2NyZWVuXCIgKyBtaW5TZWxlY3RvciArIG1heFNlbGVjdG9yO1xufVxuLyoqXG4gKiBUaGUgc3R5bGUgd2hpY2ggdHVybnMgb2ZmIGhpZ2ggY29udHJhc3QgYWRqdXN0bWVudCBpbiBicm93c2Vycy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldEhpZ2hDb250cmFzdE5vQWRqdXN0U3R5bGUoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgZm9yY2VkQ29sb3JBZGp1c3Q6ICdub25lJyxcbiAgICAgICAgTXNIaWdoQ29udHJhc3RBZGp1c3Q6ICdub25lJyxcbiAgICB9O1xufVxuLyoqXG4gKiBUaGUgc3R5bGUgd2hpY2ggdHVybnMgb2ZmIGhpZ2ggY29udHJhc3QgYWRqdXN0bWVudCBpbiAob25seSkgRWRnZSBDaHJvbWl1bSBicm93c2VyLlxuICogIEBkZXByZWNhdGVkIFVzZSBgZ2V0SGlnaENvbnRyYXN0Tm9BZGp1c3RTdHlsZWBcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldEVkZ2VDaHJvbWl1bU5vSGlnaENvbnRyYXN0QWRqdXN0U2VsZWN0b3IoKSB7XG4gICAgdmFyIF9hO1xuICAgIHJldHVybiBfYSA9IHt9LFxuICAgICAgICBfYVtFZGdlQ2hyb21pdW1IaWdoQ29udHJhc3RTZWxlY3Rvcl0gPSB7XG4gICAgICAgICAgICBmb3JjZWRDb2xvckFkanVzdDogJ25vbmUnLFxuICAgICAgICB9LFxuICAgICAgICBfYTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUNvbW1vblN0eWxlcy5qcy5tYXAiLCJleHBvcnQgdmFyIFpJbmRleGVzO1xuKGZ1bmN0aW9uIChaSW5kZXhlcykge1xuICAgIFpJbmRleGVzLk5hdiA9IDE7XG4gICAgLyoqXG4gICAgICogQGRlcHJlY2F0ZWQgRG8gbm90IHVzZVxuICAgICAqL1xuICAgIFpJbmRleGVzLlNjcm9sbGFibGVQYW5lID0gMTtcbiAgICBaSW5kZXhlcy5Gb2N1c1N0eWxlID0gMTtcbiAgICBaSW5kZXhlcy5Db2FjaG1hcmsgPSAxMDAwO1xuICAgIFpJbmRleGVzLkxheWVyID0gMTAwMDAwMDtcbiAgICBaSW5kZXhlcy5LZXl0aXBMYXllciA9IDEwMDAwMDE7XG59KShaSW5kZXhlcyB8fCAoWkluZGV4ZXMgPSB7fSkpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ekluZGV4ZXMuanMubWFwIiwiaW1wb3J0IHsgSGlnaENvbnRyYXN0U2VsZWN0b3IgfSBmcm9tICcuL0NvbW1vblN0eWxlcyc7XG5pbXBvcnQgeyBJc0ZvY3VzVmlzaWJsZUNsYXNzTmFtZSB9IGZyb20gJ0BmbHVlbnR1aS91dGlsaXRpZXMnO1xuaW1wb3J0IHsgWkluZGV4ZXMgfSBmcm9tICcuL3pJbmRleGVzJztcbmV4cG9ydCBmdW5jdGlvbiBnZXRGb2N1c1N0eWxlKHRoZW1lLCBpbnNldE9yT3B0aW9ucywgcG9zaXRpb24sIGhpZ2hDb250cmFzdFN0eWxlLCBib3JkZXJDb2xvciwgb3V0bGluZUNvbG9yLCBpc0ZvY3VzZWRPbmx5KSB7XG4gICAgaWYgKHR5cGVvZiBpbnNldE9yT3B0aW9ucyA9PT0gJ251bWJlcicgfHwgIWluc2V0T3JPcHRpb25zKSB7XG4gICAgICAgIHJldHVybiBfZ2V0Rm9jdXNTdHlsZUludGVybmFsKHRoZW1lLCB7XG4gICAgICAgICAgICBpbnNldDogaW5zZXRPck9wdGlvbnMsXG4gICAgICAgICAgICBwb3NpdGlvbjogcG9zaXRpb24sXG4gICAgICAgICAgICBoaWdoQ29udHJhc3RTdHlsZTogaGlnaENvbnRyYXN0U3R5bGUsXG4gICAgICAgICAgICBib3JkZXJDb2xvcjogYm9yZGVyQ29sb3IsXG4gICAgICAgICAgICBvdXRsaW5lQ29sb3I6IG91dGxpbmVDb2xvcixcbiAgICAgICAgICAgIGlzRm9jdXNlZE9ubHk6IGlzRm9jdXNlZE9ubHksXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIF9nZXRGb2N1c1N0eWxlSW50ZXJuYWwodGhlbWUsIGluc2V0T3JPcHRpb25zKTtcbiAgICB9XG59XG5mdW5jdGlvbiBfZ2V0Rm9jdXNTdHlsZUludGVybmFsKHRoZW1lLCBvcHRpb25zKSB7XG4gICAgdmFyIF9hLCBfYjtcbiAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7IG9wdGlvbnMgPSB7fTsgfVxuICAgIHZhciBfYyA9IG9wdGlvbnMuaW5zZXQsIGluc2V0ID0gX2MgPT09IHZvaWQgMCA/IDAgOiBfYywgX2QgPSBvcHRpb25zLndpZHRoLCB3aWR0aCA9IF9kID09PSB2b2lkIDAgPyAxIDogX2QsIF9lID0gb3B0aW9ucy5wb3NpdGlvbiwgcG9zaXRpb24gPSBfZSA9PT0gdm9pZCAwID8gJ3JlbGF0aXZlJyA6IF9lLCBoaWdoQ29udHJhc3RTdHlsZSA9IG9wdGlvbnMuaGlnaENvbnRyYXN0U3R5bGUsIF9mID0gb3B0aW9ucy5ib3JkZXJDb2xvciwgYm9yZGVyQ29sb3IgPSBfZiA9PT0gdm9pZCAwID8gdGhlbWUucGFsZXR0ZS53aGl0ZSA6IF9mLCBfZyA9IG9wdGlvbnMub3V0bGluZUNvbG9yLCBvdXRsaW5lQ29sb3IgPSBfZyA9PT0gdm9pZCAwID8gdGhlbWUucGFsZXR0ZS5uZXV0cmFsU2Vjb25kYXJ5IDogX2csIF9oID0gb3B0aW9ucy5pc0ZvY3VzZWRPbmx5LCBpc0ZvY3VzZWRPbmx5ID0gX2ggPT09IHZvaWQgMCA/IHRydWUgOiBfaDtcbiAgICByZXR1cm4ge1xuICAgICAgICAvLyBDbGVhciBicm93c2VyLXNwZWNpZmljIGZvY3VzIHN0eWxlcyBhbmQgdXNlICd0cmFuc3BhcmVudCcgYXMgcGxhY2Vob2xkZXIgZm9yIGZvY3VzIHN0eWxlLlxuICAgICAgICBvdXRsaW5lOiAndHJhbnNwYXJlbnQnLFxuICAgICAgICAvLyBSZXF1aXJlbWVudCBiZWNhdXNlIHBzZXVkby1lbGVtZW50IGlzIGFic29sdXRlbHkgcG9zaXRpb25lZC5cbiAgICAgICAgcG9zaXRpb246IHBvc2l0aW9uLFxuICAgICAgICBzZWxlY3RvcnM6IChfYSA9IHtcbiAgICAgICAgICAgICAgICAvLyBDbGVhciB0aGUgZm9jdXMgYm9yZGVyIGluIEZpcmVmb3guXG4gICAgICAgICAgICAgICAgLy8gUmVmZXJlbmNlOiBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8xOTkzMTkvMTQzNjY3MVxuICAgICAgICAgICAgICAgICc6Oi1tb3otZm9jdXMtaW5uZXInOiB7XG4gICAgICAgICAgICAgICAgICAgIGJvcmRlcjogJzAnLFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAvLyBXaGVuIHRoZSBlbGVtZW50IHRoYXQgdXNlcyB0aGlzIG1peGluIGlzIGluIGEgOmZvY3VzIHN0YXRlLCBhZGQgYSBwc2V1ZG8tZWxlbWVudCB0b1xuICAgICAgICAgICAgLy8gY3JlYXRlIGEgYm9yZGVyLlxuICAgICAgICAgICAgX2FbXCIuXCIgKyBJc0ZvY3VzVmlzaWJsZUNsYXNzTmFtZSArIFwiICZcIiArIChpc0ZvY3VzZWRPbmx5ID8gJzpmb2N1cycgOiAnJykgKyBcIjphZnRlclwiXSA9IHtcbiAgICAgICAgICAgICAgICBjb250ZW50OiAnXCJcIicsXG4gICAgICAgICAgICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICAgICAgICAgICAgbGVmdDogaW5zZXQgKyAxLFxuICAgICAgICAgICAgICAgIHRvcDogaW5zZXQgKyAxLFxuICAgICAgICAgICAgICAgIGJvdHRvbTogaW5zZXQgKyAxLFxuICAgICAgICAgICAgICAgIHJpZ2h0OiBpbnNldCArIDEsXG4gICAgICAgICAgICAgICAgYm9yZGVyOiB3aWR0aCArIFwicHggc29saWQgXCIgKyBib3JkZXJDb2xvcixcbiAgICAgICAgICAgICAgICBvdXRsaW5lOiB3aWR0aCArIFwicHggc29saWQgXCIgKyBvdXRsaW5lQ29sb3IsXG4gICAgICAgICAgICAgICAgekluZGV4OiBaSW5kZXhlcy5Gb2N1c1N0eWxlLFxuICAgICAgICAgICAgICAgIHNlbGVjdG9yczogKF9iID0ge30sXG4gICAgICAgICAgICAgICAgICAgIF9iW0hpZ2hDb250cmFzdFNlbGVjdG9yXSA9IGhpZ2hDb250cmFzdFN0eWxlLFxuICAgICAgICAgICAgICAgICAgICBfYiksXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgX2EpLFxuICAgIH07XG59XG4vKipcbiAqIEdlbmVyYXRlcyBzdHlsZSB0byBjbGVhciBicm93c2VyIHNwZWNpZmljIGZvY3VzIHN0eWxlcy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGZvY3VzQ2xlYXIoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgc2VsZWN0b3JzOiB7XG4gICAgICAgICAgICAnJjo6LW1vei1mb2N1cy1pbm5lcic6IHtcbiAgICAgICAgICAgICAgICAvLyBDbGVhciB0aGUgZm9jdXMgYm9yZGVyIGluIEZpcmVmb3guIFJlZmVyZW5jZTogaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMTk5MzE5LzE0MzY2NzFcbiAgICAgICAgICAgICAgICBib3JkZXI6IDAsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgJyYnOiB7XG4gICAgICAgICAgICAgICAgLy8gQ2xlYXIgYnJvd3NlciBzcGVjaWZpYyBmb2N1cyBzdHlsZXMgYW5kIHVzZSB0cmFuc3BhcmVudCBhcyBwbGFjZWhvbGRlciBmb3IgZm9jdXMgc3R5bGVcbiAgICAgICAgICAgICAgICBvdXRsaW5lOiAndHJhbnNwYXJlbnQnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICB9O1xufVxuLyoqXG4gKiBHZW5lcmF0ZXMgYSBzdHlsZSB3aGljaCBjYW4gYmUgdXNlZCB0byBzZXQgYSBib3JkZXIgb24gZm9jdXMuXG4gKlxuICogQHBhcmFtIHRoZW1lIC0gVGhlIHRoZW1lIG9iamVjdCB0byB1c2UuXG4gKiBAcGFyYW0gaW5zZXQgLSBUaGUgbnVtYmVyIG9mIHBpeGVscyB0byBpbnNldCB0aGUgYm9yZGVyIChkZWZhdWx0IDApXG4gKiBAcGFyYW0gd2lkdGggLSBUaGUgYm9yZGVyIHdpZHRoIGluIHBpeGVscyAoZGVmYXVsdCAxKVxuICogQHBhcmFtIGNvbG9yIC0gQ29sb3Igb2YgdGhlIG91dGxpbmUgKGRlZmF1bHQgYHRoZW1lLnBhbGV0dGUubmV1dHJhbFNlY29uZGFyeWApXG4gKiBAcmV0dXJucyBUaGUgc3R5bGUgb2JqZWN0LlxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0Rm9jdXNPdXRsaW5lU3R5bGUodGhlbWUsIGluc2V0LCB3aWR0aCwgY29sb3IpIHtcbiAgICB2YXIgX2E7XG4gICAgaWYgKGluc2V0ID09PSB2b2lkIDApIHsgaW5zZXQgPSAwOyB9XG4gICAgaWYgKHdpZHRoID09PSB2b2lkIDApIHsgd2lkdGggPSAxOyB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgc2VsZWN0b3JzOiAoX2EgPSB7fSxcbiAgICAgICAgICAgIF9hW1wiOmdsb2JhbChcIiArIElzRm9jdXNWaXNpYmxlQ2xhc3NOYW1lICsgXCIpICY6Zm9jdXNcIl0gPSB7XG4gICAgICAgICAgICAgICAgb3V0bGluZTogd2lkdGggKyBcIiBzb2xpZCBcIiArIChjb2xvciB8fCB0aGVtZS5wYWxldHRlLm5ldXRyYWxTZWNvbmRhcnkpLFxuICAgICAgICAgICAgICAgIG91dGxpbmVPZmZzZXQ6IC1pbnNldCArIFwicHhcIixcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBfYSksXG4gICAgfTtcbn1cbi8qKlxuICogR2VuZXJhdGVzIHRleHQgaW5wdXQgYm9yZGVyIHN0eWxlcyBvbiBmb2N1cy5cbiAqXG4gKiBAcGFyYW0gYm9yZGVyQ29sb3IgLSBDb2xvciBvZiB0aGUgYm9yZGVyLlxuICogQHBhcmFtIGJvcmRlclJhZGl1cyAtIFJhZGl1cyBvZiB0aGUgYm9yZGVyLlxuICogQHBhcmFtIGJvcmRlclR5cGUgLSBUeXBlIG9mIHRoZSBib3JkZXIuXG4gKiBAcGFyYW0gYm9yZGVyUG9zaXRpb24gLSBQb3NpdGlvbiBvZiB0aGUgYm9yZGVyIHJlbGF0aXZlIHRvIHRoZSBpbnB1dCBlbGVtZW50IChkZWZhdWx0IHRvIC0xXG4gKiBhcyBpdCdzIHRoZSBtb3N0IGNvbW1vbiBib3JkZXIgd2lkdGggb2YgdGhlIGlucHV0IGVsZW1lbnQpXG4gKiBAcmV0dXJucyBUaGUgc3R5bGUgb2JqZWN0LlxuICovXG5leHBvcnQgdmFyIGdldElucHV0Rm9jdXNTdHlsZSA9IGZ1bmN0aW9uIChib3JkZXJDb2xvciwgYm9yZGVyUmFkaXVzLCBib3JkZXJUeXBlLCBib3JkZXJQb3NpdGlvbikge1xuICAgIHZhciBfYSwgX2IsIF9jO1xuICAgIGlmIChib3JkZXJUeXBlID09PSB2b2lkIDApIHsgYm9yZGVyVHlwZSA9ICdib3JkZXInOyB9XG4gICAgaWYgKGJvcmRlclBvc2l0aW9uID09PSB2b2lkIDApIHsgYm9yZGVyUG9zaXRpb24gPSAtMTsgfVxuICAgIHZhciBpc0JvcmRlckJvdHRvbSA9IGJvcmRlclR5cGUgPT09ICdib3JkZXJCb3R0b20nO1xuICAgIHJldHVybiB7XG4gICAgICAgIGJvcmRlckNvbG9yOiBib3JkZXJDb2xvcixcbiAgICAgICAgc2VsZWN0b3JzOiB7XG4gICAgICAgICAgICAnOmFmdGVyJzogKF9hID0ge1xuICAgICAgICAgICAgICAgICAgICBwb2ludGVyRXZlbnRzOiAnbm9uZScsXG4gICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6IFwiJydcIixcbiAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICAgICAgICAgICAgICAgIGxlZnQ6IGlzQm9yZGVyQm90dG9tID8gMCA6IGJvcmRlclBvc2l0aW9uLFxuICAgICAgICAgICAgICAgICAgICB0b3A6IGJvcmRlclBvc2l0aW9uLFxuICAgICAgICAgICAgICAgICAgICBib3R0b206IGJvcmRlclBvc2l0aW9uLFxuICAgICAgICAgICAgICAgICAgICByaWdodDogaXNCb3JkZXJCb3R0b20gPyAwIDogYm9yZGVyUG9zaXRpb25cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIF9hW2JvcmRlclR5cGVdID0gXCIycHggc29saWQgXCIgKyBib3JkZXJDb2xvcixcbiAgICAgICAgICAgICAgICBfYS5ib3JkZXJSYWRpdXMgPSBib3JkZXJSYWRpdXMsXG4gICAgICAgICAgICAgICAgX2Eud2lkdGggPSBib3JkZXJUeXBlID09PSAnYm9yZGVyQm90dG9tJyA/ICcxMDAlJyA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICBfYS5zZWxlY3RvcnMgPSAoX2IgPSB7fSxcbiAgICAgICAgICAgICAgICAgICAgX2JbSGlnaENvbnRyYXN0U2VsZWN0b3JdID0gKF9jID0ge30sXG4gICAgICAgICAgICAgICAgICAgICAgICBfY1tib3JkZXJUeXBlID09PSAnYm9yZGVyJyA/ICdib3JkZXJDb2xvcicgOiAnYm9yZGVyQm90dG9tQ29sb3InXSA9ICdIaWdobGlnaHQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgX2MpLFxuICAgICAgICAgICAgICAgICAgICBfYiksXG4gICAgICAgICAgICAgICAgX2EpLFxuICAgICAgICB9LFxuICAgIH07XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Z2V0Rm9jdXNTdHlsZS5qcy5tYXAiLCJleHBvcnQgdmFyIGhpZGRlbkNvbnRlbnRTdHlsZSA9IHtcbiAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICB3aWR0aDogMSxcbiAgICBoZWlnaHQ6IDEsXG4gICAgbWFyZ2luOiAtMSxcbiAgICBwYWRkaW5nOiAwLFxuICAgIGJvcmRlcjogMCxcbiAgICBvdmVyZmxvdzogJ2hpZGRlbicsXG4gICAgd2hpdGVTcGFjZTogJ25vd3JhcCcsXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aGlkZGVuQ29udGVudFN0eWxlLmpzLm1hcCIsImltcG9ydCB7IFN0eWxlc2hlZXQgfSBmcm9tICdAZmx1ZW50dWkvbWVyZ2Utc3R5bGVzJztcbmltcG9ydCB7IG1lbW9pemVGdW5jdGlvbiB9IGZyb20gJ0BmbHVlbnR1aS91dGlsaXRpZXMnO1xuLyoqXG4gKiBJbnRlcm5hbCBtZW1vaXplZCBmdW5jdGlvbiB3aGljaCBzaW1wbHkgdGFrZXMgaW4gdGhlIGNsYXNzIG1hcCBhbmQgdGhlXG4gKiBkaXNhYmxlIGJvb2xlYW4uIFRoZXNlIGltbXV0YWJsZSB2YWx1ZXMgY2FuIGJlIG1lbW9pemVkLlxuICovXG52YXIgX2dldEdsb2JhbENsYXNzTmFtZXMgPSBtZW1vaXplRnVuY3Rpb24oZnVuY3Rpb24gKGNsYXNzTmFtZXMsIGRpc2FibGVHbG9iYWxDbGFzc05hbWVzKSB7XG4gICAgdmFyIHN0eWxlU2hlZXQgPSBTdHlsZXNoZWV0LmdldEluc3RhbmNlKCk7XG4gICAgaWYgKGRpc2FibGVHbG9iYWxDbGFzc05hbWVzKSB7XG4gICAgICAgIC8vIGRpc2FibGUgZ2xvYmFsIGNsYXNzbmFtZXNcbiAgICAgICAgcmV0dXJuIE9iamVjdC5rZXlzKGNsYXNzTmFtZXMpLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBjbGFzc05hbWUpIHtcbiAgICAgICAgICAgIGFjY1tjbGFzc05hbWVdID0gc3R5bGVTaGVldC5nZXRDbGFzc05hbWUoY2xhc3NOYW1lc1tjbGFzc05hbWVdKTtcbiAgICAgICAgICAgIHJldHVybiBhY2M7XG4gICAgICAgIH0sIHt9KTtcbiAgICB9XG4gICAgLy8gdXNlIGdsb2JhbCBjbGFzc25hbWVzXG4gICAgcmV0dXJuIGNsYXNzTmFtZXM7XG59KTtcbi8qKlxuICogQ2hlY2tzIGZvciB0aGUgYGRpc2FibGVHbG9iYWxDbGFzc05hbWVzYCBwcm9wZXJ0eSBvbiB0aGUgYHRoZW1lYCB0byBkZXRlcm1pbmUgaWYgaXQgc2hvdWxkIHJldHVybiBgY2xhc3NOYW1lc2BcbiAqIE5vdGUgdGhhdCBjYWxscyB0byB0aGlzIGZ1bmN0aW9uIGFyZSBtZW1vaXplZC5cbiAqXG4gKiBAcGFyYW0gY2xhc3NOYW1lcyAtIFRoZSBjb2xsZWN0aW9uIG9mIGdsb2JhbCBjbGFzcyBuYW1lcyB0aGF0IGFwcGx5IHdoZW4gdGhlIGZsYWcgaXMgZmFsc2UuIE1ha2Ugc3VyZSB0byBwYXNzIGluXG4gKiB0aGUgc2FtZSBpbnN0YW5jZSBvbiBlYWNoIGNhbGwgdG8gYmVuZWZpdCBmcm9tIG1lbW9pemF0aW9uLlxuICogQHBhcmFtIHRoZW1lIC0gVGhlIHRoZW1lIHRvIGNoZWNrIHRoZSBmbGFnIG9uXG4gKiBAcGFyYW0gZGlzYWJsZUdsb2JhbENsYXNzTmFtZXMgLSBPcHRpb25hbC4gRXhwbGljaXRseSBvcHQgaW4vb3V0IG9mIGRpc2FibGluZyBnbG9iYWwgY2xhc3NuYW1lcy4gRGVmYXVsdHMgdG8gZmFsc2UuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRHbG9iYWxDbGFzc05hbWVzKGNsYXNzTmFtZXMsIHRoZW1lLCBkaXNhYmxlR2xvYmFsQ2xhc3NOYW1lcykge1xuICAgIHJldHVybiBfZ2V0R2xvYmFsQ2xhc3NOYW1lcyhjbGFzc05hbWVzLCBkaXNhYmxlR2xvYmFsQ2xhc3NOYW1lcyAhPT0gdW5kZWZpbmVkID8gZGlzYWJsZUdsb2JhbENsYXNzTmFtZXMgOiB0aGVtZS5kaXNhYmxlR2xvYmFsQ2xhc3NOYW1lcyk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1nZXRHbG9iYWxDbGFzc05hbWVzLmpzLm1hcCIsImV4cG9ydCB2YXIgRGVwdGhzO1xuKGZ1bmN0aW9uIChEZXB0aHMpIHtcbiAgICBEZXB0aHMuZGVwdGgwID0gJzAgMCAwIDAgdHJhbnNwYXJlbnQnO1xuICAgIERlcHRocy5kZXB0aDQgPSAnMCAxLjZweCAzLjZweCAwIHJnYmEoMCwgMCwgMCwgMC4xMzIpLCAwIDAuM3B4IDAuOXB4IDAgcmdiYSgwLCAwLCAwLCAwLjEwOCknO1xuICAgIERlcHRocy5kZXB0aDggPSAnMCAzLjJweCA3LjJweCAwIHJnYmEoMCwgMCwgMCwgMC4xMzIpLCAwIDAuNnB4IDEuOHB4IDAgcmdiYSgwLCAwLCAwLCAwLjEwOCknO1xuICAgIERlcHRocy5kZXB0aDE2ID0gJzAgNi40cHggMTQuNHB4IDAgcmdiYSgwLCAwLCAwLCAwLjEzMiksIDAgMS4ycHggMy42cHggMCByZ2JhKDAsIDAsIDAsIDAuMTA4KSc7XG4gICAgRGVwdGhzLmRlcHRoNjQgPSAnMCAyNS42cHggNTcuNnB4IDAgcmdiYSgwLCAwLCAwLCAwLjIyKSwgMCA0LjhweCAxNC40cHggMCByZ2JhKDAsIDAsIDAsIDAuMTgpJztcbn0pKERlcHRocyB8fCAoRGVwdGhzID0ge30pKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUZsdWVudERlcHRocy5qcy5tYXAiLCIvLyBXaGVuIGFkZGluZyBvciByZW1vdmluZyBhIGNvbG9yLCBtYWtlIHN1cmUgeW91IGtlZXAgdGhpcyBjb25zaXN0ZW50IHdpdGggSUNvbG9yQ2xhc3NOYW1lc1xuLy8gYnkgYWRkaW5nIHRoZSBjb2xvciB2YXJpYW50cy5cbmV4cG9ydCB2YXIgRGVmYXVsdFBhbGV0dGUgPSB7XG4gICAgdGhlbWVEYXJrZXI6ICcjMDA0NTc4JyxcbiAgICB0aGVtZURhcms6ICcjMDA1YTllJyxcbiAgICB0aGVtZURhcmtBbHQ6ICcjMTA2ZWJlJyxcbiAgICB0aGVtZVByaW1hcnk6ICcjMDA3OGQ0JyxcbiAgICB0aGVtZVNlY29uZGFyeTogJyMyYjg4ZDgnLFxuICAgIHRoZW1lVGVydGlhcnk6ICcjNzFhZmU1JyxcbiAgICB0aGVtZUxpZ2h0OiAnI2M3ZTBmNCcsXG4gICAgdGhlbWVMaWdodGVyOiAnI2RlZWNmOScsXG4gICAgdGhlbWVMaWdodGVyQWx0OiAnI2VmZjZmYycsXG4gICAgYmxhY2s6ICcjMDAwMDAwJyxcbiAgICBibGFja1RyYW5zbHVjZW50NDA6ICdyZ2JhKDAsMCwwLC40KScsXG4gICAgbmV1dHJhbERhcms6ICcjMjAxZjFlJyxcbiAgICBuZXV0cmFsUHJpbWFyeTogJyMzMjMxMzAnLFxuICAgIG5ldXRyYWxQcmltYXJ5QWx0OiAnIzNiM2EzOScsXG4gICAgbmV1dHJhbFNlY29uZGFyeTogJyM2MDVlNWMnLFxuICAgIG5ldXRyYWxTZWNvbmRhcnlBbHQ6ICcjOGE4ODg2JyxcbiAgICBuZXV0cmFsVGVydGlhcnk6ICcjYTE5ZjlkJyxcbiAgICBuZXV0cmFsVGVydGlhcnlBbHQ6ICcjYzhjNmM0JyxcbiAgICBuZXV0cmFsUXVhdGVybmFyeTogJyNkMmQwY2UnLFxuICAgIG5ldXRyYWxRdWF0ZXJuYXJ5QWx0OiAnI2UxZGZkZCcsXG4gICAgbmV1dHJhbExpZ2h0OiAnI2VkZWJlOScsXG4gICAgbmV1dHJhbExpZ2h0ZXI6ICcjZjNmMmYxJyxcbiAgICBuZXV0cmFsTGlnaHRlckFsdDogJyNmYWY5ZjgnLFxuICAgIGFjY2VudDogJyMwMDc4ZDQnLFxuICAgIHdoaXRlOiAnI2ZmZmZmZicsXG4gICAgd2hpdGVUcmFuc2x1Y2VudDQwOiAncmdiYSgyNTUsMjU1LDI1NSwuNCknLFxuICAgIHllbGxvd0Rhcms6ICcjZDI5MjAwJyxcbiAgICB5ZWxsb3c6ICcjZmZiOTAwJyxcbiAgICB5ZWxsb3dMaWdodDogJyNmZmYxMDAnLFxuICAgIG9yYW5nZTogJyNkODNiMDEnLFxuICAgIG9yYW5nZUxpZ2h0OiAnI2VhNDMwMCcsXG4gICAgb3JhbmdlTGlnaHRlcjogJyNmZjhjMDAnLFxuICAgIHJlZERhcms6ICcjYTQyNjJjJyxcbiAgICByZWQ6ICcjZTgxMTIzJyxcbiAgICBtYWdlbnRhRGFyazogJyM1YzAwNWMnLFxuICAgIG1hZ2VudGE6ICcjYjQwMDllJyxcbiAgICBtYWdlbnRhTGlnaHQ6ICcjZTMwMDhjJyxcbiAgICBwdXJwbGVEYXJrOiAnIzMyMTQ1YScsXG4gICAgcHVycGxlOiAnIzVjMmQ5MScsXG4gICAgcHVycGxlTGlnaHQ6ICcjYjRhMGZmJyxcbiAgICBibHVlRGFyazogJyMwMDIwNTAnLFxuICAgIGJsdWVNaWQ6ICcjMDAxODhmJyxcbiAgICBibHVlOiAnIzAwNzhkNCcsXG4gICAgYmx1ZUxpZ2h0OiAnIzAwYmNmMicsXG4gICAgdGVhbERhcms6ICcjMDA0YjUwJyxcbiAgICB0ZWFsOiAnIzAwODI3MicsXG4gICAgdGVhbExpZ2h0OiAnIzAwYjI5NCcsXG4gICAgZ3JlZW5EYXJrOiAnIzAwNGIxYycsXG4gICAgZ3JlZW46ICcjMTA3YzEwJyxcbiAgICBncmVlbkxpZ2h0OiAnI2JhZDgwYScsXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9RGVmYXVsdFBhbGV0dGUuanMubWFwIiwiaW1wb3J0IHsgRGVwdGhzIH0gZnJvbSAnLi9GbHVlbnREZXB0aHMnO1xuZXhwb3J0IHZhciBEZWZhdWx0RWZmZWN0cyA9IHtcbiAgICBlbGV2YXRpb240OiBEZXB0aHMuZGVwdGg0LFxuICAgIGVsZXZhdGlvbjg6IERlcHRocy5kZXB0aDgsXG4gICAgZWxldmF0aW9uMTY6IERlcHRocy5kZXB0aDE2LFxuICAgIGVsZXZhdGlvbjY0OiBEZXB0aHMuZGVwdGg2NCxcbiAgICByb3VuZGVkQ29ybmVyMjogJzJweCcsXG4gICAgcm91bmRlZENvcm5lcjQ6ICc0cHgnLFxuICAgIHJvdW5kZWRDb3JuZXI2OiAnNnB4Jyxcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1EZWZhdWx0RWZmZWN0cy5qcy5tYXAiLCJpbXBvcnQgeyBnZXRTdHlsZU9wdGlvbnMgfSBmcm9tICcuL1N0eWxlT3B0aW9uc1N0YXRlJztcbmltcG9ydCB7IFN0eWxlc2hlZXQgfSBmcm9tICcuL1N0eWxlc2hlZXQnO1xuaW1wb3J0IHsgc2VyaWFsaXplUnVsZUVudHJpZXMgfSBmcm9tICcuL3N0eWxlVG9DbGFzc05hbWUnO1xuLyoqXG4gKiBSZWdpc3RlcnMgYSBmb250IGZhY2UuXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBmb250RmFjZShmb250KSB7XG4gICAgdmFyIHN0eWxlc2hlZXQgPSBTdHlsZXNoZWV0LmdldEluc3RhbmNlKCk7XG4gICAgdmFyIHJ1bGUgPSBzZXJpYWxpemVSdWxlRW50cmllcyhnZXRTdHlsZU9wdGlvbnMoKSwgZm9udCk7XG4gICAgdmFyIGNsYXNzTmFtZSA9IHN0eWxlc2hlZXQuY2xhc3NOYW1lRnJvbUtleShydWxlKTtcbiAgICBpZiAoY2xhc3NOYW1lKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIG5hbWUgPSBzdHlsZXNoZWV0LmdldENsYXNzTmFtZSgpO1xuICAgIHN0eWxlc2hlZXQuaW5zZXJ0UnVsZShcIkBmb250LWZhY2V7XCIgKyBydWxlICsgXCJ9XCIsIHRydWUpO1xuICAgIHN0eWxlc2hlZXQuY2FjaGVDbGFzc05hbWUobmFtZSwgcnVsZSwgW10sIFsnZm9udC1mYWNlJywgcnVsZV0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Zm9udEZhY2UuanMubWFwIiwiaW1wb3J0IHsgRm9udFNpemVzLCBGb250V2VpZ2h0cywgTG9jYWxpemVkRm9udEZhbWlsaWVzLCBMb2NhbGl6ZWRGb250TmFtZXMgfSBmcm9tICcuL0ZsdWVudEZvbnRzJztcbi8vIEZhbGxiYWNrIGZvbnRzLCBpZiBzcGVjaWZpZWQgc3lzdGVtIG9yIHdlYiBmb250cyBhcmUgdW5hdmFpbGFibGUuXG52YXIgRm9udEZhbWlseUZhbGxiYWNrcyA9IFwiJ1NlZ29lIFVJJywgLWFwcGxlLXN5c3RlbSwgQmxpbmtNYWNTeXN0ZW1Gb250LCAnUm9ib3RvJywgJ0hlbHZldGljYSBOZXVlJywgc2Fucy1zZXJpZlwiO1xuLy8gQnkgZGVmYXVsdCwgd2UgZmF2b3Igc3lzdGVtIGZvbnRzIGZvciB0aGUgZGVmYXVsdC5cbi8vIEFsbCBsb2NhbGl6ZWQgZm9udHMgdXNlIGEgd2ViIGZvbnQgYW5kIG5ldmVyIHVzZSB0aGUgc3lzdGVtIGZvbnQuXG52YXIgZGVmYXVsdEZvbnRGYW1pbHkgPSBcIidTZWdvZSBVSScsICdcIiArIExvY2FsaXplZEZvbnROYW1lcy5XZXN0RXVyb3BlYW4gKyBcIidcIjtcbi8vIE1hcHBpbmcgb2YgbGFuZ3VhZ2UgcHJlZml4IHRvIHRvIGZvbnQgZmFtaWx5LlxudmFyIExhbmd1YWdlVG9Gb250TWFwID0ge1xuICAgIGFyOiBMb2NhbGl6ZWRGb250RmFtaWxpZXMuQXJhYmljLFxuICAgIGJnOiBMb2NhbGl6ZWRGb250RmFtaWxpZXMuQ3lyaWxsaWMsXG4gICAgY3M6IExvY2FsaXplZEZvbnRGYW1pbGllcy5FYXN0RXVyb3BlYW4sXG4gICAgZWw6IExvY2FsaXplZEZvbnRGYW1pbGllcy5HcmVlayxcbiAgICBldDogTG9jYWxpemVkRm9udEZhbWlsaWVzLkVhc3RFdXJvcGVhbixcbiAgICBoZTogTG9jYWxpemVkRm9udEZhbWlsaWVzLkhlYnJldyxcbiAgICBoaTogTG9jYWxpemVkRm9udEZhbWlsaWVzLkhpbmRpLFxuICAgIGhyOiBMb2NhbGl6ZWRGb250RmFtaWxpZXMuRWFzdEV1cm9wZWFuLFxuICAgIGh1OiBMb2NhbGl6ZWRGb250RmFtaWxpZXMuRWFzdEV1cm9wZWFuLFxuICAgIGphOiBMb2NhbGl6ZWRGb250RmFtaWxpZXMuSmFwYW5lc2UsXG4gICAga2s6IExvY2FsaXplZEZvbnRGYW1pbGllcy5FYXN0RXVyb3BlYW4sXG4gICAga286IExvY2FsaXplZEZvbnRGYW1pbGllcy5Lb3JlYW4sXG4gICAgbHQ6IExvY2FsaXplZEZvbnRGYW1pbGllcy5FYXN0RXVyb3BlYW4sXG4gICAgbHY6IExvY2FsaXplZEZvbnRGYW1pbGllcy5FYXN0RXVyb3BlYW4sXG4gICAgcGw6IExvY2FsaXplZEZvbnRGYW1pbGllcy5FYXN0RXVyb3BlYW4sXG4gICAgcnU6IExvY2FsaXplZEZvbnRGYW1pbGllcy5DeXJpbGxpYyxcbiAgICBzazogTG9jYWxpemVkRm9udEZhbWlsaWVzLkVhc3RFdXJvcGVhbixcbiAgICAnc3ItbGF0bic6IExvY2FsaXplZEZvbnRGYW1pbGllcy5FYXN0RXVyb3BlYW4sXG4gICAgdGg6IExvY2FsaXplZEZvbnRGYW1pbGllcy5UaGFpLFxuICAgIHRyOiBMb2NhbGl6ZWRGb250RmFtaWxpZXMuRWFzdEV1cm9wZWFuLFxuICAgIHVrOiBMb2NhbGl6ZWRGb250RmFtaWxpZXMuQ3lyaWxsaWMsXG4gICAgdmk6IExvY2FsaXplZEZvbnRGYW1pbGllcy5WaWV0bmFtZXNlLFxuICAgICd6aC1oYW5zJzogTG9jYWxpemVkRm9udEZhbWlsaWVzLkNoaW5lc2VTaW1wbGlmaWVkLFxuICAgICd6aC1oYW50JzogTG9jYWxpemVkRm9udEZhbWlsaWVzLkNoaW5lc2VUcmFkaXRpb25hbCxcbiAgICBoeTogTG9jYWxpemVkRm9udEZhbWlsaWVzLkFybWVuaWFuLFxuICAgIGthOiBMb2NhbGl6ZWRGb250RmFtaWxpZXMuR2VvcmdpYW4sXG59O1xuZnVuY3Rpb24gX2ZvbnRGYW1pbHlXaXRoRmFsbGJhY2tzKGZvbnRGYW1pbHkpIHtcbiAgICByZXR1cm4gZm9udEZhbWlseSArIFwiLCBcIiArIEZvbnRGYW1pbHlGYWxsYmFja3M7XG59XG4vKipcbiAqIElmIHRoZXJlIGlzIGEgbG9jYWxpemVkIGZvbnQgZm9yIHRoaXMgbGFuZ3VhZ2UsIHJldHVybiB0aGF0LlxuICogUmV0dXJucyB1bmRlZmluZWQgaWYgdGhlcmUgaXMgbm8gbG9jYWxpemVkIGZvbnQgZm9yIHRoYXQgbGFuZ3VhZ2UuXG4gKi9cbmZ1bmN0aW9uIF9nZXRMb2NhbGl6ZWRGb250RmFtaWx5KGxhbmd1YWdlKSB7XG4gICAgZm9yICh2YXIgbGFuZyBpbiBMYW5ndWFnZVRvRm9udE1hcCkge1xuICAgICAgICBpZiAoTGFuZ3VhZ2VUb0ZvbnRNYXAuaGFzT3duUHJvcGVydHkobGFuZykgJiYgbGFuZ3VhZ2UgJiYgbGFuZy5pbmRleE9mKGxhbmd1YWdlKSA9PT0gMCkge1xuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICAgICAgICAgIHJldHVybiBMYW5ndWFnZVRvRm9udE1hcFtsYW5nXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZGVmYXVsdEZvbnRGYW1pbHk7XG59XG5mdW5jdGlvbiBfY3JlYXRlRm9udChzaXplLCB3ZWlnaHQsIGZvbnRGYW1pbHkpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBmb250RmFtaWx5OiBmb250RmFtaWx5LFxuICAgICAgICBNb3pPc3hGb250U21vb3RoaW5nOiAnZ3JheXNjYWxlJyxcbiAgICAgICAgV2Via2l0Rm9udFNtb290aGluZzogJ2FudGlhbGlhc2VkJyxcbiAgICAgICAgZm9udFNpemU6IHNpemUsXG4gICAgICAgIGZvbnRXZWlnaHQ6IHdlaWdodCxcbiAgICB9O1xufVxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUZvbnRTdHlsZXMobG9jYWxlQ29kZSkge1xuICAgIHZhciBsb2NhbGl6ZWRGb250ID0gX2dldExvY2FsaXplZEZvbnRGYW1pbHkobG9jYWxlQ29kZSk7XG4gICAgdmFyIGZvbnRGYW1pbHlXaXRoRmFsbGJhY2sgPSBfZm9udEZhbWlseVdpdGhGYWxsYmFja3MobG9jYWxpemVkRm9udCk7XG4gICAgdmFyIGZvbnRTdHlsZXMgPSB7XG4gICAgICAgIHRpbnk6IF9jcmVhdGVGb250KEZvbnRTaXplcy5taW5pLCBGb250V2VpZ2h0cy5yZWd1bGFyLCBmb250RmFtaWx5V2l0aEZhbGxiYWNrKSxcbiAgICAgICAgeFNtYWxsOiBfY3JlYXRlRm9udChGb250U2l6ZXMueFNtYWxsLCBGb250V2VpZ2h0cy5yZWd1bGFyLCBmb250RmFtaWx5V2l0aEZhbGxiYWNrKSxcbiAgICAgICAgc21hbGw6IF9jcmVhdGVGb250KEZvbnRTaXplcy5zbWFsbCwgRm9udFdlaWdodHMucmVndWxhciwgZm9udEZhbWlseVdpdGhGYWxsYmFjayksXG4gICAgICAgIHNtYWxsUGx1czogX2NyZWF0ZUZvbnQoRm9udFNpemVzLnNtYWxsUGx1cywgRm9udFdlaWdodHMucmVndWxhciwgZm9udEZhbWlseVdpdGhGYWxsYmFjayksXG4gICAgICAgIG1lZGl1bTogX2NyZWF0ZUZvbnQoRm9udFNpemVzLm1lZGl1bSwgRm9udFdlaWdodHMucmVndWxhciwgZm9udEZhbWlseVdpdGhGYWxsYmFjayksXG4gICAgICAgIG1lZGl1bVBsdXM6IF9jcmVhdGVGb250KEZvbnRTaXplcy5tZWRpdW1QbHVzLCBGb250V2VpZ2h0cy5yZWd1bGFyLCBmb250RmFtaWx5V2l0aEZhbGxiYWNrKSxcbiAgICAgICAgbGFyZ2U6IF9jcmVhdGVGb250KEZvbnRTaXplcy5sYXJnZSwgRm9udFdlaWdodHMucmVndWxhciwgZm9udEZhbWlseVdpdGhGYWxsYmFjayksXG4gICAgICAgIHhMYXJnZTogX2NyZWF0ZUZvbnQoRm9udFNpemVzLnhMYXJnZSwgRm9udFdlaWdodHMuc2VtaWJvbGQsIGZvbnRGYW1pbHlXaXRoRmFsbGJhY2spLFxuICAgICAgICB4TGFyZ2VQbHVzOiBfY3JlYXRlRm9udChGb250U2l6ZXMueExhcmdlUGx1cywgRm9udFdlaWdodHMuc2VtaWJvbGQsIGZvbnRGYW1pbHlXaXRoRmFsbGJhY2spLFxuICAgICAgICB4eExhcmdlOiBfY3JlYXRlRm9udChGb250U2l6ZXMueHhMYXJnZSwgRm9udFdlaWdodHMuc2VtaWJvbGQsIGZvbnRGYW1pbHlXaXRoRmFsbGJhY2spLFxuICAgICAgICB4eExhcmdlUGx1czogX2NyZWF0ZUZvbnQoRm9udFNpemVzLnh4TGFyZ2VQbHVzLCBGb250V2VpZ2h0cy5zZW1pYm9sZCwgZm9udEZhbWlseVdpdGhGYWxsYmFjayksXG4gICAgICAgIHN1cGVyTGFyZ2U6IF9jcmVhdGVGb250KEZvbnRTaXplcy5zdXBlckxhcmdlLCBGb250V2VpZ2h0cy5zZW1pYm9sZCwgZm9udEZhbWlseVdpdGhGYWxsYmFjayksXG4gICAgICAgIG1lZ2E6IF9jcmVhdGVGb250KEZvbnRTaXplcy5tZWdhLCBGb250V2VpZ2h0cy5zZW1pYm9sZCwgZm9udEZhbWlseVdpdGhGYWxsYmFjayksXG4gICAgfTtcbiAgICByZXR1cm4gZm9udFN0eWxlcztcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNyZWF0ZUZvbnRTdHlsZXMuanMubWFwIiwiaW1wb3J0IHsgZ2V0RG9jdW1lbnQgfSBmcm9tICcuL2RvbS9nZXREb2N1bWVudCc7XG5pbXBvcnQgKiBhcyBsb2NhbFN0b3JhZ2UgZnJvbSAnLi9sb2NhbFN0b3JhZ2UnO1xuaW1wb3J0ICogYXMgc2Vzc2lvblN0b3JhZ2UgZnJvbSAnLi9zZXNzaW9uU3RvcmFnZSc7XG4vLyBEZWZhdWx0IHRvIHVuZGVmaW5lZCBzbyB0aGF0IHdlIGluaXRpYWxpemUgb24gZmlyc3QgcmVhZC5cbnZhciBfbGFuZ3VhZ2U7XG52YXIgU1RPUkFHRV9LRVkgPSAnbGFuZ3VhZ2UnO1xuLyoqXG4gKiBHZXRzIHRoZSBsYW5ndWFnZSBzZXQgZm9yIHRoZSBwYWdlLlxuICogQHBhcmFtIHBlcnNpc3RlbmNlVHlwZSAtIFdoZXJlIHRvIHBlcnNpc3QgdGhlIHZhbHVlLiBEZWZhdWx0IGlzIGBzZXNzaW9uU3RvcmFnZWAgaWYgYXZhaWxhYmxlLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0TGFuZ3VhZ2UocGVyc2lzdGVuY2VUeXBlKSB7XG4gICAgaWYgKHBlcnNpc3RlbmNlVHlwZSA9PT0gdm9pZCAwKSB7IHBlcnNpc3RlbmNlVHlwZSA9ICdzZXNzaW9uU3RvcmFnZSc7IH1cbiAgICBpZiAoX2xhbmd1YWdlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdmFyIGRvYyA9IGdldERvY3VtZW50KCk7XG4gICAgICAgIHZhciBzYXZlZExhbmd1YWdlID0gcGVyc2lzdGVuY2VUeXBlID09PSAnbG9jYWxTdG9yYWdlJ1xuICAgICAgICAgICAgPyBsb2NhbFN0b3JhZ2UuZ2V0SXRlbShTVE9SQUdFX0tFWSlcbiAgICAgICAgICAgIDogcGVyc2lzdGVuY2VUeXBlID09PSAnc2Vzc2lvblN0b3JhZ2UnXG4gICAgICAgICAgICAgICAgPyBzZXNzaW9uU3RvcmFnZS5nZXRJdGVtKFNUT1JBR0VfS0VZKVxuICAgICAgICAgICAgICAgIDogdW5kZWZpbmVkO1xuICAgICAgICBpZiAoc2F2ZWRMYW5ndWFnZSkge1xuICAgICAgICAgICAgX2xhbmd1YWdlID0gc2F2ZWRMYW5ndWFnZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoX2xhbmd1YWdlID09PSB1bmRlZmluZWQgJiYgZG9jKSB7XG4gICAgICAgICAgICBfbGFuZ3VhZ2UgPSBkb2MuZG9jdW1lbnRFbGVtZW50LmdldEF0dHJpYnV0ZSgnbGFuZycpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChfbGFuZ3VhZ2UgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgX2xhbmd1YWdlID0gJ2VuJztcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gX2xhbmd1YWdlO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHNldExhbmd1YWdlKGxhbmd1YWdlLCBwZXJzaXN0ZW5jZVBhcmFtKSB7XG4gICAgdmFyIGRvYyA9IGdldERvY3VtZW50KCk7XG4gICAgaWYgKGRvYykge1xuICAgICAgICBkb2MuZG9jdW1lbnRFbGVtZW50LnNldEF0dHJpYnV0ZSgnbGFuZycsIGxhbmd1YWdlKTtcbiAgICB9XG4gICAgdmFyIHBlcnNpc3RlbmNlVHlwZSA9IHBlcnNpc3RlbmNlUGFyYW0gPT09IHRydWUgPyAnbm9uZScgOiAhcGVyc2lzdGVuY2VQYXJhbSA/ICdzZXNzaW9uU3RvcmFnZScgOiBwZXJzaXN0ZW5jZVBhcmFtO1xuICAgIGlmIChwZXJzaXN0ZW5jZVR5cGUgPT09ICdsb2NhbFN0b3JhZ2UnKSB7XG4gICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKFNUT1JBR0VfS0VZLCBsYW5ndWFnZSk7XG4gICAgfVxuICAgIGVsc2UgaWYgKHBlcnNpc3RlbmNlVHlwZSA9PT0gJ3Nlc3Npb25TdG9yYWdlJykge1xuICAgICAgICBzZXNzaW9uU3RvcmFnZS5zZXRJdGVtKFNUT1JBR0VfS0VZLCBsYW5ndWFnZSk7XG4gICAgfVxuICAgIF9sYW5ndWFnZSA9IGxhbmd1YWdlO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bGFuZ3VhZ2UuanMubWFwIiwiaW1wb3J0IHsgZm9udEZhY2UgfSBmcm9tICdAZmx1ZW50dWkvbWVyZ2Utc3R5bGVzJztcbmltcG9ydCB7IEZvbnRXZWlnaHRzLCBMb2NhbGl6ZWRGb250RmFtaWxpZXMsIExvY2FsaXplZEZvbnROYW1lcyB9IGZyb20gJy4vRmx1ZW50Rm9udHMnO1xuaW1wb3J0IHsgY3JlYXRlRm9udFN0eWxlcyB9IGZyb20gJy4vY3JlYXRlRm9udFN0eWxlcyc7XG5pbXBvcnQgeyBnZXRMYW5ndWFnZSwgZ2V0V2luZG93IH0gZnJvbSAnQGZsdWVudHVpL3V0aWxpdGllcyc7XG4vLyBEZWZhdWx0IHVybHMuXG52YXIgRGVmYXVsdEJhc2VVcmwgPSAnaHR0cHM6Ly9zdGF0aWMyLnNoYXJlcG9pbnRvbmxpbmUuY29tL2ZpbGVzL2ZhYnJpYy9hc3NldHMnO1xuLy8gU3RhbmRhcmQgZm9udCBzdHlsaW5nLlxuZXhwb3J0IHZhciBEZWZhdWx0Rm9udFN0eWxlcyA9IGNyZWF0ZUZvbnRTdHlsZXMoZ2V0TGFuZ3VhZ2UoKSk7XG5mdW5jdGlvbiBfcmVnaXN0ZXJGb250RmFjZShmb250RmFtaWx5LCB1cmwsIGZvbnRXZWlnaHQsIGxvY2FsRm9udE5hbWUpIHtcbiAgICBmb250RmFtaWx5ID0gXCInXCIgKyBmb250RmFtaWx5ICsgXCInXCI7XG4gICAgdmFyIGxvY2FsRm9udFNyYyA9IGxvY2FsRm9udE5hbWUgIT09IHVuZGVmaW5lZCA/IFwibG9jYWwoJ1wiICsgbG9jYWxGb250TmFtZSArIFwiJyksXCIgOiAnJztcbiAgICBmb250RmFjZSh7XG4gICAgICAgIGZvbnRGYW1pbHk6IGZvbnRGYW1pbHksXG4gICAgICAgIHNyYzogbG9jYWxGb250U3JjICsgKFwidXJsKCdcIiArIHVybCArIFwiLndvZmYyJykgZm9ybWF0KCd3b2ZmMicpLFwiKSArIChcInVybCgnXCIgKyB1cmwgKyBcIi53b2ZmJykgZm9ybWF0KCd3b2ZmJylcIiksXG4gICAgICAgIGZvbnRXZWlnaHQ6IGZvbnRXZWlnaHQsXG4gICAgICAgIGZvbnRTdHlsZTogJ25vcm1hbCcsXG4gICAgICAgIGZvbnREaXNwbGF5OiAnc3dhcCcsXG4gICAgfSk7XG59XG5mdW5jdGlvbiBfcmVnaXN0ZXJGb250RmFjZVNldChiYXNlVXJsLCBmb250RmFtaWx5LCBjZG5Gb2xkZXIsIGNkbkZvbnROYW1lLCBsb2NhbEZvbnROYW1lKSB7XG4gICAgaWYgKGNkbkZvbnROYW1lID09PSB2b2lkIDApIHsgY2RuRm9udE5hbWUgPSAnc2Vnb2V1aSc7IH1cbiAgICB2YXIgdXJsQmFzZSA9IGJhc2VVcmwgKyBcIi9cIiArIGNkbkZvbGRlciArIFwiL1wiICsgY2RuRm9udE5hbWU7XG4gICAgX3JlZ2lzdGVyRm9udEZhY2UoZm9udEZhbWlseSwgdXJsQmFzZSArICctbGlnaHQnLCBGb250V2VpZ2h0cy5saWdodCwgbG9jYWxGb250TmFtZSAmJiBsb2NhbEZvbnROYW1lICsgJyBMaWdodCcpO1xuICAgIF9yZWdpc3RlckZvbnRGYWNlKGZvbnRGYW1pbHksIHVybEJhc2UgKyAnLXNlbWlsaWdodCcsIEZvbnRXZWlnaHRzLnNlbWlsaWdodCwgbG9jYWxGb250TmFtZSAmJiBsb2NhbEZvbnROYW1lICsgJyBTZW1pTGlnaHQnKTtcbiAgICBfcmVnaXN0ZXJGb250RmFjZShmb250RmFtaWx5LCB1cmxCYXNlICsgJy1yZWd1bGFyJywgRm9udFdlaWdodHMucmVndWxhciwgbG9jYWxGb250TmFtZSk7XG4gICAgX3JlZ2lzdGVyRm9udEZhY2UoZm9udEZhbWlseSwgdXJsQmFzZSArICctc2VtaWJvbGQnLCBGb250V2VpZ2h0cy5zZW1pYm9sZCwgbG9jYWxGb250TmFtZSAmJiBsb2NhbEZvbnROYW1lICsgJyBTZW1pQm9sZCcpO1xuICAgIF9yZWdpc3RlckZvbnRGYWNlKGZvbnRGYW1pbHksIHVybEJhc2UgKyAnLWJvbGQnLCBGb250V2VpZ2h0cy5ib2xkLCBsb2NhbEZvbnROYW1lICYmIGxvY2FsRm9udE5hbWUgKyAnIEJvbGQnKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiByZWdpc3RlckRlZmF1bHRGb250RmFjZXMoYmFzZVVybCkge1xuICAgIGlmIChiYXNlVXJsKSB7XG4gICAgICAgIHZhciBmb250VXJsID0gYmFzZVVybCArIFwiL2ZvbnRzXCI7XG4gICAgICAgIC8vIFByb2R1Y2UgQGZvbnQtZmFjZSBkZWZpbml0aW9ucyBmb3IgYWxsIHN1cHBvcnRlZCB3ZWIgZm9udHMuXG4gICAgICAgIF9yZWdpc3RlckZvbnRGYWNlU2V0KGZvbnRVcmwsIExvY2FsaXplZEZvbnROYW1lcy5UaGFpLCAnbGVlbGF3YWRlZXVpLXRoYWknLCAnbGVlbGF3YWRlZXVpJyk7XG4gICAgICAgIF9yZWdpc3RlckZvbnRGYWNlU2V0KGZvbnRVcmwsIExvY2FsaXplZEZvbnROYW1lcy5BcmFiaWMsICdzZWdvZXVpLWFyYWJpYycpO1xuICAgICAgICBfcmVnaXN0ZXJGb250RmFjZVNldChmb250VXJsLCBMb2NhbGl6ZWRGb250TmFtZXMuQ3lyaWxsaWMsICdzZWdvZXVpLWN5cmlsbGljJyk7XG4gICAgICAgIF9yZWdpc3RlckZvbnRGYWNlU2V0KGZvbnRVcmwsIExvY2FsaXplZEZvbnROYW1lcy5FYXN0RXVyb3BlYW4sICdzZWdvZXVpLWVhc3RldXJvcGVhbicpO1xuICAgICAgICBfcmVnaXN0ZXJGb250RmFjZVNldChmb250VXJsLCBMb2NhbGl6ZWRGb250TmFtZXMuR3JlZWssICdzZWdvZXVpLWdyZWVrJyk7XG4gICAgICAgIF9yZWdpc3RlckZvbnRGYWNlU2V0KGZvbnRVcmwsIExvY2FsaXplZEZvbnROYW1lcy5IZWJyZXcsICdzZWdvZXVpLWhlYnJldycpO1xuICAgICAgICBfcmVnaXN0ZXJGb250RmFjZVNldChmb250VXJsLCBMb2NhbGl6ZWRGb250TmFtZXMuVmlldG5hbWVzZSwgJ3NlZ29ldWktdmlldG5hbWVzZScpO1xuICAgICAgICBfcmVnaXN0ZXJGb250RmFjZVNldChmb250VXJsLCBMb2NhbGl6ZWRGb250TmFtZXMuV2VzdEV1cm9wZWFuLCAnc2Vnb2V1aS13ZXN0ZXVyb3BlYW4nLCAnc2Vnb2V1aScsICdTZWdvZSBVSScpO1xuICAgICAgICBfcmVnaXN0ZXJGb250RmFjZVNldChmb250VXJsLCBMb2NhbGl6ZWRGb250RmFtaWxpZXMuU2VsYXdpaywgJ3NlbGF3aWsnLCAnc2VsYXdpaycpO1xuICAgICAgICBfcmVnaXN0ZXJGb250RmFjZVNldChmb250VXJsLCBMb2NhbGl6ZWRGb250TmFtZXMuQXJtZW5pYW4sICdzZWdvZXVpLWFybWVuaWFuJyk7XG4gICAgICAgIF9yZWdpc3RlckZvbnRGYWNlU2V0KGZvbnRVcmwsIExvY2FsaXplZEZvbnROYW1lcy5HZW9yZ2lhbiwgJ3NlZ29ldWktZ2VvcmdpYW4nKTtcbiAgICAgICAgLy8gTGVlbGF3YWRlZSBVSSAoVGhhaSkgZG9lcyBub3QgaGF2ZSBhICdsaWdodCcgd2VpZ2h0LCBzbyB3ZSBvdmVycmlkZVxuICAgICAgICAvLyB0aGUgZm9udC1mYWNlIGdlbmVyYXRlZCBhYm92ZSB0byB1c2UgdGhlICdzZW1pbGlnaHQnIHdlaWdodCBpbnN0ZWFkLlxuICAgICAgICBfcmVnaXN0ZXJGb250RmFjZSgnTGVlbGF3YWRlZSBVSSBXZWInLCBmb250VXJsICsgXCIvbGVlbGF3YWRlZXVpLXRoYWkvbGVlbGF3YWRlZXVpLXNlbWlsaWdodFwiLCBGb250V2VpZ2h0cy5saWdodCk7XG4gICAgICAgIC8vIExlZWxhd2FkZWUgVUkgKFRoYWkpIGRvZXMgbm90IGhhdmUgYSAnc2VtaWJvbGQnIHdlaWdodCwgc28gd2Ugb3ZlcnJpZGVcbiAgICAgICAgLy8gdGhlIGZvbnQtZmFjZSBnZW5lcmF0ZWQgYWJvdmUgdG8gdXNlIHRoZSAnYm9sZCcgd2VpZ2h0IGluc3RlYWQuXG4gICAgICAgIF9yZWdpc3RlckZvbnRGYWNlKCdMZWVsYXdhZGVlIFVJIFdlYicsIGZvbnRVcmwgKyBcIi9sZWVsYXdhZGVldWktdGhhaS9sZWVsYXdhZGVldWktYm9sZFwiLCBGb250V2VpZ2h0cy5zZW1pYm9sZCk7XG4gICAgfVxufVxuLyoqXG4gKiBSZWFkcyB0aGUgZm9udEJhc2VVcmwgZnJvbSB3aW5kb3cuRmFicmljQ29uZmlnLmZvbnRCYXNlVXJsIG9yIGZhbGxzIGJhY2sgdG8gYSBkZWZhdWx0LlxuICovXG5mdW5jdGlvbiBfZ2V0Rm9udEJhc2VVcmwoKSB7XG4gICAgdmFyIF9hLCBfYjtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgIHZhciBmYWJyaWNDb25maWcgPSAoX2EgPSBnZXRXaW5kb3coKSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLkZhYnJpY0NvbmZpZztcbiAgICByZXR1cm4gKF9iID0gZmFicmljQ29uZmlnID09PSBudWxsIHx8IGZhYnJpY0NvbmZpZyA9PT0gdm9pZCAwID8gdm9pZCAwIDogZmFicmljQ29uZmlnLmZvbnRCYXNlVXJsKSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiBEZWZhdWx0QmFzZVVybDtcbn1cbi8qKlxuICogUmVnaXN0ZXIgdGhlIGZvbnQgZmFjZXMuXG4gKi9cbnJlZ2lzdGVyRGVmYXVsdEZvbnRGYWNlcyhfZ2V0Rm9udEJhc2VVcmwoKSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1EZWZhdWx0Rm9udFN0eWxlcy5qcy5tYXAiLCJpbXBvcnQgeyBnZXRXaW5kb3cgfSBmcm9tICcuL2RvbS9nZXRXaW5kb3cnO1xuLyoqXG4gKiBGZXRjaGVzIGFuIGl0ZW0gZnJvbSBsb2NhbCBzdG9yYWdlIHdpdGhvdXQgdGhyb3dpbmcgYW4gZXhjZXB0aW9uXG4gKiBAcGFyYW0ga2V5IFRoZSBrZXkgb2YgdGhlIGl0ZW0gdG8gZmV0Y2ggZnJvbSBsb2NhbCBzdG9yYWdlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRJdGVtKGtleSkge1xuICAgIHZhciByZXN1bHQgPSBudWxsO1xuICAgIHRyeSB7XG4gICAgICAgIHZhciB3aW4gPSBnZXRXaW5kb3coKTtcbiAgICAgICAgcmVzdWx0ID0gd2luID8gd2luLmxvY2FsU3RvcmFnZS5nZXRJdGVtKGtleSkgOiBudWxsO1xuICAgIH1cbiAgICBjYXRjaCAoZSkge1xuICAgICAgICAvKiBFYXQgdGhlIGV4Y2VwdGlvbiAqL1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuLyoqXG4gKiBJbnNlcnRzIGFuIGl0ZW0gaW50byBsb2NhbCBzdG9yYWdlIHdpdGhvdXQgdGhyb3dpbmcgYW4gZXhjZXB0aW9uXG4gKiBAcGFyYW0ga2V5IFRoZSBrZXkgb2YgdGhlIGl0ZW0gdG8gYWRkIHRvIGxvY2FsIHN0b3JhZ2VcbiAqIEBwYXJhbSBkYXRhIFRoZSBkYXRhIHRvIHB1dCBpbnRvIGxvY2FsIHN0b3JhZ2VcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNldEl0ZW0oa2V5LCBkYXRhKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgdmFyIHdpbiA9IGdldFdpbmRvdygpO1xuICAgICAgICB3aW4gJiYgd2luLmxvY2FsU3RvcmFnZS5zZXRJdGVtKGtleSwgZGF0YSk7XG4gICAgfVxuICAgIGNhdGNoIChlKSB7XG4gICAgICAgIC8qIEVhdCB0aGUgZXhjZXB0aW9uICovXG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bG9jYWxTdG9yYWdlLmpzLm1hcCIsIi8qKlxuICogU2ltcGxlIGRlZXAgbWVyZ2UgZnVuY3Rpb24uIFRha2VzIGFsbCBhcmd1bWVudHMgYW5kIHJldHVybnMgYSBkZWVwIGNvcHkgb2YgdGhlIG9iamVjdHMgbWVyZ2VkXG4gKiB0b2dldGhlciBpbiB0aGUgb3JkZXIgcHJvdmlkZWQuIElmIGFuIG9iamVjdCBjcmVhdGVzIGEgY2lyY3VsYXIgcmVmZXJlbmNlLCBpdCB3aWxsIGFzc2lnbiB0aGVcbiAqIG9yaWdpbmFsIHJlZmVyZW5jZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG1lcmdlKHRhcmdldCkge1xuICAgIHZhciBhcmdzID0gW107XG4gICAgZm9yICh2YXIgX2kgPSAxOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgYXJnc1tfaSAtIDFdID0gYXJndW1lbnRzW19pXTtcbiAgICB9XG4gICAgZm9yICh2YXIgX2EgPSAwLCBhcmdzXzEgPSBhcmdzOyBfYSA8IGFyZ3NfMS5sZW5ndGg7IF9hKyspIHtcbiAgICAgICAgdmFyIGFyZyA9IGFyZ3NfMVtfYV07XG4gICAgICAgIF9tZXJnZSh0YXJnZXQgfHwge30sIGFyZyk7XG4gICAgfVxuICAgIHJldHVybiB0YXJnZXQ7XG59XG4vKipcbiAqIFRoZSBfbWVyZ2UgaGVscGVyIGl0ZXJhdGVzIHRocm91Z2ggYWxsIHByb3BzIG9uIHNvdXJjZSBhbmQgYXNzaWducyB0aGVtIHRvIHRhcmdldC5cbiAqIFdoZW4gdGhlIHZhbHVlIGlzIGFuIG9iamVjdCwgd2Ugd2lsbCBjcmVhdGUgYSBkZWVwIGNsb25lIG9mIHRoZSBvYmplY3QuIEhvd2V2ZXIgaWZcbiAqIHRoZXJlIGlzIGEgY2lyY3VsYXIgcmVmZXJlbmNlLCB0aGUgdmFsdWUgd2lsbCBub3QgYmUgZGVlcCBjbG9uZWQgYW5kIHdpbGwgcGVyc2lzdFxuICogdGhlIHJlZmVyZW5jZS5cbiAqL1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbmZ1bmN0aW9uIF9tZXJnZSh0YXJnZXQsIHNvdXJjZSwgY2lyY3VsYXJSZWZlcmVuY2VzKSB7XG4gICAgaWYgKGNpcmN1bGFyUmVmZXJlbmNlcyA9PT0gdm9pZCAwKSB7IGNpcmN1bGFyUmVmZXJlbmNlcyA9IFtdOyB9XG4gICAgY2lyY3VsYXJSZWZlcmVuY2VzLnB1c2goc291cmNlKTtcbiAgICBmb3IgKHZhciBuYW1lXzEgaW4gc291cmNlKSB7XG4gICAgICAgIGlmIChzb3VyY2UuaGFzT3duUHJvcGVydHkobmFtZV8xKSkge1xuICAgICAgICAgICAgaWYgKG5hbWVfMSAhPT0gJ19fcHJvdG9fXycgJiYgbmFtZV8xICE9PSAnY29uc3RydWN0b3InICYmIG5hbWVfMSAhPT0gJ3Byb3RvdHlwZScpIHtcbiAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSBzb3VyY2VbbmFtZV8xXTtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAhPT0gbnVsbCAmJiAhQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGlzQ2lyY3VsYXJSZWZlcmVuY2UgPSBjaXJjdWxhclJlZmVyZW5jZXMuaW5kZXhPZih2YWx1ZSkgPiAtMTtcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0W25hbWVfMV0gPSAoaXNDaXJjdWxhclJlZmVyZW5jZVxuICAgICAgICAgICAgICAgICAgICAgICAgPyB2YWx1ZVxuICAgICAgICAgICAgICAgICAgICAgICAgOiBfbWVyZ2UodGFyZ2V0W25hbWVfMV0gfHwge30sIHZhbHVlLCBjaXJjdWxhclJlZmVyZW5jZXMpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRhcmdldFtuYW1lXzFdID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGNpcmN1bGFyUmVmZXJlbmNlcy5wb3AoKTtcbiAgICByZXR1cm4gdGFyZ2V0O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWVyZ2UuanMubWFwIiwiaW1wb3J0IHsgX19hc3NpZ24gfSBmcm9tIFwidHNsaWJcIjtcbi8qKiBHZW5lcmF0ZXMgYWxsIHRoZSBzZW1hbnRpYyBzbG90IGNvbG9ycyBiYXNlZCBvbiB0aGUgdGhlbWUgc28gZmFyXG4gKiBXZSdsbCB1c2UgdGhlc2UgYXMgZmFsbGJhY2tzIGZvciBzZW1hbnRpYyBzbG90cyB0aGF0IHRoZSBwYXNzZWQgaW4gdGhlbWUgZGlkIG5vdCBkZWZpbmUuXG4gKiBUaGUgY2FsbGVyIG11c3Qgc3RpbGwgbWl4IGluIHRoZSBjdXN0b21pemVkIHNlbWFudGljIHNsb3RzIGF0IHRoZSBlbmQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBtYWtlU2VtYW50aWNDb2xvcnMocCwgZSwgcywgaXNJbnZlcnRlZCwgZGVwQ29tbWVudHMpIHtcbiAgICBpZiAoZGVwQ29tbWVudHMgPT09IHZvaWQgMCkgeyBkZXBDb21tZW50cyA9IGZhbHNlOyB9XG4gICAgdmFyIHNlbWFudGljQ29sb3JzID0gX19hc3NpZ24oeyBwcmltYXJ5QnV0dG9uQm9yZGVyOiAndHJhbnNwYXJlbnQnLCBlcnJvclRleHQ6ICFpc0ludmVydGVkID8gJyNhNDI2MmMnIDogJyNGMTcwN0InLCBtZXNzYWdlVGV4dDogIWlzSW52ZXJ0ZWQgPyAnIzMyMzEzMCcgOiAnI0YzRjJGMScsIG1lc3NhZ2VMaW5rOiAhaXNJbnZlcnRlZCA/ICcjMDA1QTlFJyA6ICcjNkNCOEY2JywgbWVzc2FnZUxpbmtIb3ZlcmVkOiAhaXNJbnZlcnRlZCA/ICcjMDA0NTc4JyA6ICcjODJDN0ZGJywgaW5mb0ljb246ICFpc0ludmVydGVkID8gJyM2MDVlNWMnIDogJyNDOEM2QzQnLCBlcnJvckljb246ICFpc0ludmVydGVkID8gJyNBODAwMDAnIDogJyNGMTcwN0InLCBibG9ja2luZ0ljb246ICFpc0ludmVydGVkID8gJyNGREU3RTknIDogJyM0NDI3MjYnLCB3YXJuaW5nSWNvbjogIWlzSW52ZXJ0ZWQgPyAnIzc5Nzc3NScgOiAnI0M4QzZDNCcsIHNldmVyZVdhcm5pbmdJY29uOiAhaXNJbnZlcnRlZCA/ICcjRDgzQjAxJyA6ICcjRkNFMTAwJywgc3VjY2Vzc0ljb246ICFpc0ludmVydGVkID8gJyMxMDdDMTAnIDogJyM5MkMzNTMnLCBpbmZvQmFja2dyb3VuZDogIWlzSW52ZXJ0ZWQgPyAnI2YzZjJmMScgOiAnIzMyMzEzMCcsIGVycm9yQmFja2dyb3VuZDogIWlzSW52ZXJ0ZWQgPyAnI0ZERTdFOScgOiAnIzQ0MjcyNicsIGJsb2NraW5nQmFja2dyb3VuZDogIWlzSW52ZXJ0ZWQgPyAnI0ZERTdFOScgOiAnIzQ0MjcyNicsIHdhcm5pbmdCYWNrZ3JvdW5kOiAhaXNJbnZlcnRlZCA/ICcjRkZGNENFJyA6ICcjNDMzNTE5Jywgc2V2ZXJlV2FybmluZ0JhY2tncm91bmQ6ICFpc0ludmVydGVkID8gJyNGRUQ5Q0MnIDogJyM0RjJBMEYnLCBzdWNjZXNzQmFja2dyb3VuZDogIWlzSW52ZXJ0ZWQgPyAnI0RGRjZERCcgOiAnIzM5M0QxQicsIFxuICAgICAgICAvLyBkZXByZWNhdGVkXG4gICAgICAgIHdhcm5pbmdIaWdobGlnaHQ6ICFpc0ludmVydGVkID8gJyNmZmI5MDAnIDogJyNmZmYxMDAnLCBzdWNjZXNzVGV4dDogIWlzSW52ZXJ0ZWQgPyAnIzEwN0MxMCcgOiAnIzkyYzM1MycgfSwgcyk7XG4gICAgdmFyIGZ1bGxTZW1hbnRpY0NvbG9ycyA9IGdldFNlbWFudGljQ29sb3JzKHAsIGUsIHNlbWFudGljQ29sb3JzLCBpc0ludmVydGVkKTtcbiAgICByZXR1cm4gX2ZpeERlcHJlY2F0ZWRTbG90cyhmdWxsU2VtYW50aWNDb2xvcnMsIGRlcENvbW1lbnRzKTtcbn1cbi8qKlxuICogTWFwIHBhcnRpYWwgcGxhdHRlIGFuZCBlZmZlY3RzIHRvIHBhcnRpYWwgc2VtYW50aWMgY29sb3JzLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0U2VtYW50aWNDb2xvcnMocCwgZSwgcywgaXNJbnZlcnRlZCwgZGVwQ29tbWVudHMpIHtcbiAgICBpZiAoZGVwQ29tbWVudHMgPT09IHZvaWQgMCkgeyBkZXBDb21tZW50cyA9IGZhbHNlOyB9XG4gICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgIC8vIG1hcCBwYWxldHRlXG4gICAgdmFyIF9hID0gcCB8fCB7fSwgd2hpdGUgPSBfYS53aGl0ZSwgYmxhY2sgPSBfYS5ibGFjaywgdGhlbWVQcmltYXJ5ID0gX2EudGhlbWVQcmltYXJ5LCB0aGVtZURhcmsgPSBfYS50aGVtZURhcmssIHRoZW1lRGFya2VyID0gX2EudGhlbWVEYXJrZXIsIHRoZW1lRGFya0FsdCA9IF9hLnRoZW1lRGFya0FsdCwgdGhlbWVMaWdodGVyID0gX2EudGhlbWVMaWdodGVyLCBuZXV0cmFsTGlnaHQgPSBfYS5uZXV0cmFsTGlnaHQsIG5ldXRyYWxMaWdodGVyID0gX2EubmV1dHJhbExpZ2h0ZXIsIG5ldXRyYWxEYXJrID0gX2EubmV1dHJhbERhcmssIG5ldXRyYWxRdWF0ZXJuYXJ5ID0gX2EubmV1dHJhbFF1YXRlcm5hcnksIG5ldXRyYWxRdWF0ZXJuYXJ5QWx0ID0gX2EubmV1dHJhbFF1YXRlcm5hcnlBbHQsIG5ldXRyYWxQcmltYXJ5ID0gX2EubmV1dHJhbFByaW1hcnksIG5ldXRyYWxTZWNvbmRhcnkgPSBfYS5uZXV0cmFsU2Vjb25kYXJ5LCBuZXV0cmFsU2Vjb25kYXJ5QWx0ID0gX2EubmV1dHJhbFNlY29uZGFyeUFsdCwgbmV1dHJhbFRlcnRpYXJ5ID0gX2EubmV1dHJhbFRlcnRpYXJ5LCBuZXV0cmFsVGVydGlhcnlBbHQgPSBfYS5uZXV0cmFsVGVydGlhcnlBbHQsIG5ldXRyYWxMaWdodGVyQWx0ID0gX2EubmV1dHJhbExpZ2h0ZXJBbHQsIGFjY2VudCA9IF9hLmFjY2VudDtcbiAgICBpZiAod2hpdGUpIHtcbiAgICAgICAgcmVzdWx0LmJvZHlCYWNrZ3JvdW5kID0gd2hpdGU7XG4gICAgICAgIHJlc3VsdC5ib2R5RnJhbWVCYWNrZ3JvdW5kID0gd2hpdGU7XG4gICAgICAgIHJlc3VsdC5hY2NlbnRCdXR0b25UZXh0ID0gd2hpdGU7XG4gICAgICAgIHJlc3VsdC5idXR0b25CYWNrZ3JvdW5kID0gd2hpdGU7XG4gICAgICAgIHJlc3VsdC5wcmltYXJ5QnV0dG9uVGV4dCA9IHdoaXRlO1xuICAgICAgICByZXN1bHQucHJpbWFyeUJ1dHRvblRleHRIb3ZlcmVkID0gd2hpdGU7XG4gICAgICAgIHJlc3VsdC5wcmltYXJ5QnV0dG9uVGV4dFByZXNzZWQgPSB3aGl0ZTtcbiAgICAgICAgcmVzdWx0LmlucHV0QmFja2dyb3VuZCA9IHdoaXRlO1xuICAgICAgICByZXN1bHQuaW5wdXRGb3JlZ3JvdW5kQ2hlY2tlZCA9IHdoaXRlO1xuICAgICAgICByZXN1bHQubGlzdEJhY2tncm91bmQgPSB3aGl0ZTtcbiAgICAgICAgcmVzdWx0Lm1lbnVCYWNrZ3JvdW5kID0gd2hpdGU7XG4gICAgICAgIHJlc3VsdC5jYXJkU3RhbmRvdXRCYWNrZ3JvdW5kID0gd2hpdGU7XG4gICAgfVxuICAgIGlmIChibGFjaykge1xuICAgICAgICByZXN1bHQuYm9keVRleHRDaGVja2VkID0gYmxhY2s7XG4gICAgICAgIHJlc3VsdC5idXR0b25UZXh0Q2hlY2tlZEhvdmVyZWQgPSBibGFjaztcbiAgICB9XG4gICAgaWYgKHRoZW1lUHJpbWFyeSkge1xuICAgICAgICByZXN1bHQubGluayA9IHRoZW1lUHJpbWFyeTtcbiAgICAgICAgcmVzdWx0LnByaW1hcnlCdXR0b25CYWNrZ3JvdW5kID0gdGhlbWVQcmltYXJ5O1xuICAgICAgICByZXN1bHQuaW5wdXRCYWNrZ3JvdW5kQ2hlY2tlZCA9IHRoZW1lUHJpbWFyeTtcbiAgICAgICAgcmVzdWx0LmlucHV0SWNvbiA9IHRoZW1lUHJpbWFyeTtcbiAgICAgICAgcmVzdWx0LmlucHV0Rm9jdXNCb3JkZXJBbHQgPSB0aGVtZVByaW1hcnk7XG4gICAgICAgIHJlc3VsdC5tZW51SWNvbiA9IHRoZW1lUHJpbWFyeTtcbiAgICAgICAgcmVzdWx0Lm1lbnVIZWFkZXIgPSB0aGVtZVByaW1hcnk7XG4gICAgICAgIHJlc3VsdC5hY2NlbnRCdXR0b25CYWNrZ3JvdW5kID0gdGhlbWVQcmltYXJ5O1xuICAgIH1cbiAgICBpZiAodGhlbWVEYXJrKSB7XG4gICAgICAgIHJlc3VsdC5wcmltYXJ5QnV0dG9uQmFja2dyb3VuZFByZXNzZWQgPSB0aGVtZURhcms7XG4gICAgICAgIHJlc3VsdC5pbnB1dEJhY2tncm91bmRDaGVja2VkSG92ZXJlZCA9IHRoZW1lRGFyaztcbiAgICAgICAgcmVzdWx0LmlucHV0SWNvbkhvdmVyZWQgPSB0aGVtZURhcms7XG4gICAgfVxuICAgIGlmICh0aGVtZURhcmtlcikge1xuICAgICAgICByZXN1bHQubGlua0hvdmVyZWQgPSB0aGVtZURhcmtlcjtcbiAgICB9XG4gICAgaWYgKHRoZW1lRGFya0FsdCkge1xuICAgICAgICByZXN1bHQucHJpbWFyeUJ1dHRvbkJhY2tncm91bmRIb3ZlcmVkID0gdGhlbWVEYXJrQWx0O1xuICAgIH1cbiAgICBpZiAodGhlbWVMaWdodGVyKSB7XG4gICAgICAgIHJlc3VsdC5pbnB1dFBsYWNlaG9sZGVyQmFja2dyb3VuZENoZWNrZWQgPSB0aGVtZUxpZ2h0ZXI7XG4gICAgfVxuICAgIGlmIChuZXV0cmFsTGlnaHQpIHtcbiAgICAgICAgcmVzdWx0LmJvZHlCYWNrZ3JvdW5kQ2hlY2tlZCA9IG5ldXRyYWxMaWdodDtcbiAgICAgICAgcmVzdWx0LmJvZHlGcmFtZURpdmlkZXIgPSBuZXV0cmFsTGlnaHQ7XG4gICAgICAgIHJlc3VsdC5ib2R5RGl2aWRlciA9IG5ldXRyYWxMaWdodDtcbiAgICAgICAgcmVzdWx0LnZhcmlhbnRCb3JkZXIgPSBuZXV0cmFsTGlnaHQ7XG4gICAgICAgIHJlc3VsdC5idXR0b25CYWNrZ3JvdW5kQ2hlY2tlZEhvdmVyZWQgPSBuZXV0cmFsTGlnaHQ7XG4gICAgICAgIHJlc3VsdC5idXR0b25CYWNrZ3JvdW5kUHJlc3NlZCA9IG5ldXRyYWxMaWdodDtcbiAgICAgICAgcmVzdWx0Lmxpc3RJdGVtQmFja2dyb3VuZENoZWNrZWQgPSBuZXV0cmFsTGlnaHQ7XG4gICAgICAgIHJlc3VsdC5saXN0SGVhZGVyQmFja2dyb3VuZFByZXNzZWQgPSBuZXV0cmFsTGlnaHQ7XG4gICAgICAgIHJlc3VsdC5tZW51SXRlbUJhY2tncm91bmRQcmVzc2VkID0gbmV1dHJhbExpZ2h0O1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZGVwcmVjYXRpb24vZGVwcmVjYXRpb25cbiAgICAgICAgcmVzdWx0Lm1lbnVJdGVtQmFja2dyb3VuZENoZWNrZWQgPSBuZXV0cmFsTGlnaHQ7XG4gICAgfVxuICAgIGlmIChuZXV0cmFsTGlnaHRlcikge1xuICAgICAgICByZXN1bHQuYm9keUJhY2tncm91bmRIb3ZlcmVkID0gbmV1dHJhbExpZ2h0ZXI7XG4gICAgICAgIHJlc3VsdC5idXR0b25CYWNrZ3JvdW5kSG92ZXJlZCA9IG5ldXRyYWxMaWdodGVyO1xuICAgICAgICByZXN1bHQuYnV0dG9uQmFja2dyb3VuZERpc2FibGVkID0gbmV1dHJhbExpZ2h0ZXI7XG4gICAgICAgIHJlc3VsdC5idXR0b25Cb3JkZXJEaXNhYmxlZCA9IG5ldXRyYWxMaWdodGVyO1xuICAgICAgICByZXN1bHQucHJpbWFyeUJ1dHRvbkJhY2tncm91bmREaXNhYmxlZCA9IG5ldXRyYWxMaWdodGVyO1xuICAgICAgICByZXN1bHQuZGlzYWJsZWRCYWNrZ3JvdW5kID0gbmV1dHJhbExpZ2h0ZXI7XG4gICAgICAgIHJlc3VsdC5saXN0SXRlbUJhY2tncm91bmRIb3ZlcmVkID0gbmV1dHJhbExpZ2h0ZXI7XG4gICAgICAgIHJlc3VsdC5saXN0SGVhZGVyQmFja2dyb3VuZEhvdmVyZWQgPSBuZXV0cmFsTGlnaHRlcjtcbiAgICAgICAgcmVzdWx0Lm1lbnVJdGVtQmFja2dyb3VuZEhvdmVyZWQgPSBuZXV0cmFsTGlnaHRlcjtcbiAgICB9XG4gICAgaWYgKG5ldXRyYWxRdWF0ZXJuYXJ5KSB7XG4gICAgICAgIHJlc3VsdC5wcmltYXJ5QnV0dG9uVGV4dERpc2FibGVkID0gbmV1dHJhbFF1YXRlcm5hcnk7XG4gICAgICAgIHJlc3VsdC5kaXNhYmxlZFN1YnRleHQgPSBuZXV0cmFsUXVhdGVybmFyeTtcbiAgICB9XG4gICAgaWYgKG5ldXRyYWxRdWF0ZXJuYXJ5QWx0KSB7XG4gICAgICAgIHJlc3VsdC5saXN0SXRlbUJhY2tncm91bmRDaGVja2VkSG92ZXJlZCA9IG5ldXRyYWxRdWF0ZXJuYXJ5QWx0O1xuICAgIH1cbiAgICBpZiAobmV1dHJhbFRlcnRpYXJ5KSB7XG4gICAgICAgIHJlc3VsdC5kaXNhYmxlZEJvZHlUZXh0ID0gbmV1dHJhbFRlcnRpYXJ5O1xuICAgICAgICByZXN1bHQudmFyaWFudEJvcmRlckhvdmVyZWQgPSAocyA9PT0gbnVsbCB8fCBzID09PSB2b2lkIDAgPyB2b2lkIDAgOiBzLnZhcmlhbnRCb3JkZXJIb3ZlcmVkKSB8fCBuZXV0cmFsVGVydGlhcnk7XG4gICAgICAgIHJlc3VsdC5idXR0b25UZXh0RGlzYWJsZWQgPSBuZXV0cmFsVGVydGlhcnk7XG4gICAgICAgIHJlc3VsdC5pbnB1dEljb25EaXNhYmxlZCA9IG5ldXRyYWxUZXJ0aWFyeTtcbiAgICAgICAgcmVzdWx0LmRpc2FibGVkVGV4dCA9IG5ldXRyYWxUZXJ0aWFyeTtcbiAgICB9XG4gICAgaWYgKG5ldXRyYWxQcmltYXJ5KSB7XG4gICAgICAgIHJlc3VsdC5ib2R5VGV4dCA9IG5ldXRyYWxQcmltYXJ5O1xuICAgICAgICByZXN1bHQuYWN0aW9uTGluayA9IG5ldXRyYWxQcmltYXJ5O1xuICAgICAgICByZXN1bHQuYnV0dG9uVGV4dCA9IG5ldXRyYWxQcmltYXJ5O1xuICAgICAgICByZXN1bHQuaW5wdXRCb3JkZXJIb3ZlcmVkID0gbmV1dHJhbFByaW1hcnk7XG4gICAgICAgIHJlc3VsdC5pbnB1dFRleHQgPSBuZXV0cmFsUHJpbWFyeTtcbiAgICAgICAgcmVzdWx0Lmxpc3RUZXh0ID0gbmV1dHJhbFByaW1hcnk7XG4gICAgICAgIHJlc3VsdC5tZW51SXRlbVRleHQgPSBuZXV0cmFsUHJpbWFyeTtcbiAgICB9XG4gICAgaWYgKG5ldXRyYWxMaWdodGVyQWx0KSB7XG4gICAgICAgIHJlc3VsdC5ib2R5U3RhbmRvdXRCYWNrZ3JvdW5kID0gbmV1dHJhbExpZ2h0ZXJBbHQ7XG4gICAgICAgIHJlc3VsdC5kZWZhdWx0U3RhdGVCYWNrZ3JvdW5kID0gbmV1dHJhbExpZ2h0ZXJBbHQ7XG4gICAgfVxuICAgIGlmIChuZXV0cmFsRGFyaykge1xuICAgICAgICByZXN1bHQuYWN0aW9uTGlua0hvdmVyZWQgPSBuZXV0cmFsRGFyaztcbiAgICAgICAgcmVzdWx0LmJ1dHRvblRleHRIb3ZlcmVkID0gbmV1dHJhbERhcms7XG4gICAgICAgIHJlc3VsdC5idXR0b25UZXh0Q2hlY2tlZCA9IG5ldXRyYWxEYXJrO1xuICAgICAgICByZXN1bHQuYnV0dG9uVGV4dFByZXNzZWQgPSBuZXV0cmFsRGFyaztcbiAgICAgICAgcmVzdWx0LmlucHV0VGV4dEhvdmVyZWQgPSBuZXV0cmFsRGFyaztcbiAgICAgICAgcmVzdWx0Lm1lbnVJdGVtVGV4dEhvdmVyZWQgPSBuZXV0cmFsRGFyaztcbiAgICB9XG4gICAgaWYgKG5ldXRyYWxTZWNvbmRhcnkpIHtcbiAgICAgICAgcmVzdWx0LmJvZHlTdWJ0ZXh0ID0gbmV1dHJhbFNlY29uZGFyeTtcbiAgICAgICAgcmVzdWx0LmZvY3VzQm9yZGVyID0gbmV1dHJhbFNlY29uZGFyeTtcbiAgICAgICAgcmVzdWx0LmlucHV0Qm9yZGVyID0gbmV1dHJhbFNlY29uZGFyeTtcbiAgICAgICAgcmVzdWx0LnNtYWxsSW5wdXRCb3JkZXIgPSBuZXV0cmFsU2Vjb25kYXJ5O1xuICAgICAgICByZXN1bHQuaW5wdXRQbGFjZWhvbGRlclRleHQgPSBuZXV0cmFsU2Vjb25kYXJ5O1xuICAgIH1cbiAgICBpZiAobmV1dHJhbFNlY29uZGFyeUFsdCkge1xuICAgICAgICByZXN1bHQuYnV0dG9uQm9yZGVyID0gbmV1dHJhbFNlY29uZGFyeUFsdDtcbiAgICB9XG4gICAgaWYgKG5ldXRyYWxUZXJ0aWFyeUFsdCkge1xuICAgICAgICByZXN1bHQuZGlzYWJsZWRCb2R5U3VidGV4dCA9IG5ldXRyYWxUZXJ0aWFyeUFsdDtcbiAgICAgICAgcmVzdWx0LmRpc2FibGVkQm9yZGVyID0gbmV1dHJhbFRlcnRpYXJ5QWx0O1xuICAgICAgICByZXN1bHQuYnV0dG9uQmFja2dyb3VuZENoZWNrZWQgPSBuZXV0cmFsVGVydGlhcnlBbHQ7XG4gICAgICAgIHJlc3VsdC5tZW51RGl2aWRlciA9IG5ldXRyYWxUZXJ0aWFyeUFsdDtcbiAgICB9XG4gICAgaWYgKGFjY2VudCkge1xuICAgICAgICByZXN1bHQuYWNjZW50QnV0dG9uQmFja2dyb3VuZCA9IGFjY2VudDtcbiAgICB9XG4gICAgLy8gbWFwIGVmZmVjdHNcbiAgICBpZiAoZSA9PT0gbnVsbCB8fCBlID09PSB2b2lkIDAgPyB2b2lkIDAgOiBlLmVsZXZhdGlvbjQpIHtcbiAgICAgICAgcmVzdWx0LmNhcmRTaGFkb3cgPSBlLmVsZXZhdGlvbjQ7XG4gICAgfVxuICAgIGlmICghaXNJbnZlcnRlZCAmJiAoZSA9PT0gbnVsbCB8fCBlID09PSB2b2lkIDAgPyB2b2lkIDAgOiBlLmVsZXZhdGlvbjgpKSB7XG4gICAgICAgIHJlc3VsdC5jYXJkU2hhZG93SG92ZXJlZCA9IGUuZWxldmF0aW9uODtcbiAgICB9XG4gICAgZWxzZSBpZiAocmVzdWx0LnZhcmlhbnRCb3JkZXJIb3ZlcmVkKSB7XG4gICAgICAgIHJlc3VsdC5jYXJkU2hhZG93SG92ZXJlZCA9ICcwIDAgMXB4ICcgKyByZXN1bHQudmFyaWFudEJvcmRlckhvdmVyZWQ7XG4gICAgfVxuICAgIHJlc3VsdCA9IF9fYXNzaWduKF9fYXNzaWduKHt9LCByZXN1bHQpLCBzKTtcbiAgICByZXR1cm4gcmVzdWx0O1xufVxuZnVuY3Rpb24gX2ZpeERlcHJlY2F0ZWRTbG90cyhzLCBkZXBDb21tZW50cykge1xuICAgIC8vIEFkZCBAZGVwcmVjYXRlZCB0YWcgYXMgY29tbWVudCBpZiBlbmFibGVkXG4gICAgdmFyIGRlcCA9ICcnO1xuICAgIGlmIChkZXBDb21tZW50cyA9PT0gdHJ1ZSkge1xuICAgICAgICBkZXAgPSAnIC8qIEBkZXByZWNhdGVkICovJztcbiAgICB9XG4gICAgLyogZXNsaW50LWRpc2FibGUgZGVwcmVjYXRpb24vZGVwcmVjYXRpb24gKi9cbiAgICBzLmxpc3RUZXh0Q29sb3IgPSBzLmxpc3RUZXh0ICsgZGVwO1xuICAgIHMubWVudUl0ZW1CYWNrZ3JvdW5kQ2hlY2tlZCArPSBkZXA7XG4gICAgcy53YXJuaW5nSGlnaGxpZ2h0ICs9IGRlcDtcbiAgICBzLndhcm5pbmdUZXh0ID0gcy5tZXNzYWdlVGV4dCArIGRlcDtcbiAgICBzLnN1Y2Nlc3NUZXh0ICs9IGRlcDtcbiAgICAvKiBlc2xpbnQtZW5hYmxlIGRlcHJlY2F0aW9uL2RlcHJlY2F0aW9uICovXG4gICAgcmV0dXJuIHM7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tYWtlU2VtYW50aWNDb2xvcnMuanMubWFwIiwiZXhwb3J0IHZhciBEZWZhdWx0U3BhY2luZyA9IHtcbiAgICBzMjogJzRweCcsXG4gICAgczE6ICc4cHgnLFxuICAgIG06ICcxNnB4JyxcbiAgICBsMTogJzIwcHgnLFxuICAgIGwyOiAnMzJweCcsXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9RGVmYXVsdFNwYWNpbmcuanMubWFwIiwiaW1wb3J0IHsgRGVmYXVsdFBhbGV0dGUgfSBmcm9tICcuL2NvbG9ycy9pbmRleCc7XG5pbXBvcnQgeyBEZWZhdWx0RWZmZWN0cyB9IGZyb20gJy4vZWZmZWN0cy9pbmRleCc7XG5pbXBvcnQgeyBEZWZhdWx0Rm9udFN0eWxlcyB9IGZyb20gJy4vZm9udHMvaW5kZXgnO1xuaW1wb3J0IHsgbWVyZ2VUaGVtZXMgfSBmcm9tICcuL21lcmdlVGhlbWVzJztcbmltcG9ydCB7IERlZmF1bHRTcGFjaW5nIH0gZnJvbSAnLi9zcGFjaW5nL2luZGV4JztcbmltcG9ydCB7IG1ha2VTZW1hbnRpY0NvbG9ycyB9IGZyb20gJy4vdXRpbGl0aWVzL21ha2VTZW1hbnRpY0NvbG9ycyc7XG4vKipcbiAqIENyZWF0ZXMgYSBjdXN0b20gdGhlbWUgZGVmaW5pdGlvbi5cbiAqIEBwYXJhbSB0aGVtZSAtIFBhcnRpYWwgdGhlbWUgb2JqZWN0LlxuICogQHBhcmFtIGRlcENvbW1lbnRzIC0gV2hldGhlciB0byBpbmNsdWRlIGRlcHJlY2F0ZWQgdGFncyBhcyBjb21tZW50cyBmb3IgZGVwcmVjYXRlZCBzbG90cy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVRoZW1lKHRoZW1lLCBkZXBDb21tZW50cykge1xuICAgIGlmICh0aGVtZSA9PT0gdm9pZCAwKSB7IHRoZW1lID0ge307IH1cbiAgICBpZiAoZGVwQ29tbWVudHMgPT09IHZvaWQgMCkgeyBkZXBDb21tZW50cyA9IGZhbHNlOyB9XG4gICAgdmFyIGlzSW52ZXJ0ZWQgPSAhIXRoZW1lLmlzSW52ZXJ0ZWQ7XG4gICAgdmFyIGJhc2VUaGVtZSA9IHtcbiAgICAgICAgcGFsZXR0ZTogRGVmYXVsdFBhbGV0dGUsXG4gICAgICAgIGVmZmVjdHM6IERlZmF1bHRFZmZlY3RzLFxuICAgICAgICBmb250czogRGVmYXVsdEZvbnRTdHlsZXMsXG4gICAgICAgIHNwYWNpbmc6IERlZmF1bHRTcGFjaW5nLFxuICAgICAgICBpc0ludmVydGVkOiBpc0ludmVydGVkLFxuICAgICAgICBkaXNhYmxlR2xvYmFsQ2xhc3NOYW1lczogZmFsc2UsXG4gICAgICAgIHNlbWFudGljQ29sb3JzOiBtYWtlU2VtYW50aWNDb2xvcnMoRGVmYXVsdFBhbGV0dGUsIERlZmF1bHRFZmZlY3RzLCB1bmRlZmluZWQsIGlzSW52ZXJ0ZWQsIGRlcENvbW1lbnRzKSxcbiAgICAgICAgcnRsOiB1bmRlZmluZWQsXG4gICAgfTtcbiAgICByZXR1cm4gbWVyZ2VUaGVtZXMoYmFzZVRoZW1lLCB0aGVtZSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jcmVhdGVUaGVtZS5qcy5tYXAiLCJpbXBvcnQgeyBtZXJnZSB9IGZyb20gJ0BmbHVlbnR1aS91dGlsaXRpZXMnO1xuaW1wb3J0IHsgZ2V0U2VtYW50aWNDb2xvcnMgfSBmcm9tICcuL3V0aWxpdGllcy9tYWtlU2VtYW50aWNDb2xvcnMnO1xuLyoqXG4gKiBNZXJnZSBhIHBhcnRpYWwvZnVsbCB0aGVtZSBpbnRvIGEgZnVsbCB0aGVtZSBhbmQgcmV0dXJucyBhIG1lcmdlZCBmdWxsIHRoZW1lLlxuICovXG5leHBvcnQgZnVuY3Rpb24gbWVyZ2VUaGVtZXModGhlbWUsIHBhcnRpYWxUaGVtZSkge1xuICAgIHZhciBfYSwgX2IsIF9jO1xuICAgIGlmIChwYXJ0aWFsVGhlbWUgPT09IHZvaWQgMCkgeyBwYXJ0aWFsVGhlbWUgPSB7fTsgfVxuICAgIHZhciBtZXJnZWRUaGVtZSA9IG1lcmdlKHt9LCB0aGVtZSwgcGFydGlhbFRoZW1lLCB7XG4gICAgICAgIHNlbWFudGljQ29sb3JzOiBnZXRTZW1hbnRpY0NvbG9ycyhwYXJ0aWFsVGhlbWUucGFsZXR0ZSwgcGFydGlhbFRoZW1lLmVmZmVjdHMsIHBhcnRpYWxUaGVtZS5zZW1hbnRpY0NvbG9ycywgcGFydGlhbFRoZW1lLmlzSW52ZXJ0ZWQgPT09IHVuZGVmaW5lZCA/IHRoZW1lLmlzSW52ZXJ0ZWQgOiBwYXJ0aWFsVGhlbWUuaXNJbnZlcnRlZCksXG4gICAgfSk7XG4gICAgaWYgKCgoX2EgPSBwYXJ0aWFsVGhlbWUucGFsZXR0ZSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnRoZW1lUHJpbWFyeSkgJiYgISgoX2IgPSBwYXJ0aWFsVGhlbWUucGFsZXR0ZSkgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLmFjY2VudCkpIHtcbiAgICAgICAgbWVyZ2VkVGhlbWUucGFsZXR0ZS5hY2NlbnQgPSBwYXJ0aWFsVGhlbWUucGFsZXR0ZS50aGVtZVByaW1hcnk7XG4gICAgfVxuICAgIGlmIChwYXJ0aWFsVGhlbWUuZGVmYXVsdEZvbnRTdHlsZSkge1xuICAgICAgICBmb3IgKHZhciBfaSA9IDAsIF9kID0gT2JqZWN0LmtleXMobWVyZ2VkVGhlbWUuZm9udHMpOyBfaSA8IF9kLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgdmFyIGZvbnRTdHlsZSA9IF9kW19pXTtcbiAgICAgICAgICAgIG1lcmdlZFRoZW1lLmZvbnRzW2ZvbnRTdHlsZV0gPSBtZXJnZShtZXJnZWRUaGVtZS5mb250c1tmb250U3R5bGVdLCBwYXJ0aWFsVGhlbWUuZGVmYXVsdEZvbnRTdHlsZSwgKF9jID0gcGFydGlhbFRoZW1lID09PSBudWxsIHx8IHBhcnRpYWxUaGVtZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogcGFydGlhbFRoZW1lLmZvbnRzKSA9PT0gbnVsbCB8fCBfYyA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2NbZm9udFN0eWxlXSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG1lcmdlZFRoZW1lO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWVyZ2VUaGVtZXMuanMubWFwIiwiaW1wb3J0IHsgX19hc3NpZ24gfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IEN1c3RvbWl6YXRpb25zLCBnZXRXaW5kb3cgfSBmcm9tICdAZmx1ZW50dWkvdXRpbGl0aWVzJztcbmltcG9ydCB7IGxvYWRUaGVtZSBhcyBsZWdhY3lMb2FkVGhlbWUgfSBmcm9tICdAbWljcm9zb2Z0L2xvYWQtdGhlbWVkLXN0eWxlcyc7XG5pbXBvcnQgeyBjcmVhdGVUaGVtZSB9IGZyb20gJ0BmbHVlbnR1aS90aGVtZSc7XG5leHBvcnQgeyBjcmVhdGVUaGVtZSB9IGZyb20gJ0BmbHVlbnR1aS90aGVtZSc7XG52YXIgX3RoZW1lID0gY3JlYXRlVGhlbWUoe30pO1xudmFyIF9vblRoZW1lQ2hhbmdlQ2FsbGJhY2tzID0gW107XG5leHBvcnQgdmFyIFRoZW1lU2V0dGluZ05hbWUgPSAndGhlbWUnO1xuZXhwb3J0IGZ1bmN0aW9uIGluaXRpYWxpemVUaGVtZUluQ3VzdG9taXphdGlvbnMoKSB7XG4gICAgdmFyIF9hO1xuICAgIHZhciBfYiwgX2M7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICB2YXIgd2luID0gZ2V0V2luZG93KCk7XG4gICAgaWYgKChfYiA9IHdpbiA9PT0gbnVsbCB8fCB3aW4gPT09IHZvaWQgMCA/IHZvaWQgMCA6IHdpbi5GYWJyaWNDb25maWcpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5sZWdhY3lUaGVtZSkge1xuICAgICAgICAvLyBkb2VzIGV2ZXJ5dGhpbmcgdGhlIGBlbHNlYCBjbGF1c2UgZG9lcyBhbmQgbW9yZSwgc3VjaCBhcyBpbnZva2UgbGVnYWN5IHRoZW1pbmdcbiAgICAgICAgbG9hZFRoZW1lKHdpbi5GYWJyaWNDb25maWcubGVnYWN5VGhlbWUpO1xuICAgIH1cbiAgICBlbHNlIGlmICghQ3VzdG9taXphdGlvbnMuZ2V0U2V0dGluZ3MoW1RoZW1lU2V0dGluZ05hbWVdKS50aGVtZSkge1xuICAgICAgICBpZiAoKF9jID0gd2luID09PSBudWxsIHx8IHdpbiA9PT0gdm9pZCAwID8gdm9pZCAwIDogd2luLkZhYnJpY0NvbmZpZykgPT09IG51bGwgfHwgX2MgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9jLnRoZW1lKSB7XG4gICAgICAgICAgICBfdGhlbWUgPSBjcmVhdGVUaGVtZSh3aW4uRmFicmljQ29uZmlnLnRoZW1lKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBTZXQgdGhlIGRlZmF1bHQgdGhlbWUuXG4gICAgICAgIEN1c3RvbWl6YXRpb25zLmFwcGx5U2V0dGluZ3MoKF9hID0ge30sIF9hW1RoZW1lU2V0dGluZ05hbWVdID0gX3RoZW1lLCBfYSkpO1xuICAgIH1cbn1cbmluaXRpYWxpemVUaGVtZUluQ3VzdG9taXphdGlvbnMoKTtcbi8qKlxuICogR2V0cyB0aGUgdGhlbWUgb2JqZWN0XG4gKiBAcGFyYW0gZGVwQ29tbWVudHMgLSBXaGV0aGVyIHRvIGluY2x1ZGUgZGVwcmVjYXRlZCB0YWdzIGFzIGNvbW1lbnRzIGZvciBkZXByZWNhdGVkIHNsb3RzLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0VGhlbWUoZGVwQ29tbWVudHMpIHtcbiAgICBpZiAoZGVwQ29tbWVudHMgPT09IHZvaWQgMCkgeyBkZXBDb21tZW50cyA9IGZhbHNlOyB9XG4gICAgaWYgKGRlcENvbW1lbnRzID09PSB0cnVlKSB7XG4gICAgICAgIF90aGVtZSA9IGNyZWF0ZVRoZW1lKHt9LCBkZXBDb21tZW50cyk7XG4gICAgfVxuICAgIHJldHVybiBfdGhlbWU7XG59XG4vKipcbiAqIFJlZ2lzdGVycyBhIGNhbGxiYWNrIHRoYXQgZ2V0cyBjYWxsZWQgd2hlbmV2ZXIgdGhlIHRoZW1lIGNoYW5nZXMuXG4gKiBUaGlzIHNob3VsZCBvbmx5IGJlIHVzZWQgd2hlbiB0aGUgY29tcG9uZW50IGNhbm5vdCBhdXRvbWF0aWNhbGx5IGdldCB0aGVtZSBjaGFuZ2VzIHRocm91Z2ggaXRzIHN0YXRlLlxuICogVGhpcyB3aWxsIG5vdCByZWdpc3RlciBkdXBsaWNhdGUgY2FsbGJhY2tzLlxuICovXG5leHBvcnQgZnVuY3Rpb24gcmVnaXN0ZXJPblRoZW1lQ2hhbmdlQ2FsbGJhY2soY2FsbGJhY2spIHtcbiAgICBpZiAoX29uVGhlbWVDaGFuZ2VDYWxsYmFja3MuaW5kZXhPZihjYWxsYmFjaykgPT09IC0xKSB7XG4gICAgICAgIF9vblRoZW1lQ2hhbmdlQ2FsbGJhY2tzLnB1c2goY2FsbGJhY2spO1xuICAgIH1cbn1cbi8qKlxuICogU2VlIHJlZ2lzdGVyT25UaGVtZUNoYW5nZUNhbGxiYWNrKCkuXG4gKiBSZW1vdmVzIHByZXZpb3VzbHkgcmVnaXN0ZXJlZCBjYWxsYmFja3MuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZW1vdmVPblRoZW1lQ2hhbmdlQ2FsbGJhY2soY2FsbGJhY2spIHtcbiAgICB2YXIgaSA9IF9vblRoZW1lQ2hhbmdlQ2FsbGJhY2tzLmluZGV4T2YoY2FsbGJhY2spO1xuICAgIGlmIChpID09PSAtMSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIF9vblRoZW1lQ2hhbmdlQ2FsbGJhY2tzLnNwbGljZShpLCAxKTtcbn1cbi8qKlxuICogQXBwbGllcyB0aGUgdGhlbWUsIHdoaWxlIGZpbGxpbmcgaW4gbWlzc2luZyBzbG90cy5cbiAqIEBwYXJhbSB0aGVtZSAtIFBhcnRpYWwgdGhlbWUgb2JqZWN0LlxuICogQHBhcmFtIGRlcENvbW1lbnRzIC0gV2hldGhlciB0byBpbmNsdWRlIGRlcHJlY2F0ZWQgdGFncyBhcyBjb21tZW50cyBmb3IgZGVwcmVjYXRlZCBzbG90cy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGxvYWRUaGVtZSh0aGVtZSwgZGVwQ29tbWVudHMpIHtcbiAgICB2YXIgX2E7XG4gICAgaWYgKGRlcENvbW1lbnRzID09PSB2b2lkIDApIHsgZGVwQ29tbWVudHMgPSBmYWxzZTsgfVxuICAgIF90aGVtZSA9IGNyZWF0ZVRoZW1lKHRoZW1lLCBkZXBDb21tZW50cyk7XG4gICAgLy8gSW52b2tlIHRoZSBsZWdhY3kgbWV0aG9kIG9mIHRoZW1pbmcgdGhlIHBhZ2UgYXMgd2VsbC5cbiAgICBsZWdhY3lMb2FkVGhlbWUoX19hc3NpZ24oX19hc3NpZ24oX19hc3NpZ24oX19hc3NpZ24oe30sIF90aGVtZS5wYWxldHRlKSwgX3RoZW1lLnNlbWFudGljQ29sb3JzKSwgX3RoZW1lLmVmZmVjdHMpLCBfbG9hZEZvbnRzKF90aGVtZSkpKTtcbiAgICBDdXN0b21pemF0aW9ucy5hcHBseVNldHRpbmdzKChfYSA9IHt9LCBfYVtUaGVtZVNldHRpbmdOYW1lXSA9IF90aGVtZSwgX2EpKTtcbiAgICBfb25UaGVtZUNoYW5nZUNhbGxiYWNrcy5mb3JFYWNoKGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY2FsbGJhY2soX3RoZW1lKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgLy8gZG9uJ3QgbGV0IGEgYmFkIGNhbGxiYWNrIGJyZWFrIGV2ZXJ5dGhpbmcgZWxzZVxuICAgICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIF90aGVtZTtcbn1cbi8qKlxuICogTG9hZHMgZm9udCB2YXJpYWJsZXMgaW50byBhIEpTT04gb2JqZWN0LlxuICogQHBhcmFtIHRoZW1lIC0gVGhlIHRoZW1lIG9iamVjdFxuICovXG5mdW5jdGlvbiBfbG9hZEZvbnRzKHRoZW1lKSB7XG4gICAgdmFyIGxpbmVzID0ge307XG4gICAgZm9yICh2YXIgX2kgPSAwLCBfYSA9IE9iamVjdC5rZXlzKHRoZW1lLmZvbnRzKTsgX2kgPCBfYS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgdmFyIGZvbnROYW1lID0gX2FbX2ldO1xuICAgICAgICB2YXIgZm9udCA9IHRoZW1lLmZvbnRzW2ZvbnROYW1lXTtcbiAgICAgICAgZm9yICh2YXIgX2IgPSAwLCBfYyA9IE9iamVjdC5rZXlzKGZvbnQpOyBfYiA8IF9jLmxlbmd0aDsgX2IrKykge1xuICAgICAgICAgICAgdmFyIHByb3BOYW1lID0gX2NbX2JdO1xuICAgICAgICAgICAgdmFyIG5hbWVfMSA9IGZvbnROYW1lICsgcHJvcE5hbWUuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBwcm9wTmFtZS5zbGljZSgxKTtcbiAgICAgICAgICAgIHZhciB2YWx1ZSA9IGZvbnRbcHJvcE5hbWVdO1xuICAgICAgICAgICAgaWYgKHByb3BOYW1lID09PSAnZm9udFNpemUnICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgICAgICAvLyBpZiBpdCdzIGEgbnVtYmVyLCBjb252ZXJ0IGl0IHRvIHB4IGJ5IGRlZmF1bHQgbGlrZSBvdXIgdGhlbWluZyBzeXN0ZW0gZG9lc1xuICAgICAgICAgICAgICAgIHZhbHVlID0gdmFsdWUgKyAncHgnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGluZXNbbmFtZV8xXSA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBsaW5lcztcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRoZW1lLmpzLm1hcCIsImltcG9ydCB7IF9fYXNzaWduIH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBHbG9iYWxTZXR0aW5ncywgd2FybiB9IGZyb20gJ0BmbHVlbnR1aS91dGlsaXRpZXMnO1xuaW1wb3J0IHsgZm9udEZhY2UsIG1lcmdlU3R5bGVzLCBTdHlsZXNoZWV0IH0gZnJvbSAnQGZsdWVudHVpL21lcmdlLXN0eWxlcyc7XG52YXIgSUNPTl9TRVRUSU5HX05BTUUgPSAnaWNvbnMnO1xudmFyIF9pY29uU2V0dGluZ3MgPSBHbG9iYWxTZXR0aW5ncy5nZXRWYWx1ZShJQ09OX1NFVFRJTkdfTkFNRSwge1xuICAgIF9fb3B0aW9uczoge1xuICAgICAgICBkaXNhYmxlV2FybmluZ3M6IGZhbHNlLFxuICAgICAgICB3YXJuT25NaXNzaW5nSWNvbnM6IHRydWUsXG4gICAgfSxcbiAgICBfX3JlbWFwcGVkOiB7fSxcbn0pO1xuLy8gUmVzZXQgaWNvbiByZWdpc3RyYXRpb24gb24gc3R5bGVzaGVldCByZXNldHMuXG52YXIgc3R5bGVzaGVldCA9IFN0eWxlc2hlZXQuZ2V0SW5zdGFuY2UoKTtcbmlmIChzdHlsZXNoZWV0ICYmIHN0eWxlc2hlZXQub25SZXNldCkge1xuICAgIHN0eWxlc2hlZXQub25SZXNldChmdW5jdGlvbiAoKSB7XG4gICAgICAgIGZvciAodmFyIG5hbWVfMSBpbiBfaWNvblNldHRpbmdzKSB7XG4gICAgICAgICAgICBpZiAoX2ljb25TZXR0aW5ncy5oYXNPd25Qcm9wZXJ0eShuYW1lXzEpICYmICEhX2ljb25TZXR0aW5nc1tuYW1lXzFdLnN1YnNldCkge1xuICAgICAgICAgICAgICAgIF9pY29uU2V0dGluZ3NbbmFtZV8xXS5zdWJzZXQuY2xhc3NOYW1lID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSk7XG59XG4vKipcbiAqIE5vcm1hbGl6ZXMgYW4gaWNvbiBuYW1lIGZvciBjb25zaXN0ZW50IG1hcHBpbmcuXG4gKiBDdXJyZW50IGltcGxlbWVudGF0aW9uIGlzIHRvIGNvbnZlcnQgdGhlIGljb24gbmFtZSB0byBsb3dlciBjYXNlLlxuICpcbiAqIEBwYXJhbSBuYW1lIC0gSWNvbiBuYW1lIHRvIG5vcm1hbGl6ZS5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IE5vcm1hbGl6ZWQgaWNvbiBuYW1lIHRvIHVzZSBmb3IgaW5kZXhpbmcgYW5kIG1hcHBpbmcuXG4gKi9cbnZhciBub3JtYWxpemVJY29uTmFtZSA9IGZ1bmN0aW9uIChuYW1lKSB7IHJldHVybiBuYW1lLnRvTG93ZXJDYXNlKCk7IH07XG4vKipcbiAqIFJlZ2lzdGVycyBhIGdpdmVuIHN1YnNldCBvZiBpY29ucy5cbiAqXG4gKiBAcGFyYW0gaWNvblN1YnNldCAtIHRoZSBpY29uIHN1YnNldCBkZWZpbml0aW9uLlxuICovXG5leHBvcnQgZnVuY3Rpb24gcmVnaXN0ZXJJY29ucyhpY29uU3Vic2V0LCBvcHRpb25zKSB7XG4gICAgdmFyIHN1YnNldCA9IF9fYXNzaWduKF9fYXNzaWduKHt9LCBpY29uU3Vic2V0KSwgeyBpc1JlZ2lzdGVyZWQ6IGZhbHNlLCBjbGFzc05hbWU6IHVuZGVmaW5lZCB9KTtcbiAgICB2YXIgaWNvbnMgPSBpY29uU3Vic2V0Lmljb25zO1xuICAgIC8vIEdyYWIgb3B0aW9ucywgb3B0aW9uYWxseSBtaXggdXNlciBwcm92aWRlZCBvbmVzIG9uIHRvcC5cbiAgICBvcHRpb25zID0gb3B0aW9ucyA/IF9fYXNzaWduKF9fYXNzaWduKHt9LCBfaWNvblNldHRpbmdzLl9fb3B0aW9ucyksIG9wdGlvbnMpIDogX2ljb25TZXR0aW5ncy5fX29wdGlvbnM7XG4gICAgZm9yICh2YXIgaWNvbk5hbWUgaW4gaWNvbnMpIHtcbiAgICAgICAgaWYgKGljb25zLmhhc093blByb3BlcnR5KGljb25OYW1lKSkge1xuICAgICAgICAgICAgdmFyIGNvZGUgPSBpY29uc1tpY29uTmFtZV07XG4gICAgICAgICAgICB2YXIgbm9ybWFsaXplZEljb25OYW1lID0gbm9ybWFsaXplSWNvbk5hbWUoaWNvbk5hbWUpO1xuICAgICAgICAgICAgaWYgKF9pY29uU2V0dGluZ3Nbbm9ybWFsaXplZEljb25OYW1lXSkge1xuICAgICAgICAgICAgICAgIF93YXJuRHVwbGljYXRlSWNvbihpY29uTmFtZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBfaWNvblNldHRpbmdzW25vcm1hbGl6ZWRJY29uTmFtZV0gPSB7XG4gICAgICAgICAgICAgICAgICAgIGNvZGU6IGNvZGUsXG4gICAgICAgICAgICAgICAgICAgIHN1YnNldDogc3Vic2V0LFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG4vKipcbiAqIFVucmVnaXN0ZXJzIGljb25zIGJ5IG5hbWUuXG4gKlxuICogQHBhcmFtIGljb25OYW1lcyAtIExpc3Qgb2YgaWNvbnMgdG8gdW5yZWdpc3Rlci5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVucmVnaXN0ZXJJY29ucyhpY29uTmFtZXMpIHtcbiAgICB2YXIgb3B0aW9ucyA9IF9pY29uU2V0dGluZ3MuX19vcHRpb25zO1xuICAgIHZhciBfbG9vcF8xID0gZnVuY3Rpb24gKGljb25OYW1lKSB7XG4gICAgICAgIHZhciBub3JtYWxpemVkSWNvbk5hbWUgPSBub3JtYWxpemVJY29uTmFtZShpY29uTmFtZSk7XG4gICAgICAgIGlmIChfaWNvblNldHRpbmdzW25vcm1hbGl6ZWRJY29uTmFtZV0pIHtcbiAgICAgICAgICAgIGRlbGV0ZSBfaWNvblNldHRpbmdzW25vcm1hbGl6ZWRJY29uTmFtZV07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAvLyBXYXJuIHRoYXQgd2UgYXJlIHRyeWluZyB0byBkZWxldGUgYW4gaWNvbiB0aGF0IGRvZXNuJ3QgZXhpc3RcbiAgICAgICAgICAgIGlmICghb3B0aW9ucy5kaXNhYmxlV2FybmluZ3MpIHtcbiAgICAgICAgICAgICAgICB3YXJuKFwiVGhlIGljb24gXFxcIlwiICsgaWNvbk5hbWUgKyBcIlxcXCIgdHJpZWQgdG8gdW5yZWdpc3RlciBidXQgd2FzIG5vdCByZWdpc3RlcmVkLlwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBEZWxldGUgYW55IGFsaWFzZXMgZm9yIHRoaXMgaWNvbk5hbWVcbiAgICAgICAgaWYgKF9pY29uU2V0dGluZ3MuX19yZW1hcHBlZFtub3JtYWxpemVkSWNvbk5hbWVdKSB7XG4gICAgICAgICAgICBkZWxldGUgX2ljb25TZXR0aW5ncy5fX3JlbWFwcGVkW25vcm1hbGl6ZWRJY29uTmFtZV07XG4gICAgICAgIH1cbiAgICAgICAgLy8gRGVsZXRlIGFueSBpdGVtcyB0aGF0IHdlcmUgYW4gYWxpYXMgZm9yIHRoaXMgaWNvbk5hbWVcbiAgICAgICAgT2JqZWN0LmtleXMoX2ljb25TZXR0aW5ncy5fX3JlbWFwcGVkKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgICAgIGlmIChfaWNvblNldHRpbmdzLl9fcmVtYXBwZWRba2V5XSA9PT0gbm9ybWFsaXplZEljb25OYW1lKSB7XG4gICAgICAgICAgICAgICAgZGVsZXRlIF9pY29uU2V0dGluZ3MuX19yZW1hcHBlZFtrZXldO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIGZvciAodmFyIF9pID0gMCwgaWNvbk5hbWVzXzEgPSBpY29uTmFtZXM7IF9pIDwgaWNvbk5hbWVzXzEubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgIHZhciBpY29uTmFtZSA9IGljb25OYW1lc18xW19pXTtcbiAgICAgICAgX2xvb3BfMShpY29uTmFtZSk7XG4gICAgfVxufVxuLyoqXG4gKiBSZW1hcHMgb25lIGljb24gbmFtZSB0byBhbm90aGVyLlxuICovXG5leHBvcnQgZnVuY3Rpb24gcmVnaXN0ZXJJY29uQWxpYXMoaWNvbk5hbWUsIG1hcHBlZFRvTmFtZSkge1xuICAgIF9pY29uU2V0dGluZ3MuX19yZW1hcHBlZFtub3JtYWxpemVJY29uTmFtZShpY29uTmFtZSldID0gbm9ybWFsaXplSWNvbk5hbWUobWFwcGVkVG9OYW1lKTtcbn1cbi8qKlxuICogR2V0cyBhbiBpY29uIGRlZmluaXRpb24uIElmIGFuIGljb24gaXMgcmVxdWVzdGVkIGJ1dCB0aGUgc3Vic2V0IGhhcyB5ZXQgdG8gYmUgcmVnaXN0ZXJlZCxcbiAqIGl0IHdpbGwgZ2V0IHJlZ2lzdGVyZWQgaW1tZWRpYXRlbHkuXG4gKlxuICogQHB1YmxpY1xuICogQHBhcmFtIG5hbWUgLSBOYW1lIG9mIGljb24uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRJY29uKG5hbWUpIHtcbiAgICB2YXIgaWNvbiA9IHVuZGVmaW5lZDtcbiAgICB2YXIgb3B0aW9ucyA9IF9pY29uU2V0dGluZ3MuX19vcHRpb25zO1xuICAgIG5hbWUgPSBuYW1lID8gbm9ybWFsaXplSWNvbk5hbWUobmFtZSkgOiAnJztcbiAgICBuYW1lID0gX2ljb25TZXR0aW5ncy5fX3JlbWFwcGVkW25hbWVdIHx8IG5hbWU7XG4gICAgaWYgKG5hbWUpIHtcbiAgICAgICAgaWNvbiA9IF9pY29uU2V0dGluZ3NbbmFtZV07XG4gICAgICAgIGlmIChpY29uKSB7XG4gICAgICAgICAgICB2YXIgc3Vic2V0ID0gaWNvbi5zdWJzZXQ7XG4gICAgICAgICAgICBpZiAoc3Vic2V0ICYmIHN1YnNldC5mb250RmFjZSkge1xuICAgICAgICAgICAgICAgIGlmICghc3Vic2V0LmlzUmVnaXN0ZXJlZCkge1xuICAgICAgICAgICAgICAgICAgICBmb250RmFjZShzdWJzZXQuZm9udEZhY2UpO1xuICAgICAgICAgICAgICAgICAgICBzdWJzZXQuaXNSZWdpc3RlcmVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKCFzdWJzZXQuY2xhc3NOYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgIHN1YnNldC5jbGFzc05hbWUgPSBtZXJnZVN0eWxlcyhzdWJzZXQuc3R5bGUsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvbnRGYW1pbHk6IHN1YnNldC5mb250RmFjZS5mb250RmFtaWx5LFxuICAgICAgICAgICAgICAgICAgICAgICAgZm9udFdlaWdodDogc3Vic2V0LmZvbnRGYWNlLmZvbnRXZWlnaHQgfHwgJ25vcm1hbCcsXG4gICAgICAgICAgICAgICAgICAgICAgICBmb250U3R5bGU6IHN1YnNldC5mb250RmFjZS5mb250U3R5bGUgfHwgJ25vcm1hbCcsXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBkZXByZWNhdGlvbi9kZXByZWNhdGlvblxuICAgICAgICAgICAgaWYgKCFvcHRpb25zLmRpc2FibGVXYXJuaW5ncyAmJiBvcHRpb25zLndhcm5Pbk1pc3NpbmdJY29ucykge1xuICAgICAgICAgICAgICAgIHdhcm4oXCJUaGUgaWNvbiBcXFwiXCIgKyBuYW1lICsgXCJcXFwiIHdhcyB1c2VkIGJ1dCBub3QgcmVnaXN0ZXJlZC4gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9taWNyb3NvZnQvZmx1ZW50dWkvd2lraS9Vc2luZy1pY29ucyBmb3IgbW9yZSBpbmZvcm1hdGlvbi5cIik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGljb247XG59XG4vKipcbiAqIFNldHMgdGhlIGljb24gb3B0aW9ucy5cbiAqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzZXRJY29uT3B0aW9ucyhvcHRpb25zKSB7XG4gICAgX2ljb25TZXR0aW5ncy5fX29wdGlvbnMgPSBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgX2ljb25TZXR0aW5ncy5fX29wdGlvbnMpLCBvcHRpb25zKTtcbn1cbnZhciBfbWlzc2luZ0ljb25zID0gW107XG52YXIgX21pc3NpbmdJY29uc1RpbWVyID0gdW5kZWZpbmVkO1xuZnVuY3Rpb24gX3dhcm5EdXBsaWNhdGVJY29uKGljb25OYW1lKSB7XG4gICAgdmFyIG9wdGlvbnMgPSBfaWNvblNldHRpbmdzLl9fb3B0aW9ucztcbiAgICB2YXIgd2FybmluZ0RlbGF5ID0gMjAwMDtcbiAgICB2YXIgbWF4SWNvbnNJbk1lc3NhZ2UgPSAxMDtcbiAgICBpZiAoIW9wdGlvbnMuZGlzYWJsZVdhcm5pbmdzKSB7XG4gICAgICAgIF9taXNzaW5nSWNvbnMucHVzaChpY29uTmFtZSk7XG4gICAgICAgIGlmIChfbWlzc2luZ0ljb25zVGltZXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgX21pc3NpbmdJY29uc1RpbWVyID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgd2FybihcIlNvbWUgaWNvbnMgd2VyZSByZS1yZWdpc3RlcmVkLiBBcHBsaWNhdGlvbnMgc2hvdWxkIG9ubHkgY2FsbCByZWdpc3Rlckljb25zIGZvciBhbnkgZ2l2ZW4gXCIgK1xuICAgICAgICAgICAgICAgICAgICBcImljb24gb25jZS4gUmVkZWZpbmluZyB3aGF0IGFuIGljb24gaXMgbWF5IGhhdmUgdW5pbnRlbmRlZCBjb25zZXF1ZW5jZXMuIER1cGxpY2F0ZXMgXCIgK1xuICAgICAgICAgICAgICAgICAgICBcImluY2x1ZGU6IFxcblwiICtcbiAgICAgICAgICAgICAgICAgICAgX21pc3NpbmdJY29ucy5zbGljZSgwLCBtYXhJY29uc0luTWVzc2FnZSkuam9pbignLCAnKSArXG4gICAgICAgICAgICAgICAgICAgIChfbWlzc2luZ0ljb25zLmxlbmd0aCA+IG1heEljb25zSW5NZXNzYWdlID8gXCIgKCsgXCIgKyAoX21pc3NpbmdJY29ucy5sZW5ndGggLSBtYXhJY29uc0luTWVzc2FnZSkgKyBcIiBtb3JlKVwiIDogJycpKTtcbiAgICAgICAgICAgICAgICBfbWlzc2luZ0ljb25zVGltZXIgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgX21pc3NpbmdJY29ucyA9IFtdO1xuICAgICAgICAgICAgfSwgd2FybmluZ0RlbGF5KTtcbiAgICAgICAgfVxuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWljb25zLmpzLm1hcCIsIi8vIERvIG5vdCBtb2RpZnkgdGhpcyBmaWxlOyBpdCBpcyBnZW5lcmF0ZWQgYXMgcGFydCBvZiBwdWJsaXNoLlxuLy8gVGhlIGNoZWNrZWQgaW4gdmVyc2lvbiBpcyBhIHBsYWNlaG9sZGVyIG9ubHkgYW5kIHdpbGwgbm90IGJlIHVwZGF0ZWQuXG5pbXBvcnQgeyBzZXRWZXJzaW9uIH0gZnJvbSAnQGZsdWVudHVpL3NldC12ZXJzaW9uJztcbnNldFZlcnNpb24oJ0BmbHVlbnR1aS9zdHlsZS11dGlsaXRpZXMnLCAnOC42LjYnKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXZlcnNpb24uanMubWFwIiwiZXhwb3J0ICogZnJvbSAnLi9jbGFzc05hbWVzL2luZGV4JztcbmV4cG9ydCAqIGZyb20gJy4vc3R5bGVzL2luZGV4JztcbmV4cG9ydCAqIGZyb20gJy4vdXRpbGl0aWVzL2luZGV4JztcbmV4cG9ydCAqIGZyb20gJy4vaW50ZXJmYWNlcy9pbmRleCc7XG5leHBvcnQgKiBmcm9tICcuL01lcmdlU3R5bGVzJztcbmltcG9ydCAnLi92ZXJzaW9uJztcbi8vIEVuc3VyZSB0aGVtZSBpcyBpbml0aWFsaXplZCB3aGVuIHRoaXMgcGFja2FnZSBpcyByZWZlcmVuY2VkLlxuaW1wb3J0IHsgaW5pdGlhbGl6ZVRoZW1lSW5DdXN0b21pemF0aW9ucyB9IGZyb20gJy4vc3R5bGVzL3RoZW1lJztcbmluaXRpYWxpemVUaGVtZUluQ3VzdG9taXphdGlvbnMoKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCIsImltcG9ydCB7IEFuaW1hdGlvbkNsYXNzTmFtZXMsIGdldEdsb2JhbENsYXNzTmFtZXMgfSBmcm9tICcuLi8uLi9TdHlsaW5nJztcbmltcG9ydCB7IGdldFdpbmRvdyB9IGZyb20gJy4uLy4uL1V0aWxpdGllcyc7XG52YXIgR2xvYmFsQ2xhc3NOYW1lcyA9IHtcbiAgICByb290OiAnbXMtSW1hZ2UnLFxuICAgIHJvb3RNYXhpbWl6ZUZyYW1lOiAnbXMtSW1hZ2UtLW1heGltaXplRnJhbWUnLFxuICAgIGltYWdlOiAnbXMtSW1hZ2UtaW1hZ2UnLFxuICAgIGltYWdlQ2VudGVyOiAnbXMtSW1hZ2UtaW1hZ2UtLWNlbnRlcicsXG4gICAgaW1hZ2VDb250YWluOiAnbXMtSW1hZ2UtaW1hZ2UtLWNvbnRhaW4nLFxuICAgIGltYWdlQ292ZXI6ICdtcy1JbWFnZS1pbWFnZS0tY292ZXInLFxuICAgIGltYWdlQ2VudGVyQ29udGFpbjogJ21zLUltYWdlLWltYWdlLS1jZW50ZXJDb250YWluJyxcbiAgICBpbWFnZUNlbnRlckNvdmVyOiAnbXMtSW1hZ2UtaW1hZ2UtLWNlbnRlckNvdmVyJyxcbiAgICBpbWFnZU5vbmU6ICdtcy1JbWFnZS1pbWFnZS0tbm9uZScsXG4gICAgaW1hZ2VMYW5kc2NhcGU6ICdtcy1JbWFnZS1pbWFnZS0tbGFuZHNjYXBlJyxcbiAgICBpbWFnZVBvcnRyYWl0OiAnbXMtSW1hZ2UtaW1hZ2UtLXBvcnRyYWl0Jyxcbn07XG5leHBvcnQgdmFyIGdldFN0eWxlcyA9IGZ1bmN0aW9uIChwcm9wcykge1xuICAgIHZhciBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUsIHdpZHRoID0gcHJvcHMud2lkdGgsIGhlaWdodCA9IHByb3BzLmhlaWdodCwgbWF4aW1pemVGcmFtZSA9IHByb3BzLm1heGltaXplRnJhbWUsIGlzTG9hZGVkID0gcHJvcHMuaXNMb2FkZWQsIHNob3VsZEZhZGVJbiA9IHByb3BzLnNob3VsZEZhZGVJbiwgc2hvdWxkU3RhcnRWaXNpYmxlID0gcHJvcHMuc2hvdWxkU3RhcnRWaXNpYmxlLCBpc0xhbmRzY2FwZSA9IHByb3BzLmlzTGFuZHNjYXBlLCBpc0NlbnRlciA9IHByb3BzLmlzQ2VudGVyLCBpc0NvbnRhaW4gPSBwcm9wcy5pc0NvbnRhaW4sIGlzQ292ZXIgPSBwcm9wcy5pc0NvdmVyLCBpc0NlbnRlckNvbnRhaW4gPSBwcm9wcy5pc0NlbnRlckNvbnRhaW4sIGlzQ2VudGVyQ292ZXIgPSBwcm9wcy5pc0NlbnRlckNvdmVyLCBpc05vbmUgPSBwcm9wcy5pc05vbmUsIGlzRXJyb3IgPSBwcm9wcy5pc0Vycm9yLCBpc05vdEltYWdlRml0ID0gcHJvcHMuaXNOb3RJbWFnZUZpdCwgdGhlbWUgPSBwcm9wcy50aGVtZTtcbiAgICB2YXIgY2xhc3NOYW1lcyA9IGdldEdsb2JhbENsYXNzTmFtZXMoR2xvYmFsQ2xhc3NOYW1lcywgdGhlbWUpO1xuICAgIHZhciBJbWFnZUZpdFN0eWxlcyA9IHtcbiAgICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICAgIGxlZnQ6ICc1MCUgLyogQG5vZmxpcCAqLycsXG4gICAgICAgIHRvcDogJzUwJScsXG4gICAgICAgIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZSgtNTAlLC01MCUpJywgLy8gQHRvZG8gdGVzdCBSVEwgcmVuZGVycyB0cmFuc2Zvcm06IHRyYW5zbGF0ZSg1MCUsLTUwJSk7XG4gICAgfTtcbiAgICAvLyBDdXQgdGhlIG11c3RhcmQgdXNpbmcgbXNNYXhUb3VjaFBvaW50cyB0byBkZXRlY3QgSUUxMSB3aGljaCBkb2VzIG5vdCBzdXBwb3J0IENTUyBvYmplY3QtZml0XG4gICAgdmFyIHdpbmRvdyA9IGdldFdpbmRvdygpO1xuICAgIHZhciBzdXBwb3J0c09iamVjdEZpdCA9IHdpbmRvdyAhPT0gdW5kZWZpbmVkICYmIHdpbmRvdy5uYXZpZ2F0b3IubXNNYXhUb3VjaFBvaW50cyA9PT0gdW5kZWZpbmVkO1xuICAgIHZhciBmYWxsYmFja09iamVjdEZpdFN0eWxlcyA9IChpc0NvbnRhaW4gJiYgaXNMYW5kc2NhcGUpIHx8IChpc0NvdmVyICYmICFpc0xhbmRzY2FwZSlcbiAgICAgICAgPyB7IHdpZHRoOiAnMTAwJScsIGhlaWdodDogJ2F1dG8nIH1cbiAgICAgICAgOiB7IHdpZHRoOiAnYXV0bycsIGhlaWdodDogJzEwMCUnIH07XG4gICAgcmV0dXJuIHtcbiAgICAgICAgcm9vdDogW1xuICAgICAgICAgICAgY2xhc3NOYW1lcy5yb290LFxuICAgICAgICAgICAgdGhlbWUuZm9udHMubWVkaXVtLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG92ZXJmbG93OiAnaGlkZGVuJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBtYXhpbWl6ZUZyYW1lICYmIFtcbiAgICAgICAgICAgICAgICBjbGFzc05hbWVzLnJvb3RNYXhpbWl6ZUZyYW1lLFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiAnMTAwJScsXG4gICAgICAgICAgICAgICAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBpc0xvYWRlZCAmJiBzaG91bGRGYWRlSW4gJiYgIXNob3VsZFN0YXJ0VmlzaWJsZSAmJiBBbmltYXRpb25DbGFzc05hbWVzLmZhZGVJbjQwMCxcbiAgICAgICAgICAgIChpc0NlbnRlciB8fCBpc0NvbnRhaW4gfHwgaXNDb3ZlciB8fCBpc0NlbnRlckNvbnRhaW4gfHwgaXNDZW50ZXJDb3ZlcikgJiYge1xuICAgICAgICAgICAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNsYXNzTmFtZSxcbiAgICAgICAgXSxcbiAgICAgICAgaW1hZ2U6IFtcbiAgICAgICAgICAgIGNsYXNzTmFtZXMuaW1hZ2UsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgZGlzcGxheTogJ2Jsb2NrJyxcbiAgICAgICAgICAgICAgICBvcGFjaXR5OiAwLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGlzTG9hZGVkICYmIFtcbiAgICAgICAgICAgICAgICAnaXMtbG9hZGVkJyxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIG9wYWNpdHk6IDEsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBpc0NlbnRlciAmJiBbY2xhc3NOYW1lcy5pbWFnZUNlbnRlciwgSW1hZ2VGaXRTdHlsZXNdLFxuICAgICAgICAgICAgaXNDb250YWluICYmIFtcbiAgICAgICAgICAgICAgICBjbGFzc05hbWVzLmltYWdlQ29udGFpbixcbiAgICAgICAgICAgICAgICBzdXBwb3J0c09iamVjdEZpdCAmJiB7XG4gICAgICAgICAgICAgICAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICAgICAgICAgICAgICAgIGhlaWdodDogJzEwMCUnLFxuICAgICAgICAgICAgICAgICAgICBvYmplY3RGaXQ6ICdjb250YWluJyxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICFzdXBwb3J0c09iamVjdEZpdCAmJiBmYWxsYmFja09iamVjdEZpdFN0eWxlcyxcbiAgICAgICAgICAgICAgICAhc3VwcG9ydHNPYmplY3RGaXQgJiYgSW1hZ2VGaXRTdHlsZXMsXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgaXNDb3ZlciAmJiBbXG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lcy5pbWFnZUNvdmVyLFxuICAgICAgICAgICAgICAgIHN1cHBvcnRzT2JqZWN0Rml0ICYmIHtcbiAgICAgICAgICAgICAgICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiAnMTAwJScsXG4gICAgICAgICAgICAgICAgICAgIG9iamVjdEZpdDogJ2NvdmVyJyxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICFzdXBwb3J0c09iamVjdEZpdCAmJiBmYWxsYmFja09iamVjdEZpdFN0eWxlcyxcbiAgICAgICAgICAgICAgICAhc3VwcG9ydHNPYmplY3RGaXQgJiYgSW1hZ2VGaXRTdHlsZXMsXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgaXNDZW50ZXJDb250YWluICYmIFtcbiAgICAgICAgICAgICAgICBjbGFzc05hbWVzLmltYWdlQ2VudGVyQ29udGFpbixcbiAgICAgICAgICAgICAgICBpc0xhbmRzY2FwZSAmJiB7XG4gICAgICAgICAgICAgICAgICAgIG1heFdpZHRoOiAnMTAwJScsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAhaXNMYW5kc2NhcGUgJiYge1xuICAgICAgICAgICAgICAgICAgICBtYXhIZWlnaHQ6ICcxMDAlJyxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIEltYWdlRml0U3R5bGVzLFxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIGlzQ2VudGVyQ292ZXIgJiYgW1xuICAgICAgICAgICAgICAgIGNsYXNzTmFtZXMuaW1hZ2VDZW50ZXJDb3ZlcixcbiAgICAgICAgICAgICAgICBpc0xhbmRzY2FwZSAmJiB7XG4gICAgICAgICAgICAgICAgICAgIG1heEhlaWdodDogJzEwMCUnLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgIWlzTGFuZHNjYXBlICYmIHtcbiAgICAgICAgICAgICAgICAgICAgbWF4V2lkdGg6ICcxMDAlJyxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIEltYWdlRml0U3R5bGVzLFxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIGlzTm9uZSAmJiBbXG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lcy5pbWFnZU5vbmUsXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICB3aWR0aDogJ2F1dG8nLFxuICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6ICdhdXRvJyxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIGlzTm90SW1hZ2VGaXQgJiYgW1xuICAgICAgICAgICAgICAgICEhd2lkdGggJiZcbiAgICAgICAgICAgICAgICAgICAgIWhlaWdodCAmJiB7XG4gICAgICAgICAgICAgICAgICAgIGhlaWdodDogJ2F1dG8nLFxuICAgICAgICAgICAgICAgICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgIXdpZHRoICYmXG4gICAgICAgICAgICAgICAgICAgICEhaGVpZ2h0ICYmIHtcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiAnMTAwJScsXG4gICAgICAgICAgICAgICAgICAgIHdpZHRoOiAnYXV0bycsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAhIXdpZHRoICYmXG4gICAgICAgICAgICAgICAgICAgICEhaGVpZ2h0ICYmIHtcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiAnMTAwJScsXG4gICAgICAgICAgICAgICAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBpc0xhbmRzY2FwZSAmJiBjbGFzc05hbWVzLmltYWdlTGFuZHNjYXBlLFxuICAgICAgICAgICAgIWlzTGFuZHNjYXBlICYmIGNsYXNzTmFtZXMuaW1hZ2VQb3J0cmFpdCxcbiAgICAgICAgICAgICFpc0xvYWRlZCAmJiAnaXMtbm90TG9hZGVkJyxcbiAgICAgICAgICAgIHNob3VsZEZhZGVJbiAmJiAnaXMtZmFkZUluJyxcbiAgICAgICAgICAgIGlzRXJyb3IgJiYgJ2lzLWVycm9yJyxcbiAgICAgICAgXSxcbiAgICB9O1xufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUltYWdlLnN0eWxlcy5qcy5tYXAiLCJpbXBvcnQgeyBzdHlsZWQgfSBmcm9tICcuLi8uLi9VdGlsaXRpZXMnO1xuaW1wb3J0IHsgSW1hZ2VCYXNlIH0gZnJvbSAnLi9JbWFnZS5iYXNlJztcbmltcG9ydCB7IGdldFN0eWxlcyB9IGZyb20gJy4vSW1hZ2Uuc3R5bGVzJztcbmV4cG9ydCB2YXIgSW1hZ2UgPSBzdHlsZWQoSW1hZ2VCYXNlLCBnZXRTdHlsZXMsIHVuZGVmaW5lZCwge1xuICAgIHNjb3BlOiAnSW1hZ2UnLFxufSwgdHJ1ZSk7XG5JbWFnZS5kaXNwbGF5TmFtZSA9ICdJbWFnZSc7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1JbWFnZS5qcy5tYXAiLCJpbXBvcnQgeyBtZXJnZVN0eWxlU2V0cyB9IGZyb20gJy4uLy4uL1N0eWxpbmcnO1xuLyoqIENsYXNzIG5hbWVzIHVzZWQgaW4gdGhlbWVhYmxlIGFuZCBub24tdGhlbWVhYmxlIEljb24gY29tcG9uZW50cyAqL1xuZXhwb3J0IHZhciBjbGFzc05hbWVzID0gbWVyZ2VTdHlsZVNldHMoe1xuICAgIHJvb3Q6IHtcbiAgICAgICAgZGlzcGxheTogJ2lubGluZS1ibG9jaycsXG4gICAgfSxcbiAgICBwbGFjZWhvbGRlcjogW1xuICAgICAgICAnbXMtSWNvbi1wbGFjZUhvbGRlcicsXG4gICAgICAgIHtcbiAgICAgICAgICAgIHdpZHRoOiAnMWVtJyxcbiAgICAgICAgfSxcbiAgICBdLFxuICAgIGltYWdlOiBbXG4gICAgICAgICdtcy1JY29uLWltYWdlQ29udGFpbmVyJyxcbiAgICAgICAge1xuICAgICAgICAgICAgb3ZlcmZsb3c6ICdoaWRkZW4nLFxuICAgICAgICB9LFxuICAgIF0sXG59KTtcbi8qKiBDbGFzcyBuYW1lIHVzZWQgb25seSBpbiBub24tdGhlbWVhYmxlIEljb24gY29tcG9uZW50cyAqL1xuZXhwb3J0IHZhciBNU19JQ09OID0gJ21zLUljb24nO1xuZXhwb3J0IHZhciBnZXRTdHlsZXMgPSBmdW5jdGlvbiAocHJvcHMpIHtcbiAgICB2YXIgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLCBpY29uQ2xhc3NOYW1lID0gcHJvcHMuaWNvbkNsYXNzTmFtZSwgaXNQbGFjZWhvbGRlciA9IHByb3BzLmlzUGxhY2Vob2xkZXIsIGlzSW1hZ2UgPSBwcm9wcy5pc0ltYWdlLCBzdHlsZXMgPSBwcm9wcy5zdHlsZXM7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgcm9vdDogW1xuICAgICAgICAgICAgaXNQbGFjZWhvbGRlciAmJiBjbGFzc05hbWVzLnBsYWNlaG9sZGVyLFxuICAgICAgICAgICAgY2xhc3NOYW1lcy5yb290LFxuICAgICAgICAgICAgaXNJbWFnZSAmJiBjbGFzc05hbWVzLmltYWdlLFxuICAgICAgICAgICAgaWNvbkNsYXNzTmFtZSxcbiAgICAgICAgICAgIGNsYXNzTmFtZSxcbiAgICAgICAgICAgIHN0eWxlcyAmJiBzdHlsZXMucm9vdCxcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBkZXByZWNhdGlvbi9kZXByZWNhdGlvblxuICAgICAgICAgICAgc3R5bGVzICYmIHN0eWxlcy5pbWFnZUNvbnRhaW5lcixcbiAgICAgICAgXSxcbiAgICB9O1xufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUljb24uc3R5bGVzLmpzLm1hcCIsImltcG9ydCB7IF9fYXNzaWduIH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBjbGFzc05hbWVzLCBNU19JQ09OIH0gZnJvbSAnLi9JY29uLnN0eWxlcyc7XG5pbXBvcnQgeyBjc3MsIGdldE5hdGl2ZVByb3BzLCBodG1sRWxlbWVudFByb3BlcnRpZXMsIG1lbW9pemVGdW5jdGlvbiB9IGZyb20gJy4uLy4uL1V0aWxpdGllcyc7XG5pbXBvcnQgeyBnZXRJY29uIH0gZnJvbSAnLi4vLi4vU3R5bGluZyc7XG5leHBvcnQgdmFyIGdldEljb25Db250ZW50ID0gbWVtb2l6ZUZ1bmN0aW9uKGZ1bmN0aW9uIChpY29uTmFtZSkge1xuICAgIHZhciBfYSA9IGdldEljb24oaWNvbk5hbWUpIHx8IHtcbiAgICAgICAgc3Vic2V0OiB7fSxcbiAgICAgICAgY29kZTogdW5kZWZpbmVkLFxuICAgIH0sIGNvZGUgPSBfYS5jb2RlLCBzdWJzZXQgPSBfYS5zdWJzZXQ7XG4gICAgaWYgKCFjb2RlKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICBjaGlsZHJlbjogY29kZSxcbiAgICAgICAgaWNvbkNsYXNzTmFtZTogc3Vic2V0LmNsYXNzTmFtZSxcbiAgICAgICAgZm9udEZhbWlseTogc3Vic2V0LmZvbnRGYWNlICYmIHN1YnNldC5mb250RmFjZS5mb250RmFtaWx5LFxuICAgICAgICBtZXJnZUltYWdlUHJvcHM6IHN1YnNldC5tZXJnZUltYWdlUHJvcHMsXG4gICAgfTtcbn0sIHVuZGVmaW5lZCwgdHJ1ZSAvKmlnbm9yZU51bGxPclVuZGVmaW5lZFJlc3VsdCAqLyk7XG4vKipcbiAqIEZhc3QgaWNvbiBjb21wb25lbnQgd2hpY2ggb25seSBzdXBwb3J0cyBmb250IGdseXBocyAobm90IGltYWdlcykgYW5kIGNhbid0IGJlIHRhcmdldGVkIGJ5IGN1c3RvbWl6YXRpb25zLlxuICogVG8gc3R5bGUgdGhlIGljb24sIHVzZSBgY2xhc3NOYW1lYCBvciByZWZlcmVuY2UgYG1zLUljb25gIGluIENTUy5cbiAqIHtAZG9jQ2F0ZWdvcnkgSWNvbn1cbiAqL1xuZXhwb3J0IHZhciBGb250SWNvbiA9IGZ1bmN0aW9uIChwcm9wcykge1xuICAgIHZhciBpY29uTmFtZSA9IHByb3BzLmljb25OYW1lLCBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUsIF9hID0gcHJvcHMuc3R5bGUsIHN0eWxlID0gX2EgPT09IHZvaWQgMCA/IHt9IDogX2E7XG4gICAgdmFyIGljb25Db250ZW50ID0gZ2V0SWNvbkNvbnRlbnQoaWNvbk5hbWUpIHx8IHt9O1xuICAgIHZhciBpY29uQ2xhc3NOYW1lID0gaWNvbkNvbnRlbnQuaWNvbkNsYXNzTmFtZSwgY2hpbGRyZW4gPSBpY29uQ29udGVudC5jaGlsZHJlbiwgZm9udEZhbWlseSA9IGljb25Db250ZW50LmZvbnRGYW1pbHksIG1lcmdlSW1hZ2VQcm9wcyA9IGljb25Db250ZW50Lm1lcmdlSW1hZ2VQcm9wcztcbiAgICB2YXIgbmF0aXZlUHJvcHMgPSBnZXROYXRpdmVQcm9wcyhwcm9wcywgaHRtbEVsZW1lbnRQcm9wZXJ0aWVzKTtcbiAgICB2YXIgYWNjZXNzaWJsZU5hbWUgPSBwcm9wc1snYXJpYS1sYWJlbCddIHx8IHByb3BzLnRpdGxlO1xuICAgIHZhciBjb250YWluZXJQcm9wcyA9IHByb3BzWydhcmlhLWxhYmVsJ10gfHwgcHJvcHNbJ2FyaWEtbGFiZWxsZWRieSddIHx8IHByb3BzLnRpdGxlXG4gICAgICAgID8ge1xuICAgICAgICAgICAgcm9sZTogbWVyZ2VJbWFnZVByb3BzID8gdW5kZWZpbmVkIDogJ2ltZycsXG4gICAgICAgIH1cbiAgICAgICAgOiB7XG4gICAgICAgICAgICAnYXJpYS1oaWRkZW4nOiB0cnVlLFxuICAgICAgICB9O1xuICAgIHZhciBmaW5hbENoaWxkcmVuID0gY2hpbGRyZW47XG4gICAgaWYgKG1lcmdlSW1hZ2VQcm9wcykge1xuICAgICAgICBpZiAodHlwZW9mIGNoaWxkcmVuID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgY2hpbGRyZW4ucHJvcHMgPT09ICdvYmplY3QnICYmIGFjY2Vzc2libGVOYW1lKSB7XG4gICAgICAgICAgICBmaW5hbENoaWxkcmVuID0gUmVhY3QuY2xvbmVFbGVtZW50KGNoaWxkcmVuLCB7IGFsdDogYWNjZXNzaWJsZU5hbWUgfSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIChSZWFjdC5jcmVhdGVFbGVtZW50KFwiaVwiLCBfX2Fzc2lnbih7IFwiZGF0YS1pY29uLW5hbWVcIjogaWNvbk5hbWUgfSwgY29udGFpbmVyUHJvcHMsIG5hdGl2ZVByb3BzLCAobWVyZ2VJbWFnZVByb3BzXG4gICAgICAgID8ge1xuICAgICAgICAgICAgdGl0bGU6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdhcmlhLWxhYmVsJzogdW5kZWZpbmVkLFxuICAgICAgICB9XG4gICAgICAgIDoge30pLCB7IGNsYXNzTmFtZTogY3NzKE1TX0lDT04sIGNsYXNzTmFtZXMucm9vdCwgaWNvbkNsYXNzTmFtZSwgIWljb25OYW1lICYmIGNsYXNzTmFtZXMucGxhY2Vob2xkZXIsIGNsYXNzTmFtZSksIFxuICAgICAgICAvLyBBcHBseSB0aGUgZm9udCBmYW1pbHkgdGhpcyB3YXkgdG8gZW5zdXJlIGl0IGRvZXNuJ3QgZ2V0IG92ZXJyaWRkZW4gYnkgRmFicmljIENvcmUgbXMtSWNvbiBzdHlsZXNcbiAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL21pY3Jvc29mdC9mbHVlbnR1aS9pc3N1ZXMvMTA0NDlcbiAgICAgICAgc3R5bGU6IF9fYXNzaWduKHsgZm9udEZhbWlseTogZm9udEZhbWlseSB9LCBzdHlsZSkgfSksIGZpbmFsQ2hpbGRyZW4pKTtcbn07XG4vKipcbiAqIE1lbW9pemVkIGhlbHBlciBmb3IgcmVuZGVyaW5nIGEgRm9udEljb24uXG4gKiBAcGFyYW0gaWNvbk5hbWUgLSBUaGUgbmFtZSBvZiB0aGUgaWNvbiB0byB1c2UgZnJvbSB0aGUgaWNvbiBmb250LlxuICogQHBhcmFtIGNsYXNzTmFtZSAtIENsYXNzIG5hbWUgZm9yIHN0eWxpbmcgdGhlIGljb24uXG4gKiBAcGFyYW0gYXJpYUxhYmVsIC0gTGFiZWwgZm9yIHRoZSBpY29uIGZvciB0aGUgYmVuZWZpdCBvZiBzY3JlZW4gcmVhZGVycy5cbiAqIHtAZG9jQ2F0ZWdvcnkgSWNvbn1cbiAqL1xuZXhwb3J0IHZhciBnZXRGb250SWNvbiA9IG1lbW9pemVGdW5jdGlvbihmdW5jdGlvbiAoaWNvbk5hbWUsIGNsYXNzTmFtZSwgYXJpYUxhYmVsKSB7XG4gICAgcmV0dXJuIEZvbnRJY29uKHsgaWNvbk5hbWU6IGljb25OYW1lLCBjbGFzc05hbWU6IGNsYXNzTmFtZSwgJ2FyaWEtbGFiZWwnOiBhcmlhTGFiZWwgfSk7XG59KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUZvbnRJY29uLmpzLm1hcCIsImltcG9ydCB7IF9fYXNzaWduLCBfX2V4dGVuZHMgfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IEljb25UeXBlIH0gZnJvbSAnLi9JY29uLnR5cGVzJztcbmltcG9ydCB7IEltYWdlIH0gZnJvbSAnLi4vSW1hZ2UvSW1hZ2UnO1xuaW1wb3J0IHsgSW1hZ2VMb2FkU3RhdGUgfSBmcm9tICcuLi9JbWFnZS9JbWFnZS50eXBlcyc7XG5pbXBvcnQgeyBnZXROYXRpdmVQcm9wcywgaHRtbEVsZW1lbnRQcm9wZXJ0aWVzLCBjbGFzc05hbWVzRnVuY3Rpb24gfSBmcm9tICcuLi8uLi9VdGlsaXRpZXMnO1xuaW1wb3J0IHsgZ2V0SWNvbkNvbnRlbnQgfSBmcm9tICcuL0ZvbnRJY29uJztcbnZhciBnZXRDbGFzc05hbWVzID0gY2xhc3NOYW1lc0Z1bmN0aW9uKHtcbiAgICAvLyBJY29uIGlzIHVzZWQgYSBsb3QgYnkgb3RoZXIgY29tcG9uZW50cy5cbiAgICAvLyBJdCdzIGxpa2VseSB0byBzZWUgZXhwZWN0ZWQgY2FzZXMgd2hpY2ggcGFzcyBkaWZmZXJlbnQgY2xhc3NOYW1lIHRvIHRoZSBJY29uLlxuICAgIC8vIFRoZXJlZm9yZSBzZXR0aW5nIGEgbGFyZ2VyIGNhY2hlIHNpemUuXG4gICAgY2FjaGVTaXplOiAxMDAsXG59KTtcbnZhciBJY29uQmFzZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoSWNvbkJhc2UsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gSWNvbkJhc2UocHJvcHMpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgcHJvcHMpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLl9vbkltYWdlTG9hZGluZ1N0YXRlQ2hhbmdlID0gZnVuY3Rpb24gKHN0YXRlKSB7XG4gICAgICAgICAgICBpZiAoX3RoaXMucHJvcHMuaW1hZ2VQcm9wcyAmJiBfdGhpcy5wcm9wcy5pbWFnZVByb3BzLm9uTG9hZGluZ1N0YXRlQ2hhbmdlKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMucHJvcHMuaW1hZ2VQcm9wcy5vbkxvYWRpbmdTdGF0ZUNoYW5nZShzdGF0ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoc3RhdGUgPT09IEltYWdlTG9hZFN0YXRlLmVycm9yKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuc2V0U3RhdGUoeyBpbWFnZUxvYWRFcnJvcjogdHJ1ZSB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgX3RoaXMuc3RhdGUgPSB7XG4gICAgICAgICAgICBpbWFnZUxvYWRFcnJvcjogZmFsc2UsXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgSWNvbkJhc2UucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF9hID0gdGhpcy5wcm9wcywgY2hpbGRyZW4gPSBfYS5jaGlsZHJlbiwgY2xhc3NOYW1lID0gX2EuY2xhc3NOYW1lLCBzdHlsZXMgPSBfYS5zdHlsZXMsIGljb25OYW1lID0gX2EuaWNvbk5hbWUsIGltYWdlRXJyb3JBcyA9IF9hLmltYWdlRXJyb3JBcywgdGhlbWUgPSBfYS50aGVtZTtcbiAgICAgICAgdmFyIGlzUGxhY2Vob2xkZXIgPSB0eXBlb2YgaWNvbk5hbWUgPT09ICdzdHJpbmcnICYmIGljb25OYW1lLmxlbmd0aCA9PT0gMDtcbiAgICAgICAgdmFyIGlzSW1hZ2UgPSBcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGRlcHJlY2F0aW9uL2RlcHJlY2F0aW9uXG4gICAgICAgICEhdGhpcy5wcm9wcy5pbWFnZVByb3BzIHx8IHRoaXMucHJvcHMuaWNvblR5cGUgPT09IEljb25UeXBlLmltYWdlIHx8IHRoaXMucHJvcHMuaWNvblR5cGUgPT09IEljb25UeXBlLkltYWdlO1xuICAgICAgICB2YXIgaWNvbkNvbnRlbnQgPSBnZXRJY29uQ29udGVudChpY29uTmFtZSkgfHwge307XG4gICAgICAgIHZhciBpY29uQ2xhc3NOYW1lID0gaWNvbkNvbnRlbnQuaWNvbkNsYXNzTmFtZSwgaWNvbkNvbnRlbnRDaGlsZHJlbiA9IGljb25Db250ZW50LmNoaWxkcmVuLCBtZXJnZUltYWdlUHJvcHMgPSBpY29uQ29udGVudC5tZXJnZUltYWdlUHJvcHM7XG4gICAgICAgIHZhciBjbGFzc05hbWVzID0gZ2V0Q2xhc3NOYW1lcyhzdHlsZXMsIHtcbiAgICAgICAgICAgIHRoZW1lOiB0aGVtZSxcbiAgICAgICAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lLFxuICAgICAgICAgICAgaWNvbkNsYXNzTmFtZTogaWNvbkNsYXNzTmFtZSxcbiAgICAgICAgICAgIGlzSW1hZ2U6IGlzSW1hZ2UsXG4gICAgICAgICAgICBpc1BsYWNlaG9sZGVyOiBpc1BsYWNlaG9sZGVyLFxuICAgICAgICB9KTtcbiAgICAgICAgdmFyIFJvb3RUeXBlID0gaXNJbWFnZSA/ICdzcGFuJyA6ICdpJztcbiAgICAgICAgdmFyIG5hdGl2ZVByb3BzID0gZ2V0TmF0aXZlUHJvcHModGhpcy5wcm9wcywgaHRtbEVsZW1lbnRQcm9wZXJ0aWVzLCBbXG4gICAgICAgICAgICAnYXJpYS1sYWJlbCcsXG4gICAgICAgIF0pO1xuICAgICAgICB2YXIgaW1hZ2VMb2FkRXJyb3IgPSB0aGlzLnN0YXRlLmltYWdlTG9hZEVycm9yO1xuICAgICAgICB2YXIgaW1hZ2VQcm9wcyA9IF9fYXNzaWduKF9fYXNzaWduKHt9LCB0aGlzLnByb3BzLmltYWdlUHJvcHMpLCB7IG9uTG9hZGluZ1N0YXRlQ2hhbmdlOiB0aGlzLl9vbkltYWdlTG9hZGluZ1N0YXRlQ2hhbmdlIH0pO1xuICAgICAgICB2YXIgSW1hZ2VUeXBlID0gKGltYWdlTG9hZEVycm9yICYmIGltYWdlRXJyb3JBcykgfHwgSW1hZ2U7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBkZXByZWNhdGlvbi9kZXByZWNhdGlvblxuICAgICAgICB2YXIgYXJpYUxhYmVsID0gdGhpcy5wcm9wc1snYXJpYS1sYWJlbCddIHx8IHRoaXMucHJvcHMuYXJpYUxhYmVsO1xuICAgICAgICB2YXIgYWNjZXNzaWJsZU5hbWUgPSBpbWFnZVByb3BzLmFsdCB8fCBhcmlhTGFiZWwgfHwgdGhpcy5wcm9wcy50aXRsZTtcbiAgICAgICAgdmFyIGhhc05hbWUgPSAhIShhY2Nlc3NpYmxlTmFtZSB8fFxuICAgICAgICAgICAgdGhpcy5wcm9wc1snYXJpYS1sYWJlbGxlZGJ5J10gfHxcbiAgICAgICAgICAgIGltYWdlUHJvcHNbJ2FyaWEtbGFiZWwnXSB8fFxuICAgICAgICAgICAgaW1hZ2VQcm9wc1snYXJpYS1sYWJlbGxlZGJ5J10pO1xuICAgICAgICB2YXIgY29udGFpbmVyUHJvcHMgPSBoYXNOYW1lXG4gICAgICAgICAgICA/IHtcbiAgICAgICAgICAgICAgICByb2xlOiBpc0ltYWdlIHx8IG1lcmdlSW1hZ2VQcm9wcyA/IHVuZGVmaW5lZCA6ICdpbWcnLFxuICAgICAgICAgICAgICAgICdhcmlhLWxhYmVsJzogaXNJbWFnZSB8fCBtZXJnZUltYWdlUHJvcHMgPyB1bmRlZmluZWQgOiBhY2Nlc3NpYmxlTmFtZSxcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIDoge1xuICAgICAgICAgICAgICAgICdhcmlhLWhpZGRlbic6IHRydWUsXG4gICAgICAgICAgICB9O1xuICAgICAgICB2YXIgZmluYWxJY29uQ29udGVudENoaWxkcmVuID0gaWNvbkNvbnRlbnRDaGlsZHJlbjtcbiAgICAgICAgaWYgKG1lcmdlSW1hZ2VQcm9wcyAmJiBpY29uQ29udGVudENoaWxkcmVuICYmIHR5cGVvZiBpY29uQ29udGVudENoaWxkcmVuID09PSAnb2JqZWN0JyAmJiBhY2Nlc3NpYmxlTmFtZSkge1xuICAgICAgICAgICAgZmluYWxJY29uQ29udGVudENoaWxkcmVuID0gUmVhY3QuY2xvbmVFbGVtZW50KGljb25Db250ZW50Q2hpbGRyZW4sIHtcbiAgICAgICAgICAgICAgICBhbHQ6IGFjY2Vzc2libGVOYW1lLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIChSZWFjdC5jcmVhdGVFbGVtZW50KFJvb3RUeXBlLCBfX2Fzc2lnbih7IFwiZGF0YS1pY29uLW5hbWVcIjogaWNvbk5hbWUgfSwgY29udGFpbmVyUHJvcHMsIG5hdGl2ZVByb3BzLCAobWVyZ2VJbWFnZVByb3BzXG4gICAgICAgICAgICA/IHtcbiAgICAgICAgICAgICAgICB0aXRsZTogdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgICdhcmlhLWxhYmVsJzogdW5kZWZpbmVkLFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgOiB7fSksIHsgY2xhc3NOYW1lOiBjbGFzc05hbWVzLnJvb3QgfSksIGlzSW1hZ2UgPyBSZWFjdC5jcmVhdGVFbGVtZW50KEltYWdlVHlwZSwgX19hc3NpZ24oe30sIGltYWdlUHJvcHMpKSA6IGNoaWxkcmVuIHx8IGZpbmFsSWNvbkNvbnRlbnRDaGlsZHJlbikpO1xuICAgIH07XG4gICAgcmV0dXJuIEljb25CYXNlO1xufShSZWFjdC5Db21wb25lbnQpKTtcbmV4cG9ydCB7IEljb25CYXNlIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1JY29uLmJhc2UuanMubWFwIiwiaW1wb3J0IHsgc3R5bGVkIH0gZnJvbSAnLi4vLi4vVXRpbGl0aWVzJztcbmltcG9ydCB7IEljb25CYXNlIH0gZnJvbSAnLi9JY29uLmJhc2UnO1xuaW1wb3J0IHsgZ2V0U3R5bGVzIH0gZnJvbSAnLi9JY29uLnN0eWxlcyc7XG4vKipcbiAqIExlZ2FjeSBJY29uIGNvbXBvbmVudCB3aGljaCBjYW4gYmUgdGFyZ2V0ZWQgYnkgY3VzdG9taXphdGlvbi4gSXQncyByZWNvbW1lbmRlZCB0byB1c2UgYEZvbnRJY29uYFxuICogb3IgYEltYWdlSWNvbmAgaW5zdGVhZCwgZXNwZWNpYWxseSBpbiBzY2VuYXJpb3Mgd2hlcmUgcmVuZGVyaW5nIHBlcmZvcm1hbmNlIGlzIGltcG9ydGFudC5cbiAqIHtAZG9jQ2F0ZWdvcnkgSWNvbn1cbiAqL1xuZXhwb3J0IHZhciBJY29uID0gc3R5bGVkKEljb25CYXNlLCBnZXRTdHlsZXMsIHVuZGVmaW5lZCwge1xuICAgIHNjb3BlOiAnSWNvbicsXG59LCB0cnVlKTtcbkljb24uZGlzcGxheU5hbWUgPSAnSWNvbic7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1JY29uLmpzLm1hcCIsImltcG9ydCB7IF9fYXNzaWduIH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBJbWFnZSB9IGZyb20gJy4uL0ltYWdlL0ltYWdlJztcbmltcG9ydCB7IGNzcywgZ2V0TmF0aXZlUHJvcHMsIGh0bWxFbGVtZW50UHJvcGVydGllcyB9IGZyb20gJy4uLy4uL1V0aWxpdGllcyc7XG5pbXBvcnQgeyBjbGFzc05hbWVzLCBNU19JQ09OIH0gZnJvbSAnLi9JY29uLnN0eWxlcyc7XG4vKipcbiAqIEZhc3QgaWNvbiBjb21wb25lbnQgd2hpY2ggb25seSBzdXBwb3J0cyBpbWFnZXMgKG5vdCBmb250IGdseXBocykgYW5kIGNhbid0IGJlIHRhcmdldGVkIGJ5IGN1c3RvbWl6YXRpb25zLlxuICogVG8gc3R5bGUgdGhlIGljb24sIHVzZSBgY2xhc3NOYW1lYCBvciByZWZlcmVuY2UgYG1zLUljb25gIGluIENTUy5cbiAqIHtAZG9jQ2F0ZWdvcnkgSWNvbn1cbiAqL1xuZXhwb3J0IHZhciBJbWFnZUljb24gPSBmdW5jdGlvbiAocHJvcHMpIHtcbiAgICB2YXIgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLCBpbWFnZVByb3BzID0gcHJvcHMuaW1hZ2VQcm9wcztcbiAgICB2YXIgbmF0aXZlUHJvcHMgPSBnZXROYXRpdmVQcm9wcyhwcm9wcywgaHRtbEVsZW1lbnRQcm9wZXJ0aWVzLCBbXG4gICAgICAgICdhcmlhLWxhYmVsJyxcbiAgICAgICAgJ2FyaWEtbGFiZWxsZWRieScsXG4gICAgICAgICd0aXRsZScsXG4gICAgICAgICdhcmlhLWRlc2NyaWJlZGJ5JyxcbiAgICBdKTtcbiAgICB2YXIgYWx0VGV4dCA9IGltYWdlUHJvcHMuYWx0IHx8IHByb3BzWydhcmlhLWxhYmVsJ107XG4gICAgdmFyIGhhc05hbWUgPSBhbHRUZXh0IHx8XG4gICAgICAgIHByb3BzWydhcmlhLWxhYmVsbGVkYnknXSB8fFxuICAgICAgICBwcm9wcy50aXRsZSB8fFxuICAgICAgICBpbWFnZVByb3BzWydhcmlhLWxhYmVsJ10gfHxcbiAgICAgICAgaW1hZ2VQcm9wc1snYXJpYS1sYWJlbGxlZGJ5J10gfHxcbiAgICAgICAgaW1hZ2VQcm9wcy50aXRsZTtcbiAgICAvLyBtb3ZlIG5hbWluZyBvciBkZXNjcmliaW5nIGF0dHJpYnV0ZXMgZnJvbSB0aGUgY29udGFpbmVyICh3aGVyZSB0aGV5IGFyZSBpbnZhbGlkKSB0byB0aGUgaW1hZ2VcbiAgICB2YXIgaW1hZ2VOYW1lUHJvcHMgPSB7XG4gICAgICAgICdhcmlhLWxhYmVsbGVkYnknOiBwcm9wc1snYXJpYS1sYWJlbGxlZGJ5J10sXG4gICAgICAgICdhcmlhLWRlc2NyaWJlZGJ5JzogcHJvcHNbJ2FyaWEtZGVzY3JpYmVkYnknXSxcbiAgICAgICAgdGl0bGU6IHByb3BzLnRpdGxlLFxuICAgIH07XG4gICAgdmFyIGNvbnRhaW5lclByb3BzID0gaGFzTmFtZVxuICAgICAgICA/IHt9XG4gICAgICAgIDoge1xuICAgICAgICAgICAgJ2FyaWEtaGlkZGVuJzogdHJ1ZSxcbiAgICAgICAgfTtcbiAgICByZXR1cm4gKFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgX19hc3NpZ24oe30sIGNvbnRhaW5lclByb3BzLCBuYXRpdmVQcm9wcywgeyBjbGFzc05hbWU6IGNzcyhNU19JQ09OLCBjbGFzc05hbWVzLnJvb3QsIGNsYXNzTmFtZXMuaW1hZ2UsIGNsYXNzTmFtZSkgfSksXG4gICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoSW1hZ2UsIF9fYXNzaWduKHt9LCBpbWFnZU5hbWVQcm9wcywgaW1hZ2VQcm9wcywgeyBhbHQ6IGhhc05hbWUgPyBhbHRUZXh0IDogJycgfSkpKSk7XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9SW1hZ2VJY29uLmpzLm1hcCIsImV4cG9ydCB2YXIgRGlyZWN0aW9uYWxIaW50ID0ge1xuICAgIC8qKlxuICAgICAqIEFwcGVhciBhYm92ZSB0aGUgdGFyZ2V0IGVsZW1lbnQsIHdpdGggdGhlIGxlZnQgZWRnZXMgb2YgdGhlIGNhbGxvdXQgYW5kIHRhcmdldCBhbGlnbmluZy5cbiAgICAgKi9cbiAgICB0b3BMZWZ0RWRnZTogMCxcbiAgICAvKipcbiAgICAgKiBBcHBlYXIgYWJvdmUgdGhlIHRhcmdldCBlbGVtZW50LCB3aXRoIHRoZSBjZW50ZXJzIG9mIHRoZSBjYWxsb3V0IGFuZCB0YXJnZXQgYWxpZ25pbmcuXG4gICAgICovXG4gICAgdG9wQ2VudGVyOiAxLFxuICAgIC8qKlxuICAgICAqIEFwcGVhciBhYm92ZSB0aGUgdGFyZ2V0IGVsZW1lbnQsIHdpdGggdGhlIHJpZ2h0IGVkZ2VzIG9mIHRoZSBjYWxsb3V0IGFuZCB0YXJnZXQgYWxpZ25pbmcuXG4gICAgICovXG4gICAgdG9wUmlnaHRFZGdlOiAyLFxuICAgIC8qKlxuICAgICAqIEFwcGVhciBhYm92ZSB0aGUgdGFyZ2V0IGVsZW1lbnQsIGFsaWduaW5nIHdpdGggdGhlIHRhcmdldCBlbGVtZW50IHN1Y2ggdGhhdCB0aGUgY2FsbG91dCB0ZW5kcyB0b3dhcmRcbiAgICAgKiB0aGUgY2VudGVyIG9mIHRoZSBzY3JlZW4uXG4gICAgICovXG4gICAgdG9wQXV0b0VkZ2U6IDMsXG4gICAgLyoqXG4gICAgICogQXBwZWFyIGJlbG93IHRoZSB0YXJnZXQgZWxlbWVudCwgd2l0aCB0aGUgbGVmdCBlZGdlcyBvZiB0aGUgY2FsbG91dCBhbmQgdGFyZ2V0IGFsaWduaW5nLlxuICAgICAqL1xuICAgIGJvdHRvbUxlZnRFZGdlOiA0LFxuICAgIC8qKlxuICAgICAqIEFwcGVhciBiZWxvdyB0aGUgdGFyZ2V0IGVsZW1lbnQsIHdpdGggdGhlIGNlbnRlcnMgb2YgdGhlIGNhbGxvdXQgYW5kIHRhcmdldCBhbGlnbmluZy5cbiAgICAgKi9cbiAgICBib3R0b21DZW50ZXI6IDUsXG4gICAgLyoqXG4gICAgICogQXBwZWFyIGJlbG93IHRoZSB0YXJnZXQgZWxlbWVudCwgd2l0aCB0aGUgcmlnaHQgZWRnZXMgb2YgdGhlIGNhbGxvdXQgYW5kIHRhcmdldCBhbGlnbmluZy5cbiAgICAgKi9cbiAgICBib3R0b21SaWdodEVkZ2U6IDYsXG4gICAgLyoqXG4gICAgICogQXBwZWFyIGJlbG93IHRoZSB0YXJnZXQgZWxlbWVudCwgYWxpZ25pbmcgd2l0aCB0aGUgdGFyZ2V0IGVsZW1lbnQgc3VjaCB0aGF0IHRoZSBjYWxsb3V0IHRlbmRzIHRvd2FyZFxuICAgICAqIHRoZSBjZW50ZXIgb2YgdGhlIHNjcmVlbi5cbiAgICAgKi9cbiAgICBib3R0b21BdXRvRWRnZTogNyxcbiAgICAvKipcbiAgICAgKiBBcHBlYXIgdG8gdGhlIGxlZnQgb2YgdGhlIHRhcmdldCBlbGVtZW50LCB3aXRoIHRoZSB0b3AgZWRnZXMgb2YgdGhlIGNhbGxvdXQgYW5kIHRhcmdldCBhbGlnbmluZy5cbiAgICAgKi9cbiAgICBsZWZ0VG9wRWRnZTogOCxcbiAgICAvKipcbiAgICAgKiBBcHBlYXIgdG8gdGhlIGxlZnQgb2YgdGhlIHRhcmdldCBlbGVtZW50LCB3aXRoIHRoZSBjZW50ZXJzIG9mIHRoZSBjYWxsb3V0IGFuZCB0YXJnZXQgYWxpZ25pbmcuXG4gICAgICovXG4gICAgbGVmdENlbnRlcjogOSxcbiAgICAvKipcbiAgICAgKiBBcHBlYXIgdG8gdGhlIGxlZnQgb2YgdGhlIHRhcmdldCBlbGVtZW50LCB3aXRoIHRoZSBib3R0b20gZWRnZXMgb2YgdGhlIGNhbGxvdXQgYW5kIHRhcmdldCBhbGlnbmluZy5cbiAgICAgKi9cbiAgICBsZWZ0Qm90dG9tRWRnZTogMTAsXG4gICAgLyoqXG4gICAgICogQXBwZWFyIHRvIHRoZSByaWdodCBvZiB0aGUgdGFyZ2V0IGVsZW1lbnQsIHdpdGggdGhlIHRvcCBlZGdlcyBvZiB0aGUgY2FsbG91dCBhbmQgdGFyZ2V0IGFsaWduaW5nLlxuICAgICAqL1xuICAgIHJpZ2h0VG9wRWRnZTogMTEsXG4gICAgLyoqXG4gICAgICogQXBwZWFyIHRvIHRoZSByaWdodCBvZiB0aGUgdGFyZ2V0IGVsZW1lbnQsIHdpdGggdGhlIGNlbnRlcnMgb2YgdGhlIGNhbGxvdXQgYW5kIHRhcmdldCBhbGlnbmluZy5cbiAgICAgKi9cbiAgICByaWdodENlbnRlcjogMTIsXG4gICAgLyoqXG4gICAgICogQXBwZWFyIHRvIHRoZSByaWdodCBvZiB0aGUgdGFyZ2V0IGVsZW1lbnQsIHdpdGggdGhlIGJvdHRvbSBlZGdlcyBvZiB0aGUgY2FsbG91dCBhbmQgdGFyZ2V0IGFsaWduaW5nLlxuICAgICAqL1xuICAgIHJpZ2h0Qm90dG9tRWRnZTogMTMsXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9RGlyZWN0aW9uYWxIaW50LmpzLm1hcCIsImltcG9ydCB7IGNyZWF0ZU1lbW9pemVyIH0gZnJvbSAnLi4vbWVtb2l6ZSc7XG5mdW5jdGlvbiBjcmVhdGVDb21wb3NlZFJlbmRlckZ1bmN0aW9uKG91dGVyKSB7XG4gICAgdmFyIG91dGVyTWVtb2l6ZXIgPSBjcmVhdGVNZW1vaXplcihmdW5jdGlvbiAoaW5uZXIpIHtcbiAgICAgICAgdmFyIGlubmVyTWVtb2l6ZXIgPSBjcmVhdGVNZW1vaXplcihmdW5jdGlvbiAoZGVmYXVsdFJlbmRlcikge1xuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChpbm5lclByb3BzKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlubmVyKGlubmVyUHJvcHMsIGRlZmF1bHRSZW5kZXIpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAob3V0ZXJQcm9wcywgZGVmYXVsdFJlbmRlcikge1xuICAgICAgICAgICAgcmV0dXJuIG91dGVyKG91dGVyUHJvcHMsIGRlZmF1bHRSZW5kZXIgPyBpbm5lck1lbW9pemVyKGRlZmF1bHRSZW5kZXIpIDogaW5uZXIpO1xuICAgICAgICB9O1xuICAgIH0pO1xuICAgIHJldHVybiBvdXRlck1lbW9pemVyO1xufVxudmFyIG1lbW9pemVyID0gY3JlYXRlTWVtb2l6ZXIoY3JlYXRlQ29tcG9zZWRSZW5kZXJGdW5jdGlvbik7XG4vKipcbiAqIENvbXBvc2VzIHR3byAncmVuZGVyIGZ1bmN0aW9ucycgdG8gcHJvZHVjZSBhIGZpbmFsIHJlbmRlciBmdW5jdGlvbiB0aGF0IHJlbmRlcnNcbiAqIHRoZSBvdXRlciBmdW5jdGlvbiwgcGFzc2luZyB0aGUgaW5uZXIgZnVuY3Rpb24gYXMgJ2RlZmF1bHQgcmVuZGVyJy4gVGhlIGlubmVyIGZ1bmN0aW9uXG4gKiBpcyB0aGVuIHBhc3NlZCB0aGUgb3JpZ2luYWwgJ2RlZmF1bHQgcmVuZGVyJyBwcm9wLlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgZnVuY3Rpb24gY29tcG9zZVJlbmRlckZ1bmN0aW9uKG91dGVyLCBpbm5lcikge1xuICAgIHJldHVybiBtZW1vaXplcihvdXRlcikoaW5uZXIpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29tcG9zZVJlbmRlckZ1bmN0aW9uLmpzLm1hcCIsImV4cG9ydCB7IERpcmVjdGlvbmFsSGludCB9IGZyb20gJy4uLy4uL2NvbW1vbi9EaXJlY3Rpb25hbEhpbnQnO1xuLyoqXG4gKiB7QGRvY0NhdGVnb3J5IENvbnRleHR1YWxNZW51fVxuICovXG5leHBvcnQgdmFyIENvbnRleHR1YWxNZW51SXRlbVR5cGU7XG4oZnVuY3Rpb24gKENvbnRleHR1YWxNZW51SXRlbVR5cGUpIHtcbiAgICBDb250ZXh0dWFsTWVudUl0ZW1UeXBlW0NvbnRleHR1YWxNZW51SXRlbVR5cGVbXCJOb3JtYWxcIl0gPSAwXSA9IFwiTm9ybWFsXCI7XG4gICAgQ29udGV4dHVhbE1lbnVJdGVtVHlwZVtDb250ZXh0dWFsTWVudUl0ZW1UeXBlW1wiRGl2aWRlclwiXSA9IDFdID0gXCJEaXZpZGVyXCI7XG4gICAgQ29udGV4dHVhbE1lbnVJdGVtVHlwZVtDb250ZXh0dWFsTWVudUl0ZW1UeXBlW1wiSGVhZGVyXCJdID0gMl0gPSBcIkhlYWRlclwiO1xuICAgIENvbnRleHR1YWxNZW51SXRlbVR5cGVbQ29udGV4dHVhbE1lbnVJdGVtVHlwZVtcIlNlY3Rpb25cIl0gPSAzXSA9IFwiU2VjdGlvblwiO1xufSkoQ29udGV4dHVhbE1lbnVJdGVtVHlwZSB8fCAoQ29udGV4dHVhbE1lbnVJdGVtVHlwZSA9IHt9KSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1Db250ZXh0dWFsTWVudS50eXBlcy5qcy5tYXAiLCIvKipcbiAqIHtAZG9jQ2F0ZWdvcnkgRm9jdXNab25lfVxuICovXG5leHBvcnQgdmFyIEZvY3VzWm9uZVRhYmJhYmxlRWxlbWVudHMgPSB7XG4gICAgLyoqIFRhYmJpbmcgaXMgbm90IGFsbG93ZWQgKi9cbiAgICBub25lOiAwLFxuICAgIC8qKiBBbGwgdGFiYmluZyBhY3Rpb24gaXMgYWxsb3dlZCAqL1xuICAgIGFsbDogMSxcbiAgICAvKiogVGFiYmluZyBpcyBhbGxvd2VkIG9ubHkgb24gaW5wdXQgZWxlbWVudHMgKi9cbiAgICBpbnB1dE9ubHk6IDIsXG59O1xuLyoqXG4gKiB7QGRvY0NhdGVnb3J5IEZvY3VzWm9uZX1cbiAqL1xuZXhwb3J0IHZhciBGb2N1c1pvbmVEaXJlY3Rpb247XG4oZnVuY3Rpb24gKEZvY3VzWm9uZURpcmVjdGlvbikge1xuICAgIC8qKiBPbmx5IHJlYWN0IHRvIHVwL2Rvd24gYXJyb3dzLiAqL1xuICAgIEZvY3VzWm9uZURpcmVjdGlvbltGb2N1c1pvbmVEaXJlY3Rpb25bXCJ2ZXJ0aWNhbFwiXSA9IDBdID0gXCJ2ZXJ0aWNhbFwiO1xuICAgIC8qKiBPbmx5IHJlYWN0IHRvIGxlZnQvcmlnaHQgYXJyb3dzLiAqL1xuICAgIEZvY3VzWm9uZURpcmVjdGlvbltGb2N1c1pvbmVEaXJlY3Rpb25bXCJob3Jpem9udGFsXCJdID0gMV0gPSBcImhvcml6b250YWxcIjtcbiAgICAvKiogUmVhY3QgdG8gYWxsIGFycm93cy4gKi9cbiAgICBGb2N1c1pvbmVEaXJlY3Rpb25bRm9jdXNab25lRGlyZWN0aW9uW1wiYmlkaXJlY3Rpb25hbFwiXSA9IDJdID0gXCJiaWRpcmVjdGlvbmFsXCI7XG4gICAgLyoqXG4gICAgICogUmVhY3QgdG8gYWxsIGFycm93cy4gTmF2aWdhdGUgbmV4dCBpdGVtIGluIERPTSBvbiByaWdodC9kb3duIGFycm93IGtleXMgYW5kIHByZXZpb3VzIC0gbGVmdC91cCBhcnJvdyBrZXlzLlxuICAgICAqIFJpZ2h0IGFuZCBMZWZ0IGFycm93IGtleXMgYXJlIHN3YXBwZWQgaW4gUlRMIG1vZGUuXG4gICAgICovXG4gICAgRm9jdXNab25lRGlyZWN0aW9uW0ZvY3VzWm9uZURpcmVjdGlvbltcImRvbU9yZGVyXCJdID0gM10gPSBcImRvbU9yZGVyXCI7XG59KShGb2N1c1pvbmVEaXJlY3Rpb24gfHwgKEZvY3VzWm9uZURpcmVjdGlvbiA9IHt9KSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1Gb2N1c1pvbmUudHlwZXMuanMubWFwIiwiaW1wb3J0IHsgZ2V0UGFyZW50IH0gZnJvbSAnLi9nZXRQYXJlbnQnO1xuLyoqXG4gKiBEZXRlcm1pbmVzIHdoZXRoZXIgb3Igbm90IGEgcGFyZW50IGVsZW1lbnQgY29udGFpbnMgYSBnaXZlbiBjaGlsZCBlbGVtZW50LlxuICogSWYgYGFsbG93VmlydHVhbFBhcmVudHNgIGlzIHRydWUsIHRoaXMgbWV0aG9kIG1heSByZXR1cm4gYHRydWVgIGlmIHRoZSBjaGlsZFxuICogaGFzIHRoZSBwYXJlbnQgaW4gaXRzIHZpcnR1YWwgZWxlbWVudCBoaWVyYXJjaHkuXG4gKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgZnVuY3Rpb24gZWxlbWVudENvbnRhaW5zKHBhcmVudCwgY2hpbGQsIGFsbG93VmlydHVhbFBhcmVudHMpIHtcbiAgICBpZiAoYWxsb3dWaXJ0dWFsUGFyZW50cyA9PT0gdm9pZCAwKSB7IGFsbG93VmlydHVhbFBhcmVudHMgPSB0cnVlOyB9XG4gICAgdmFyIGlzQ29udGFpbmVkID0gZmFsc2U7XG4gICAgaWYgKHBhcmVudCAmJiBjaGlsZCkge1xuICAgICAgICBpZiAoYWxsb3dWaXJ0dWFsUGFyZW50cykge1xuICAgICAgICAgICAgaWYgKHBhcmVudCA9PT0gY2hpbGQpIHtcbiAgICAgICAgICAgICAgICBpc0NvbnRhaW5lZCA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBpc0NvbnRhaW5lZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHdoaWxlIChjaGlsZCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgbmV4dFBhcmVudCA9IGdldFBhcmVudChjaGlsZCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChuZXh0UGFyZW50ID09PSBwYXJlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlzQ29udGFpbmVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNoaWxkID0gbmV4dFBhcmVudDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAocGFyZW50LmNvbnRhaW5zKSB7XG4gICAgICAgICAgICBpc0NvbnRhaW5lZCA9IHBhcmVudC5jb250YWlucyhjaGlsZCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGlzQ29udGFpbmVkO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZWxlbWVudENvbnRhaW5zLmpzLm1hcCIsImltcG9ydCB7IGVsZW1lbnRDb250YWluc0F0dHJpYnV0ZSB9IGZyb20gJy4vZG9tL2VsZW1lbnRDb250YWluc0F0dHJpYnV0ZSc7XG5pbXBvcnQgeyBlbGVtZW50Q29udGFpbnMgfSBmcm9tICcuL2RvbS9lbGVtZW50Q29udGFpbnMnO1xuaW1wb3J0IHsgZ2V0UGFyZW50IH0gZnJvbSAnLi9kb20vZ2V0UGFyZW50JztcbmltcG9ydCB7IGdldFdpbmRvdyB9IGZyb20gJy4vZG9tL2dldFdpbmRvdyc7XG5pbXBvcnQgeyBnZXREb2N1bWVudCB9IGZyb20gJy4vZG9tL2dldERvY3VtZW50JztcbnZhciBJU19GT0NVU0FCTEVfQVRUUklCVVRFID0gJ2RhdGEtaXMtZm9jdXNhYmxlJztcbnZhciBJU19WSVNJQkxFX0FUVFJJQlVURSA9ICdkYXRhLWlzLXZpc2libGUnO1xudmFyIEZPQ1VTWk9ORV9JRF9BVFRSSUJVVEUgPSAnZGF0YS1mb2N1c3pvbmUtaWQnO1xudmFyIEZPQ1VTWk9ORV9TVUJfQVRUUklCVVRFID0gJ2RhdGEtaXMtc3ViLWZvY3Vzem9uZSc7XG4vKipcbiAqIEdldHMgdGhlIGZpcnN0IGZvY3VzYWJsZSBlbGVtZW50LlxuICpcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldEZpcnN0Rm9jdXNhYmxlKHJvb3RFbGVtZW50LCBjdXJyZW50RWxlbWVudCwgaW5jbHVkZUVsZW1lbnRzSW5Gb2N1c1pvbmVzKSB7XG4gICAgcmV0dXJuIGdldE5leHRFbGVtZW50KHJvb3RFbGVtZW50LCBjdXJyZW50RWxlbWVudCwgdHJ1ZSAvKmNoZWNrTm9kZSovLCBmYWxzZSAvKnN1cHByZXNzUGFyZW50VHJhdmVyc2FsKi8sIGZhbHNlIC8qc3VwcHJlc3NDaGlsZFRyYXZlcnNhbCovLCBpbmNsdWRlRWxlbWVudHNJbkZvY3VzWm9uZXMpO1xufVxuLyoqXG4gKiBHZXRzIHRoZSBsYXN0IGZvY3VzYWJsZSBlbGVtZW50LlxuICpcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldExhc3RGb2N1c2FibGUocm9vdEVsZW1lbnQsIGN1cnJlbnRFbGVtZW50LCBpbmNsdWRlRWxlbWVudHNJbkZvY3VzWm9uZXMpIHtcbiAgICByZXR1cm4gZ2V0UHJldmlvdXNFbGVtZW50KHJvb3RFbGVtZW50LCBjdXJyZW50RWxlbWVudCwgdHJ1ZSAvKmNoZWNrTm9kZSovLCBmYWxzZSAvKnN1cHByZXNzUGFyZW50VHJhdmVyc2FsKi8sIHRydWUgLyp0cmF2ZXJzZUNoaWxkcmVuKi8sIGluY2x1ZGVFbGVtZW50c0luRm9jdXNab25lcyk7XG59XG4vKipcbiAqIEdldHMgdGhlIGZpcnN0IHRhYmJhYmxlIGVsZW1lbnQuIChUaGUgZGlmZmVyZW5jZSBiZXR3ZWVuIGZvY3VzYWJsZSBhbmQgdGFiYmFibGUgaXMgdGhhdCB0YWJiYWJsZSBlbGVtZW50cyBhcmVcbiAqIGZvY3VzYWJsZSBlbGVtZW50cyB0aGF0IGFsc28gaGF2ZSB0YWJJbmRleCAhPSAtMS4pXG4gKiBAcGFyYW0gcm9vdEVsZW1lbnQgLSBUaGUgcGFyZW50IGVsZW1lbnQgdG8gc2VhcmNoIGJlbmVhdGguXG4gKiBAcGFyYW0gY3VycmVudEVsZW1lbnQgLSBUaGUgZGVzY2VuZGFudCBvZiByb290RWxlbWVudCB0byBzdGFydCB0aGUgc2VhcmNoIGF0LiAgVGhpcyBlbGVtZW50IGlzIHRoZSBmaXJzdCBvbmUgY2hlY2tlZCxcbiAqIGFuZCBpdGVyYXRpb24gY29udGludWVzIGZvcndhcmQuICBUeXBpY2FsIHVzZSBwYXNzZXMgcm9vdEVsZW1lbnQuZmlyc3RDaGlsZC5cbiAqIEBwYXJhbSBpbmNsdWRlRWxlbWVudHNJbkZvY3VzWm9uZXMgLSB0cnVlIGlmIHRyYXZlcnNhbCBzaG91bGQgZ28gaW50byBGb2N1c1pvbmUgZGVzY2VuZGFudHMuXG4gKiBAcGFyYW0gY2hlY2tOb2RlIC0gSW5jbHVkZSBjdXJyZW50RWxlbWVudCBpbiBzZWFyY2ggd2hlbiB0cnVlLiBEZWZhdWx0cyB0byB0cnVlLlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0Rmlyc3RUYWJiYWJsZShyb290RWxlbWVudCwgY3VycmVudEVsZW1lbnQsIGluY2x1ZGVFbGVtZW50c0luRm9jdXNab25lcywgY2hlY2tOb2RlKSB7XG4gICAgaWYgKGNoZWNrTm9kZSA9PT0gdm9pZCAwKSB7IGNoZWNrTm9kZSA9IHRydWU7IH1cbiAgICByZXR1cm4gZ2V0TmV4dEVsZW1lbnQocm9vdEVsZW1lbnQsIGN1cnJlbnRFbGVtZW50LCBjaGVja05vZGUsIGZhbHNlIC8qc3VwcHJlc3NQYXJlbnRUcmF2ZXJzYWwqLywgZmFsc2UgLypzdXBwcmVzc0NoaWxkVHJhdmVyc2FsKi8sIGluY2x1ZGVFbGVtZW50c0luRm9jdXNab25lcywgZmFsc2UgLyphbGxvd0ZvY3VzUm9vdCovLCB0cnVlIC8qdGFiYmFibGUqLyk7XG59XG4vKipcbiAqIEdldHMgdGhlIGxhc3QgdGFiYmFibGUgZWxlbWVudC4gKFRoZSBkaWZmZXJlbmNlIGJldHdlZW4gZm9jdXNhYmxlIGFuZCB0YWJiYWJsZSBpcyB0aGF0IHRhYmJhYmxlIGVsZW1lbnRzIGFyZVxuICogZm9jdXNhYmxlIGVsZW1lbnRzIHRoYXQgYWxzbyBoYXZlIHRhYkluZGV4ICE9IC0xLilcbiAqIEBwYXJhbSByb290RWxlbWVudCAtIFRoZSBwYXJlbnQgZWxlbWVudCB0byBzZWFyY2ggYmVuZWF0aC5cbiAqIEBwYXJhbSBjdXJyZW50RWxlbWVudCAtIFRoZSBkZXNjZW5kYW50IG9mIHJvb3RFbGVtZW50IHRvIHN0YXJ0IHRoZSBzZWFyY2ggYXQuICBUaGlzIGVsZW1lbnQgaXMgdGhlIGZpcnN0IG9uZSBjaGVja2VkLFxuICogYW5kIGl0ZXJhdGlvbiBjb250aW51ZXMgaW4gcmV2ZXJzZS4gIFR5cGljYWwgdXNlIHBhc3NlcyByb290RWxlbWVudC5sYXN0Q2hpbGQuXG4gKiBAcGFyYW0gaW5jbHVkZUVsZW1lbnRzSW5Gb2N1c1pvbmVzIC0gdHJ1ZSBpZiB0cmF2ZXJzYWwgc2hvdWxkIGdvIGludG8gRm9jdXNab25lIGRlc2NlbmRhbnRzLlxuICogQHBhcmFtIGNoZWNrTm9kZSAtIEluY2x1ZGUgY3VycmVudEVsZW1lbnQgaW4gc2VhcmNoIHdoZW4gdHJ1ZS4gRGVmYXVsdHMgdG8gdHJ1ZS5cbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldExhc3RUYWJiYWJsZShyb290RWxlbWVudCwgY3VycmVudEVsZW1lbnQsIGluY2x1ZGVFbGVtZW50c0luRm9jdXNab25lcywgY2hlY2tOb2RlKSB7XG4gICAgaWYgKGNoZWNrTm9kZSA9PT0gdm9pZCAwKSB7IGNoZWNrTm9kZSA9IHRydWU7IH1cbiAgICByZXR1cm4gZ2V0UHJldmlvdXNFbGVtZW50KHJvb3RFbGVtZW50LCBjdXJyZW50RWxlbWVudCwgY2hlY2tOb2RlLCBmYWxzZSAvKnN1cHByZXNzUGFyZW50VHJhdmVyc2FsKi8sIHRydWUgLyp0cmF2ZXJzZUNoaWxkcmVuKi8sIGluY2x1ZGVFbGVtZW50c0luRm9jdXNab25lcywgZmFsc2UgLyphbGxvd0ZvY3VzUm9vdCovLCB0cnVlIC8qdGFiYmFibGUqLyk7XG59XG4vKipcbiAqIEF0dGVtcHRzIHRvIGZvY3VzIHRoZSBmaXJzdCBmb2N1c2FibGUgZWxlbWVudCB0aGF0IGlzIGEgY2hpbGQgb3IgY2hpbGQncyBjaGlsZCBvZiB0aGUgcm9vdEVsZW1lbnQuXG4gKlxuICogQHB1YmxpY1xuICogQHBhcmFtIHJvb3RFbGVtZW50IC0gRWxlbWVudCB0byBzdGFydCB0aGUgc2VhcmNoIGZvciBhIGZvY3VzYWJsZSBjaGlsZC5cbiAqIEByZXR1cm5zIFRydWUgaWYgZm9jdXMgd2FzIHNldCwgZmFsc2UgaWYgaXQgd2FzIG5vdC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGZvY3VzRmlyc3RDaGlsZChyb290RWxlbWVudCkge1xuICAgIHZhciBlbGVtZW50ID0gZ2V0TmV4dEVsZW1lbnQocm9vdEVsZW1lbnQsIHJvb3RFbGVtZW50LCB0cnVlLCBmYWxzZSwgZmFsc2UsIHRydWUpO1xuICAgIGlmIChlbGVtZW50KSB7XG4gICAgICAgIGZvY3VzQXN5bmMoZWxlbWVudCk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59XG4vKipcbiAqIFRyYXZlcnNlIHRvIGZpbmQgdGhlIHByZXZpb3VzIGVsZW1lbnQuXG4gKiBJZiB0YWJiYWJsZSBpcyB0cnVlLCB0aGUgZWxlbWVudCBtdXN0IGhhdmUgdGFiSW5kZXggIT0gLTEuXG4gKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0UHJldmlvdXNFbGVtZW50KHJvb3RFbGVtZW50LCBjdXJyZW50RWxlbWVudCwgY2hlY2tOb2RlLCBzdXBwcmVzc1BhcmVudFRyYXZlcnNhbCwgdHJhdmVyc2VDaGlsZHJlbiwgaW5jbHVkZUVsZW1lbnRzSW5Gb2N1c1pvbmVzLCBhbGxvd0ZvY3VzUm9vdCwgdGFiYmFibGUpIHtcbiAgICBpZiAoIWN1cnJlbnRFbGVtZW50IHx8ICghYWxsb3dGb2N1c1Jvb3QgJiYgY3VycmVudEVsZW1lbnQgPT09IHJvb3RFbGVtZW50KSkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgdmFyIGlzQ3VycmVudEVsZW1lbnRWaXNpYmxlID0gaXNFbGVtZW50VmlzaWJsZShjdXJyZW50RWxlbWVudCk7XG4gICAgLy8gQ2hlY2sgaXRzIGNoaWxkcmVuLlxuICAgIGlmICh0cmF2ZXJzZUNoaWxkcmVuICYmXG4gICAgICAgIGlzQ3VycmVudEVsZW1lbnRWaXNpYmxlICYmXG4gICAgICAgIChpbmNsdWRlRWxlbWVudHNJbkZvY3VzWm9uZXMgfHwgIShpc0VsZW1lbnRGb2N1c1pvbmUoY3VycmVudEVsZW1lbnQpIHx8IGlzRWxlbWVudEZvY3VzU3ViWm9uZShjdXJyZW50RWxlbWVudCkpKSkge1xuICAgICAgICB2YXIgY2hpbGRNYXRjaCA9IGdldFByZXZpb3VzRWxlbWVudChyb290RWxlbWVudCwgY3VycmVudEVsZW1lbnQubGFzdEVsZW1lbnRDaGlsZCwgdHJ1ZSwgdHJ1ZSwgdHJ1ZSwgaW5jbHVkZUVsZW1lbnRzSW5Gb2N1c1pvbmVzLCBhbGxvd0ZvY3VzUm9vdCwgdGFiYmFibGUpO1xuICAgICAgICBpZiAoY2hpbGRNYXRjaCkge1xuICAgICAgICAgICAgaWYgKCh0YWJiYWJsZSAmJiBpc0VsZW1lbnRUYWJiYWJsZShjaGlsZE1hdGNoLCB0cnVlKSkgfHwgIXRhYmJhYmxlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNoaWxkTWF0Y2g7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgY2hpbGRNYXRjaFNpYmxpbmdNYXRjaCA9IGdldFByZXZpb3VzRWxlbWVudChyb290RWxlbWVudCwgY2hpbGRNYXRjaC5wcmV2aW91c0VsZW1lbnRTaWJsaW5nLCB0cnVlLCB0cnVlLCB0cnVlLCBpbmNsdWRlRWxlbWVudHNJbkZvY3VzWm9uZXMsIGFsbG93Rm9jdXNSb290LCB0YWJiYWJsZSk7XG4gICAgICAgICAgICBpZiAoY2hpbGRNYXRjaFNpYmxpbmdNYXRjaCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBjaGlsZE1hdGNoU2libGluZ01hdGNoO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGNoaWxkTWF0Y2hQYXJlbnQgPSBjaGlsZE1hdGNoLnBhcmVudEVsZW1lbnQ7XG4gICAgICAgICAgICAvLyBBdCB0aGlzIHBvaW50IGlmIHdlIGhhdmUgbm90IGZvdW5kIGFueSBwb3RlbnRpYWwgbWF0Y2hlc1xuICAgICAgICAgICAgLy8gc3RhcnQgbG9va2luZyBhdCB0aGUgcmVzdCBvZiB0aGUgc3VidHJlZSB1bmRlciB0aGUgY3VycmVudFBhcmVudC5cbiAgICAgICAgICAgIC8vIE5PVEU6IFdlIGRvIG5vdCB3YW50IHRvIHJlY3Vyc2UgaGVyZSBiZWNhdXNlIGRvaW5nIHNvIGNvdWxkXG4gICAgICAgICAgICAvLyBjYXVzZSBlbGVtZW50cyB0byBnZXQgc2tpcHBlZC5cbiAgICAgICAgICAgIHdoaWxlIChjaGlsZE1hdGNoUGFyZW50ICYmIGNoaWxkTWF0Y2hQYXJlbnQgIT09IGN1cnJlbnRFbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgdmFyIGNoaWxkTWF0Y2hQYXJlbnRNYXRjaCA9IGdldFByZXZpb3VzRWxlbWVudChyb290RWxlbWVudCwgY2hpbGRNYXRjaFBhcmVudC5wcmV2aW91c0VsZW1lbnRTaWJsaW5nLCB0cnVlLCB0cnVlLCB0cnVlLCBpbmNsdWRlRWxlbWVudHNJbkZvY3VzWm9uZXMsIGFsbG93Rm9jdXNSb290LCB0YWJiYWJsZSk7XG4gICAgICAgICAgICAgICAgaWYgKGNoaWxkTWF0Y2hQYXJlbnRNYXRjaCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY2hpbGRNYXRjaFBhcmVudE1hdGNoO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjaGlsZE1hdGNoUGFyZW50ID0gY2hpbGRNYXRjaFBhcmVudC5wYXJlbnRFbGVtZW50O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIC8vIENoZWNrIHRoZSBjdXJyZW50IG5vZGUsIGlmIGl0J3Mgbm90IHRoZSBmaXJzdCB0cmF2ZXJzYWwuXG4gICAgaWYgKGNoZWNrTm9kZSAmJiBpc0N1cnJlbnRFbGVtZW50VmlzaWJsZSAmJiBpc0VsZW1lbnRUYWJiYWJsZShjdXJyZW50RWxlbWVudCwgdGFiYmFibGUpKSB7XG4gICAgICAgIHJldHVybiBjdXJyZW50RWxlbWVudDtcbiAgICB9XG4gICAgLy8gQ2hlY2sgaXRzIHByZXZpb3VzIHNpYmxpbmcuXG4gICAgdmFyIHNpYmxpbmdNYXRjaCA9IGdldFByZXZpb3VzRWxlbWVudChyb290RWxlbWVudCwgY3VycmVudEVsZW1lbnQucHJldmlvdXNFbGVtZW50U2libGluZywgdHJ1ZSwgdHJ1ZSwgdHJ1ZSwgaW5jbHVkZUVsZW1lbnRzSW5Gb2N1c1pvbmVzLCBhbGxvd0ZvY3VzUm9vdCwgdGFiYmFibGUpO1xuICAgIGlmIChzaWJsaW5nTWF0Y2gpIHtcbiAgICAgICAgcmV0dXJuIHNpYmxpbmdNYXRjaDtcbiAgICB9XG4gICAgLy8gQ2hlY2sgaXRzIHBhcmVudC5cbiAgICBpZiAoIXN1cHByZXNzUGFyZW50VHJhdmVyc2FsKSB7XG4gICAgICAgIHJldHVybiBnZXRQcmV2aW91c0VsZW1lbnQocm9vdEVsZW1lbnQsIGN1cnJlbnRFbGVtZW50LnBhcmVudEVsZW1lbnQsIHRydWUsIGZhbHNlLCBmYWxzZSwgaW5jbHVkZUVsZW1lbnRzSW5Gb2N1c1pvbmVzLCBhbGxvd0ZvY3VzUm9vdCwgdGFiYmFibGUpO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbn1cbi8qKlxuICogVHJhdmVyc2UgdG8gZmluZCB0aGUgbmV4dCBmb2N1c2FibGUgZWxlbWVudC5cbiAqIElmIHRhYmJhYmxlIGlzIHRydWUsIHRoZSBlbGVtZW50IG11c3QgaGF2ZSB0YWJJbmRleCAhPSAtMS5cbiAqXG4gKiBAcHVibGljXG4gKiBAcGFyYW0gY2hlY2tOb2RlIC0gSW5jbHVkZSBjdXJyZW50RWxlbWVudCBpbiBzZWFyY2ggd2hlbiB0cnVlLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0TmV4dEVsZW1lbnQocm9vdEVsZW1lbnQsIGN1cnJlbnRFbGVtZW50LCBjaGVja05vZGUsIHN1cHByZXNzUGFyZW50VHJhdmVyc2FsLCBzdXBwcmVzc0NoaWxkVHJhdmVyc2FsLCBpbmNsdWRlRWxlbWVudHNJbkZvY3VzWm9uZXMsIGFsbG93Rm9jdXNSb290LCB0YWJiYWJsZSkge1xuICAgIGlmICghY3VycmVudEVsZW1lbnQgfHwgKGN1cnJlbnRFbGVtZW50ID09PSByb290RWxlbWVudCAmJiBzdXBwcmVzc0NoaWxkVHJhdmVyc2FsICYmICFhbGxvd0ZvY3VzUm9vdCkpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHZhciBpc0N1cnJlbnRFbGVtZW50VmlzaWJsZSA9IGlzRWxlbWVudFZpc2libGUoY3VycmVudEVsZW1lbnQpO1xuICAgIC8vIENoZWNrIHRoZSBjdXJyZW50IG5vZGUsIGlmIGl0J3Mgbm90IHRoZSBmaXJzdCB0cmF2ZXJzYWwuXG4gICAgaWYgKGNoZWNrTm9kZSAmJiBpc0N1cnJlbnRFbGVtZW50VmlzaWJsZSAmJiBpc0VsZW1lbnRUYWJiYWJsZShjdXJyZW50RWxlbWVudCwgdGFiYmFibGUpKSB7XG4gICAgICAgIHJldHVybiBjdXJyZW50RWxlbWVudDtcbiAgICB9XG4gICAgLy8gQ2hlY2sgaXRzIGNoaWxkcmVuLlxuICAgIGlmICghc3VwcHJlc3NDaGlsZFRyYXZlcnNhbCAmJlxuICAgICAgICBpc0N1cnJlbnRFbGVtZW50VmlzaWJsZSAmJlxuICAgICAgICAoaW5jbHVkZUVsZW1lbnRzSW5Gb2N1c1pvbmVzIHx8ICEoaXNFbGVtZW50Rm9jdXNab25lKGN1cnJlbnRFbGVtZW50KSB8fCBpc0VsZW1lbnRGb2N1c1N1YlpvbmUoY3VycmVudEVsZW1lbnQpKSkpIHtcbiAgICAgICAgdmFyIGNoaWxkTWF0Y2ggPSBnZXROZXh0RWxlbWVudChyb290RWxlbWVudCwgY3VycmVudEVsZW1lbnQuZmlyc3RFbGVtZW50Q2hpbGQsIHRydWUsIHRydWUsIGZhbHNlLCBpbmNsdWRlRWxlbWVudHNJbkZvY3VzWm9uZXMsIGFsbG93Rm9jdXNSb290LCB0YWJiYWJsZSk7XG4gICAgICAgIGlmIChjaGlsZE1hdGNoKSB7XG4gICAgICAgICAgICByZXR1cm4gY2hpbGRNYXRjaDtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoY3VycmVudEVsZW1lbnQgPT09IHJvb3RFbGVtZW50KSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICAvLyBDaGVjayBpdHMgc2libGluZy5cbiAgICB2YXIgc2libGluZ01hdGNoID0gZ2V0TmV4dEVsZW1lbnQocm9vdEVsZW1lbnQsIGN1cnJlbnRFbGVtZW50Lm5leHRFbGVtZW50U2libGluZywgdHJ1ZSwgdHJ1ZSwgZmFsc2UsIGluY2x1ZGVFbGVtZW50c0luRm9jdXNab25lcywgYWxsb3dGb2N1c1Jvb3QsIHRhYmJhYmxlKTtcbiAgICBpZiAoc2libGluZ01hdGNoKSB7XG4gICAgICAgIHJldHVybiBzaWJsaW5nTWF0Y2g7XG4gICAgfVxuICAgIGlmICghc3VwcHJlc3NQYXJlbnRUcmF2ZXJzYWwpIHtcbiAgICAgICAgcmV0dXJuIGdldE5leHRFbGVtZW50KHJvb3RFbGVtZW50LCBjdXJyZW50RWxlbWVudC5wYXJlbnRFbGVtZW50LCBmYWxzZSwgZmFsc2UsIHRydWUsIGluY2x1ZGVFbGVtZW50c0luRm9jdXNab25lcywgYWxsb3dGb2N1c1Jvb3QsIHRhYmJhYmxlKTtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG59XG4vKipcbiAqIERldGVybWluZXMgaWYgYW4gZWxlbWVudCBpcyB2aXNpYmxlLlxuICpcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzRWxlbWVudFZpc2libGUoZWxlbWVudCkge1xuICAgIC8vIElmIHRoZSBlbGVtZW50IGlzIG5vdCB2YWxpZCwgcmV0dXJuIGZhbHNlLlxuICAgIGlmICghZWxlbWVudCB8fCAhZWxlbWVudC5nZXRBdHRyaWJ1dGUpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICB2YXIgdmlzaWJpbGl0eUF0dHJpYnV0ZSA9IGVsZW1lbnQuZ2V0QXR0cmlidXRlKElTX1ZJU0lCTEVfQVRUUklCVVRFKTtcbiAgICAvLyBJZiB0aGUgZWxlbWVudCBpcyBleHBsaWNpdGx5IG1hcmtlZCB3aXRoIHRoZSB2aXNpYmlsaXR5IGF0dHJpYnV0ZSwgcmV0dXJuIHRoYXQgdmFsdWUgYXMgYm9vbGVhbi5cbiAgICBpZiAodmlzaWJpbGl0eUF0dHJpYnV0ZSAhPT0gbnVsbCAmJiB2aXNpYmlsaXR5QXR0cmlidXRlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIHZpc2liaWxpdHlBdHRyaWJ1dGUgPT09ICd0cnVlJztcbiAgICB9XG4gICAgLy8gRmFsbGJhY2sgdG8gb3RoZXIgbWV0aG9kcyBvZiBkZXRlcm1pbmluZyBhY3R1YWwgdmlzaWJpbGl0eS5cbiAgICByZXR1cm4gKGVsZW1lbnQub2Zmc2V0SGVpZ2h0ICE9PSAwIHx8XG4gICAgICAgIGVsZW1lbnQub2Zmc2V0UGFyZW50ICE9PSBudWxsIHx8XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgICAgIGVsZW1lbnQuaXNWaXNpYmxlID09PSB0cnVlKTsgLy8gdXNlZCBhcyBhIHdvcmthcm91bmQgZm9yIHRlc3RpbmcuXG59XG4vKipcbiAqIERldGVybWluZXMgaWYgYW4gZWxlbWVudCBpcyB2aXNpYmxlIGFuZCBub3QgaGlkZGVuXG4gKiBAcGFyYW0gZWxlbWVudCAtIEVsZW1lbnQgdG8gY2hlY2tcbiAqIEByZXR1cm5zIFJldHVybnMgdHJ1ZSBpZiB0aGUgZ2l2ZW4gZWxlbWVudCBpcyB2aXNpYmxlIGFuZCBub3QgaGlkZGVuXG4gKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgZnVuY3Rpb24gaXNFbGVtZW50VmlzaWJsZUFuZE5vdEhpZGRlbihlbGVtZW50KSB7XG4gICAgcmV0dXJuICghIWVsZW1lbnQgJiZcbiAgICAgICAgaXNFbGVtZW50VmlzaWJsZShlbGVtZW50KSAmJlxuICAgICAgICAhZWxlbWVudC5oaWRkZW4gJiZcbiAgICAgICAgd2luZG93LmdldENvbXB1dGVkU3R5bGUoZWxlbWVudCkudmlzaWJpbGl0eSAhPT0gJ2hpZGRlbicpO1xufVxuLyoqXG4gKiBEZXRlcm1pbmVzIGlmIGFuIGVsZW1lbnQgY2FuIHJlY2VpdmUgZm9jdXMgcHJvZ3JhbW1hdGljYWxseSBvciB2aWEgYSBtb3VzZSBjbGljay5cbiAqIElmIGNoZWNrVGFiSW5kZXggaXMgdHJ1ZSwgYWRkaXRpb25hbGx5IGNoZWNrcyB0byBlbnN1cmUgdGhlIGVsZW1lbnQgY2FuIGJlIGZvY3VzZWQgd2l0aCB0aGUgdGFiIGtleSxcbiAqIG1lYW5pbmcgdGFiSW5kZXggIT0gLTEuXG4gKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgZnVuY3Rpb24gaXNFbGVtZW50VGFiYmFibGUoZWxlbWVudCwgY2hlY2tUYWJJbmRleCkge1xuICAgIC8vIElmIHRoaXMgZWxlbWVudCBpcyBudWxsIG9yIGlzIGRpc2FibGVkLCBpdCBpcyBub3QgY29uc2lkZXJlZCB0YWJiYWJsZS5cbiAgICBpZiAoIWVsZW1lbnQgfHwgZWxlbWVudC5kaXNhYmxlZCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHZhciB0YWJJbmRleCA9IDA7XG4gICAgdmFyIHRhYkluZGV4QXR0cmlidXRlVmFsdWUgPSBudWxsO1xuICAgIGlmIChlbGVtZW50ICYmIGVsZW1lbnQuZ2V0QXR0cmlidXRlKSB7XG4gICAgICAgIHRhYkluZGV4QXR0cmlidXRlVmFsdWUgPSBlbGVtZW50LmdldEF0dHJpYnV0ZSgndGFiSW5kZXgnKTtcbiAgICAgICAgaWYgKHRhYkluZGV4QXR0cmlidXRlVmFsdWUpIHtcbiAgICAgICAgICAgIHRhYkluZGV4ID0gcGFyc2VJbnQodGFiSW5kZXhBdHRyaWJ1dGVWYWx1ZSwgMTApO1xuICAgICAgICB9XG4gICAgfVxuICAgIHZhciBpc0ZvY3VzYWJsZUF0dHJpYnV0ZSA9IGVsZW1lbnQuZ2V0QXR0cmlidXRlID8gZWxlbWVudC5nZXRBdHRyaWJ1dGUoSVNfRk9DVVNBQkxFX0FUVFJJQlVURSkgOiBudWxsO1xuICAgIHZhciBpc1RhYkluZGV4U2V0ID0gdGFiSW5kZXhBdHRyaWJ1dGVWYWx1ZSAhPT0gbnVsbCAmJiB0YWJJbmRleCA+PSAwO1xuICAgIHZhciByZXN1bHQgPSAhIWVsZW1lbnQgJiZcbiAgICAgICAgaXNGb2N1c2FibGVBdHRyaWJ1dGUgIT09ICdmYWxzZScgJiZcbiAgICAgICAgKGVsZW1lbnQudGFnTmFtZSA9PT0gJ0EnIHx8XG4gICAgICAgICAgICBlbGVtZW50LnRhZ05hbWUgPT09ICdCVVRUT04nIHx8XG4gICAgICAgICAgICBlbGVtZW50LnRhZ05hbWUgPT09ICdJTlBVVCcgfHxcbiAgICAgICAgICAgIGVsZW1lbnQudGFnTmFtZSA9PT0gJ1RFWFRBUkVBJyB8fFxuICAgICAgICAgICAgZWxlbWVudC50YWdOYW1lID09PSAnU0VMRUNUJyB8fFxuICAgICAgICAgICAgaXNGb2N1c2FibGVBdHRyaWJ1dGUgPT09ICd0cnVlJyB8fFxuICAgICAgICAgICAgaXNUYWJJbmRleFNldCk7XG4gICAgcmV0dXJuIGNoZWNrVGFiSW5kZXggPyB0YWJJbmRleCAhPT0gLTEgJiYgcmVzdWx0IDogcmVzdWx0O1xufVxuLyoqXG4gKiBEZXRlcm1pbmVzIGlmIGEgZ2l2ZW4gZWxlbWVudCBpcyBhIGZvY3VzIHpvbmUuXG4gKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgZnVuY3Rpb24gaXNFbGVtZW50Rm9jdXNab25lKGVsZW1lbnQpIHtcbiAgICByZXR1cm4gISEoZWxlbWVudCAmJiBlbGVtZW50LmdldEF0dHJpYnV0ZSAmJiAhIWVsZW1lbnQuZ2V0QXR0cmlidXRlKEZPQ1VTWk9ORV9JRF9BVFRSSUJVVEUpKTtcbn1cbi8qKlxuICogRGV0ZXJtaW5lcyBpZiBhIGdpdmVuIGVsZW1lbnQgaXMgYSBmb2N1cyBzdWIgem9uZS5cbiAqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc0VsZW1lbnRGb2N1c1N1YlpvbmUoZWxlbWVudCkge1xuICAgIHJldHVybiAhIShlbGVtZW50ICYmIGVsZW1lbnQuZ2V0QXR0cmlidXRlICYmIGVsZW1lbnQuZ2V0QXR0cmlidXRlKEZPQ1VTWk9ORV9TVUJfQVRUUklCVVRFKSA9PT0gJ3RydWUnKTtcbn1cbi8qKlxuICogRGV0ZXJtaW5lcyBpZiBhbiBlbGVtZW50LCBvciBhbnkgb2YgaXRzIGNoaWxkcmVuLCBjb250YWluIGZvY3VzLlxuICpcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRvZXNFbGVtZW50Q29udGFpbkZvY3VzKGVsZW1lbnQpIHtcbiAgICB2YXIgZG9jdW1lbnQgPSBnZXREb2N1bWVudChlbGVtZW50KTtcbiAgICB2YXIgY3VycmVudEFjdGl2ZUVsZW1lbnQgPSBkb2N1bWVudCAmJiBkb2N1bWVudC5hY3RpdmVFbGVtZW50O1xuICAgIGlmIChjdXJyZW50QWN0aXZlRWxlbWVudCAmJiBlbGVtZW50Q29udGFpbnMoZWxlbWVudCwgY3VycmVudEFjdGl2ZUVsZW1lbnQpKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59XG4vKipcbiAqIERldGVybWluZXMgaWYgYW4sIG9yIGFueSBvZiBpdHMgYW5jZXN0b3JzLCBzZXBjaWZpY2llcyB0aGF0IGl0IGRvZXNuJ3Qgd2FudCBmb2N1cyB0byB3cmFwXG4gKiBAcGFyYW0gZWxlbWVudCAtIGVsZW1lbnQgdG8gc3RhcnQgc2VhcmNoaW5nIGZyb21cbiAqIEBwYXJhbSBub1dyYXBEYXRhQXR0cmlidXRlIC0gdGhlIG5vIHdyYXAgZGF0YSBhdHRyaWJ1dGUgdG8gbWF0Y2ggKGVpdGhlcilcbiAqIEByZXR1cm5zIHRydWUgaWYgZm9jdXMgc2hvdWxkIHdyYXAsIGZhbHNlIG90aGVyd2lzZVxuICovXG5leHBvcnQgZnVuY3Rpb24gc2hvdWxkV3JhcEZvY3VzKGVsZW1lbnQsIG5vV3JhcERhdGFBdHRyaWJ1dGUpIHtcbiAgICByZXR1cm4gZWxlbWVudENvbnRhaW5zQXR0cmlidXRlKGVsZW1lbnQsIG5vV3JhcERhdGFBdHRyaWJ1dGUpID09PSAndHJ1ZScgPyBmYWxzZSA6IHRydWU7XG59XG52YXIgdGFyZ2V0VG9Gb2N1c09uTmV4dFJlcGFpbnQgPSB1bmRlZmluZWQ7XG4vKipcbiAqIFNldHMgZm9jdXMgdG8gYW4gZWxlbWVudCBhc3luY2hyb25vdXNseS4gVGhlIGZvY3VzIHdpbGwgYmUgc2V0IGF0IHRoZSBuZXh0IGJyb3dzZXIgcmVwYWludCxcbiAqIG1lYW5pbmcgaXQgd29uJ3QgY2F1c2UgYW55IGV4dHJhIHJlY2FsY3VsYXRpb25zLiBJZiBtb3JlIHRoYW4gb25lIGZvY3VzQXN5bmMgaXMgY2FsbGVkIGR1cmluZyBvbmUgZnJhbWUsXG4gKiBvbmx5IHRoZSBsYXRlc3QgY2FsbGVkIGZvY3VzQXN5bmMgZWxlbWVudCB3aWxsIGFjdHVhbGx5IGJlIGZvY3VzZWRcbiAqIEBwYXJhbSBlbGVtZW50IC0gVGhlIGVsZW1lbnQgdG8gZm9jdXNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGZvY3VzQXN5bmMoZWxlbWVudCkge1xuICAgIGlmIChlbGVtZW50KSB7XG4gICAgICAgIC8vIEFuIGVsZW1lbnQgd2FzIGFscmVhZHkgcXVldWVkIHRvIGJlIGZvY3VzZWQsIHNvIHJlcGxhY2UgdGhhdCBvbmUgd2l0aCB0aGUgbmV3IGVsZW1lbnRcbiAgICAgICAgaWYgKHRhcmdldFRvRm9jdXNPbk5leHRSZXBhaW50KSB7XG4gICAgICAgICAgICB0YXJnZXRUb0ZvY3VzT25OZXh0UmVwYWludCA9IGVsZW1lbnQ7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGFyZ2V0VG9Gb2N1c09uTmV4dFJlcGFpbnQgPSBlbGVtZW50O1xuICAgICAgICB2YXIgd2luID0gZ2V0V2luZG93KGVsZW1lbnQpO1xuICAgICAgICBpZiAod2luKSB7XG4gICAgICAgICAgICAvLyBlbGVtZW50LmZvY3VzKCkgaXMgYSBuby1vcCBpZiB0aGUgZWxlbWVudCBpcyBubyBsb25nZXIgaW4gdGhlIERPTSwgbWVhbmluZyB0aGlzIGlzIGFsd2F5cyBzYWZlXG4gICAgICAgICAgICB3aW4ucmVxdWVzdEFuaW1hdGlvbkZyYW1lKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB0YXJnZXRUb0ZvY3VzT25OZXh0UmVwYWludCAmJiB0YXJnZXRUb0ZvY3VzT25OZXh0UmVwYWludC5mb2N1cygpO1xuICAgICAgICAgICAgICAgIC8vIFdlIGFyZSBkb25lIGZvY3VzaW5nIGZvciB0aGlzIGZyYW1lLCBzbyByZXNldCB0aGUgcXVldWVkIGZvY3VzIGVsZW1lbnRcbiAgICAgICAgICAgICAgICB0YXJnZXRUb0ZvY3VzT25OZXh0UmVwYWludCA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxufVxuLyoqXG4gKiBGaW5kcyB0aGUgY2xvc2VzdCBmb2N1c2FibGUgZWxlbWVudCB2aWEgYW4gaW5kZXggcGF0aCBmcm9tIGEgcGFyZW50LiBTZWVcbiAqIGBnZXRFbGVtZW50SW5kZXhQYXRoYCBmb3IgZ2V0dGluZyBhbiBpbmRleCBwYXRoIGZyb20gYW4gZWxlbWVudCB0byBhIGNoaWxkLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0Rm9jdXNhYmxlQnlJbmRleFBhdGgocGFyZW50LCBwYXRoKSB7XG4gICAgdmFyIGVsZW1lbnQgPSBwYXJlbnQ7XG4gICAgZm9yICh2YXIgX2kgPSAwLCBwYXRoXzEgPSBwYXRoOyBfaSA8IHBhdGhfMS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgdmFyIGluZGV4ID0gcGF0aF8xW19pXTtcbiAgICAgICAgdmFyIG5leHRDaGlsZCA9IGVsZW1lbnQuY2hpbGRyZW5bTWF0aC5taW4oaW5kZXgsIGVsZW1lbnQuY2hpbGRyZW4ubGVuZ3RoIC0gMSldO1xuICAgICAgICBpZiAoIW5leHRDaGlsZCkge1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgZWxlbWVudCA9IG5leHRDaGlsZDtcbiAgICB9XG4gICAgZWxlbWVudCA9XG4gICAgICAgIGlzRWxlbWVudFRhYmJhYmxlKGVsZW1lbnQpICYmIGlzRWxlbWVudFZpc2libGUoZWxlbWVudClcbiAgICAgICAgICAgID8gZWxlbWVudFxuICAgICAgICAgICAgOiBnZXROZXh0RWxlbWVudChwYXJlbnQsIGVsZW1lbnQsIHRydWUpIHx8IGdldFByZXZpb3VzRWxlbWVudChwYXJlbnQsIGVsZW1lbnQpO1xuICAgIHJldHVybiBlbGVtZW50O1xufVxuLyoqXG4gKiBGaW5kcyB0aGUgZWxlbWVudCBpbmRleCBwYXRoIGZyb20gYSBwYXJlbnQgZWxlbWVudCB0byBhIGNoaWxkIGVsZW1lbnQuXG4gKlxuICogSWYgeW91IGhhZCB0aGlzIG5vZGUgc3RydWN0dXJlOiBcIkEgaGFzIGNoaWxkcmVuIFtCLCBDXSBhbmQgQyBoYXMgY2hpbGQgRFwiLFxuICogdGhlIGluZGV4IHBhdGggZnJvbSBBIHRvIEQgd291bGQgYmUgWzEsIDBdLCBvciBgcGFyZW50LmNoaWRyZW5bMV0uY2hpbGRyZW5bMF1gLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0RWxlbWVudEluZGV4UGF0aChmcm9tRWxlbWVudCwgdG9FbGVtZW50KSB7XG4gICAgdmFyIHBhdGggPSBbXTtcbiAgICB3aGlsZSAodG9FbGVtZW50ICYmIGZyb21FbGVtZW50ICYmIHRvRWxlbWVudCAhPT0gZnJvbUVsZW1lbnQpIHtcbiAgICAgICAgdmFyIHBhcmVudF8xID0gZ2V0UGFyZW50KHRvRWxlbWVudCwgdHJ1ZSk7XG4gICAgICAgIGlmIChwYXJlbnRfMSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgICB9XG4gICAgICAgIHBhdGgudW5zaGlmdChBcnJheS5wcm90b3R5cGUuaW5kZXhPZi5jYWxsKHBhcmVudF8xLmNoaWxkcmVuLCB0b0VsZW1lbnQpKTtcbiAgICAgICAgdG9FbGVtZW50ID0gcGFyZW50XzE7XG4gICAgfVxuICAgIHJldHVybiBwYXRoO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Zm9jdXMuanMubWFwIiwiaW1wb3J0IHsgZmluZEVsZW1lbnRSZWN1cnNpdmUgfSBmcm9tICcuL2ZpbmRFbGVtZW50UmVjdXJzaXZlJztcbi8qKlxuICogRGV0ZXJtaW5lcyBpZiBhbiBlbGVtZW50LCBvciBhbnkgb2YgaXRzIGFuY2VzdG9ycywgY29udGFpbiB0aGUgZ2l2ZW4gYXR0cmlidXRlXG4gKiBAcGFyYW0gZWxlbWVudCAtIGVsZW1lbnQgdG8gc3RhcnQgc2VhcmNoaW5nIGF0XG4gKiBAcGFyYW0gYXR0cmlidXRlIC0gdGhlIGF0dHJpYnV0ZSB0byBzZWFyY2ggZm9yXG4gKiBAcmV0dXJucyB0aGUgdmFsdWUgb2YgdGhlIGZpcnN0IGluc3RhbmNlIGZvdW5kXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBlbGVtZW50Q29udGFpbnNBdHRyaWJ1dGUoZWxlbWVudCwgYXR0cmlidXRlKSB7XG4gICAgdmFyIGVsZW1lbnRNYXRjaCA9IGZpbmRFbGVtZW50UmVjdXJzaXZlKGVsZW1lbnQsIGZ1bmN0aW9uICh0ZXN0RWxlbWVudCkgeyByZXR1cm4gdGVzdEVsZW1lbnQuaGFzQXR0cmlidXRlKGF0dHJpYnV0ZSk7IH0pO1xuICAgIHJldHVybiBlbGVtZW50TWF0Y2ggJiYgZWxlbWVudE1hdGNoLmdldEF0dHJpYnV0ZShhdHRyaWJ1dGUpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZWxlbWVudENvbnRhaW5zQXR0cmlidXRlLmpzLm1hcCIsImltcG9ydCB7IGdldERvY3VtZW50IH0gZnJvbSAnLi9kb20vZ2V0RG9jdW1lbnQnO1xuaW1wb3J0IHsgbWVyZ2VTdHlsZXMgfSBmcm9tICdAZmx1ZW50dWkvbWVyZ2Utc3R5bGVzJztcbmltcG9ydCB7IGdldFdpbmRvdyB9IGZyb20gJy4vZG9tL2dldFdpbmRvdyc7XG52YXIgX3Njcm9sbGJhcldpZHRoO1xudmFyIF9ib2R5U2Nyb2xsRGlzYWJsZWRDb3VudCA9IDA7XG52YXIgRGlzYWJsZWRTY3JvbGxDbGFzc05hbWUgPSBtZXJnZVN0eWxlcyh7XG4gICAgb3ZlcmZsb3c6ICdoaWRkZW4gIWltcG9ydGFudCcsXG59KTtcbi8qKlxuICogUGxhY2luZyB0aGlzIGF0dHJpYnV0ZSBvbiBzY3JvbGxhYmxlIGRpdnMgb3B0aW1pemVzIGRldGVjdGlvbiB0byBrbm93XG4gKiBpZiB0aGUgZGl2IGlzIHNjcm9sbGFibGUgb3Igbm90IChnaXZlbiB3ZSBjYW4gYXZvaWQgZXhwZW5zaXZlIG9wZXJhdGlvbnNcbiAqIGxpa2UgZ2V0Q29tcHV0ZWRTdHlsZS4pXG4gKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgdmFyIERBVEFfSVNfU0NST0xMQUJMRV9BVFRSSUJVVEUgPSAnZGF0YS1pcy1zY3JvbGxhYmxlJztcbi8qKlxuICogQWxsb3dzIHRoZSB1c2VyIHRvIHNjcm9sbCB3aXRoaW4gYSBlbGVtZW50LFxuICogd2hpbGUgcHJldmVudGluZyB0aGUgdXNlciBmcm9tIHNjcm9sbGluZyB0aGUgYm9keVxuICovXG5leHBvcnQgdmFyIGFsbG93U2Nyb2xsT25FbGVtZW50ID0gZnVuY3Rpb24gKGVsZW1lbnQsIGV2ZW50cykge1xuICAgIGlmICghZWxlbWVudCkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciBfcHJldmlvdXNDbGllbnRZID0gMDtcbiAgICB2YXIgX2VsZW1lbnQgPSBudWxsO1xuICAgIC8vIHJlbWVtYmVyIHRoZSBjbGllbnRZIGZvciBmdXR1cmUgY2FsbHMgb2YgX3ByZXZlbnRPdmVyc2Nyb2xsaW5nXG4gICAgdmFyIF9zYXZlQ2xpZW50WSA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICBpZiAoZXZlbnQudGFyZ2V0VG91Y2hlcy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAgIF9wcmV2aW91c0NsaWVudFkgPSBldmVudC50YXJnZXRUb3VjaGVzWzBdLmNsaWVudFk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8vIHByZXZlbnQgdGhlIGJvZHkgZnJvbSBzY3JvbGxpbmcgd2hlbiB0aGUgdXNlciBhdHRlbXB0c1xuICAgIC8vIHRvIHNjcm9sbCBwYXN0IHRoZSB0b3Agb3IgYm90dG9tIG9mIHRoZSBlbGVtZW50XG4gICAgdmFyIF9wcmV2ZW50T3ZlcnNjcm9sbGluZyA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAvLyBvbmx5IHJlc3BvbmQgdG8gYSBzaW5nbGUtZmluZ2VyIHRvdWNoXG4gICAgICAgIGlmIChldmVudC50YXJnZXRUb3VjaGVzLmxlbmd0aCAhPT0gMSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIC8vIHByZXZlbnQgdGhlIGJvZHkgdG91Y2htb3ZlIGhhbmRsZXIgZnJvbSBmaXJpbmdcbiAgICAgICAgLy8gc28gdGhhdCBzY3JvbGxpbmcgaXMgYWxsb3dlZCB3aXRoaW4gdGhlIGVsZW1lbnRcbiAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgIGlmICghX2VsZW1lbnQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgY2xpZW50WSA9IGV2ZW50LnRhcmdldFRvdWNoZXNbMF0uY2xpZW50WSAtIF9wcmV2aW91c0NsaWVudFk7XG4gICAgICAgIHZhciBzY3JvbGxhYmxlUGFyZW50ID0gZmluZFNjcm9sbGFibGVQYXJlbnQoZXZlbnQudGFyZ2V0KTtcbiAgICAgICAgaWYgKHNjcm9sbGFibGVQYXJlbnQpIHtcbiAgICAgICAgICAgIF9lbGVtZW50ID0gc2Nyb2xsYWJsZVBhcmVudDtcbiAgICAgICAgfVxuICAgICAgICAvLyBpZiB0aGUgZWxlbWVudCBpcyBzY3JvbGxlZCB0byB0aGUgdG9wLFxuICAgICAgICAvLyBwcmV2ZW50IHRoZSB1c2VyIGZyb20gc2Nyb2xsaW5nIHVwXG4gICAgICAgIGlmIChfZWxlbWVudC5zY3JvbGxUb3AgPT09IDAgJiYgY2xpZW50WSA+IDApIHtcbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gaWYgdGhlIGVsZW1lbnQgaXMgc2Nyb2xsZWQgdG8gdGhlIGJvdHRvbSxcbiAgICAgICAgLy8gcHJldmVudCB0aGUgdXNlciBmcm9tIHNjcm9sbGluZyBkb3duXG4gICAgICAgIGlmIChfZWxlbWVudC5zY3JvbGxIZWlnaHQgLSBNYXRoLmNlaWwoX2VsZW1lbnQuc2Nyb2xsVG9wKSA8PSBfZWxlbWVudC5jbGllbnRIZWlnaHQgJiYgY2xpZW50WSA8IDApIHtcbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIGV2ZW50cy5vbihlbGVtZW50LCAndG91Y2hzdGFydCcsIF9zYXZlQ2xpZW50WSwgeyBwYXNzaXZlOiBmYWxzZSB9KTtcbiAgICBldmVudHMub24oZWxlbWVudCwgJ3RvdWNobW92ZScsIF9wcmV2ZW50T3ZlcnNjcm9sbGluZywgeyBwYXNzaXZlOiBmYWxzZSB9KTtcbiAgICBfZWxlbWVudCA9IGVsZW1lbnQ7XG59O1xuLyoqXG4gKiBTYW1lIGFzIGFsbG93U2Nyb2xsT25FbGVtZW50IGJ1dCBkb2VzIG5vdCBwcmV2ZW50IG92ZXJzY3JvbGxpbmcuXG4gKi9cbmV4cG9ydCB2YXIgYWxsb3dPdmVyc2Nyb2xsT25FbGVtZW50ID0gZnVuY3Rpb24gKGVsZW1lbnQsIGV2ZW50cykge1xuICAgIGlmICghZWxlbWVudCkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciBfYWxsb3dFbGVtZW50U2Nyb2xsID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgIH07XG4gICAgZXZlbnRzLm9uKGVsZW1lbnQsICd0b3VjaG1vdmUnLCBfYWxsb3dFbGVtZW50U2Nyb2xsLCB7IHBhc3NpdmU6IGZhbHNlIH0pO1xufTtcbnZhciBfZGlzYWJsZUlvc0JvZHlTY3JvbGwgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xufTtcbi8qKlxuICogRGlzYWJsZXMgdGhlIGJvZHkgc2Nyb2xsaW5nLlxuICpcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRpc2FibGVCb2R5U2Nyb2xsKCkge1xuICAgIHZhciBkb2MgPSBnZXREb2N1bWVudCgpO1xuICAgIGlmIChkb2MgJiYgZG9jLmJvZHkgJiYgIV9ib2R5U2Nyb2xsRGlzYWJsZWRDb3VudCkge1xuICAgICAgICBkb2MuYm9keS5jbGFzc0xpc3QuYWRkKERpc2FibGVkU2Nyb2xsQ2xhc3NOYW1lKTtcbiAgICAgICAgZG9jLmJvZHkuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2htb3ZlJywgX2Rpc2FibGVJb3NCb2R5U2Nyb2xsLCB7IHBhc3NpdmU6IGZhbHNlLCBjYXB0dXJlOiBmYWxzZSB9KTtcbiAgICB9XG4gICAgX2JvZHlTY3JvbGxEaXNhYmxlZENvdW50Kys7XG59XG4vKipcbiAqIEVuYWJsZXMgdGhlIGJvZHkgc2Nyb2xsaW5nLlxuICpcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGVuYWJsZUJvZHlTY3JvbGwoKSB7XG4gICAgaWYgKF9ib2R5U2Nyb2xsRGlzYWJsZWRDb3VudCA+IDApIHtcbiAgICAgICAgdmFyIGRvYyA9IGdldERvY3VtZW50KCk7XG4gICAgICAgIGlmIChkb2MgJiYgZG9jLmJvZHkgJiYgX2JvZHlTY3JvbGxEaXNhYmxlZENvdW50ID09PSAxKSB7XG4gICAgICAgICAgICBkb2MuYm9keS5jbGFzc0xpc3QucmVtb3ZlKERpc2FibGVkU2Nyb2xsQ2xhc3NOYW1lKTtcbiAgICAgICAgICAgIGRvYy5ib2R5LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RvdWNobW92ZScsIF9kaXNhYmxlSW9zQm9keVNjcm9sbCk7XG4gICAgICAgIH1cbiAgICAgICAgX2JvZHlTY3JvbGxEaXNhYmxlZENvdW50LS07XG4gICAgfVxufVxuLyoqXG4gKiBDYWxjdWxhdGVzIHRoZSB3aWR0aCBvZiBhIHNjcm9sbGJhciBmb3IgdGhlIGJyb3dzZXIvb3MuXG4gKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0U2Nyb2xsYmFyV2lkdGgoKSB7XG4gICAgaWYgKF9zY3JvbGxiYXJXaWR0aCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHZhciBzY3JvbGxEaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgc2Nyb2xsRGl2LnN0eWxlLnNldFByb3BlcnR5KCd3aWR0aCcsICcxMDBweCcpO1xuICAgICAgICBzY3JvbGxEaXYuc3R5bGUuc2V0UHJvcGVydHkoJ2hlaWdodCcsICcxMDBweCcpO1xuICAgICAgICBzY3JvbGxEaXYuc3R5bGUuc2V0UHJvcGVydHkoJ292ZXJmbG93JywgJ3Njcm9sbCcpO1xuICAgICAgICBzY3JvbGxEaXYuc3R5bGUuc2V0UHJvcGVydHkoJ3Bvc2l0aW9uJywgJ2Fic29sdXRlJyk7XG4gICAgICAgIHNjcm9sbERpdi5zdHlsZS5zZXRQcm9wZXJ0eSgndG9wJywgJy05OTk5cHgnKTtcbiAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChzY3JvbGxEaXYpO1xuICAgICAgICAvLyBHZXQgdGhlIHNjcm9sbGJhciB3aWR0aFxuICAgICAgICBfc2Nyb2xsYmFyV2lkdGggPSBzY3JvbGxEaXYub2Zmc2V0V2lkdGggLSBzY3JvbGxEaXYuY2xpZW50V2lkdGg7XG4gICAgICAgIC8vIERlbGV0ZSB0aGUgRElWXG4gICAgICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQoc2Nyb2xsRGl2KTtcbiAgICB9XG4gICAgcmV0dXJuIF9zY3JvbGxiYXJXaWR0aDtcbn1cbi8qKlxuICogVHJhdmVyc2VzIHVwIHRoZSBET00gZm9yIHRoZSBlbGVtZW50IHdpdGggdGhlIGRhdGEtaXMtc2Nyb2xsYWJsZT10cnVlIGF0dHJpYnV0ZSwgb3IgcmV0dXJuc1xuICogZG9jdW1lbnQuYm9keS5cbiAqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBmaW5kU2Nyb2xsYWJsZVBhcmVudChzdGFydGluZ0VsZW1lbnQpIHtcbiAgICB2YXIgZWwgPSBzdGFydGluZ0VsZW1lbnQ7XG4gICAgdmFyIGRvYyA9IGdldERvY3VtZW50KHN0YXJ0aW5nRWxlbWVudCk7XG4gICAgLy8gRmlyc3QgZG8gYSBxdWljayBzY2FuIGZvciB0aGUgc2Nyb2xsYWJsZSBhdHRyaWJ1dGUuXG4gICAgd2hpbGUgKGVsICYmIGVsICE9PSBkb2MuYm9keSkge1xuICAgICAgICBpZiAoZWwuZ2V0QXR0cmlidXRlKERBVEFfSVNfU0NST0xMQUJMRV9BVFRSSUJVVEUpID09PSAndHJ1ZScpIHtcbiAgICAgICAgICAgIHJldHVybiBlbDtcbiAgICAgICAgfVxuICAgICAgICBlbCA9IGVsLnBhcmVudEVsZW1lbnQ7XG4gICAgfVxuICAgIC8vIElmIHdlIGhhdmVuJ3QgZm91bmQgaXQsIHRoZSB1c2UgdGhlIHNsb3dlciBtZXRob2Q6IGNvbXB1dGUgc3R5bGVzIHRvIGV2YWx1YXRlIGlmIG92ZXJmbG93IGlzIHNldC5cbiAgICBlbCA9IHN0YXJ0aW5nRWxlbWVudDtcbiAgICB3aGlsZSAoZWwgJiYgZWwgIT09IGRvYy5ib2R5KSB7XG4gICAgICAgIGlmIChlbC5nZXRBdHRyaWJ1dGUoREFUQV9JU19TQ1JPTExBQkxFX0FUVFJJQlVURSkgIT09ICdmYWxzZScpIHtcbiAgICAgICAgICAgIHZhciBjb21wdXRlZFN0eWxlcyA9IGdldENvbXB1dGVkU3R5bGUoZWwpO1xuICAgICAgICAgICAgdmFyIG92ZXJmbG93WSA9IGNvbXB1dGVkU3R5bGVzID8gY29tcHV0ZWRTdHlsZXMuZ2V0UHJvcGVydHlWYWx1ZSgnb3ZlcmZsb3cteScpIDogJyc7XG4gICAgICAgICAgICBpZiAob3ZlcmZsb3dZICYmIChvdmVyZmxvd1kgPT09ICdzY3JvbGwnIHx8IG92ZXJmbG93WSA9PT0gJ2F1dG8nKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBlbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbCA9IGVsLnBhcmVudEVsZW1lbnQ7XG4gICAgfVxuICAgIC8vIEZhbGwgYmFjayB0byB3aW5kb3cgc2Nyb2xsLlxuICAgIGlmICghZWwgfHwgZWwgPT09IGRvYy5ib2R5KSB7XG4gICAgICAgIGVsID0gZ2V0V2luZG93KHN0YXJ0aW5nRWxlbWVudCk7XG4gICAgfVxuICAgIHJldHVybiBlbDtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNjcm9sbC5qcy5tYXAiLCJpbXBvcnQgeyBfX2Fzc2lnbiwgX19leHRlbmRzIH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBGb2N1c1pvbmVEaXJlY3Rpb24sIEZvY3VzWm9uZVRhYmJhYmxlRWxlbWVudHMgfSBmcm9tICcuL0ZvY3VzWm9uZS50eXBlcyc7XG5pbXBvcnQgeyBLZXlDb2RlcywgY3NzLCBlbGVtZW50Q29udGFpbnMsIGdldERvY3VtZW50LCBnZXRFbGVtZW50SW5kZXhQYXRoLCBnZXRGb2N1c2FibGVCeUluZGV4UGF0aCwgZ2V0SWQsIGdldE5hdGl2ZVByb3BzLCBnZXROZXh0RWxlbWVudCwgZ2V0UGFyZW50LCBnZXRQcmV2aW91c0VsZW1lbnQsIGdldFJUTCwgaHRtbEVsZW1lbnRQcm9wZXJ0aWVzLCBpbml0aWFsaXplQ29tcG9uZW50UmVmLCBpc0VsZW1lbnRGb2N1c1N1YlpvbmUsIGlzRWxlbWVudEZvY3VzWm9uZSwgaXNFbGVtZW50VGFiYmFibGUsIHNob3VsZFdyYXBGb2N1cywgd2FybkRlcHJlY2F0aW9ucywgcG9ydGFsQ29udGFpbnNFbGVtZW50LCBnZXRXaW5kb3csIGZpbmRTY3JvbGxhYmxlUGFyZW50LCBjcmVhdGVNZXJnZWRSZWYsIH0gZnJvbSAnQGZsdWVudHVpL3V0aWxpdGllcyc7XG5pbXBvcnQgeyBtZXJnZVN0eWxlcyB9IGZyb20gJ0BmbHVlbnR1aS9tZXJnZS1zdHlsZXMnO1xuaW1wb3J0IHsgZ2V0VGhlbWUgfSBmcm9tICdAZmx1ZW50dWkvc3R5bGUtdXRpbGl0aWVzJztcbnZhciBJU19GT0NVU0FCTEVfQVRUUklCVVRFID0gJ2RhdGEtaXMtZm9jdXNhYmxlJztcbnZhciBJU19FTlRFUl9ESVNBQkxFRF9BVFRSSUJVVEUgPSAnZGF0YS1kaXNhYmxlLWNsaWNrLW9uLWVudGVyJztcbnZhciBGT0NVU1pPTkVfSURfQVRUUklCVVRFID0gJ2RhdGEtZm9jdXN6b25lLWlkJztcbnZhciBUQUJJTkRFWCA9ICd0YWJpbmRleCc7XG52YXIgTk9fVkVSVElDQUxfV1JBUCA9ICdkYXRhLW5vLXZlcnRpY2FsLXdyYXAnO1xudmFyIE5PX0hPUklaT05UQUxfV1JBUCA9ICdkYXRhLW5vLWhvcml6b250YWwtd3JhcCc7XG52YXIgTEFSR0VfRElTVEFOQ0VfRlJPTV9DRU5URVIgPSA5OTk5OTk5OTk7XG52YXIgTEFSR0VfTkVHQVRJVkVfRElTVEFOQ0VfRlJPTV9DRU5URVIgPSAtOTk5OTk5OTk5O1xudmFyIGZvY3VzWm9uZVN0eWxlcztcbnZhciBmb2N1c1pvbmVDbGFzcyA9ICdtcy1Gb2N1c1pvbmUnO1xuLyoqXG4gKiBSYWlzZXMgYSBjbGljayBvbiBhIHRhcmdldCBlbGVtZW50IGJhc2VkIG9uIGEga2V5Ym9hcmQgZXZlbnQuXG4gKi9cbmZ1bmN0aW9uIHJhaXNlQ2xpY2tGcm9tS2V5Ym9hcmRFdmVudCh0YXJnZXQsIGV2KSB7XG4gICAgdmFyIGV2ZW50O1xuICAgIGlmICh0eXBlb2YgTW91c2VFdmVudCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBldmVudCA9IG5ldyBNb3VzZUV2ZW50KCdjbGljaycsIHtcbiAgICAgICAgICAgIGN0cmxLZXk6IGV2ID09PSBudWxsIHx8IGV2ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBldi5jdHJsS2V5LFxuICAgICAgICAgICAgbWV0YUtleTogZXYgPT09IG51bGwgfHwgZXYgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGV2Lm1ldGFLZXksXG4gICAgICAgICAgICBzaGlmdEtleTogZXYgPT09IG51bGwgfHwgZXYgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGV2LnNoaWZ0S2V5LFxuICAgICAgICAgICAgYWx0S2V5OiBldiA9PT0gbnVsbCB8fCBldiA9PT0gdm9pZCAwID8gdm9pZCAwIDogZXYuYWx0S2V5LFxuICAgICAgICAgICAgYnViYmxlczogZXYgPT09IG51bGwgfHwgZXYgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGV2LmJ1YmJsZXMsXG4gICAgICAgICAgICBjYW5jZWxhYmxlOiBldiA9PT0gbnVsbCB8fCBldiA9PT0gdm9pZCAwID8gdm9pZCAwIDogZXYuY2FuY2VsYWJsZSxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBldmVudCA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50KCdNb3VzZUV2ZW50cycpO1xuICAgICAgICBldmVudC5pbml0TW91c2VFdmVudCgnY2xpY2snLCBldiA/IGV2LmJ1YmJsZXMgOiBmYWxzZSwgZXYgPyBldi5jYW5jZWxhYmxlIDogZmFsc2UsIHdpbmRvdywgLy8gbm90IHVzaW5nIGdldFdpbmRvdygpIHNpbmNlIHRoaXMgY2FuIG9ubHkgYmUgcnVuIGNsaWVudCBzaWRlXG4gICAgICAgIDAsIC8vIGRldGFpbFxuICAgICAgICAwLCAvLyBzY3JlZW4geFxuICAgICAgICAwLCAvLyBzY3JlZW4geVxuICAgICAgICAwLCAvLyBjbGllbnQgeFxuICAgICAgICAwLCAvLyBjbGllbnQgeVxuICAgICAgICBldiA/IGV2LmN0cmxLZXkgOiBmYWxzZSwgZXYgPyBldi5hbHRLZXkgOiBmYWxzZSwgZXYgPyBldi5zaGlmdEtleSA6IGZhbHNlLCBldiA/IGV2Lm1ldGFLZXkgOiBmYWxzZSwgMCwgLy8gYnV0dG9uXG4gICAgICAgIG51bGwpO1xuICAgIH1cbiAgICB0YXJnZXQuZGlzcGF0Y2hFdmVudChldmVudCk7XG59XG4vLyBIZWxwZXIgZnVuY3Rpb24gdGhhdCB3aWxsIHJldHVybiBhIGNsYXNzIGZvciB3aGVuIHRoZSByb290IGlzIGZvY3VzZWRcbmZ1bmN0aW9uIGdldFJvb3RDbGFzcygpIHtcbiAgICBpZiAoIWZvY3VzWm9uZVN0eWxlcykge1xuICAgICAgICBmb2N1c1pvbmVTdHlsZXMgPSBtZXJnZVN0eWxlcyh7XG4gICAgICAgICAgICBzZWxlY3RvcnM6IHtcbiAgICAgICAgICAgICAgICAnOmZvY3VzJzoge1xuICAgICAgICAgICAgICAgICAgICBvdXRsaW5lOiAnbm9uZScsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0sIGZvY3VzWm9uZUNsYXNzKTtcbiAgICB9XG4gICAgcmV0dXJuIGZvY3VzWm9uZVN0eWxlcztcbn1cbnZhciBfYWxsSW5zdGFuY2VzID0ge307XG52YXIgX291dGVyWm9uZXMgPSBuZXcgU2V0KCk7XG52YXIgQUxMT1dFRF9JTlBVVF9UWVBFUyA9IFsndGV4dCcsICdudW1iZXInLCAncGFzc3dvcmQnLCAnZW1haWwnLCAndGVsJywgJ3VybCcsICdzZWFyY2gnXTtcbnZhciBBTExPV19WSVJUVUFMX0VMRU1FTlRTID0gZmFsc2U7XG52YXIgRm9jdXNab25lID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhGb2N1c1pvbmUsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gRm9jdXNab25lKHByb3BzKSB7XG4gICAgICAgIHZhciBfYSwgX2IsIF9jLCBfZDtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgcHJvcHMpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLl9yb290ID0gUmVhY3QuY3JlYXRlUmVmKCk7XG4gICAgICAgIF90aGlzLl9tZXJnZWRSZWYgPSBjcmVhdGVNZXJnZWRSZWYoKTtcbiAgICAgICAgX3RoaXMuX29uRm9jdXMgPSBmdW5jdGlvbiAoZXYpIHtcbiAgICAgICAgICAgIGlmIChfdGhpcy5fcG9ydGFsQ29udGFpbnNFbGVtZW50KGV2LnRhcmdldCkpIHtcbiAgICAgICAgICAgICAgICAvLyBJZiB0aGUgZXZlbnQgdGFyZ2V0IGlzIGluc2lkZSBhIHBvcnRhbCBkbyBub3QgcHJvY2VzcyB0aGUgZXZlbnQuXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIF9hID0gX3RoaXMucHJvcHMsIG9uQWN0aXZlRWxlbWVudENoYW5nZWQgPSBfYS5vbkFjdGl2ZUVsZW1lbnRDaGFuZ2VkLCBcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBkZXByZWNhdGlvbi9kZXByZWNhdGlvblxuICAgICAgICAgICAgZG9Ob3RBbGxvd0ZvY3VzRXZlbnRUb1Byb3BhZ2F0ZSA9IF9hLmRvTm90QWxsb3dGb2N1c0V2ZW50VG9Qcm9wYWdhdGUsIHN0b3BGb2N1c1Byb3BhZ2F0aW9uID0gX2Euc3RvcEZvY3VzUHJvcGFnYXRpb24sIFxuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGRlcHJlY2F0aW9uL2RlcHJlY2F0aW9uXG4gICAgICAgICAgICBvbkZvY3VzTm90aWZpY2F0aW9uID0gX2Eub25Gb2N1c05vdGlmaWNhdGlvbiwgb25Gb2N1cyA9IF9hLm9uRm9jdXMsIHNob3VsZEZvY3VzSW5uZXJFbGVtZW50V2hlblJlY2VpdmVkRm9jdXMgPSBfYS5zaG91bGRGb2N1c0lubmVyRWxlbWVudFdoZW5SZWNlaXZlZEZvY3VzLCBkZWZhdWx0VGFiYmFibGVFbGVtZW50ID0gX2EuZGVmYXVsdFRhYmJhYmxlRWxlbWVudDtcbiAgICAgICAgICAgIHZhciBpc0ltbWVkaWF0ZURlc2NlbmRhbnQgPSBfdGhpcy5faXNJbW1lZGlhdGVEZXNjZW5kYW50T2Zab25lKGV2LnRhcmdldCk7XG4gICAgICAgICAgICB2YXIgbmV3QWN0aXZlRWxlbWVudDtcbiAgICAgICAgICAgIGlmIChpc0ltbWVkaWF0ZURlc2NlbmRhbnQpIHtcbiAgICAgICAgICAgICAgICBuZXdBY3RpdmVFbGVtZW50ID0gZXYudGFyZ2V0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdmFyIHBhcmVudEVsZW1lbnQgPSBldi50YXJnZXQ7XG4gICAgICAgICAgICAgICAgd2hpbGUgKHBhcmVudEVsZW1lbnQgJiYgcGFyZW50RWxlbWVudCAhPT0gX3RoaXMuX3Jvb3QuY3VycmVudCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoaXNFbGVtZW50VGFiYmFibGUocGFyZW50RWxlbWVudCkgJiYgX3RoaXMuX2lzSW1tZWRpYXRlRGVzY2VuZGFudE9mWm9uZShwYXJlbnRFbGVtZW50KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbmV3QWN0aXZlRWxlbWVudCA9IHBhcmVudEVsZW1lbnQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBwYXJlbnRFbGVtZW50ID0gZ2V0UGFyZW50KHBhcmVudEVsZW1lbnQsIEFMTE9XX1ZJUlRVQUxfRUxFTUVOVFMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIElmIGFuIGlubmVyIGZvY3VzYWJsZSBlbGVtZW50IHNob3VsZCBiZSBmb2N1c2VkIHdoZW4gRm9jdXNab25lIGNvbnRhaW5lciByZWNlaXZlcyBmb2N1c1xuICAgICAgICAgICAgaWYgKHNob3VsZEZvY3VzSW5uZXJFbGVtZW50V2hlblJlY2VpdmVkRm9jdXMgJiYgZXYudGFyZ2V0ID09PSBfdGhpcy5fcm9vdC5jdXJyZW50KSB7XG4gICAgICAgICAgICAgICAgdmFyIG1heWJlRWxlbWVudFRvRm9jdXMgPSBkZWZhdWx0VGFiYmFibGVFbGVtZW50ICYmXG4gICAgICAgICAgICAgICAgICAgIHR5cGVvZiBkZWZhdWx0VGFiYmFibGVFbGVtZW50ID09PSAnZnVuY3Rpb24nICYmXG4gICAgICAgICAgICAgICAgICAgIF90aGlzLl9yb290LmN1cnJlbnQgJiZcbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdFRhYmJhYmxlRWxlbWVudChfdGhpcy5fcm9vdC5jdXJyZW50KTtcbiAgICAgICAgICAgICAgICAvLyB0cnkgdG8gZm9jdXMgZGVmYXVsdFRhYmJhYmxlIGVsZW1lbnRcbiAgICAgICAgICAgICAgICBpZiAobWF5YmVFbGVtZW50VG9Gb2N1cyAmJiBpc0VsZW1lbnRUYWJiYWJsZShtYXliZUVsZW1lbnRUb0ZvY3VzKSkge1xuICAgICAgICAgICAgICAgICAgICBuZXdBY3RpdmVFbGVtZW50ID0gbWF5YmVFbGVtZW50VG9Gb2N1cztcbiAgICAgICAgICAgICAgICAgICAgbWF5YmVFbGVtZW50VG9Gb2N1cy5mb2N1cygpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gZm9yY2UgZm9jdXMgb24gZmlyc3QgZm9jdXNhYmxlIGVsZW1lbnRcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuZm9jdXModHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChfdGhpcy5fYWN0aXZlRWxlbWVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gc2V0IHRvIG51bGwgYXMgbmV3IGFjdGl2ZSBlbGVtZW50IHdhcyBoYW5kbGVkIGluIG1ldGhvZCBhYm92ZVxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3QWN0aXZlRWxlbWVudCA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgaW5pdGlhbEVsZW1lbnRGb2N1c2VkID0gIV90aGlzLl9hY3RpdmVFbGVtZW50O1xuICAgICAgICAgICAgLy8gSWYgdGhlIG5ldyBhY3RpdmUgZWxlbWVudCBpcyBhIGNoaWxkIG9mIHRoaXMgem9uZSBhbmQgcmVjZWl2ZWQgZm9jdXMsXG4gICAgICAgICAgICAvLyB1cGRhdGUgYWxpZ25tZW50IGFuIGltbWVkaWF0ZSBkZXNjZW5kYW50XG4gICAgICAgICAgICBpZiAobmV3QWN0aXZlRWxlbWVudCAmJiBuZXdBY3RpdmVFbGVtZW50ICE9PSBfdGhpcy5fYWN0aXZlRWxlbWVudCkge1xuICAgICAgICAgICAgICAgIGlmIChpc0ltbWVkaWF0ZURlc2NlbmRhbnQgfHwgaW5pdGlhbEVsZW1lbnRGb2N1c2VkKSB7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLl9zZXRGb2N1c0FsaWdubWVudChuZXdBY3RpdmVFbGVtZW50LCB0cnVlLCB0cnVlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgX3RoaXMuX2FjdGl2ZUVsZW1lbnQgPSBuZXdBY3RpdmVFbGVtZW50O1xuICAgICAgICAgICAgICAgIGlmIChpbml0aWFsRWxlbWVudEZvY3VzZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuX3VwZGF0ZVRhYkluZGV4ZXMoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAob25BY3RpdmVFbGVtZW50Q2hhbmdlZCkge1xuICAgICAgICAgICAgICAgIG9uQWN0aXZlRWxlbWVudENoYW5nZWQoX3RoaXMuX2FjdGl2ZUVsZW1lbnQsIGV2KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzdG9wRm9jdXNQcm9wYWdhdGlvbiB8fCBkb05vdEFsbG93Rm9jdXNFdmVudFRvUHJvcGFnYXRlKSB7XG4gICAgICAgICAgICAgICAgZXYuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAob25Gb2N1cykge1xuICAgICAgICAgICAgICAgIG9uRm9jdXMoZXYpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAob25Gb2N1c05vdGlmaWNhdGlvbikge1xuICAgICAgICAgICAgICAgIG9uRm9jdXNOb3RpZmljYXRpb24oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgX3RoaXMuX29uQmx1ciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIF90aGlzLl9zZXRQYXJrZWRGb2N1cyhmYWxzZSk7XG4gICAgICAgIH07XG4gICAgICAgIF90aGlzLl9vbk1vdXNlRG93biA9IGZ1bmN0aW9uIChldikge1xuICAgICAgICAgICAgaWYgKF90aGlzLl9wb3J0YWxDb250YWluc0VsZW1lbnQoZXYudGFyZ2V0KSkge1xuICAgICAgICAgICAgICAgIC8vIElmIHRoZSBldmVudCB0YXJnZXQgaXMgaW5zaWRlIGEgcG9ydGFsIGRvIG5vdCBwcm9jZXNzIHRoZSBldmVudC5cbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgZGlzYWJsZWQgPSBfdGhpcy5wcm9wcy5kaXNhYmxlZDtcbiAgICAgICAgICAgIGlmIChkaXNhYmxlZCkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciB0YXJnZXQgPSBldi50YXJnZXQ7XG4gICAgICAgICAgICB2YXIgcGF0aCA9IFtdO1xuICAgICAgICAgICAgd2hpbGUgKHRhcmdldCAmJiB0YXJnZXQgIT09IF90aGlzLl9yb290LmN1cnJlbnQpIHtcbiAgICAgICAgICAgICAgICBwYXRoLnB1c2godGFyZ2V0KTtcbiAgICAgICAgICAgICAgICB0YXJnZXQgPSBnZXRQYXJlbnQodGFyZ2V0LCBBTExPV19WSVJUVUFMX0VMRU1FTlRTKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHdoaWxlIChwYXRoLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIHRhcmdldCA9IHBhdGgucG9wKCk7XG4gICAgICAgICAgICAgICAgaWYgKHRhcmdldCAmJiBpc0VsZW1lbnRUYWJiYWJsZSh0YXJnZXQpKSB7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLl9zZXRBY3RpdmVFbGVtZW50KHRhcmdldCwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChpc0VsZW1lbnRGb2N1c1pvbmUodGFyZ2V0KSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBTdG9wIGhlcmUgc2luY2UgdGhlIGZvY3VzIHpvbmUgd2lsbCB0YWtlIGNhcmUgb2YgaXRzIG93biBjaGlsZHJlbi5cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICAvKipcbiAgICAgICAgICogSGFuZGxlIHRoZSBrZXlzdHJva2VzLlxuICAgICAgICAgKi9cbiAgICAgICAgX3RoaXMuX29uS2V5RG93biA9IGZ1bmN0aW9uIChldiwgdGhlbWUpIHtcbiAgICAgICAgICAgIGlmIChfdGhpcy5fcG9ydGFsQ29udGFpbnNFbGVtZW50KGV2LnRhcmdldCkpIHtcbiAgICAgICAgICAgICAgICAvLyBJZiB0aGUgZXZlbnQgdGFyZ2V0IGlzIGluc2lkZSBhIHBvcnRhbCBkbyBub3QgcHJvY2VzcyB0aGUgZXZlbnQuXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGRlcHJlY2F0aW9uL2RlcHJlY2F0aW9uXG4gICAgICAgICAgICB2YXIgX2EgPSBfdGhpcy5wcm9wcywgZGlyZWN0aW9uID0gX2EuZGlyZWN0aW9uLCBkaXNhYmxlZCA9IF9hLmRpc2FibGVkLCBpc0lubmVyWm9uZUtleXN0cm9rZSA9IF9hLmlzSW5uZXJab25lS2V5c3Ryb2tlLCBwYWdpbmdTdXBwb3J0RGlzYWJsZWQgPSBfYS5wYWdpbmdTdXBwb3J0RGlzYWJsZWQsIHNob3VsZEVudGVySW5uZXJab25lID0gX2Euc2hvdWxkRW50ZXJJbm5lclpvbmU7XG4gICAgICAgICAgICBpZiAoZGlzYWJsZWQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoX3RoaXMucHJvcHMub25LZXlEb3duKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMucHJvcHMub25LZXlEb3duKGV2KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIElmIHRoZSBkZWZhdWx0IGhhcyBiZWVuIHByZXZlbnRlZCwgZG8gbm90IHByb2Nlc3Mga2V5Ym9hcmQgZXZlbnRzLlxuICAgICAgICAgICAgaWYgKGV2LmlzRGVmYXVsdFByZXZlbnRlZCgpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKF90aGlzLl9nZXREb2N1bWVudCgpLmFjdGl2ZUVsZW1lbnQgPT09IF90aGlzLl9yb290LmN1cnJlbnQgJiYgX3RoaXMuX2lzSW5uZXJab25lKSB7XG4gICAgICAgICAgICAgICAgLy8gSWYgdGhpcyBlbGVtZW50IGhhcyBmb2N1cywgaXQgaXMgYmVpbmcgY29udHJvbGxlZCBieSBhIHBhcmVudC5cbiAgICAgICAgICAgICAgICAvLyBJZ25vcmUgdGhlIGtleXN0cm9rZS5cbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoKChzaG91bGRFbnRlcklubmVyWm9uZSAmJiBzaG91bGRFbnRlcklubmVyWm9uZShldikpIHx8IChpc0lubmVyWm9uZUtleXN0cm9rZSAmJiBpc0lubmVyWm9uZUtleXN0cm9rZShldikpKSAmJlxuICAgICAgICAgICAgICAgIF90aGlzLl9pc0ltbWVkaWF0ZURlc2NlbmRhbnRPZlpvbmUoZXYudGFyZ2V0KSkge1xuICAgICAgICAgICAgICAgIC8vIFRyeSB0byBmb2N1c1xuICAgICAgICAgICAgICAgIHZhciBpbm5lclpvbmUgPSBfdGhpcy5fZ2V0Rmlyc3RJbm5lclpvbmUoKTtcbiAgICAgICAgICAgICAgICBpZiAoaW5uZXJab25lKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghaW5uZXJab25lLmZvY3VzKHRydWUpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoaXNFbGVtZW50Rm9jdXNTdWJab25lKGV2LnRhcmdldCkpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFfdGhpcy5mb2N1c0VsZW1lbnQoZ2V0TmV4dEVsZW1lbnQoZXYudGFyZ2V0LCBldi50YXJnZXQuZmlyc3RDaGlsZCwgdHJ1ZSkpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChldi5hbHRLZXkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQGZsdWVudHVpL2RlcHJlY2F0ZWQta2V5Ym9hcmQtZXZlbnQtcHJvcHMsIGRlcHJlY2F0aW9uL2RlcHJlY2F0aW9uXG4gICAgICAgICAgICAgICAgc3dpdGNoIChldi53aGljaCkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIEtleUNvZGVzLnNwYWNlOlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF90aGlzLl9zaG91bGRSYWlzZUNsaWNrc09uU3BhY2UgJiYgX3RoaXMuX3RyeUludm9rZUNsaWNrRm9yRm9jdXNhYmxlKGV2LnRhcmdldCwgZXYpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgS2V5Q29kZXMubGVmdDpcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkaXJlY3Rpb24gIT09IEZvY3VzWm9uZURpcmVjdGlvbi52ZXJ0aWNhbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLl9wcmV2ZW50RGVmYXVsdFdoZW5IYW5kbGVkKGV2KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoX3RoaXMuX21vdmVGb2N1c0xlZnQodGhlbWUpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBLZXlDb2Rlcy5yaWdodDpcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkaXJlY3Rpb24gIT09IEZvY3VzWm9uZURpcmVjdGlvbi52ZXJ0aWNhbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLl9wcmV2ZW50RGVmYXVsdFdoZW5IYW5kbGVkKGV2KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoX3RoaXMuX21vdmVGb2N1c1JpZ2h0KHRoZW1lKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgS2V5Q29kZXMudXA6XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGlyZWN0aW9uICE9PSBGb2N1c1pvbmVEaXJlY3Rpb24uaG9yaXpvbnRhbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLl9wcmV2ZW50RGVmYXVsdFdoZW5IYW5kbGVkKGV2KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoX3RoaXMuX21vdmVGb2N1c1VwKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIEtleUNvZGVzLmRvd246XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGlyZWN0aW9uICE9PSBGb2N1c1pvbmVEaXJlY3Rpb24uaG9yaXpvbnRhbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLl9wcmV2ZW50RGVmYXVsdFdoZW5IYW5kbGVkKGV2KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoX3RoaXMuX21vdmVGb2N1c0Rvd24oKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgS2V5Q29kZXMucGFnZURvd246XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXBhZ2luZ1N1cHBvcnREaXNhYmxlZCAmJiBfdGhpcy5fbW92ZUZvY3VzUGFnaW5nKHRydWUpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgS2V5Q29kZXMucGFnZVVwOlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFwYWdpbmdTdXBwb3J0RGlzYWJsZWQgJiYgX3RoaXMuX21vdmVGb2N1c1BhZ2luZyhmYWxzZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBLZXlDb2Rlcy50YWI6XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZGVwcmVjYXRpb24vZGVwcmVjYXRpb25cbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLnByb3BzLmFsbG93VGFiS2V5IHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMucHJvcHMuaGFuZGxlVGFiS2V5ID09PSBGb2N1c1pvbmVUYWJiYWJsZUVsZW1lbnRzLmFsbCB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIChfdGhpcy5wcm9wcy5oYW5kbGVUYWJLZXkgPT09IEZvY3VzWm9uZVRhYmJhYmxlRWxlbWVudHMuaW5wdXRPbmx5ICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLl9pc0VsZW1lbnRJbnB1dChldi50YXJnZXQpKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBmb2N1c0NoYW5nZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5fcHJvY2Vzc2luZ1RhYktleSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRpcmVjdGlvbiA9PT0gRm9jdXNab25lRGlyZWN0aW9uLnZlcnRpY2FsIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICFfdGhpcy5fc2hvdWxkV3JhcEZvY3VzKF90aGlzLl9hY3RpdmVFbGVtZW50LCBOT19IT1JJWk9OVEFMX1dSQVApKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvY3VzQ2hhbmdlZCA9IGV2LnNoaWZ0S2V5ID8gX3RoaXMuX21vdmVGb2N1c1VwKCkgOiBfdGhpcy5fbW92ZUZvY3VzRG93bigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRhYldpdGhEaXJlY3Rpb24gPSBnZXRSVEwodGhlbWUpID8gIWV2LnNoaWZ0S2V5IDogZXYuc2hpZnRLZXk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvY3VzQ2hhbmdlZCA9IHRhYldpdGhEaXJlY3Rpb24gPyBfdGhpcy5fbW92ZUZvY3VzTGVmdCh0aGVtZSkgOiBfdGhpcy5fbW92ZUZvY3VzUmlnaHQodGhlbWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5fcHJvY2Vzc2luZ1RhYktleSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmb2N1c0NoYW5nZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKF90aGlzLnByb3BzLnNob3VsZFJlc2V0QWN0aXZlRWxlbWVudFdoZW5UYWJGcm9tWm9uZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5fYWN0aXZlRWxlbWVudCA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIEtleUNvZGVzLmhvbWU6XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoX3RoaXMuX2lzQ29udGVudEVkaXRhYmxlRWxlbWVudChldi50YXJnZXQpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKF90aGlzLl9pc0VsZW1lbnRJbnB1dChldi50YXJnZXQpICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICFfdGhpcy5fc2hvdWxkSW5wdXRMb3NlRm9jdXMoZXYudGFyZ2V0LCBmYWxzZSkpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGZpcnN0Q2hpbGQgPSBfdGhpcy5fcm9vdC5jdXJyZW50ICYmIF90aGlzLl9yb290LmN1cnJlbnQuZmlyc3RDaGlsZDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfdGhpcy5fcm9vdC5jdXJyZW50ICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlyc3RDaGlsZCAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLmZvY3VzRWxlbWVudChnZXROZXh0RWxlbWVudChfdGhpcy5fcm9vdC5jdXJyZW50LCBmaXJzdENoaWxkLCB0cnVlKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBLZXlDb2Rlcy5lbmQ6XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoX3RoaXMuX2lzQ29udGVudEVkaXRhYmxlRWxlbWVudChldi50YXJnZXQpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKF90aGlzLl9pc0VsZW1lbnRJbnB1dChldi50YXJnZXQpICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICFfdGhpcy5fc2hvdWxkSW5wdXRMb3NlRm9jdXMoZXYudGFyZ2V0LCB0cnVlKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgbGFzdENoaWxkID0gX3RoaXMuX3Jvb3QuY3VycmVudCAmJiBfdGhpcy5fcm9vdC5jdXJyZW50Lmxhc3RDaGlsZDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfdGhpcy5fcm9vdC5jdXJyZW50ICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuZm9jdXNFbGVtZW50KGdldFByZXZpb3VzRWxlbWVudChfdGhpcy5fcm9vdC5jdXJyZW50LCBsYXN0Q2hpbGQsIHRydWUsIHRydWUsIHRydWUpKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIEtleUNvZGVzLmVudGVyOlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF90aGlzLl9zaG91bGRSYWlzZUNsaWNrc09uRW50ZXIgJiYgX3RoaXMuX3RyeUludm9rZUNsaWNrRm9yRm9jdXNhYmxlKGV2LnRhcmdldCwgZXYpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZXYucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIGV2LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICB9O1xuICAgICAgICBfdGhpcy5fZ2V0SG9yaXpvbnRhbERpc3RhbmNlRnJvbUNlbnRlciA9IGZ1bmN0aW9uIChpc0ZvcndhcmQsIGFjdGl2ZVJlY3QsIHRhcmdldFJlY3QpIHtcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBkZXByZWNhdGlvbi9kZXByZWNhdGlvblxuICAgICAgICAgICAgdmFyIGxlZnRBbGlnbm1lbnQgPSBfdGhpcy5fZm9jdXNBbGlnbm1lbnQubGVmdCB8fCBfdGhpcy5fZm9jdXNBbGlnbm1lbnQueCB8fCAwO1xuICAgICAgICAgICAgLy8gQ2xpZW50UmVjdCB2YWx1ZXMgY2FuIGJlIGZsb2F0cyB0aGF0IGRpZmZlciBieSB2ZXJ5IHNtYWxsIGZyYWN0aW9ucyBvZiBhIGRlY2ltYWwuXG4gICAgICAgICAgICAvLyBJZiB0aGUgZGlmZmVyZW5jZSBiZXR3ZWVuIHRvcCBhbmQgYm90dG9tIGFyZSB3aXRoaW4gYSBwaXhlbCB0aGVuIHdlIHNob3VsZCB0cmVhdFxuICAgICAgICAgICAgLy8gdGhlbSBhcyBlcXVpdmFsZW50IGJ5IHVzaW5nIE1hdGguZmxvb3IuIEZvciBpbnN0YW5jZSA1LjIyMjIgYW5kIDUuMjIyMjIxIHNob3VsZCBiZSBlcXVpdmFsZW50LFxuICAgICAgICAgICAgLy8gYnV0IHdpdGhvdXQgTWF0aC5GbG9vciB0aGV5IHdpbGwgYmUgaGFuZGxlZCBpbmNvcnJlY3RseS5cbiAgICAgICAgICAgIHZhciB0YXJnZXRSZWN0VG9wID0gTWF0aC5mbG9vcih0YXJnZXRSZWN0LnRvcCk7XG4gICAgICAgICAgICB2YXIgYWN0aXZlUmVjdEJvdHRvbSA9IE1hdGguZmxvb3IoYWN0aXZlUmVjdC5ib3R0b20pO1xuICAgICAgICAgICAgdmFyIHRhcmdldFJlY3RCb3R0b20gPSBNYXRoLmZsb29yKHRhcmdldFJlY3QuYm90dG9tKTtcbiAgICAgICAgICAgIHZhciBhY3RpdmVSZWN0VG9wID0gTWF0aC5mbG9vcihhY3RpdmVSZWN0LnRvcCk7XG4gICAgICAgICAgICB2YXIgaXNWYWxpZENhbmRpZGF0ZU9ucGFnaW5nRG93biA9IGlzRm9yd2FyZCAmJiB0YXJnZXRSZWN0VG9wID4gYWN0aXZlUmVjdEJvdHRvbTtcbiAgICAgICAgICAgIHZhciBpc1ZhbGlkQ2FuZGlkYXRlT25wYWdpbmdVcCA9ICFpc0ZvcndhcmQgJiYgdGFyZ2V0UmVjdEJvdHRvbSA8IGFjdGl2ZVJlY3RUb3A7XG4gICAgICAgICAgICBpZiAoaXNWYWxpZENhbmRpZGF0ZU9ucGFnaW5nRG93biB8fCBpc1ZhbGlkQ2FuZGlkYXRlT25wYWdpbmdVcCkge1xuICAgICAgICAgICAgICAgIGlmIChsZWZ0QWxpZ25tZW50ID49IHRhcmdldFJlY3QubGVmdCAmJiBsZWZ0QWxpZ25tZW50IDw9IHRhcmdldFJlY3QubGVmdCArIHRhcmdldFJlY3Qud2lkdGgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBNYXRoLmFicyh0YXJnZXRSZWN0LmxlZnQgKyB0YXJnZXRSZWN0LndpZHRoIC8gMiAtIGxlZnRBbGlnbm1lbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFfdGhpcy5fc2hvdWxkV3JhcEZvY3VzKF90aGlzLl9hY3RpdmVFbGVtZW50LCBOT19WRVJUSUNBTF9XUkFQKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBMQVJHRV9ORUdBVElWRV9ESVNUQU5DRV9GUk9NX0NFTlRFUjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBMQVJHRV9ESVNUQU5DRV9GUk9NX0NFTlRFUjtcbiAgICAgICAgfTtcbiAgICAgICAgLy8gTWFuYWdlIGNvbXBvbmVudFJlZiByZXNvbHV0aW9uLlxuICAgICAgICBpbml0aWFsaXplQ29tcG9uZW50UmVmKF90aGlzKTtcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICAgIHdhcm5EZXByZWNhdGlvbnMoJ0ZvY3VzWm9uZScsIHByb3BzLCB7XG4gICAgICAgICAgICAgICAgcm9vdFByb3BzOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgYWxsb3dUYWJLZXk6ICdoYW5kbGVUYWJLZXknLFxuICAgICAgICAgICAgICAgIGVsZW1lbnRUeXBlOiAnYXMnLFxuICAgICAgICAgICAgICAgIGFyaWFEZXNjcmliZWRCeTogJ2FyaWEtZGVzY3JpYmVkYnknLFxuICAgICAgICAgICAgICAgIGFyaWFMYWJlbGxlZEJ5OiAnYXJpYS1sYWJlbGxlZGJ5JyxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIF90aGlzLl9pZCA9IGdldElkKCdGb2N1c1pvbmUnKTtcbiAgICAgICAgX3RoaXMuX2ZvY3VzQWxpZ25tZW50ID0ge1xuICAgICAgICAgICAgbGVmdDogMCxcbiAgICAgICAgICAgIHRvcDogMCxcbiAgICAgICAgfTtcbiAgICAgICAgX3RoaXMuX3Byb2Nlc3NpbmdUYWJLZXkgPSBmYWxzZTtcbiAgICAgICAgdmFyIHNob3VsZFJhaXNlQ2xpY2tzRmFsbGJhY2sgPSAoX2IgPSAoX2EgPSBwcm9wcy5zaG91bGRSYWlzZUNsaWNrcykgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogRm9jdXNab25lLmRlZmF1bHRQcm9wcy5zaG91bGRSYWlzZUNsaWNrcykgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogdHJ1ZTtcbiAgICAgICAgX3RoaXMuX3Nob3VsZFJhaXNlQ2xpY2tzT25FbnRlciA9IChfYyA9IHByb3BzLnNob3VsZFJhaXNlQ2xpY2tzT25FbnRlcikgIT09IG51bGwgJiYgX2MgIT09IHZvaWQgMCA/IF9jIDogc2hvdWxkUmFpc2VDbGlja3NGYWxsYmFjaztcbiAgICAgICAgX3RoaXMuX3Nob3VsZFJhaXNlQ2xpY2tzT25TcGFjZSA9IChfZCA9IHByb3BzLnNob3VsZFJhaXNlQ2xpY2tzT25TcGFjZSkgIT09IG51bGwgJiYgX2QgIT09IHZvaWQgMCA/IF9kIDogc2hvdWxkUmFpc2VDbGlja3NGYWxsYmFjaztcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICAvKiogVXNlZCBmb3IgdGVzdGluZyBwdXJwb3NlcyBvbmx5LiAqL1xuICAgIEZvY3VzWm9uZS5nZXRPdXRlclpvbmVzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gX291dGVyWm9uZXMuc2l6ZTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEhhbmRsZSBnbG9iYWwgdGFiIHByZXNzZXMgc28gdGhhdCB3ZSBjYW4gcGF0Y2ggdGFiaW5kZXhlcyBvbiB0aGUgZmx5LlxuICAgICAqIEhFQURTIFVQOiBUaGlzIG11c3Qgbm90IGJlIGFuIGFycm93IGZ1bmN0aW9uIGluIG9yZGVyIHRvIGJlIHJlZmVyZW50aWFsbHkgZXF1YWwgYW1vbmcgaW5zdGFuY2VzXG4gICAgICogZm9yIHJlZiBjb3VudGluZyB0byB3b3JrIGNvcnJlY3RseSFcbiAgICAgKi9cbiAgICBGb2N1c1pvbmUuX29uS2V5RG93bkNhcHR1cmUgPSBmdW5jdGlvbiAoZXYpIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGRlcHJlY2F0aW9uL2RlcHJlY2F0aW9uLCBAZmx1ZW50dWkvZGVwcmVjYXRlZC1rZXlib2FyZC1ldmVudC1wcm9wc1xuICAgICAgICBpZiAoZXYud2hpY2ggPT09IEtleUNvZGVzLnRhYikge1xuICAgICAgICAgICAgX291dGVyWm9uZXMuZm9yRWFjaChmdW5jdGlvbiAoem9uZSkgeyByZXR1cm4gem9uZS5fdXBkYXRlVGFiSW5kZXhlcygpOyB9KTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgRm9jdXNab25lLnByb3RvdHlwZS5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHJvb3QgPSB0aGlzLl9yb290LmN1cnJlbnQ7XG4gICAgICAgIF9hbGxJbnN0YW5jZXNbdGhpcy5faWRdID0gdGhpcztcbiAgICAgICAgaWYgKHJvb3QpIHtcbiAgICAgICAgICAgIHRoaXMuX3dpbmRvd0VsZW1lbnQgPSBnZXRXaW5kb3cocm9vdCk7XG4gICAgICAgICAgICB2YXIgcGFyZW50RWxlbWVudCA9IGdldFBhcmVudChyb290LCBBTExPV19WSVJUVUFMX0VMRU1FTlRTKTtcbiAgICAgICAgICAgIHdoaWxlIChwYXJlbnRFbGVtZW50ICYmIHBhcmVudEVsZW1lbnQgIT09IHRoaXMuX2dldERvY3VtZW50KCkuYm9keSAmJiBwYXJlbnRFbGVtZW50Lm5vZGVUeXBlID09PSAxKSB7XG4gICAgICAgICAgICAgICAgaWYgKGlzRWxlbWVudEZvY3VzWm9uZShwYXJlbnRFbGVtZW50KSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9pc0lubmVyWm9uZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBwYXJlbnRFbGVtZW50ID0gZ2V0UGFyZW50KHBhcmVudEVsZW1lbnQsIEFMTE9XX1ZJUlRVQUxfRUxFTUVOVFMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCF0aGlzLl9pc0lubmVyWm9uZSkge1xuICAgICAgICAgICAgICAgIF9vdXRlclpvbmVzLmFkZCh0aGlzKTtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fd2luZG93RWxlbWVudCAmJiBfb3V0ZXJab25lcy5zaXplID09PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3dpbmRvd0VsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIEZvY3VzWm9uZS5fb25LZXlEb3duQ2FwdHVyZSwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5fcm9vdC5jdXJyZW50ICYmIHRoaXMuX3Jvb3QuY3VycmVudC5hZGRFdmVudExpc3RlbmVyKCdibHVyJywgdGhpcy5fb25CbHVyLCB0cnVlKTtcbiAgICAgICAgICAgIC8vIEFzc2lnbiBpbml0aWFsIHRhYiBpbmRleGVzIHNvIHRoYXQgd2UgY2FuIHNldCBpbml0aWFsIGZvY3VzIGFzIGFwcHJvcHJpYXRlLlxuICAgICAgICAgICAgdGhpcy5fdXBkYXRlVGFiSW5kZXhlcygpO1xuICAgICAgICAgICAgaWYgKHRoaXMucHJvcHMuZGVmYXVsdFRhYmJhYmxlRWxlbWVudCAmJiB0eXBlb2YgdGhpcy5wcm9wcy5kZWZhdWx0VGFiYmFibGVFbGVtZW50ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgIHRoaXMuX2FjdGl2ZUVsZW1lbnQgPSB0aGlzLl9nZXREb2N1bWVudCgpLnF1ZXJ5U2VsZWN0b3IodGhpcy5wcm9wcy5kZWZhdWx0VGFiYmFibGVFbGVtZW50KTtcbiAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZGVwcmVjYXRpb24vZGVwcmVjYXRpb25cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMucHJvcHMuZGVmYXVsdEFjdGl2ZUVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZGVwcmVjYXRpb24vZGVwcmVjYXRpb25cbiAgICAgICAgICAgICAgICB0aGlzLl9hY3RpdmVFbGVtZW50ID0gdGhpcy5fZ2V0RG9jdW1lbnQoKS5xdWVyeVNlbGVjdG9yKHRoaXMucHJvcHMuZGVmYXVsdEFjdGl2ZUVsZW1lbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXMucHJvcHMuc2hvdWxkRm9jdXNPbk1vdW50KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5mb2N1cygpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBGb2N1c1pvbmUucHJvdG90eXBlLmNvbXBvbmVudERpZFVwZGF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHJvb3QgPSB0aGlzLl9yb290LmN1cnJlbnQ7XG4gICAgICAgIHZhciBkb2MgPSB0aGlzLl9nZXREb2N1bWVudCgpO1xuICAgICAgICBpZiAoIXRoaXMucHJvcHMucHJldmVudEZvY3VzUmVzdG9yYXRpb24gJiZcbiAgICAgICAgICAgIGRvYyAmJlxuICAgICAgICAgICAgdGhpcy5fbGFzdEluZGV4UGF0aCAmJlxuICAgICAgICAgICAgKGRvYy5hY3RpdmVFbGVtZW50ID09PSBkb2MuYm9keSB8fCBkb2MuYWN0aXZlRWxlbWVudCA9PT0gbnVsbCB8fCBkb2MuYWN0aXZlRWxlbWVudCA9PT0gcm9vdCkpIHtcbiAgICAgICAgICAgIC8vIFRoZSBlbGVtZW50IGhhcyBiZWVuIHJlbW92ZWQgYWZ0ZXIgdGhlIHJlbmRlciwgYXR0ZW1wdCB0byByZXN0b3JlIGZvY3VzLlxuICAgICAgICAgICAgdmFyIGVsZW1lbnRUb0ZvY3VzID0gZ2V0Rm9jdXNhYmxlQnlJbmRleFBhdGgocm9vdCwgdGhpcy5fbGFzdEluZGV4UGF0aCk7XG4gICAgICAgICAgICBpZiAoZWxlbWVudFRvRm9jdXMpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9zZXRBY3RpdmVFbGVtZW50KGVsZW1lbnRUb0ZvY3VzLCB0cnVlKTtcbiAgICAgICAgICAgICAgICBlbGVtZW50VG9Gb2N1cy5mb2N1cygpO1xuICAgICAgICAgICAgICAgIHRoaXMuX3NldFBhcmtlZEZvY3VzKGZhbHNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIFdlIGhhZCBhIGZvY3VzIHBhdGggdG8gcmVzdG9yZSwgYnV0IG5vdyB0aGF0IHBhdGggaXMgdW5yZXNvbHZhYmxlLiBQYXJrIGZvY3VzXG4gICAgICAgICAgICAgICAgLy8gb24gdGhlIGNvbnRhaW5lciB1bnRpbCB3ZSBjYW4gdHJ5IGFnYWluLlxuICAgICAgICAgICAgICAgIHRoaXMuX3NldFBhcmtlZEZvY3VzKHRydWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBGb2N1c1pvbmUucHJvdG90eXBlLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBkZWxldGUgX2FsbEluc3RhbmNlc1t0aGlzLl9pZF07XG4gICAgICAgIGlmICghdGhpcy5faXNJbm5lclpvbmUpIHtcbiAgICAgICAgICAgIF9vdXRlclpvbmVzLmRlbGV0ZSh0aGlzKTtcbiAgICAgICAgICAgIC8vIElmIHRoaXMgaXMgdGhlIGxhc3Qgb3V0ZXIgem9uZSwgcmVtb3ZlIHRoZSBrZXlkb3duIGxpc3RlbmVyLlxuICAgICAgICAgICAgaWYgKHRoaXMuX3dpbmRvd0VsZW1lbnQgJiYgX291dGVyWm9uZXMuc2l6ZSA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3dpbmRvd0VsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIEZvY3VzWm9uZS5fb25LZXlEb3duQ2FwdHVyZSwgdHJ1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX3Jvb3QuY3VycmVudCkge1xuICAgICAgICAgICAgdGhpcy5fcm9vdC5jdXJyZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2JsdXInLCB0aGlzLl9vbkJsdXIsIHRydWUpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2FjdGl2ZUVsZW1lbnQgPSBudWxsO1xuICAgICAgICB0aGlzLl9kZWZhdWx0Rm9jdXNFbGVtZW50ID0gbnVsbDtcbiAgICB9O1xuICAgIEZvY3VzWm9uZS5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZGVwcmVjYXRpb24vZGVwcmVjYXRpb25cbiAgICAgICAgdmFyIF9hID0gdGhpcy5wcm9wcywgdGFnID0gX2EuYXMsIGVsZW1lbnRUeXBlID0gX2EuZWxlbWVudFR5cGUsIHJvb3RQcm9wcyA9IF9hLnJvb3RQcm9wcywgYXJpYURlc2NyaWJlZEJ5ID0gX2EuYXJpYURlc2NyaWJlZEJ5LCBhcmlhTGFiZWxsZWRCeSA9IF9hLmFyaWFMYWJlbGxlZEJ5LCBjbGFzc05hbWUgPSBfYS5jbGFzc05hbWU7XG4gICAgICAgIHZhciBkaXZQcm9wcyA9IGdldE5hdGl2ZVByb3BzKHRoaXMucHJvcHMsIGh0bWxFbGVtZW50UHJvcGVydGllcyk7XG4gICAgICAgIHZhciBUYWcgPSB0YWcgfHwgZWxlbWVudFR5cGUgfHwgJ2Rpdic7XG4gICAgICAgIC8vIE5vdGUsIHJpZ2h0IGJlZm9yZSByZW5kZXJpbmcvcmVjb25jaWxpbmcgcHJvY2VlZHMsIHdlIG5lZWQgdG8gcmVjb3JkIGlmIGZvY3VzXG4gICAgICAgIC8vIHdhcyBpbiB0aGUgem9uZSBiZWZvcmUgdGhlIHVwZGF0ZS4gVGhpcyBoZWxwZXIgd2lsbCB0cmFjayB0aGlzIGFuZCwgaWYgZm9jdXNcbiAgICAgICAgLy8gd2FzIGFjdHVhbGx5IGluIHRoZSB6b25lLCB3aGF0IHRoZSBpbmRleCBwYXRoIHRvIHRoZSBlbGVtZW50IGlzIGF0IHRoaXMgdGltZS5cbiAgICAgICAgLy8gVGhlbiwgbGF0ZXIgaW4gY29tcG9uZW50RGlkVXBkYXRlLCB3ZSBjYW4gZXZhbHVhdGUgaWYgd2UgbmVlZCB0byByZXN0b3JlIGl0IGluXG4gICAgICAgIC8vIHRoZSBjYXNlIHRoZSBlbGVtZW50IHdhcyByZW1vdmVkLlxuICAgICAgICB0aGlzLl9ldmFsdWF0ZUZvY3VzQmVmb3JlUmVuZGVyKCk7XG4gICAgICAgIC8vIE9ubHkgc3VwcG9ydCBSVEwgZGVmaW5lZCBpbiBnbG9iYWwgdGhlbWUsIG5vdCBjb250ZXh0dWFsIHRoZW1lL1JUTC5cbiAgICAgICAgdmFyIHRoZW1lID0gZ2V0VGhlbWUoKTtcbiAgICAgICAgcmV0dXJuIChSZWFjdC5jcmVhdGVFbGVtZW50KFRhZywgX19hc3NpZ24oeyBcImFyaWEtbGFiZWxsZWRieVwiOiBhcmlhTGFiZWxsZWRCeSwgXCJhcmlhLWRlc2NyaWJlZGJ5XCI6IGFyaWFEZXNjcmliZWRCeSB9LCBkaXZQcm9wcywgcm9vdFByb3BzLCB7IFxuICAgICAgICAgICAgLy8gT25jZSB0aGUgZ2V0Q2xhc3NOYW1lIGNvcnJlY3RseSBtZW1vaXplcyBpbnB1dHMgdGhpcyBzaG91bGRcbiAgICAgICAgICAgIC8vIGJlIHJlcGxhY2VkIHNvIHRoYXQgY2xhc3NOYW1lIGlzIHBhc3NlZCB0byBnZXRSb290Q2xhc3MgYW5kIGlzIGluY2x1ZGVkIHRoZXJlIHNvXG4gICAgICAgICAgICAvLyB0aGUgY2xhc3MgbmFtZXMgd2lsbCBhbHdheXMgYmUgaW4gdGhlIHNhbWUgb3JkZXIuXG4gICAgICAgICAgICBjbGFzc05hbWU6IGNzcyhnZXRSb290Q2xhc3MoKSwgY2xhc3NOYW1lKSwgXG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZGVwcmVjYXRpb24vZGVwcmVjYXRpb25cbiAgICAgICAgICAgIHJlZjogdGhpcy5fbWVyZ2VkUmVmKHRoaXMucHJvcHMuZWxlbWVudFJlZiwgdGhpcy5fcm9vdCksIFwiZGF0YS1mb2N1c3pvbmUtaWRcIjogdGhpcy5faWQsIFxuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0L2pzeC1uby1iaW5kXG4gICAgICAgICAgICBvbktleURvd246IGZ1bmN0aW9uIChldikgeyByZXR1cm4gX3RoaXMuX29uS2V5RG93bihldiwgdGhlbWUpOyB9LCBvbkZvY3VzOiB0aGlzLl9vbkZvY3VzLCBvbk1vdXNlRG93bkNhcHR1cmU6IHRoaXMuX29uTW91c2VEb3duIH0pLCB0aGlzLnByb3BzLmNoaWxkcmVuKSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBTZXRzIGZvY3VzIHRvIHRoZSBmaXJzdCB0YWJiYWJsZSBpdGVtIGluIHRoZSB6b25lLlxuICAgICAqIEBwYXJhbSBmb3JjZUludG9GaXJzdEVsZW1lbnQgLSBJZiB0cnVlLCBmb2N1cyB3aWxsIGJlIGZvcmNlZCBpbnRvIHRoZSBmaXJzdCBlbGVtZW50LCBldmVuXG4gICAgICogaWYgZm9jdXMgaXMgYWxyZWFkeSBpbiB0aGUgZm9jdXMgem9uZS5cbiAgICAgKiBAcmV0dXJucyBUcnVlIGlmIGZvY3VzIGNvdWxkIGJlIHNldCB0byBhbiBhY3RpdmUgZWxlbWVudCwgZmFsc2UgaWYgbm8gb3BlcmF0aW9uIHdhcyB0YWtlbi5cbiAgICAgKi9cbiAgICBGb2N1c1pvbmUucHJvdG90eXBlLmZvY3VzID0gZnVuY3Rpb24gKGZvcmNlSW50b0ZpcnN0RWxlbWVudCkge1xuICAgICAgICBpZiAoZm9yY2VJbnRvRmlyc3RFbGVtZW50ID09PSB2b2lkIDApIHsgZm9yY2VJbnRvRmlyc3RFbGVtZW50ID0gZmFsc2U7IH1cbiAgICAgICAgaWYgKHRoaXMuX3Jvb3QuY3VycmVudCkge1xuICAgICAgICAgICAgaWYgKCFmb3JjZUludG9GaXJzdEVsZW1lbnQgJiZcbiAgICAgICAgICAgICAgICB0aGlzLl9yb290LmN1cnJlbnQuZ2V0QXR0cmlidXRlKElTX0ZPQ1VTQUJMRV9BVFRSSUJVVEUpID09PSAndHJ1ZScgJiZcbiAgICAgICAgICAgICAgICB0aGlzLl9pc0lubmVyWm9uZSkge1xuICAgICAgICAgICAgICAgIHZhciBvd25lclpvbmVFbGVtZW50ID0gdGhpcy5fZ2V0T3duZXJab25lKHRoaXMuX3Jvb3QuY3VycmVudCk7XG4gICAgICAgICAgICAgICAgaWYgKG93bmVyWm9uZUVsZW1lbnQgIT09IHRoaXMuX3Jvb3QuY3VycmVudCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgb3duZXJab25lID0gX2FsbEluc3RhbmNlc1tvd25lclpvbmVFbGVtZW50LmdldEF0dHJpYnV0ZShGT0NVU1pPTkVfSURfQVRUUklCVVRFKV07XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAhIW93bmVyWm9uZSAmJiBvd25lclpvbmUuZm9jdXNFbGVtZW50KHRoaXMuX3Jvb3QuY3VycmVudCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKCFmb3JjZUludG9GaXJzdEVsZW1lbnQgJiZcbiAgICAgICAgICAgICAgICB0aGlzLl9hY3RpdmVFbGVtZW50ICYmXG4gICAgICAgICAgICAgICAgZWxlbWVudENvbnRhaW5zKHRoaXMuX3Jvb3QuY3VycmVudCwgdGhpcy5fYWN0aXZlRWxlbWVudCkgJiZcbiAgICAgICAgICAgICAgICBpc0VsZW1lbnRUYWJiYWJsZSh0aGlzLl9hY3RpdmVFbGVtZW50KSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2FjdGl2ZUVsZW1lbnQuZm9jdXMoKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHZhciBmaXJzdENoaWxkID0gdGhpcy5fcm9vdC5jdXJyZW50LmZpcnN0Q2hpbGQ7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZm9jdXNFbGVtZW50KGdldE5leHRFbGVtZW50KHRoaXMuX3Jvb3QuY3VycmVudCwgZmlyc3RDaGlsZCwgdHJ1ZSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFNldHMgZm9jdXMgdG8gdGhlIGxhc3QgdGFiYmFibGUgaXRlbSBpbiB0aGUgem9uZS5cbiAgICAgKiBAcmV0dXJucyBUcnVlIGlmIGZvY3VzIGNvdWxkIGJlIHNldCB0byBhbiBhY3RpdmUgZWxlbWVudCwgZmFsc2UgaWYgbm8gb3BlcmF0aW9uIHdhcyB0YWtlbi5cbiAgICAgKi9cbiAgICBGb2N1c1pvbmUucHJvdG90eXBlLmZvY3VzTGFzdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMuX3Jvb3QuY3VycmVudCkge1xuICAgICAgICAgICAgdmFyIGxhc3RDaGlsZCA9IHRoaXMuX3Jvb3QuY3VycmVudCAmJiB0aGlzLl9yb290LmN1cnJlbnQubGFzdENoaWxkO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZm9jdXNFbGVtZW50KGdldFByZXZpb3VzRWxlbWVudCh0aGlzLl9yb290LmN1cnJlbnQsIGxhc3RDaGlsZCwgdHJ1ZSwgdHJ1ZSwgdHJ1ZSkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFNldHMgZm9jdXMgdG8gYSBzcGVjaWZpYyBjaGlsZCBlbGVtZW50IHdpdGhpbiB0aGUgem9uZS4gVGhpcyBjYW4gYmUgdXNlZCBpbiBjb25qdW5jdGlvbiB3aXRoXG4gICAgICogc2hvdWxkUmVjZWl2ZUZvY3VzIHRvIGNyZWF0ZSBkZWxheWVkIGZvY3VzIHNjZW5hcmlvcyAobGlrZSBhbmltYXRlIHRoZSBzY3JvbGwgcG9zaXRpb24gdG8gdGhlIGNvcnJlY3RcbiAgICAgKiBsb2NhdGlvbiBhbmQgdGhlbiBmb2N1cy4pXG4gICAgICogQHBhcmFtIGVsZW1lbnQgLSBUaGUgY2hpbGQgZWxlbWVudCB3aXRoaW4gdGhlIHpvbmUgdG8gZm9jdXMuXG4gICAgICogQHBhcmFtIGZvcmNlQWxpZ25tZW50IC0gSWYgdHJ1ZSwgZm9jdXMgYWxpZ25tZW50IHdpbGwgYmUgc2V0IGFjY29yZGluZyB0byB0aGUgZWxlbWVudCBwcm92aWRlZC5cbiAgICAgKiBAcmV0dXJucyBUcnVlIGlmIGZvY3VzIGNvdWxkIGJlIHNldCB0byBhbiBhY3RpdmUgZWxlbWVudCwgZmFsc2UgaWYgbm8gb3BlcmF0aW9uIHdhcyB0YWtlbi5cbiAgICAgKi9cbiAgICBGb2N1c1pvbmUucHJvdG90eXBlLmZvY3VzRWxlbWVudCA9IGZ1bmN0aW9uIChlbGVtZW50LCBmb3JjZUFsaWdubWVudCkge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZGVwcmVjYXRpb24vZGVwcmVjYXRpb25cbiAgICAgICAgdmFyIF9hID0gdGhpcy5wcm9wcywgb25CZWZvcmVGb2N1cyA9IF9hLm9uQmVmb3JlRm9jdXMsIHNob3VsZFJlY2VpdmVGb2N1cyA9IF9hLnNob3VsZFJlY2VpdmVGb2N1cztcbiAgICAgICAgaWYgKChzaG91bGRSZWNlaXZlRm9jdXMgJiYgIXNob3VsZFJlY2VpdmVGb2N1cyhlbGVtZW50KSkgfHwgKG9uQmVmb3JlRm9jdXMgJiYgIW9uQmVmb3JlRm9jdXMoZWxlbWVudCkpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGVsZW1lbnQpIHtcbiAgICAgICAgICAgIC8vIHdoZW4gd2Ugc2V0IGZvY3VzIHRvIGEgc3BlY2lmaWMgY2hpbGQsIHdlIHNob3VsZCByZWNhbGN1bGF0ZSB0aGUgYWxpZ25tZW50IGRlcGVuZGluZyBvbiBpdHMgcG9zaXRpb24uXG4gICAgICAgICAgICB0aGlzLl9zZXRBY3RpdmVFbGVtZW50KGVsZW1lbnQsIGZvcmNlQWxpZ25tZW50KTtcbiAgICAgICAgICAgIGlmICh0aGlzLl9hY3RpdmVFbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fYWN0aXZlRWxlbWVudC5mb2N1cygpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogRm9yY2VzIGhvcml6b250YWwgYWxpZ25tZW50IGluIHRoZSBjb250ZXh0IG9mIHZlcnRpY2FsIGFycm93aW5nIHRvIHVzZSBzcGVjaWZpYyBwb2ludCBhcyB0aGUgcmVmZXJlbmNlLFxuICAgICAqIHJhdGhlciB0aGFuIGEgY2VudGVyIGJhc2VkIG9uIHRoZSBsYXN0IGhvcml6b250YWwgbW90aW9uLlxuICAgICAqIEBwYXJhbSBwb2ludCAtIHRoZSBuZXcgcmVmZXJlbmNlIHBvaW50LlxuICAgICAqL1xuICAgIEZvY3VzWm9uZS5wcm90b3R5cGUuc2V0Rm9jdXNBbGlnbm1lbnQgPSBmdW5jdGlvbiAocG9pbnQpIHtcbiAgICAgICAgdGhpcy5fZm9jdXNBbGlnbm1lbnQgPSBwb2ludDtcbiAgICB9O1xuICAgIEZvY3VzWm9uZS5wcm90b3R5cGUuX2V2YWx1YXRlRm9jdXNCZWZvcmVSZW5kZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciByb290ID0gdGhpcy5fcm9vdC5jdXJyZW50O1xuICAgICAgICB2YXIgZG9jID0gdGhpcy5fZ2V0RG9jdW1lbnQoKTtcbiAgICAgICAgaWYgKGRvYykge1xuICAgICAgICAgICAgdmFyIGZvY3VzZWRFbGVtZW50ID0gZG9jLmFjdGl2ZUVsZW1lbnQ7XG4gICAgICAgICAgICAvLyBPbmx5IHVwZGF0ZSB0aGUgaW5kZXggcGF0aCBpZiB3ZSBhcmUgbm90IHBhcmtlZCBvbiB0aGUgcm9vdC5cbiAgICAgICAgICAgIGlmIChmb2N1c2VkRWxlbWVudCAhPT0gcm9vdCkge1xuICAgICAgICAgICAgICAgIHZhciBzaG91bGRSZXN0b3JlRm9jdXMgPSBlbGVtZW50Q29udGFpbnMocm9vdCwgZm9jdXNlZEVsZW1lbnQsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9sYXN0SW5kZXhQYXRoID0gc2hvdWxkUmVzdG9yZUZvY3VzID8gZ2V0RWxlbWVudEluZGV4UGF0aChyb290LCBmb2N1c2VkRWxlbWVudCkgOiB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFdoZW4gZm9jdXMgaXMgaW4gdGhlIHpvbmUgYXQgcmVuZGVyIHRpbWUgYnV0IHRoZW4gYWxsIGZvY3VzYWJsZSBlbGVtZW50cyBhcmUgcmVtb3ZlZCxcbiAgICAgKiB3ZSBcInBhcmtcIiBmb2N1cyB0ZW1wb3JhcmlseSBvbiB0aGUgcm9vdC4gT25jZSB3ZSB1cGRhdGUgd2l0aCBmb2N1c2FibGUgY2hpbGRyZW4sIHdlIHJlc3RvcmVcbiAgICAgKiBmb2N1cyB0byB0aGUgY2xvc2VzdCBwYXRoIGZyb20gcHJldmlvdXMuIElmIHRoZSB1c2VyIHRhYnMgYXdheSBmcm9tIHRoZSBwYXJrZWQgY29udGFpbmVyLFxuICAgICAqIHdlIHJlc3RvcmUgZm9jdXNhYmlsaXR5IHRvIHRoZSBwcmUtcGFya2VkIHN0YXRlLlxuICAgICAqL1xuICAgIEZvY3VzWm9uZS5wcm90b3R5cGUuX3NldFBhcmtlZEZvY3VzID0gZnVuY3Rpb24gKGlzUGFya2VkKSB7XG4gICAgICAgIHZhciByb290ID0gdGhpcy5fcm9vdC5jdXJyZW50O1xuICAgICAgICBpZiAocm9vdCAmJiB0aGlzLl9pc1BhcmtlZCAhPT0gaXNQYXJrZWQpIHtcbiAgICAgICAgICAgIHRoaXMuX2lzUGFya2VkID0gaXNQYXJrZWQ7XG4gICAgICAgICAgICBpZiAoaXNQYXJrZWQpIHtcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMucHJvcHMuYWxsb3dGb2N1c1Jvb3QpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fcGFya2VkVGFiSW5kZXggPSByb290LmdldEF0dHJpYnV0ZSgndGFiaW5kZXgnKTtcbiAgICAgICAgICAgICAgICAgICAgcm9vdC5zZXRBdHRyaWJ1dGUoJ3RhYmluZGV4JywgJy0xJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJvb3QuZm9jdXMoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKCF0aGlzLnByb3BzLmFsbG93Rm9jdXNSb290KSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX3BhcmtlZFRhYkluZGV4KSB7XG4gICAgICAgICAgICAgICAgICAgIHJvb3Quc2V0QXR0cmlidXRlKCd0YWJpbmRleCcsIHRoaXMuX3BhcmtlZFRhYkluZGV4KTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fcGFya2VkVGFiSW5kZXggPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByb290LnJlbW92ZUF0dHJpYnV0ZSgndGFiaW5kZXgnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEZvY3VzWm9uZS5wcm90b3R5cGUuX3NldEFjdGl2ZUVsZW1lbnQgPSBmdW5jdGlvbiAoZWxlbWVudCwgZm9yY2VBbGlnbm1lbnQpIHtcbiAgICAgICAgdmFyIHByZXZpb3VzQWN0aXZlRWxlbWVudCA9IHRoaXMuX2FjdGl2ZUVsZW1lbnQ7XG4gICAgICAgIHRoaXMuX2FjdGl2ZUVsZW1lbnQgPSBlbGVtZW50O1xuICAgICAgICBpZiAocHJldmlvdXNBY3RpdmVFbGVtZW50KSB7XG4gICAgICAgICAgICBpZiAoaXNFbGVtZW50Rm9jdXNab25lKHByZXZpb3VzQWN0aXZlRWxlbWVudCkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl91cGRhdGVUYWJJbmRleGVzKHByZXZpb3VzQWN0aXZlRWxlbWVudCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBwcmV2aW91c0FjdGl2ZUVsZW1lbnQudGFiSW5kZXggPSAtMTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5fYWN0aXZlRWxlbWVudCkge1xuICAgICAgICAgICAgaWYgKCF0aGlzLl9mb2N1c0FsaWdubWVudCB8fCBmb3JjZUFsaWdubWVudCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3NldEZvY3VzQWxpZ25tZW50KGVsZW1lbnQsIHRydWUsIHRydWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5fYWN0aXZlRWxlbWVudC50YWJJbmRleCA9IDA7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEZvY3VzWm9uZS5wcm90b3R5cGUuX3ByZXZlbnREZWZhdWx0V2hlbkhhbmRsZWQgPSBmdW5jdGlvbiAoZXYpIHtcbiAgICAgICAgdGhpcy5wcm9wcy5wcmV2ZW50RGVmYXVsdFdoZW5IYW5kbGVkICYmIGV2LnByZXZlbnREZWZhdWx0KCk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBXYWxrIHVwIHRoZSBkb20gdHJ5IHRvIGZpbmQgYSBmb2N1c2FibGUgZWxlbWVudC5cbiAgICAgKi9cbiAgICBGb2N1c1pvbmUucHJvdG90eXBlLl90cnlJbnZva2VDbGlja0ZvckZvY3VzYWJsZSA9IGZ1bmN0aW9uICh0YXJnZXRFbGVtZW50LCBldikge1xuICAgICAgICB2YXIgdGFyZ2V0ID0gdGFyZ2V0RWxlbWVudDtcbiAgICAgICAgaWYgKHRhcmdldCA9PT0gdGhpcy5fcm9vdC5jdXJyZW50KSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgZG8ge1xuICAgICAgICAgICAgaWYgKHRhcmdldC50YWdOYW1lID09PSAnQlVUVE9OJyB8fFxuICAgICAgICAgICAgICAgIHRhcmdldC50YWdOYW1lID09PSAnQScgfHxcbiAgICAgICAgICAgICAgICB0YXJnZXQudGFnTmFtZSA9PT0gJ0lOUFVUJyB8fFxuICAgICAgICAgICAgICAgIHRhcmdldC50YWdOYW1lID09PSAnVEVYVEFSRUEnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXMuX2lzSW1tZWRpYXRlRGVzY2VuZGFudE9mWm9uZSh0YXJnZXQpICYmXG4gICAgICAgICAgICAgICAgdGFyZ2V0LmdldEF0dHJpYnV0ZShJU19GT0NVU0FCTEVfQVRUUklCVVRFKSA9PT0gJ3RydWUnICYmXG4gICAgICAgICAgICAgICAgdGFyZ2V0LmdldEF0dHJpYnV0ZShJU19FTlRFUl9ESVNBQkxFRF9BVFRSSUJVVEUpICE9PSAndHJ1ZScpIHtcbiAgICAgICAgICAgICAgICByYWlzZUNsaWNrRnJvbUtleWJvYXJkRXZlbnQodGFyZ2V0LCBldik7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0YXJnZXQgPSBnZXRQYXJlbnQodGFyZ2V0LCBBTExPV19WSVJUVUFMX0VMRU1FTlRTKTtcbiAgICAgICAgfSB3aGlsZSAodGFyZ2V0ICE9PSB0aGlzLl9yb290LmN1cnJlbnQpO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBUcmF2ZXJzZSB0byBmaW5kIGZpcnN0IGNoaWxkIHpvbmUuXG4gICAgICovXG4gICAgRm9jdXNab25lLnByb3RvdHlwZS5fZ2V0Rmlyc3RJbm5lclpvbmUgPSBmdW5jdGlvbiAocm9vdEVsZW1lbnQpIHtcbiAgICAgICAgcm9vdEVsZW1lbnQgPSByb290RWxlbWVudCB8fCB0aGlzLl9hY3RpdmVFbGVtZW50IHx8IHRoaXMuX3Jvb3QuY3VycmVudDtcbiAgICAgICAgaWYgKCFyb290RWxlbWVudCkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzRWxlbWVudEZvY3VzWm9uZShyb290RWxlbWVudCkpIHtcbiAgICAgICAgICAgIHJldHVybiBfYWxsSW5zdGFuY2VzW3Jvb3RFbGVtZW50LmdldEF0dHJpYnV0ZShGT0NVU1pPTkVfSURfQVRUUklCVVRFKV07XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGNoaWxkID0gcm9vdEVsZW1lbnQuZmlyc3RFbGVtZW50Q2hpbGQ7XG4gICAgICAgIHdoaWxlIChjaGlsZCkge1xuICAgICAgICAgICAgaWYgKGlzRWxlbWVudEZvY3VzWm9uZShjaGlsZCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gX2FsbEluc3RhbmNlc1tjaGlsZC5nZXRBdHRyaWJ1dGUoRk9DVVNaT05FX0lEX0FUVFJJQlVURSldO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIG1hdGNoID0gdGhpcy5fZ2V0Rmlyc3RJbm5lclpvbmUoY2hpbGQpO1xuICAgICAgICAgICAgaWYgKG1hdGNoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG1hdGNoO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2hpbGQgPSBjaGlsZC5uZXh0RWxlbWVudFNpYmxpbmc7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfTtcbiAgICBGb2N1c1pvbmUucHJvdG90eXBlLl9tb3ZlRm9jdXMgPSBmdW5jdGlvbiAoaXNGb3J3YXJkLCBnZXREaXN0YW5jZUZyb21DZW50ZXIsIGV2LCB1c2VEZWZhdWx0V3JhcCkge1xuICAgICAgICBpZiAodXNlRGVmYXVsdFdyYXAgPT09IHZvaWQgMCkgeyB1c2VEZWZhdWx0V3JhcCA9IHRydWU7IH1cbiAgICAgICAgdmFyIGVsZW1lbnQgPSB0aGlzLl9hY3RpdmVFbGVtZW50O1xuICAgICAgICB2YXIgY2FuZGlkYXRlRGlzdGFuY2UgPSAtMTtcbiAgICAgICAgdmFyIGNhbmRpZGF0ZUVsZW1lbnQgPSB1bmRlZmluZWQ7XG4gICAgICAgIHZhciBjaGFuZ2VkRm9jdXMgPSBmYWxzZTtcbiAgICAgICAgdmFyIGlzQmlkaXJlY3Rpb25hbCA9IHRoaXMucHJvcHMuZGlyZWN0aW9uID09PSBGb2N1c1pvbmVEaXJlY3Rpb24uYmlkaXJlY3Rpb25hbDtcbiAgICAgICAgaWYgKCFlbGVtZW50IHx8ICF0aGlzLl9yb290LmN1cnJlbnQpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5faXNFbGVtZW50SW5wdXQoZWxlbWVudCkpIHtcbiAgICAgICAgICAgIGlmICghdGhpcy5fc2hvdWxkSW5wdXRMb3NlRm9jdXMoZWxlbWVudCwgaXNGb3J3YXJkKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB2YXIgYWN0aXZlUmVjdCA9IGlzQmlkaXJlY3Rpb25hbCA/IGVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkgOiBudWxsO1xuICAgICAgICBkbyB7XG4gICAgICAgICAgICBlbGVtZW50ID0gKGlzRm9yd2FyZFxuICAgICAgICAgICAgICAgID8gZ2V0TmV4dEVsZW1lbnQodGhpcy5fcm9vdC5jdXJyZW50LCBlbGVtZW50KVxuICAgICAgICAgICAgICAgIDogZ2V0UHJldmlvdXNFbGVtZW50KHRoaXMuX3Jvb3QuY3VycmVudCwgZWxlbWVudCkpO1xuICAgICAgICAgICAgaWYgKGlzQmlkaXJlY3Rpb25hbCkge1xuICAgICAgICAgICAgICAgIGlmIChlbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB0YXJnZXRSZWN0ID0gZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGVsZW1lbnREaXN0YW5jZSA9IGdldERpc3RhbmNlRnJvbUNlbnRlcihhY3RpdmVSZWN0LCB0YXJnZXRSZWN0KTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGVsZW1lbnREaXN0YW5jZSA9PT0gLTEgJiYgY2FuZGlkYXRlRGlzdGFuY2UgPT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYW5kaWRhdGVFbGVtZW50ID0gZWxlbWVudDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChlbGVtZW50RGlzdGFuY2UgPiAtMSAmJiAoY2FuZGlkYXRlRGlzdGFuY2UgPT09IC0xIHx8IGVsZW1lbnREaXN0YW5jZSA8IGNhbmRpZGF0ZURpc3RhbmNlKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FuZGlkYXRlRGlzdGFuY2UgPSBlbGVtZW50RGlzdGFuY2U7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYW5kaWRhdGVFbGVtZW50ID0gZWxlbWVudDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoY2FuZGlkYXRlRGlzdGFuY2UgPj0gMCAmJiBlbGVtZW50RGlzdGFuY2UgPCAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGNhbmRpZGF0ZUVsZW1lbnQgPSBlbGVtZW50O1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IHdoaWxlIChlbGVtZW50KTtcbiAgICAgICAgLy8gRm9jdXMgdGhlIGNsb3Nlc3QgY2FuZGlkYXRlXG4gICAgICAgIGlmIChjYW5kaWRhdGVFbGVtZW50ICYmIGNhbmRpZGF0ZUVsZW1lbnQgIT09IHRoaXMuX2FjdGl2ZUVsZW1lbnQpIHtcbiAgICAgICAgICAgIGNoYW5nZWRGb2N1cyA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLmZvY3VzRWxlbWVudChjYW5kaWRhdGVFbGVtZW50KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0aGlzLnByb3BzLmlzQ2lyY3VsYXJOYXZpZ2F0aW9uICYmIHVzZURlZmF1bHRXcmFwKSB7XG4gICAgICAgICAgICBpZiAoaXNGb3J3YXJkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZm9jdXNFbGVtZW50KGdldE5leHRFbGVtZW50KHRoaXMuX3Jvb3QuY3VycmVudCwgdGhpcy5fcm9vdC5jdXJyZW50LmZpcnN0RWxlbWVudENoaWxkLCB0cnVlKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5mb2N1c0VsZW1lbnQoZ2V0UHJldmlvdXNFbGVtZW50KHRoaXMuX3Jvb3QuY3VycmVudCwgdGhpcy5fcm9vdC5jdXJyZW50Lmxhc3RFbGVtZW50Q2hpbGQsIHRydWUsIHRydWUsIHRydWUpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY2hhbmdlZEZvY3VzO1xuICAgIH07XG4gICAgRm9jdXNab25lLnByb3RvdHlwZS5fbW92ZUZvY3VzRG93biA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdmFyIHRhcmdldFRvcCA9IC0xO1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZGVwcmVjYXRpb24vZGVwcmVjYXRpb25cbiAgICAgICAgdmFyIGxlZnRBbGlnbm1lbnQgPSB0aGlzLl9mb2N1c0FsaWdubWVudC5sZWZ0IHx8IHRoaXMuX2ZvY3VzQWxpZ25tZW50LnggfHwgMDtcbiAgICAgICAgaWYgKHRoaXMuX21vdmVGb2N1cyh0cnVlLCBmdW5jdGlvbiAoYWN0aXZlUmVjdCwgdGFyZ2V0UmVjdCkge1xuICAgICAgICAgICAgdmFyIGRpc3RhbmNlID0gLTE7XG4gICAgICAgICAgICAvLyBDbGllbnRSZWN0IHZhbHVlcyBjYW4gYmUgZmxvYXRzIHRoYXQgZGlmZmVyIGJ5IHZlcnkgc21hbGwgZnJhY3Rpb25zIG9mIGEgZGVjaW1hbC5cbiAgICAgICAgICAgIC8vIElmIHRoZSBkaWZmZXJlbmNlIGJldHdlZW4gdG9wIGFuZCBib3R0b20gYXJlIHdpdGhpbiBhIHBpeGVsIHRoZW4gd2Ugc2hvdWxkIHRyZWF0XG4gICAgICAgICAgICAvLyB0aGVtIGFzIGVxdWl2YWxlbnQgYnkgdXNpbmcgTWF0aC5mbG9vci4gRm9yIGluc3RhbmNlIDUuMjIyMiBhbmQgNS4yMjIyMjEgc2hvdWxkIGJlIGVxdWl2YWxlbnQsXG4gICAgICAgICAgICAvLyBidXQgd2l0aG91dCBNYXRoLkZsb29yIHRoZXkgd2lsbCBiZSBoYW5kbGVkIGluY29ycmVjdGx5LlxuICAgICAgICAgICAgdmFyIHRhcmdldFJlY3RUb3AgPSBNYXRoLmZsb29yKHRhcmdldFJlY3QudG9wKTtcbiAgICAgICAgICAgIHZhciBhY3RpdmVSZWN0Qm90dG9tID0gTWF0aC5mbG9vcihhY3RpdmVSZWN0LmJvdHRvbSk7XG4gICAgICAgICAgICBpZiAodGFyZ2V0UmVjdFRvcCA8IGFjdGl2ZVJlY3RCb3R0b20pIHtcbiAgICAgICAgICAgICAgICBpZiAoIV90aGlzLl9zaG91bGRXcmFwRm9jdXMoX3RoaXMuX2FjdGl2ZUVsZW1lbnQsIE5PX1ZFUlRJQ0FMX1dSQVApKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBMQVJHRV9ORUdBVElWRV9ESVNUQU5DRV9GUk9NX0NFTlRFUjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIExBUkdFX0RJU1RBTkNFX0ZST01fQ0VOVEVSO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCh0YXJnZXRUb3AgPT09IC0xICYmIHRhcmdldFJlY3RUb3AgPj0gYWN0aXZlUmVjdEJvdHRvbSkgfHwgdGFyZ2V0UmVjdFRvcCA9PT0gdGFyZ2V0VG9wKSB7XG4gICAgICAgICAgICAgICAgdGFyZ2V0VG9wID0gdGFyZ2V0UmVjdFRvcDtcbiAgICAgICAgICAgICAgICBpZiAobGVmdEFsaWdubWVudCA+PSB0YXJnZXRSZWN0LmxlZnQgJiYgbGVmdEFsaWdubWVudCA8PSB0YXJnZXRSZWN0LmxlZnQgKyB0YXJnZXRSZWN0LndpZHRoKSB7XG4gICAgICAgICAgICAgICAgICAgIGRpc3RhbmNlID0gMDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGRpc3RhbmNlID0gTWF0aC5hYnModGFyZ2V0UmVjdC5sZWZ0ICsgdGFyZ2V0UmVjdC53aWR0aCAvIDIgLSBsZWZ0QWxpZ25tZW50KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZGlzdGFuY2U7XG4gICAgICAgIH0pKSB7XG4gICAgICAgICAgICB0aGlzLl9zZXRGb2N1c0FsaWdubWVudCh0aGlzLl9hY3RpdmVFbGVtZW50LCBmYWxzZSwgdHJ1ZSk7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfTtcbiAgICBGb2N1c1pvbmUucHJvdG90eXBlLl9tb3ZlRm9jdXNVcCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdmFyIHRhcmdldFRvcCA9IC0xO1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZGVwcmVjYXRpb24vZGVwcmVjYXRpb25cbiAgICAgICAgdmFyIGxlZnRBbGlnbm1lbnQgPSB0aGlzLl9mb2N1c0FsaWdubWVudC5sZWZ0IHx8IHRoaXMuX2ZvY3VzQWxpZ25tZW50LnggfHwgMDtcbiAgICAgICAgaWYgKHRoaXMuX21vdmVGb2N1cyhmYWxzZSwgZnVuY3Rpb24gKGFjdGl2ZVJlY3QsIHRhcmdldFJlY3QpIHtcbiAgICAgICAgICAgIHZhciBkaXN0YW5jZSA9IC0xO1xuICAgICAgICAgICAgLy8gQ2xpZW50UmVjdCB2YWx1ZXMgY2FuIGJlIGZsb2F0cyB0aGF0IGRpZmZlciBieSB2ZXJ5IHNtYWxsIGZyYWN0aW9ucyBvZiBhIGRlY2ltYWwuXG4gICAgICAgICAgICAvLyBJZiB0aGUgZGlmZmVyZW5jZSBiZXR3ZWVuIHRvcCBhbmQgYm90dG9tIGFyZSB3aXRoaW4gYSBwaXhlbCB0aGVuIHdlIHNob3VsZCB0cmVhdFxuICAgICAgICAgICAgLy8gdGhlbSBhcyBlcXVpdmFsZW50IGJ5IHVzaW5nIE1hdGguZmxvb3IuIEZvciBpbnN0YW5jZSA1LjIyMjIgYW5kIDUuMjIyMjIxIHNob3VsZCBiZSBlcXVpdmFsZW50LFxuICAgICAgICAgICAgLy8gYnV0IHdpdGhvdXQgTWF0aC5GbG9vciB0aGV5IHdpbGwgYmUgaGFuZGxlZCBpbmNvcnJlY3RseS5cbiAgICAgICAgICAgIHZhciB0YXJnZXRSZWN0Qm90dG9tID0gTWF0aC5mbG9vcih0YXJnZXRSZWN0LmJvdHRvbSk7XG4gICAgICAgICAgICB2YXIgdGFyZ2V0UmVjdFRvcCA9IE1hdGguZmxvb3IodGFyZ2V0UmVjdC50b3ApO1xuICAgICAgICAgICAgdmFyIGFjdGl2ZVJlY3RUb3AgPSBNYXRoLmZsb29yKGFjdGl2ZVJlY3QudG9wKTtcbiAgICAgICAgICAgIGlmICh0YXJnZXRSZWN0Qm90dG9tID4gYWN0aXZlUmVjdFRvcCkge1xuICAgICAgICAgICAgICAgIGlmICghX3RoaXMuX3Nob3VsZFdyYXBGb2N1cyhfdGhpcy5fYWN0aXZlRWxlbWVudCwgTk9fVkVSVElDQUxfV1JBUCkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIExBUkdFX05FR0FUSVZFX0RJU1RBTkNFX0ZST01fQ0VOVEVSO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gTEFSR0VfRElTVEFOQ0VfRlJPTV9DRU5URVI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoKHRhcmdldFRvcCA9PT0gLTEgJiYgdGFyZ2V0UmVjdEJvdHRvbSA8PSBhY3RpdmVSZWN0VG9wKSB8fCB0YXJnZXRSZWN0VG9wID09PSB0YXJnZXRUb3ApIHtcbiAgICAgICAgICAgICAgICB0YXJnZXRUb3AgPSB0YXJnZXRSZWN0VG9wO1xuICAgICAgICAgICAgICAgIGlmIChsZWZ0QWxpZ25tZW50ID49IHRhcmdldFJlY3QubGVmdCAmJiBsZWZ0QWxpZ25tZW50IDw9IHRhcmdldFJlY3QubGVmdCArIHRhcmdldFJlY3Qud2lkdGgpIHtcbiAgICAgICAgICAgICAgICAgICAgZGlzdGFuY2UgPSAwO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgZGlzdGFuY2UgPSBNYXRoLmFicyh0YXJnZXRSZWN0LmxlZnQgKyB0YXJnZXRSZWN0LndpZHRoIC8gMiAtIGxlZnRBbGlnbm1lbnQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBkaXN0YW5jZTtcbiAgICAgICAgfSkpIHtcbiAgICAgICAgICAgIHRoaXMuX3NldEZvY3VzQWxpZ25tZW50KHRoaXMuX2FjdGl2ZUVsZW1lbnQsIGZhbHNlLCB0cnVlKTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9O1xuICAgIEZvY3VzWm9uZS5wcm90b3R5cGUuX21vdmVGb2N1c0xlZnQgPSBmdW5jdGlvbiAodGhlbWUpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdmFyIHNob3VsZFdyYXAgPSB0aGlzLl9zaG91bGRXcmFwRm9jdXModGhpcy5fYWN0aXZlRWxlbWVudCwgTk9fSE9SSVpPTlRBTF9XUkFQKTtcbiAgICAgICAgaWYgKHRoaXMuX21vdmVGb2N1cyhnZXRSVEwodGhlbWUpLCBmdW5jdGlvbiAoYWN0aXZlUmVjdCwgdGFyZ2V0UmVjdCkge1xuICAgICAgICAgICAgdmFyIGRpc3RhbmNlID0gLTE7XG4gICAgICAgICAgICB2YXIgdG9wQm90dG9tQ29tcGFyaXNvbjtcbiAgICAgICAgICAgIGlmIChnZXRSVEwodGhlbWUpKSB7XG4gICAgICAgICAgICAgICAgLy8gV2hlbiBpbiBSVEwsIHRoaXMgY29tcGFyaXNvbiBzaG91bGQgYmUgdGhlIHNhbWUgYXMgdGhlIG9uZSBpbiBfbW92ZUZvY3VzUmlnaHQgZm9yIExUUi5cbiAgICAgICAgICAgICAgICAvLyBHb2luZyBsZWZ0IGF0IGEgbGVmdG1vc3QgcmVjdGFuZ2xlIHdpbGwgZ28gZG93biBhIGxpbmUgaW5zdGVhZCBvZiB1cCBhIGxpbmUgbGlrZSBpbiBMVFIuXG4gICAgICAgICAgICAgICAgLy8gVGhpcyBpcyBpbXBvcnRhbnQsIGJlY2F1c2Ugd2Ugd2FudCB0byBiZSBjb21wYXJpbmcgdGhlIHRvcCBvZiB0aGUgdGFyZ2V0IHJlY3RcbiAgICAgICAgICAgICAgICAvLyB3aXRoIHRoZSBib3R0b20gb2YgdGhlIGFjdGl2ZSByZWN0LlxuICAgICAgICAgICAgICAgIHRvcEJvdHRvbUNvbXBhcmlzb24gPSBwYXJzZUZsb2F0KHRhcmdldFJlY3QudG9wLnRvRml4ZWQoMykpIDwgcGFyc2VGbG9hdChhY3RpdmVSZWN0LmJvdHRvbS50b0ZpeGVkKDMpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRvcEJvdHRvbUNvbXBhcmlzb24gPSBwYXJzZUZsb2F0KHRhcmdldFJlY3QuYm90dG9tLnRvRml4ZWQoMykpID4gcGFyc2VGbG9hdChhY3RpdmVSZWN0LnRvcC50b0ZpeGVkKDMpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0b3BCb3R0b21Db21wYXJpc29uICYmXG4gICAgICAgICAgICAgICAgdGFyZ2V0UmVjdC5yaWdodCA8PSBhY3RpdmVSZWN0LnJpZ2h0ICYmXG4gICAgICAgICAgICAgICAgX3RoaXMucHJvcHMuZGlyZWN0aW9uICE9PSBGb2N1c1pvbmVEaXJlY3Rpb24udmVydGljYWwpIHtcbiAgICAgICAgICAgICAgICBkaXN0YW5jZSA9IGFjdGl2ZVJlY3QucmlnaHQgLSB0YXJnZXRSZWN0LnJpZ2h0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoIXNob3VsZFdyYXApIHtcbiAgICAgICAgICAgICAgICBkaXN0YW5jZSA9IExBUkdFX05FR0FUSVZFX0RJU1RBTkNFX0ZST01fQ0VOVEVSO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGRpc3RhbmNlO1xuICAgICAgICB9LCB1bmRlZmluZWQgLypldiovLCBzaG91bGRXcmFwKSkge1xuICAgICAgICAgICAgdGhpcy5fc2V0Rm9jdXNBbGlnbm1lbnQodGhpcy5fYWN0aXZlRWxlbWVudCwgdHJ1ZSwgZmFsc2UpO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH07XG4gICAgRm9jdXNab25lLnByb3RvdHlwZS5fbW92ZUZvY3VzUmlnaHQgPSBmdW5jdGlvbiAodGhlbWUpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdmFyIHNob3VsZFdyYXAgPSB0aGlzLl9zaG91bGRXcmFwRm9jdXModGhpcy5fYWN0aXZlRWxlbWVudCwgTk9fSE9SSVpPTlRBTF9XUkFQKTtcbiAgICAgICAgaWYgKHRoaXMuX21vdmVGb2N1cyghZ2V0UlRMKHRoZW1lKSwgZnVuY3Rpb24gKGFjdGl2ZVJlY3QsIHRhcmdldFJlY3QpIHtcbiAgICAgICAgICAgIHZhciBkaXN0YW5jZSA9IC0xO1xuICAgICAgICAgICAgdmFyIHRvcEJvdHRvbUNvbXBhcmlzb247XG4gICAgICAgICAgICBpZiAoZ2V0UlRMKHRoZW1lKSkge1xuICAgICAgICAgICAgICAgIC8vIFdoZW4gaW4gUlRMLCB0aGlzIGNvbXBhcmlzb24gc2hvdWxkIGJlIHRoZSBzYW1lIGFzIHRoZSBvbmUgaW4gX21vdmVGb2N1c0xlZnQgZm9yIExUUi5cbiAgICAgICAgICAgICAgICAvLyBHb2luZyByaWdodCBhdCBhIHJpZ2h0bW9zdCByZWN0YW5nbGUgd2lsbCBnbyB1cCBhIGxpbmUgaW5zdGVhZCBvZiBkb3duIGEgbGluZSBsaWtlIGluIExUUi5cbiAgICAgICAgICAgICAgICAvLyBUaGlzIGlzIGltcG9ydGFudCwgYmVjYXVzZSB3ZSB3YW50IHRvIGJlIGNvbXBhcmluZyB0aGUgYm90dG9tIG9mIHRoZSB0YXJnZXQgcmVjdFxuICAgICAgICAgICAgICAgIC8vIHdpdGggdGhlIHRvcCBvZiB0aGUgYWN0aXZlIHJlY3QuXG4gICAgICAgICAgICAgICAgdG9wQm90dG9tQ29tcGFyaXNvbiA9IHBhcnNlRmxvYXQodGFyZ2V0UmVjdC5ib3R0b20udG9GaXhlZCgzKSkgPiBwYXJzZUZsb2F0KGFjdGl2ZVJlY3QudG9wLnRvRml4ZWQoMykpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdG9wQm90dG9tQ29tcGFyaXNvbiA9IHBhcnNlRmxvYXQodGFyZ2V0UmVjdC50b3AudG9GaXhlZCgzKSkgPCBwYXJzZUZsb2F0KGFjdGl2ZVJlY3QuYm90dG9tLnRvRml4ZWQoMykpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRvcEJvdHRvbUNvbXBhcmlzb24gJiZcbiAgICAgICAgICAgICAgICB0YXJnZXRSZWN0LmxlZnQgPj0gYWN0aXZlUmVjdC5sZWZ0ICYmXG4gICAgICAgICAgICAgICAgX3RoaXMucHJvcHMuZGlyZWN0aW9uICE9PSBGb2N1c1pvbmVEaXJlY3Rpb24udmVydGljYWwpIHtcbiAgICAgICAgICAgICAgICBkaXN0YW5jZSA9IHRhcmdldFJlY3QubGVmdCAtIGFjdGl2ZVJlY3QubGVmdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKCFzaG91bGRXcmFwKSB7XG4gICAgICAgICAgICAgICAgZGlzdGFuY2UgPSBMQVJHRV9ORUdBVElWRV9ESVNUQU5DRV9GUk9NX0NFTlRFUjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBkaXN0YW5jZTtcbiAgICAgICAgfSwgdW5kZWZpbmVkIC8qZXYqLywgc2hvdWxkV3JhcCkpIHtcbiAgICAgICAgICAgIHRoaXMuX3NldEZvY3VzQWxpZ25tZW50KHRoaXMuX2FjdGl2ZUVsZW1lbnQsIHRydWUsIGZhbHNlKTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9O1xuICAgIEZvY3VzWm9uZS5wcm90b3R5cGUuX21vdmVGb2N1c1BhZ2luZyA9IGZ1bmN0aW9uIChpc0ZvcndhcmQsIHVzZURlZmF1bHRXcmFwKSB7XG4gICAgICAgIGlmICh1c2VEZWZhdWx0V3JhcCA9PT0gdm9pZCAwKSB7IHVzZURlZmF1bHRXcmFwID0gdHJ1ZTsgfVxuICAgICAgICB2YXIgZWxlbWVudCA9IHRoaXMuX2FjdGl2ZUVsZW1lbnQ7XG4gICAgICAgIGlmICghZWxlbWVudCB8fCAhdGhpcy5fcm9vdC5jdXJyZW50KSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX2lzRWxlbWVudElucHV0KGVsZW1lbnQpKSB7XG4gICAgICAgICAgICBpZiAoIXRoaXMuX3Nob3VsZElucHV0TG9zZUZvY3VzKGVsZW1lbnQsIGlzRm9yd2FyZCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHNjcm9sbGFibGVQYXJlbnQgPSBmaW5kU2Nyb2xsYWJsZVBhcmVudChlbGVtZW50KTtcbiAgICAgICAgaWYgKCFzY3JvbGxhYmxlUGFyZW50KSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGNhbmRpZGF0ZURpc3RhbmNlID0gLTE7XG4gICAgICAgIHZhciBjYW5kaWRhdGVFbGVtZW50ID0gdW5kZWZpbmVkO1xuICAgICAgICB2YXIgdGFyZ2V0VG9wID0gLTE7XG4gICAgICAgIHZhciB0YXJnZXRCb3R0b20gPSAtMTtcbiAgICAgICAgdmFyIHBhZ2VzaXplID0gc2Nyb2xsYWJsZVBhcmVudC5jbGllbnRIZWlnaHQ7XG4gICAgICAgIHZhciBhY3RpdmVSZWN0ID0gZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgICAgZG8ge1xuICAgICAgICAgICAgZWxlbWVudCA9IGlzRm9yd2FyZFxuICAgICAgICAgICAgICAgID8gZ2V0TmV4dEVsZW1lbnQodGhpcy5fcm9vdC5jdXJyZW50LCBlbGVtZW50KVxuICAgICAgICAgICAgICAgIDogZ2V0UHJldmlvdXNFbGVtZW50KHRoaXMuX3Jvb3QuY3VycmVudCwgZWxlbWVudCk7XG4gICAgICAgICAgICBpZiAoZWxlbWVudCkge1xuICAgICAgICAgICAgICAgIHZhciB0YXJnZXRSZWN0ID0gZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgICAgICAgICAgICB2YXIgdGFyZ2V0UmVjdFRvcCA9IE1hdGguZmxvb3IodGFyZ2V0UmVjdC50b3ApO1xuICAgICAgICAgICAgICAgIHZhciBhY3RpdmVSZWN0Qm90dG9tID0gTWF0aC5mbG9vcihhY3RpdmVSZWN0LmJvdHRvbSk7XG4gICAgICAgICAgICAgICAgdmFyIHRhcmdldFJlY3RCb3R0b20gPSBNYXRoLmZsb29yKHRhcmdldFJlY3QuYm90dG9tKTtcbiAgICAgICAgICAgICAgICB2YXIgYWN0aXZlUmVjdFRvcCA9IE1hdGguZmxvb3IoYWN0aXZlUmVjdC50b3ApO1xuICAgICAgICAgICAgICAgIHZhciBlbGVtZW50RGlzdGFuY2UgPSB0aGlzLl9nZXRIb3Jpem9udGFsRGlzdGFuY2VGcm9tQ2VudGVyKGlzRm9yd2FyZCwgYWN0aXZlUmVjdCwgdGFyZ2V0UmVjdCk7XG4gICAgICAgICAgICAgICAgdmFyIGlzRWxlbWVudFBhc3NlZFBhZ2VTaXplT25QYWdpbmdEb3duID0gaXNGb3J3YXJkICYmIHRhcmdldFJlY3RUb3AgPiBhY3RpdmVSZWN0Qm90dG9tICsgcGFnZXNpemU7XG4gICAgICAgICAgICAgICAgdmFyIGlzRWxlbWVudFBhc3NlZFBhZ2VTaXplT25QYWdpbmdVcCA9ICFpc0ZvcndhcmQgJiYgdGFyZ2V0UmVjdEJvdHRvbSA8IGFjdGl2ZVJlY3RUb3AgLSBwYWdlc2l6ZTtcbiAgICAgICAgICAgICAgICBpZiAoaXNFbGVtZW50UGFzc2VkUGFnZVNpemVPblBhZ2luZ0Rvd24gfHwgaXNFbGVtZW50UGFzc2VkUGFnZVNpemVPblBhZ2luZ1VwKSB7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoZWxlbWVudERpc3RhbmNlID4gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gZm9yIHBhZ2luZyBkb3duXG4gICAgICAgICAgICAgICAgICAgIGlmIChpc0ZvcndhcmQgJiYgdGFyZ2V0UmVjdFRvcCA+IHRhcmdldFRvcCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0VG9wID0gdGFyZ2V0UmVjdFRvcDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhbmRpZGF0ZURpc3RhbmNlID0gZWxlbWVudERpc3RhbmNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FuZGlkYXRlRWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoIWlzRm9yd2FyZCAmJiB0YXJnZXRSZWN0Qm90dG9tIDwgdGFyZ2V0Qm90dG9tKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBmb3IgcGFnaW5nIHVwXG4gICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXRCb3R0b20gPSB0YXJnZXRSZWN0Qm90dG9tO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FuZGlkYXRlRGlzdGFuY2UgPSBlbGVtZW50RGlzdGFuY2U7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYW5kaWRhdGVFbGVtZW50ID0gZWxlbWVudDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChjYW5kaWRhdGVEaXN0YW5jZSA9PT0gLTEgfHwgZWxlbWVudERpc3RhbmNlIDw9IGNhbmRpZGF0ZURpc3RhbmNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYW5kaWRhdGVEaXN0YW5jZSA9IGVsZW1lbnREaXN0YW5jZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhbmRpZGF0ZUVsZW1lbnQgPSBlbGVtZW50O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9IHdoaWxlIChlbGVtZW50KTtcbiAgICAgICAgdmFyIGNoYW5nZWRGb2N1cyA9IGZhbHNlO1xuICAgICAgICAvLyBGb2N1cyB0aGUgY2xvc2VzdCBjYW5kaWRhdGVcbiAgICAgICAgaWYgKGNhbmRpZGF0ZUVsZW1lbnQgJiYgY2FuZGlkYXRlRWxlbWVudCAhPT0gdGhpcy5fYWN0aXZlRWxlbWVudCkge1xuICAgICAgICAgICAgY2hhbmdlZEZvY3VzID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMuZm9jdXNFbGVtZW50KGNhbmRpZGF0ZUVsZW1lbnQpO1xuICAgICAgICAgICAgdGhpcy5fc2V0Rm9jdXNBbGlnbm1lbnQoY2FuZGlkYXRlRWxlbWVudCwgZmFsc2UsIHRydWUpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHRoaXMucHJvcHMuaXNDaXJjdWxhck5hdmlnYXRpb24gJiYgdXNlRGVmYXVsdFdyYXApIHtcbiAgICAgICAgICAgIGlmIChpc0ZvcndhcmQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5mb2N1c0VsZW1lbnQoZ2V0TmV4dEVsZW1lbnQodGhpcy5fcm9vdC5jdXJyZW50LCB0aGlzLl9yb290LmN1cnJlbnQuZmlyc3RFbGVtZW50Q2hpbGQsIHRydWUpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzLmZvY3VzRWxlbWVudChnZXRQcmV2aW91c0VsZW1lbnQodGhpcy5fcm9vdC5jdXJyZW50LCB0aGlzLl9yb290LmN1cnJlbnQubGFzdEVsZW1lbnRDaGlsZCwgdHJ1ZSwgdHJ1ZSwgdHJ1ZSkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjaGFuZ2VkRm9jdXM7XG4gICAgfTtcbiAgICBGb2N1c1pvbmUucHJvdG90eXBlLl9zZXRGb2N1c0FsaWdubWVudCA9IGZ1bmN0aW9uIChlbGVtZW50LCBpc0hvcml6b250YWwsIGlzVmVydGljYWwpIHtcbiAgICAgICAgaWYgKHRoaXMucHJvcHMuZGlyZWN0aW9uID09PSBGb2N1c1pvbmVEaXJlY3Rpb24uYmlkaXJlY3Rpb25hbCAmJlxuICAgICAgICAgICAgKCF0aGlzLl9mb2N1c0FsaWdubWVudCB8fCBpc0hvcml6b250YWwgfHwgaXNWZXJ0aWNhbCkpIHtcbiAgICAgICAgICAgIHZhciByZWN0ID0gZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgICAgICAgIHZhciBsZWZ0ID0gcmVjdC5sZWZ0ICsgcmVjdC53aWR0aCAvIDI7XG4gICAgICAgICAgICB2YXIgdG9wXzEgPSByZWN0LnRvcCArIHJlY3QuaGVpZ2h0IC8gMjtcbiAgICAgICAgICAgIGlmICghdGhpcy5fZm9jdXNBbGlnbm1lbnQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9mb2N1c0FsaWdubWVudCA9IHsgbGVmdDogbGVmdCwgdG9wOiB0b3BfMSB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGlzSG9yaXpvbnRhbCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2ZvY3VzQWxpZ25tZW50LmxlZnQgPSBsZWZ0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGlzVmVydGljYWwpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9mb2N1c0FsaWdubWVudC50b3AgPSB0b3BfMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgRm9jdXNab25lLnByb3RvdHlwZS5faXNJbW1lZGlhdGVEZXNjZW5kYW50T2Zab25lID0gZnVuY3Rpb24gKGVsZW1lbnQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2dldE93bmVyWm9uZShlbGVtZW50KSA9PT0gdGhpcy5fcm9vdC5jdXJyZW50O1xuICAgIH07XG4gICAgRm9jdXNab25lLnByb3RvdHlwZS5fZ2V0T3duZXJab25lID0gZnVuY3Rpb24gKGVsZW1lbnQpIHtcbiAgICAgICAgdmFyIHBhcmVudEVsZW1lbnQgPSBnZXRQYXJlbnQoZWxlbWVudCwgQUxMT1dfVklSVFVBTF9FTEVNRU5UUyk7XG4gICAgICAgIHdoaWxlIChwYXJlbnRFbGVtZW50ICYmIHBhcmVudEVsZW1lbnQgIT09IHRoaXMuX3Jvb3QuY3VycmVudCAmJiBwYXJlbnRFbGVtZW50ICE9PSB0aGlzLl9nZXREb2N1bWVudCgpLmJvZHkpIHtcbiAgICAgICAgICAgIGlmIChpc0VsZW1lbnRGb2N1c1pvbmUocGFyZW50RWxlbWVudCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcGFyZW50RWxlbWVudDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHBhcmVudEVsZW1lbnQgPSBnZXRQYXJlbnQocGFyZW50RWxlbWVudCwgQUxMT1dfVklSVFVBTF9FTEVNRU5UUyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHBhcmVudEVsZW1lbnQ7XG4gICAgfTtcbiAgICBGb2N1c1pvbmUucHJvdG90eXBlLl91cGRhdGVUYWJJbmRleGVzID0gZnVuY3Rpb24gKGVsZW1lbnQpIHtcbiAgICAgICAgaWYgKCF0aGlzLl9hY3RpdmVFbGVtZW50ICYmXG4gICAgICAgICAgICB0aGlzLnByb3BzLmRlZmF1bHRUYWJiYWJsZUVsZW1lbnQgJiZcbiAgICAgICAgICAgIHR5cGVvZiB0aGlzLnByb3BzLmRlZmF1bHRUYWJiYWJsZUVsZW1lbnQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHRoaXMuX2FjdGl2ZUVsZW1lbnQgPSB0aGlzLnByb3BzLmRlZmF1bHRUYWJiYWJsZUVsZW1lbnQodGhpcy5fcm9vdC5jdXJyZW50KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWVsZW1lbnQgJiYgdGhpcy5fcm9vdC5jdXJyZW50KSB7XG4gICAgICAgICAgICB0aGlzLl9kZWZhdWx0Rm9jdXNFbGVtZW50ID0gbnVsbDtcbiAgICAgICAgICAgIGVsZW1lbnQgPSB0aGlzLl9yb290LmN1cnJlbnQ7XG4gICAgICAgICAgICBpZiAodGhpcy5fYWN0aXZlRWxlbWVudCAmJiAhZWxlbWVudENvbnRhaW5zKGVsZW1lbnQsIHRoaXMuX2FjdGl2ZUVsZW1lbnQpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fYWN0aXZlRWxlbWVudCA9IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gSWYgYWN0aXZlIGVsZW1lbnQgY2hhbmdlcyBzdGF0ZSB0byBkaXNhYmxlZCwgc2V0IGl0IHRvIG51bGwuXG4gICAgICAgIC8vIE90aGVyd2lzZSwgd2UgbG9zZSBrZXlib2FyZCBhY2Nlc3NpYmlsaXR5IHRvIG90aGVyIGVsZW1lbnRzIGluIGZvY3VzIHpvbmUuXG4gICAgICAgIGlmICh0aGlzLl9hY3RpdmVFbGVtZW50ICYmICFpc0VsZW1lbnRUYWJiYWJsZSh0aGlzLl9hY3RpdmVFbGVtZW50KSkge1xuICAgICAgICAgICAgdGhpcy5fYWN0aXZlRWxlbWVudCA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGNoaWxkTm9kZXMgPSBlbGVtZW50ICYmIGVsZW1lbnQuY2hpbGRyZW47XG4gICAgICAgIGZvciAodmFyIGNoaWxkSW5kZXggPSAwOyBjaGlsZE5vZGVzICYmIGNoaWxkSW5kZXggPCBjaGlsZE5vZGVzLmxlbmd0aDsgY2hpbGRJbmRleCsrKSB7XG4gICAgICAgICAgICB2YXIgY2hpbGQgPSBjaGlsZE5vZGVzW2NoaWxkSW5kZXhdO1xuICAgICAgICAgICAgaWYgKCFpc0VsZW1lbnRGb2N1c1pvbmUoY2hpbGQpKSB7XG4gICAgICAgICAgICAgICAgLy8gSWYgdGhlIGl0ZW0gaXMgZXhwbGljaXRseSBzZXQgdG8gbm90IGJlIGZvY3VzYWJsZSB0aGVuIFRBQklOREVYIG5lZWRzIHRvIGJlIHNldCB0byAtMS5cbiAgICAgICAgICAgICAgICBpZiAoY2hpbGQuZ2V0QXR0cmlidXRlICYmIGNoaWxkLmdldEF0dHJpYnV0ZShJU19GT0NVU0FCTEVfQVRUUklCVVRFKSA9PT0gJ2ZhbHNlJykge1xuICAgICAgICAgICAgICAgICAgICBjaGlsZC5zZXRBdHRyaWJ1dGUoVEFCSU5ERVgsICctMScpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoaXNFbGVtZW50VGFiYmFibGUoY2hpbGQpKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnByb3BzLmRpc2FibGVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjaGlsZC5zZXRBdHRyaWJ1dGUoVEFCSU5ERVgsICctMScpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKCF0aGlzLl9pc0lubmVyWm9uZSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgKCghdGhpcy5fYWN0aXZlRWxlbWVudCAmJiAhdGhpcy5fZGVmYXVsdEZvY3VzRWxlbWVudCkgfHwgdGhpcy5fYWN0aXZlRWxlbWVudCA9PT0gY2hpbGQpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9kZWZhdWx0Rm9jdXNFbGVtZW50ID0gY2hpbGQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2hpbGQuZ2V0QXR0cmlidXRlKFRBQklOREVYKSAhPT0gJzAnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGQuc2V0QXR0cmlidXRlKFRBQklOREVYLCAnMCcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKGNoaWxkLmdldEF0dHJpYnV0ZShUQUJJTkRFWCkgIT09ICctMScpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkLnNldEF0dHJpYnV0ZShUQUJJTkRFWCwgJy0xJyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoY2hpbGQudGFnTmFtZSA9PT0gJ3N2ZycgJiYgY2hpbGQuZ2V0QXR0cmlidXRlKCdmb2N1c2FibGUnKSAhPT0gJ2ZhbHNlJykge1xuICAgICAgICAgICAgICAgICAgICAvLyBEaXNndXN0aW5nIElFIGhhY2suIFNhZCBmYWNlLlxuICAgICAgICAgICAgICAgICAgICBjaGlsZC5zZXRBdHRyaWJ1dGUoJ2ZvY3VzYWJsZScsICdmYWxzZScpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGNoaWxkLmdldEF0dHJpYnV0ZShJU19GT0NVU0FCTEVfQVRUUklCVVRFKSA9PT0gJ3RydWUnKSB7XG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLl9pc0lubmVyWm9uZSAmJlxuICAgICAgICAgICAgICAgICAgICAoKCF0aGlzLl9hY3RpdmVFbGVtZW50ICYmICF0aGlzLl9kZWZhdWx0Rm9jdXNFbGVtZW50KSB8fCB0aGlzLl9hY3RpdmVFbGVtZW50ID09PSBjaGlsZCkpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fZGVmYXVsdEZvY3VzRWxlbWVudCA9IGNoaWxkO1xuICAgICAgICAgICAgICAgICAgICBpZiAoY2hpbGQuZ2V0QXR0cmlidXRlKFRBQklOREVYKSAhPT0gJzAnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjaGlsZC5zZXRBdHRyaWJ1dGUoVEFCSU5ERVgsICcwJyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoY2hpbGQuZ2V0QXR0cmlidXRlKFRBQklOREVYKSAhPT0gJy0xJykge1xuICAgICAgICAgICAgICAgICAgICBjaGlsZC5zZXRBdHRyaWJ1dGUoVEFCSU5ERVgsICctMScpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuX3VwZGF0ZVRhYkluZGV4ZXMoY2hpbGQpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBGb2N1c1pvbmUucHJvdG90eXBlLl9pc0NvbnRlbnRFZGl0YWJsZUVsZW1lbnQgPSBmdW5jdGlvbiAoZWxlbWVudCkge1xuICAgICAgICByZXR1cm4gZWxlbWVudCAmJiBlbGVtZW50LmdldEF0dHJpYnV0ZSgnY29udGVudGVkaXRhYmxlJykgPT09ICd0cnVlJztcbiAgICB9O1xuICAgIEZvY3VzWm9uZS5wcm90b3R5cGUuX2lzRWxlbWVudElucHV0ID0gZnVuY3Rpb24gKGVsZW1lbnQpIHtcbiAgICAgICAgaWYgKGVsZW1lbnQgJiZcbiAgICAgICAgICAgIGVsZW1lbnQudGFnTmFtZSAmJlxuICAgICAgICAgICAgKGVsZW1lbnQudGFnTmFtZS50b0xvd2VyQ2FzZSgpID09PSAnaW5wdXQnIHx8IGVsZW1lbnQudGFnTmFtZS50b0xvd2VyQ2FzZSgpID09PSAndGV4dGFyZWEnKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH07XG4gICAgRm9jdXNab25lLnByb3RvdHlwZS5fc2hvdWxkSW5wdXRMb3NlRm9jdXMgPSBmdW5jdGlvbiAoZWxlbWVudCwgaXNGb3J3YXJkKSB7XG4gICAgICAgIC8vIElmIGEgdGFiIHdhcyB1c2VkLCB3ZSB3YW50IHRvIGZvY3VzIG9uIHRoZSBuZXh0IGVsZW1lbnQuXG4gICAgICAgIGlmICghdGhpcy5fcHJvY2Vzc2luZ1RhYktleSAmJlxuICAgICAgICAgICAgZWxlbWVudCAmJlxuICAgICAgICAgICAgZWxlbWVudC50eXBlICYmXG4gICAgICAgICAgICBBTExPV0VEX0lOUFVUX1RZUEVTLmluZGV4T2YoZWxlbWVudC50eXBlLnRvTG93ZXJDYXNlKCkpID4gLTEpIHtcbiAgICAgICAgICAgIHZhciBzZWxlY3Rpb25TdGFydCA9IGVsZW1lbnQuc2VsZWN0aW9uU3RhcnQ7XG4gICAgICAgICAgICB2YXIgc2VsZWN0aW9uRW5kID0gZWxlbWVudC5zZWxlY3Rpb25FbmQ7XG4gICAgICAgICAgICB2YXIgaXNSYW5nZVNlbGVjdGVkID0gc2VsZWN0aW9uU3RhcnQgIT09IHNlbGVjdGlvbkVuZDtcbiAgICAgICAgICAgIHZhciBpbnB1dFZhbHVlID0gZWxlbWVudC52YWx1ZTtcbiAgICAgICAgICAgIHZhciBpc1JlYWRvbmx5ID0gZWxlbWVudC5yZWFkT25seTtcbiAgICAgICAgICAgIC8vIFdlIHNob3VsZG4ndCBsb3NlIGZvY3VzIGluIHRoZSBmb2xsb3dpbmcgY2FzZXM6XG4gICAgICAgICAgICAvLyAxLiBUaGVyZSBpcyByYW5nZSBzZWxlY3RlZC5cbiAgICAgICAgICAgIC8vIDIuIFdoZW4gc2VsZWN0aW9uIHN0YXJ0IGlzIGxhcmdlciB0aGFuIDAgYW5kIGl0IGlzIGJhY2t3YXJkIGFuZCBub3QgcmVhZE9ubHkuXG4gICAgICAgICAgICAvLyAzLiB3aGVuIHNlbGVjdGlvbiBzdGFydCBpcyBub3QgdGhlIGVuZCBvZiBsZW5ndGgsIGl0IGlzIGZvcndhcmQgYW5kIG5vdCByZWFkT25seS5cbiAgICAgICAgICAgIC8vIDQuIFdlIHByZXNzIGFueSBvZiB0aGUgYXJyb3cga2V5cyB3aGVuIG91ciBoYW5kbGVUYWJLZXkgaXNuJ3Qgbm9uZSBvciB1bmRlZmluZWQgKG9ubHkgbG9zaW5nIGZvY3VzIGlmIHdlIGhpdFxuICAgICAgICAgICAgLy8gdGFiKSBhbmQgaWYgc2hvdWxkSW5wdXRMb3NlRm9jdXNPbkFycm93S2V5IGlzIGRlZmluZWQsIGlmIHNjZW5hcmlvIHByZWZlcnMgdG8gbm90IGxvb3NlIHRoZSBmb2N1cyB3aGljaCBpc1xuICAgICAgICAgICAgLy8gZGV0ZXJtaW5lZCBieSBjYWxsaW5nIHRoZSBjYWxsYmFjayBzaG91bGRJbnB1dExvc2VGb2N1c09uQXJyb3dLZXlcbiAgICAgICAgICAgIGlmIChpc1JhbmdlU2VsZWN0ZWQgfHxcbiAgICAgICAgICAgICAgICAoc2VsZWN0aW9uU3RhcnQgPiAwICYmICFpc0ZvcndhcmQgJiYgIWlzUmVhZG9ubHkpIHx8XG4gICAgICAgICAgICAgICAgKHNlbGVjdGlvblN0YXJ0ICE9PSBpbnB1dFZhbHVlLmxlbmd0aCAmJiBpc0ZvcndhcmQgJiYgIWlzUmVhZG9ubHkpIHx8XG4gICAgICAgICAgICAgICAgKCEhdGhpcy5wcm9wcy5oYW5kbGVUYWJLZXkgJiZcbiAgICAgICAgICAgICAgICAgICAgISh0aGlzLnByb3BzLnNob3VsZElucHV0TG9zZUZvY3VzT25BcnJvd0tleSAmJiB0aGlzLnByb3BzLnNob3VsZElucHV0TG9zZUZvY3VzT25BcnJvd0tleShlbGVtZW50KSkpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH07XG4gICAgRm9jdXNab25lLnByb3RvdHlwZS5fc2hvdWxkV3JhcEZvY3VzID0gZnVuY3Rpb24gKGVsZW1lbnQsIG5vV3JhcERhdGFBdHRyaWJ1dGUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJvcHMuY2hlY2tGb3JOb1dyYXAgPyBzaG91bGRXcmFwRm9jdXMoZWxlbWVudCwgbm9XcmFwRGF0YUF0dHJpYnV0ZSkgOiB0cnVlO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0cnVlIGlmIHRoZSBlbGVtZW50IGlzIGEgZGVzY2VuZGFudCBvZiB0aGUgRm9jdXNab25lIHRocm91Z2ggYSBSZWFjdCBwb3J0YWwuXG4gICAgICovXG4gICAgRm9jdXNab25lLnByb3RvdHlwZS5fcG9ydGFsQ29udGFpbnNFbGVtZW50ID0gZnVuY3Rpb24gKGVsZW1lbnQpIHtcbiAgICAgICAgcmV0dXJuIGVsZW1lbnQgJiYgISF0aGlzLl9yb290LmN1cnJlbnQgJiYgcG9ydGFsQ29udGFpbnNFbGVtZW50KGVsZW1lbnQsIHRoaXMuX3Jvb3QuY3VycmVudCk7XG4gICAgfTtcbiAgICBGb2N1c1pvbmUucHJvdG90eXBlLl9nZXREb2N1bWVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIGdldERvY3VtZW50KHRoaXMuX3Jvb3QuY3VycmVudCk7XG4gICAgfTtcbiAgICBGb2N1c1pvbmUuZGVmYXVsdFByb3BzID0ge1xuICAgICAgICBpc0NpcmN1bGFyTmF2aWdhdGlvbjogZmFsc2UsXG4gICAgICAgIGRpcmVjdGlvbjogRm9jdXNab25lRGlyZWN0aW9uLmJpZGlyZWN0aW9uYWwsXG4gICAgICAgIHNob3VsZFJhaXNlQ2xpY2tzOiB0cnVlLFxuICAgIH07XG4gICAgcmV0dXJuIEZvY3VzWm9uZTtcbn0oUmVhY3QuQ29tcG9uZW50KSk7XG5leHBvcnQgeyBGb2N1c1pvbmUgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUZvY3VzWm9uZS5qcy5tYXAiLCJpbXBvcnQgeyBnZXRXaW5kb3cgfSBmcm9tICcuL2RvbS9nZXRXaW5kb3cnO1xudmFyIGlzTWFjUmVzdWx0O1xuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgdGhlIHVzZXIgaXMgb24gYSBNYWMuIENhY2hlcyB0aGUgcmVzdWx0IHZhbHVlLlxuICogQHBhcmFtIHJlc2V0IC0gUmVzZXQgdGhlIGNhY2hlZCByZXN1bHQgdmFsdWUgKG1haW5seSBmb3IgdGVzdGluZykuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc01hYyhyZXNldCkge1xuICAgIHZhciBfYTtcbiAgICBpZiAodHlwZW9mIGlzTWFjUmVzdWx0ID09PSAndW5kZWZpbmVkJyB8fCByZXNldCkge1xuICAgICAgICB2YXIgd2luID0gZ2V0V2luZG93KCk7XG4gICAgICAgIC8vIEluIGNlcnRhaW4gU1NSIGZyYW1ld29ya3MsIGB3aW5kb3dgIHdpbGwgYmUgZGVmaW5lZCBldmVuIG9uIHRoZSBzZXJ2ZXIgYnV0IGBuYXZpZ2F0b3JgIHdpbGwgYmUgdW5kZWZpbmVkXG4gICAgICAgIHZhciB1c2VyQWdlbnQgPSAoX2EgPSB3aW4gPT09IG51bGwgfHwgd2luID09PSB2b2lkIDAgPyB2b2lkIDAgOiB3aW4ubmF2aWdhdG9yKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EudXNlckFnZW50O1xuICAgICAgICBpc01hY1Jlc3VsdCA9ICEhdXNlckFnZW50ICYmIHVzZXJBZ2VudC5pbmRleE9mKCdNYWNpbnRvc2gnKSAhPT0gLTE7XG4gICAgfVxuICAgIHJldHVybiAhIWlzTWFjUmVzdWx0O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9b3NEZXRlY3Rvci5qcy5tYXAiLCIvKipcbiAqIFJldHVybnMgdHJ1ZSBpZiBhbmQgb25seSBpZiB0aGUgdXNlciBpcyBvbiBhIGlPUyBkZXZpY2UuXG4gKiBVc2VkIHRvIGRldGVybWluZSB3aGV0aGVyIGlPUy1zcGVjaWZpYyBiZWhhdmlvciBzaG91bGQgYmUgYXBwbGllZC5cbiAqL1xuZXhwb3J0IHZhciBpc0lPUyA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIXdpbmRvdyB8fCAhd2luZG93Lm5hdmlnYXRvciB8fCAhd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gL2lQYWR8aVBob25lfGlQb2QvaS50ZXN0KHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50KTtcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tb2JpbGVEZXRlY3Rvci5qcy5tYXAiLCJleHBvcnQgdmFyIFJlY3RhbmdsZUVkZ2U7XG4oZnVuY3Rpb24gKFJlY3RhbmdsZUVkZ2UpIHtcbiAgICBSZWN0YW5nbGVFZGdlW1JlY3RhbmdsZUVkZ2VbXCJ0b3BcIl0gPSAxXSA9IFwidG9wXCI7XG4gICAgUmVjdGFuZ2xlRWRnZVtSZWN0YW5nbGVFZGdlW1wiYm90dG9tXCJdID0gLTFdID0gXCJib3R0b21cIjtcbiAgICBSZWN0YW5nbGVFZGdlW1JlY3RhbmdsZUVkZ2VbXCJsZWZ0XCJdID0gMl0gPSBcImxlZnRcIjtcbiAgICBSZWN0YW5nbGVFZGdlW1JlY3RhbmdsZUVkZ2VbXCJyaWdodFwiXSA9IC0yXSA9IFwicmlnaHRcIjtcbn0pKFJlY3RhbmdsZUVkZ2UgfHwgKFJlY3RhbmdsZUVkZ2UgPSB7fSkpO1xuZXhwb3J0IHZhciBQb3NpdGlvbjtcbihmdW5jdGlvbiAoUG9zaXRpb24pIHtcbiAgICBQb3NpdGlvbltQb3NpdGlvbltcInRvcFwiXSA9IDBdID0gXCJ0b3BcIjtcbiAgICBQb3NpdGlvbltQb3NpdGlvbltcImJvdHRvbVwiXSA9IDFdID0gXCJib3R0b21cIjtcbiAgICBQb3NpdGlvbltQb3NpdGlvbltcInN0YXJ0XCJdID0gMl0gPSBcInN0YXJ0XCI7XG4gICAgUG9zaXRpb25bUG9zaXRpb25bXCJlbmRcIl0gPSAzXSA9IFwiZW5kXCI7XG59KShQb3NpdGlvbiB8fCAoUG9zaXRpb24gPSB7fSkpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cG9zaXRpb25pbmcudHlwZXMuanMubWFwIiwiaW1wb3J0IHsgX19hc3NpZ24gfSBmcm9tIFwidHNsaWJcIjtcbi8qKlxuICogRnVuY3Rpb24gdG8gYXBwbHkgZGVmYXVsdCB2YWx1ZXMgdG8gYSBjb21wb25lbnQgcHJvcHMgb2JqZWN0LiBUaGlzIGZ1bmN0aW9uIGlzIGludGVuZGVkIGZvciBmdW5jdGlvbiBjb21wb25lbnRzLFxuICogdG8gbWFpbnRhaW4gcGFyaXR5IHdpdGggdGhlIGBkZWZhdWx0UHJvcHNgIGZlYXR1cmUgb2YgY2xhc3MgY29tcG9uZW50cy4gSXQgYWNjb3VudHMgZm9yIHByb3BlcnRpZXMgdGhhdCBhcmVcbiAqIHNwZWNpZmllZCwgYnV0IHVuZGVmaW5lZC5cbiAqIEBwYXJhbSBkZWZhdWx0UHJvcHMtIEFuIG9iamVjdCB3aXRoIGRlZmF1bHQgdmFsdWVzIGZvciB2YXJpb3VzIHByb3BlcnRpZXNcbiAqIEBwYXJhbSBwcm9wc1dpdGhvdXREZWZhdWx0cy0gVGhlIHByb3BzIG9iamVjdCBwYXNzZWQgaW50byB0aGUgY29tcG9uZW50XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRQcm9wc1dpdGhEZWZhdWx0cyhkZWZhdWx0UHJvcHMsIHByb3BzV2l0aG91dERlZmF1bHRzKSB7XG4gICAgdmFyIHByb3BzID0gX19hc3NpZ24oe30sIHByb3BzV2l0aG91dERlZmF1bHRzKTtcbiAgICBmb3IgKHZhciBfaSA9IDAsIF9hID0gT2JqZWN0LmtleXMoZGVmYXVsdFByb3BzKTsgX2kgPCBfYS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgdmFyIGtleSA9IF9hW19pXTtcbiAgICAgICAgaWYgKHByb3BzW2tleV0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcHJvcHNba2V5XSA9IGRlZmF1bHRQcm9wc1trZXldO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBwcm9wcztcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWdldFByb3BzV2l0aERlZmF1bHRzLmpzLm1hcCIsIi8qKlxuICogRGV0ZXJtaW5lcyB0aGUgZWZmZWN0aXZlIGNoZWNrZWQgc3RhdGUgb2YgYSBtZW51IGl0ZW0uXG4gKlxuICogQHBhcmFtIGl0ZW0ge0lDb250ZXh0dWFsTWVudUl0ZW19IHRvIGdldCB0aGUgY2hlY2sgc3RhdGUgb2YuXG4gKiBAcmV0dXJucyB7dHJ1ZX0gaWYgdGhlIGl0ZW0gaXMgY2hlY2tlZC5cbiAqIEByZXR1cm5zIHtmYWxzZX0gaWYgdGhlIGl0ZW0gaXMgdW5jaGVja2VkLlxuICogQHJldHVybnMge251bGx9IGlmIHRoZSBpdGVtIGlzIG5vdCBjaGVja2FibGUuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRJc0NoZWNrZWQoaXRlbSkge1xuICAgIGlmIChpdGVtLmNhbkNoZWNrKSB7XG4gICAgICAgIHJldHVybiAhIShpdGVtLmlzQ2hlY2tlZCB8fCBpdGVtLmNoZWNrZWQpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIGl0ZW0uaXNDaGVja2VkID09PSAnYm9vbGVhbicpIHtcbiAgICAgICAgcmV0dXJuIGl0ZW0uaXNDaGVja2VkO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIGl0ZW0uY2hlY2tlZCA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgIHJldHVybiBpdGVtLmNoZWNrZWQ7XG4gICAgfVxuICAgIC8vIEl0ZW0gaXMgbm90IGNoZWNrYWJsZS5cbiAgICByZXR1cm4gbnVsbDtcbn1cbmV4cG9ydCBmdW5jdGlvbiBoYXNTdWJtZW51KGl0ZW0pIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZGVwcmVjYXRpb24vZGVwcmVjYXRpb25cbiAgICByZXR1cm4gISEoaXRlbS5zdWJNZW51UHJvcHMgfHwgaXRlbS5pdGVtcyk7XG59XG5leHBvcnQgZnVuY3Rpb24gaXNJdGVtRGlzYWJsZWQoaXRlbSkge1xuICAgIHJldHVybiAhIShpdGVtLmlzRGlzYWJsZWQgfHwgaXRlbS5kaXNhYmxlZCk7XG59XG5leHBvcnQgZnVuY3Rpb24gZ2V0TWVudUl0ZW1BcmlhUm9sZShpdGVtKSB7XG4gICAgdmFyIGlzQ2hlY2tlZCA9IGdldElzQ2hlY2tlZChpdGVtKTtcbiAgICB2YXIgY2FuQ2hlY2sgPSBpc0NoZWNrZWQgIT09IG51bGw7XG4gICAgcmV0dXJuIGNhbkNoZWNrID8gJ21lbnVpdGVtY2hlY2tib3gnIDogJ21lbnVpdGVtJztcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbnRleHR1YWxNZW51VXRpbGl0eS5qcy5tYXAiLCJleHBvcnQgZnVuY3Rpb24gb24oZWxlbWVudCwgZXZlbnROYW1lLCBjYWxsYmFjaywgb3B0aW9ucykge1xuICAgIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihldmVudE5hbWUsIGNhbGxiYWNrLCBvcHRpb25zKTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkgeyByZXR1cm4gZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50TmFtZSwgY2FsbGJhY2ssIG9wdGlvbnMpOyB9O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9b24uanMubWFwIiwiLyoqXG4gKiBSZWN0YW5nbGUgaGVscGVyIGNsYXNzLlxuICpcbiAqIEBwdWJsaWNcbiAqIHtAZG9jQ2F0ZWdvcnkgUmVjdGFuZ2xlfVxuICovXG52YXIgUmVjdGFuZ2xlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFJlY3RhbmdsZShsZWZ0LCByaWdodCwgdG9wLCBib3R0b20pIHtcbiAgICAgICAgaWYgKGxlZnQgPT09IHZvaWQgMCkgeyBsZWZ0ID0gMDsgfVxuICAgICAgICBpZiAocmlnaHQgPT09IHZvaWQgMCkgeyByaWdodCA9IDA7IH1cbiAgICAgICAgaWYgKHRvcCA9PT0gdm9pZCAwKSB7IHRvcCA9IDA7IH1cbiAgICAgICAgaWYgKGJvdHRvbSA9PT0gdm9pZCAwKSB7IGJvdHRvbSA9IDA7IH1cbiAgICAgICAgdGhpcy50b3AgPSB0b3A7XG4gICAgICAgIHRoaXMuYm90dG9tID0gYm90dG9tO1xuICAgICAgICB0aGlzLmxlZnQgPSBsZWZ0O1xuICAgICAgICB0aGlzLnJpZ2h0ID0gcmlnaHQ7XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShSZWN0YW5nbGUucHJvdG90eXBlLCBcIndpZHRoXCIsIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIENhbGN1bGF0ZWQgYXV0b21hdGljYWxseSBieSBzdWJ0cmFjdGluZyB0aGUgcmlnaHQgZnJvbSBsZWZ0XG4gICAgICAgICAqL1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnJpZ2h0IC0gdGhpcy5sZWZ0O1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFJlY3RhbmdsZS5wcm90b3R5cGUsIFwiaGVpZ2h0XCIsIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIENhbGN1bGF0ZWQgYXV0b21hdGljYWxseSBieSBzdWJ0cmFjdGluZyB0aGUgYm90dG9tIGZyb20gdG9wLlxuICAgICAgICAgKi9cbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5ib3R0b20gLSB0aGlzLnRvcDtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIC8qKlxuICAgICAqIFRlc3RzIGlmIGFub3RoZXIgcmVjdCBpcyBhcHByb3hpbWF0ZWx5IGVxdWFsIHRvIHRoaXMgcmVjdCAod2l0aGluIDQgZGVjaW1hbCBwbGFjZXMuKVxuICAgICAqL1xuICAgIFJlY3RhbmdsZS5wcm90b3R5cGUuZXF1YWxzID0gZnVuY3Rpb24gKHJlY3QpIHtcbiAgICAgICAgLy8gRml4aW5nIHRvIDQgZGVjaW1hbCBwbGFjZXMgYmVjYXVzZSBpdCBhbGxvd3MgZW5vdWdoIHByZWNpc2lvbiBhbmQgd2lsbCBoYW5kbGUgY2FzZXMgd2hlbiBzb21ldGhpbmdcbiAgICAgICAgLy8gc2hvdWxkIGJlIHJvdW5kZWQsIGxpa2UgLjk5OTk5OSBzaG91bGQgcm91bmQgdG8gMS5cbiAgICAgICAgcmV0dXJuIChwYXJzZUZsb2F0KHRoaXMudG9wLnRvRml4ZWQoNCkpID09PSBwYXJzZUZsb2F0KHJlY3QudG9wLnRvRml4ZWQoNCkpICYmXG4gICAgICAgICAgICBwYXJzZUZsb2F0KHRoaXMuYm90dG9tLnRvRml4ZWQoNCkpID09PSBwYXJzZUZsb2F0KHJlY3QuYm90dG9tLnRvRml4ZWQoNCkpICYmXG4gICAgICAgICAgICBwYXJzZUZsb2F0KHRoaXMubGVmdC50b0ZpeGVkKDQpKSA9PT0gcGFyc2VGbG9hdChyZWN0LmxlZnQudG9GaXhlZCg0KSkgJiZcbiAgICAgICAgICAgIHBhcnNlRmxvYXQodGhpcy5yaWdodC50b0ZpeGVkKDQpKSA9PT0gcGFyc2VGbG9hdChyZWN0LnJpZ2h0LnRvRml4ZWQoNCkpKTtcbiAgICB9O1xuICAgIHJldHVybiBSZWN0YW5nbGU7XG59KCkpO1xuZXhwb3J0IHsgUmVjdGFuZ2xlIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1SZWN0YW5nbGUuanMubWFwIiwidmFyIF9hO1xuaW1wb3J0IHsgX19hc3NpZ24gfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IERpcmVjdGlvbmFsSGludCB9IGZyb20gJy4uLy4uL2NvbW1vbi9EaXJlY3Rpb25hbEhpbnQnO1xuaW1wb3J0IHsgZ2V0U2Nyb2xsYmFyV2lkdGgsIGdldFJUTCB9IGZyb20gJy4uLy4uL1V0aWxpdGllcyc7XG5pbXBvcnQgeyBSZWN0YW5nbGVFZGdlIH0gZnJvbSAnLi9wb3NpdGlvbmluZy50eXBlcyc7XG5pbXBvcnQgeyBSZWN0YW5nbGUgfSBmcm9tICcuLi8uLi9VdGlsaXRpZXMnO1xuZnVuY3Rpb24gX2NyZWF0ZVBvc2l0aW9uRGF0YSh0YXJnZXRFZGdlLCBhbGlnbm1lbnRFZGdlLCBpc0F1dG8pIHtcbiAgICByZXR1cm4ge1xuICAgICAgICB0YXJnZXRFZGdlOiB0YXJnZXRFZGdlLFxuICAgICAgICBhbGlnbm1lbnRFZGdlOiBhbGlnbm1lbnRFZGdlLFxuICAgICAgICBpc0F1dG86IGlzQXV0byxcbiAgICB9O1xufVxuLy8gQ3VycmVudGx5IHRoZSBiZWFrUGVyY2VudCBpcyBzZXQgdG8gNTAgZm9yIGFsbCBwb3NpdGlvbnMgbWVhbmluZyB0aGF0IGl0IHNob3VsZCB0ZW5kIHRvIHRoZSBjZW50ZXIgb2YgdGhlIHRhcmdldFxudmFyIERpcmVjdGlvbmFsRGljdGlvbmFyeSA9IChfYSA9IHt9LFxuICAgIF9hW0RpcmVjdGlvbmFsSGludC50b3BMZWZ0RWRnZV0gPSBfY3JlYXRlUG9zaXRpb25EYXRhKFJlY3RhbmdsZUVkZ2UudG9wLCBSZWN0YW5nbGVFZGdlLmxlZnQpLFxuICAgIF9hW0RpcmVjdGlvbmFsSGludC50b3BDZW50ZXJdID0gX2NyZWF0ZVBvc2l0aW9uRGF0YShSZWN0YW5nbGVFZGdlLnRvcCksXG4gICAgX2FbRGlyZWN0aW9uYWxIaW50LnRvcFJpZ2h0RWRnZV0gPSBfY3JlYXRlUG9zaXRpb25EYXRhKFJlY3RhbmdsZUVkZ2UudG9wLCBSZWN0YW5nbGVFZGdlLnJpZ2h0KSxcbiAgICBfYVtEaXJlY3Rpb25hbEhpbnQudG9wQXV0b0VkZ2VdID0gX2NyZWF0ZVBvc2l0aW9uRGF0YShSZWN0YW5nbGVFZGdlLnRvcCwgdW5kZWZpbmVkLCB0cnVlKSxcbiAgICBfYVtEaXJlY3Rpb25hbEhpbnQuYm90dG9tTGVmdEVkZ2VdID0gX2NyZWF0ZVBvc2l0aW9uRGF0YShSZWN0YW5nbGVFZGdlLmJvdHRvbSwgUmVjdGFuZ2xlRWRnZS5sZWZ0KSxcbiAgICBfYVtEaXJlY3Rpb25hbEhpbnQuYm90dG9tQ2VudGVyXSA9IF9jcmVhdGVQb3NpdGlvbkRhdGEoUmVjdGFuZ2xlRWRnZS5ib3R0b20pLFxuICAgIF9hW0RpcmVjdGlvbmFsSGludC5ib3R0b21SaWdodEVkZ2VdID0gX2NyZWF0ZVBvc2l0aW9uRGF0YShSZWN0YW5nbGVFZGdlLmJvdHRvbSwgUmVjdGFuZ2xlRWRnZS5yaWdodCksXG4gICAgX2FbRGlyZWN0aW9uYWxIaW50LmJvdHRvbUF1dG9FZGdlXSA9IF9jcmVhdGVQb3NpdGlvbkRhdGEoUmVjdGFuZ2xlRWRnZS5ib3R0b20sIHVuZGVmaW5lZCwgdHJ1ZSksXG4gICAgX2FbRGlyZWN0aW9uYWxIaW50LmxlZnRUb3BFZGdlXSA9IF9jcmVhdGVQb3NpdGlvbkRhdGEoUmVjdGFuZ2xlRWRnZS5sZWZ0LCBSZWN0YW5nbGVFZGdlLnRvcCksXG4gICAgX2FbRGlyZWN0aW9uYWxIaW50LmxlZnRDZW50ZXJdID0gX2NyZWF0ZVBvc2l0aW9uRGF0YShSZWN0YW5nbGVFZGdlLmxlZnQpLFxuICAgIF9hW0RpcmVjdGlvbmFsSGludC5sZWZ0Qm90dG9tRWRnZV0gPSBfY3JlYXRlUG9zaXRpb25EYXRhKFJlY3RhbmdsZUVkZ2UubGVmdCwgUmVjdGFuZ2xlRWRnZS5ib3R0b20pLFxuICAgIF9hW0RpcmVjdGlvbmFsSGludC5yaWdodFRvcEVkZ2VdID0gX2NyZWF0ZVBvc2l0aW9uRGF0YShSZWN0YW5nbGVFZGdlLnJpZ2h0LCBSZWN0YW5nbGVFZGdlLnRvcCksXG4gICAgX2FbRGlyZWN0aW9uYWxIaW50LnJpZ2h0Q2VudGVyXSA9IF9jcmVhdGVQb3NpdGlvbkRhdGEoUmVjdGFuZ2xlRWRnZS5yaWdodCksXG4gICAgX2FbRGlyZWN0aW9uYWxIaW50LnJpZ2h0Qm90dG9tRWRnZV0gPSBfY3JlYXRlUG9zaXRpb25EYXRhKFJlY3RhbmdsZUVkZ2UucmlnaHQsIFJlY3RhbmdsZUVkZ2UuYm90dG9tKSxcbiAgICBfYSk7XG5mdW5jdGlvbiBfaXNSZWN0YW5nbGVXaXRoaW5Cb3VuZHMocmVjdCwgYm91bmRpbmdSZWN0KSB7XG4gICAgaWYgKHJlY3QudG9wIDwgYm91bmRpbmdSZWN0LnRvcCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGlmIChyZWN0LmJvdHRvbSA+IGJvdW5kaW5nUmVjdC5ib3R0b20pIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBpZiAocmVjdC5sZWZ0IDwgYm91bmRpbmdSZWN0LmxlZnQpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBpZiAocmVjdC5yaWdodCA+IGJvdW5kaW5nUmVjdC5yaWdodCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xufVxuLyoqXG4gKiBHZXRzIGFsbCBvZiB0aGUgZWRnZXMgb2YgYSByZWN0YW5nbGUgdGhhdCBhcmUgb3V0c2lkZSBvZiB0aGUgZ2l2ZW4gYm91bmRzLlxuICogSWYgdGhlcmUgYXJlIG5vIG91dCBvZiBib3VuZHMgZWRnZXMgaXQgcmV0dXJucyBhbiBlbXB0eSBhcnJheS5cbiAqL1xuZnVuY3Rpb24gX2dldE91dE9mQm91bmRzRWRnZXMocmVjdCwgYm91bmRpbmdSZWN0KSB7XG4gICAgdmFyIG91dE9mQm91bmRzID0gW107XG4gICAgaWYgKHJlY3QudG9wIDwgYm91bmRpbmdSZWN0LnRvcCkge1xuICAgICAgICBvdXRPZkJvdW5kcy5wdXNoKFJlY3RhbmdsZUVkZ2UudG9wKTtcbiAgICB9XG4gICAgaWYgKHJlY3QuYm90dG9tID4gYm91bmRpbmdSZWN0LmJvdHRvbSkge1xuICAgICAgICBvdXRPZkJvdW5kcy5wdXNoKFJlY3RhbmdsZUVkZ2UuYm90dG9tKTtcbiAgICB9XG4gICAgaWYgKHJlY3QubGVmdCA8IGJvdW5kaW5nUmVjdC5sZWZ0KSB7XG4gICAgICAgIG91dE9mQm91bmRzLnB1c2goUmVjdGFuZ2xlRWRnZS5sZWZ0KTtcbiAgICB9XG4gICAgaWYgKHJlY3QucmlnaHQgPiBib3VuZGluZ1JlY3QucmlnaHQpIHtcbiAgICAgICAgb3V0T2ZCb3VuZHMucHVzaChSZWN0YW5nbGVFZGdlLnJpZ2h0KTtcbiAgICB9XG4gICAgcmV0dXJuIG91dE9mQm91bmRzO1xufVxuZnVuY3Rpb24gX2dldEVkZ2VWYWx1ZShyZWN0LCBlZGdlKSB7XG4gICAgcmV0dXJuIHJlY3RbUmVjdGFuZ2xlRWRnZVtlZGdlXV07XG59XG5mdW5jdGlvbiBfc2V0RWRnZVZhbHVlKHJlY3QsIGVkZ2UsIHZhbHVlKSB7XG4gICAgcmVjdFtSZWN0YW5nbGVFZGdlW2VkZ2VdXSA9IHZhbHVlO1xuICAgIHJldHVybiByZWN0O1xufVxuLyoqXG4gKiBSZXR1cm5zIHRoZSBtaWRkbGUgdmFsdWUgb2YgYW4gZWRnZS4gT25seSByZXR1cm5zIDEgdmFsdWUgcmF0aGVyIHRoYW4geHkgY29vcmRpbmF0ZXMgYXNcbiAqIHRoZSBpdHNlbGYgYWxyZWFkeSBjb250YWlucyB0aGUgb3RoZXIgY29vcmRpbmF0ZS5cbiAqIEZvciBpbnN0YW5jZSwgYSBib3R0b20gZWRnZSdzIGN1cnJlbnQgdmFsdWUgaXMgaXQncyB5IGNvb3JkaW5hdGUsIHNvIHRoZSBudW1iZXIgcmV0dXJuZWQgaXMgdGhlIHguXG4gKi9cbmZ1bmN0aW9uIF9nZXRDZW50ZXJWYWx1ZShyZWN0LCBlZGdlKSB7XG4gICAgdmFyIGVkZ2VzID0gX2dldEZsYW5raW5nRWRnZXMoZWRnZSk7XG4gICAgcmV0dXJuIChfZ2V0RWRnZVZhbHVlKHJlY3QsIGVkZ2VzLnBvc2l0aXZlRWRnZSkgKyBfZ2V0RWRnZVZhbHVlKHJlY3QsIGVkZ2VzLm5lZ2F0aXZlRWRnZSkpIC8gMjtcbn1cbi8qKlxuICogRmxpcHMgdGhlIHZhbHVlIGRlcGVuZGluZyBvbiB0aGUgZWRnZS5cbiAqIElmIHRoZSBlZGdlIGlzIGEgXCJwb3NpdGl2ZVwiIGVkZ2UsIFRvcCBvciBMZWZ0LCB0aGVuIHRoZSB2YWx1ZSBzaG91bGQgc3RheSBhcyBpdCBpcy5cbiAqIElmIHRoZSBlZGdlIGlzIGEgXCJuZWdhdGl2ZVwiIGVkZ2UsIEJvdHRvbSBvciBSaWdodCwgdGhlbiB0aGUgdmFsdWUgc2hvdWxkIGJlIGZsaXBwZWQuXG4gKiBUaGlzIGlzIHRvIGFjY291bnQgZm9yIHRoZSBmYWN0IHRoYXQgdGhlIGNvb3JkaW5hdGVzIGFyZSBlZmZlY3RpdmVseSByZXNlcnZlZCBpbiBjZXJ0YWluIGNhc2VzIGZvciB0aGVcbiAqIFwibmVnYXRpdmVcIiBlZGdlcy5cbiAqXG4gKiBGb3IgZXhhbXBsZSwgd2hlbiB0ZXN0aW5nIHRvIHNlZSBpZiBhIGJvdHRvbSBlZGdlIDEgaXMgd2l0aGluIHRoZSBib3VuZHMgb2YgYW5vdGhlciBib3R0b20gZWRnZSAyOlxuICogSWYgZWRnZSAxIGlzIGdyZWF0ZXIgdGhhbiBlZGdlIDIgdGhlbiBpdCBpcyBvdXQgb2YgYm91bmRzLiBUaGlzIGlzIHJldmVyc2VkIGZvciB0b3AgZWRnZSAxIGFuZCB0b3AgZWRnZSAyLlxuICogSWYgdG9wIGVkZ2UgMSBpcyBsZXNzIHRoYW4gZWRnZSAyIHRoZW4gaXQgaXMgb3V0IG9mIGJvdW5kcy5cbiAqL1xuZnVuY3Rpb24gX2dldFJlbGF0aXZlRWRnZVZhbHVlKGVkZ2UsIHZhbHVlKSB7XG4gICAgaWYgKGVkZ2UgPiAwKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiB2YWx1ZSAqIC0xO1xuICAgIH1cbn1cbmZ1bmN0aW9uIF9nZXRSZWxhdGl2ZVJlY3RFZGdlVmFsdWUoZWRnZSwgcmVjdCkge1xuICAgIHJldHVybiBfZ2V0UmVsYXRpdmVFZGdlVmFsdWUoZWRnZSwgX2dldEVkZ2VWYWx1ZShyZWN0LCBlZGdlKSk7XG59XG5mdW5jdGlvbiBfZ2V0UmVsYXRpdmVFZGdlRGlmZmVyZW5jZShyZWN0LCBob3N0UmVjdCwgZWRnZSkge1xuICAgIHZhciBlZGdlRGlmZmVyZW5jZSA9IF9nZXRFZGdlVmFsdWUocmVjdCwgZWRnZSkgLSBfZ2V0RWRnZVZhbHVlKGhvc3RSZWN0LCBlZGdlKTtcbiAgICByZXR1cm4gX2dldFJlbGF0aXZlRWRnZVZhbHVlKGVkZ2UsIGVkZ2VEaWZmZXJlbmNlKTtcbn1cbi8qKlxuICogTW92ZXMgdGhlIGVkZ2Ugb2YgYSByZWN0YW5nbGUgdG8gdGhlIHZhbHVlIGdpdmVuLiBJdCBvbmx5IG1vdmVzIHRoZSBlZGdlIGluIGEgbGluZWFyIGRpcmVjdGlvbiBiYXNlZCBvbiB0aGF0IGVkZ2UuXG4gKiBGb3IgZXhhbXBsZSwgaWYgaXQncyBhIGJvdHRvbSBlZGdlIGl0IHdpbGwgb25seSBjaGFuZ2UgeSBjb29yZGluYXRlcy5cbiAqIGlmIG1haW50YWluU2l6ZSBpcyBzZXQgdG8gZmFsc2UsIGl0IHdpbGwgb25seSBhZGp1c3QgdGhlIHNwZWNpZmllZCBlZGdlIHZhbHVlXG4gKi9cbmZ1bmN0aW9uIF9tb3ZlRWRnZShyZWN0LCBlZGdlLCBuZXdWYWx1ZSwgbWFpbnRhaW5TaXplKSB7XG4gICAgaWYgKG1haW50YWluU2l6ZSA9PT0gdm9pZCAwKSB7IG1haW50YWluU2l6ZSA9IHRydWU7IH1cbiAgICB2YXIgZGlmZmVyZW5jZSA9IF9nZXRFZGdlVmFsdWUocmVjdCwgZWRnZSkgLSBuZXdWYWx1ZTtcbiAgICB2YXIgcmV0dXJuUmVjdCA9IF9zZXRFZGdlVmFsdWUocmVjdCwgZWRnZSwgbmV3VmFsdWUpO1xuICAgIGlmIChtYWludGFpblNpemUpIHtcbiAgICAgICAgcmV0dXJuUmVjdCA9IF9zZXRFZGdlVmFsdWUocmVjdCwgZWRnZSAqIC0xLCBfZ2V0RWRnZVZhbHVlKHJlY3QsIGVkZ2UgKiAtMSkgLSBkaWZmZXJlbmNlKTtcbiAgICB9XG4gICAgcmV0dXJuIHJldHVyblJlY3Q7XG59XG4vKipcbiAqIEFsaWducyB0aGUgZWRnZSBvbiB0aGUgcGFzc2VkIGluIHJlY3QgdG8gdGhlIHRhcmdldC4gSWYgdGhlcmUgaXMgYSBnYXAgdGhlbiBpdCB3aWxsIGhhdmUgdGhhdCBzcGFjZSBiZXR3ZWVuIHRoZSB0d28uXG4gKi9cbmZ1bmN0aW9uIF9hbGlnbkVkZ2VzKHJlY3QsIHRhcmdldCwgZWRnZSwgZ2FwKSB7XG4gICAgaWYgKGdhcCA9PT0gdm9pZCAwKSB7IGdhcCA9IDA7IH1cbiAgICByZXR1cm4gX21vdmVFZGdlKHJlY3QsIGVkZ2UsIF9nZXRFZGdlVmFsdWUodGFyZ2V0LCBlZGdlKSArIF9nZXRSZWxhdGl2ZUVkZ2VWYWx1ZShlZGdlLCBnYXApKTtcbn1cbi8qKlxuICogQWxpZ25zIHRoZSB0YXJnZXRFZGdlIG9uIHRoZSBwYXNzZWQgaW4gdGFyZ2V0IHRvIHRoZSByZWN0cyBjb3JyZXNwb25kaW5nIG9wcG9zaXRlIGVkZ2UuXG4gKiBGb3IgaW5zdGFuY2UgaWYgdGFyZ2V0RWRnZSBpcyBib3R0b20sIHRoZW4gdGhlIHJlY3RzIHRvcCB3aWxsIGJlIG1vdmVkIHRvIG1hdGNoIGl0LlxuICovXG5mdW5jdGlvbiBfYWxpZ25PcHBvc2l0ZUVkZ2VzKHJlY3QsIHRhcmdldCwgdGFyZ2V0RWRnZSwgZ2FwKSB7XG4gICAgaWYgKGdhcCA9PT0gdm9pZCAwKSB7IGdhcCA9IDA7IH1cbiAgICB2YXIgb3Bwb3NpdGVFZGdlID0gdGFyZ2V0RWRnZSAqIC0xO1xuICAgIHZhciBhZGp1c3RlZEdhcCA9IF9nZXRSZWxhdGl2ZUVkZ2VWYWx1ZShvcHBvc2l0ZUVkZ2UsIGdhcCk7XG4gICAgcmV0dXJuIF9tb3ZlRWRnZShyZWN0LCB0YXJnZXRFZGdlICogLTEsIF9nZXRFZGdlVmFsdWUodGFyZ2V0LCB0YXJnZXRFZGdlKSArIGFkanVzdGVkR2FwKTtcbn1cbi8qKlxuICogVGVzdHMgdG8gc2VlIGlmIHRoZSBnaXZlbiBlZGdlIGlzIHdpdGhpbiB0aGUgYm91bmRzIG9mIHRoZSBnaXZlbiByZWN0YW5nbGUuXG4gKi9cbmZ1bmN0aW9uIF9pc0VkZ2VJbkJvdW5kcyhyZWN0LCBib3VuZHMsIGVkZ2UpIHtcbiAgICB2YXIgYWRqdXN0ZWRSZWN0VmFsdWUgPSBfZ2V0UmVsYXRpdmVSZWN0RWRnZVZhbHVlKGVkZ2UsIHJlY3QpO1xuICAgIHJldHVybiBhZGp1c3RlZFJlY3RWYWx1ZSA+IF9nZXRSZWxhdGl2ZVJlY3RFZGdlVmFsdWUoZWRnZSwgYm91bmRzKTtcbn1cbi8qKlxuICogUmV0dXJucyBhIG1lYXN1cmUgb2YgaG93IG11Y2ggYSByZWN0YW5nbGUgaXMgb3V0IG9mIGJvdW5kcyBmb3IgYSBnaXZlbiBhbGlnbm1lbnQ7XG4gKiB0aGlzIGNhbiBiZSB1c2VkIHRvIGNvbXBhcmUgd2hpY2ggcmVjdGFuZ2xlIGlzIG1vcmUgb3IgbGVzcyBvdXQgb2YgYm91bmRzLlxuICogQSB2YWx1ZSBvZiAwIG1lYW5zIHRoZSByZWN0YW5nbGUgaXMgZW50aXJlbHkgaW4gYm91bmRzXG4gKi9cbmZ1bmN0aW9uIF9nZXRPdXRPZkJvdW5kc0RlZ3JlZShyZWN0LCBib3VuZHMpIHtcbiAgICB2YXIgYnJlYWtpbmdFZGdlcyA9IF9nZXRPdXRPZkJvdW5kc0VkZ2VzKHJlY3QsIGJvdW5kcyk7XG4gICAgdmFyIHRvdGFsID0gMDtcbiAgICBmb3IgKHZhciBfaSA9IDAsIGJyZWFraW5nRWRnZXNfMSA9IGJyZWFraW5nRWRnZXM7IF9pIDwgYnJlYWtpbmdFZGdlc18xLmxlbmd0aDsgX2krKykge1xuICAgICAgICB2YXIgZWRnZSA9IGJyZWFraW5nRWRnZXNfMVtfaV07XG4gICAgICAgIHRvdGFsICs9IE1hdGgucG93KF9nZXRSZWxhdGl2ZUVkZ2VEaWZmZXJlbmNlKHJlY3QsIGJvdW5kcywgZWRnZSksIDIpO1xuICAgIH1cbiAgICByZXR1cm4gdG90YWw7XG59XG4vKipcbiAqIEF0dGVtcHRzIHRvIG1vdmUgdGhlIHJlY3RhbmdsZSB0aHJvdWdoIHZhcmlvdXMgc2lkZXMgb2YgdGhlIHRhcmdldCB0byBmaW5kIGEgcGxhY2UgdG8gZml0LlxuICogSWYgbm8gZml0IGlzIGZvdW5kLCB0aGUgbGVhc3QgYmFkIG9wdGlvbiBzaG91bGQgYmUgcmV0dXJuZWQuXG4gKi9cbmZ1bmN0aW9uIF9mbGlwVG9GaXQocmVjdCwgdGFyZ2V0LCBib3VuZGluZywgcG9zaXRpb25EYXRhLCBnYXApIHtcbiAgICBpZiAoZ2FwID09PSB2b2lkIDApIHsgZ2FwID0gMDsgfVxuICAgIHZhciBkaXJlY3Rpb25zID0gW1xuICAgICAgICBSZWN0YW5nbGVFZGdlLmxlZnQsXG4gICAgICAgIFJlY3RhbmdsZUVkZ2UucmlnaHQsXG4gICAgICAgIFJlY3RhbmdsZUVkZ2UuYm90dG9tLFxuICAgICAgICBSZWN0YW5nbGVFZGdlLnRvcCxcbiAgICBdO1xuICAgIC8vIEluIFJUTCBwYWdlLCBSZWN0YW5nbGVFZGdlLnJpZ2h0IGhhcyBhIGhpZ2hlciBwcmlvcml0eSB0aGFuIFJlY3RhbmdsZUVkZ2UubGVmdCwgc28gdGhlIG9yZGVyIHNob3VsZCBiZSB1cGRhdGVkLlxuICAgIGlmIChnZXRSVEwoKSkge1xuICAgICAgICBkaXJlY3Rpb25zWzBdICo9IC0xO1xuICAgICAgICBkaXJlY3Rpb25zWzFdICo9IC0xO1xuICAgIH1cbiAgICB2YXIgY3VycmVudEVzdGltYXRlID0gcmVjdDtcbiAgICB2YXIgY3VycmVudEVkZ2UgPSBwb3NpdGlvbkRhdGEudGFyZ2V0RWRnZTtcbiAgICB2YXIgY3VycmVudEFsaWdubWVudCA9IHBvc2l0aW9uRGF0YS5hbGlnbm1lbnRFZGdlO1xuICAgIC8vIGtlZXAgdHJhY2sgb2YgbGVhc3QgYmFkIG9wdGlvbiwgaW4gY2FzZSBubyBzaWRlcyBmaXRcbiAgICB2YXIgb29iRGVncmVlO1xuICAgIHZhciBiZXN0RWRnZSA9IGN1cnJlbnRFZGdlO1xuICAgIHZhciBiZXN0QWxpZ25tZW50ID0gY3VycmVudEFsaWdubWVudDtcbiAgICAvLyBLZWVwIHN3aXRjaGluZyBzaWRlcyB1bnRpbCBvbmUgaXMgZm91bmQgd2l0aCBlbm91Z2ggc3BhY2UuXG4gICAgLy8gSWYgYWxsIHNpZGVzIGRvbid0IGZpdCB0aGVuIHJldHVybiB0aGUgdW5tb2RpZmllZCBlbGVtZW50LlxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgNDsgaSsrKSB7XG4gICAgICAgIGlmICghX2lzRWRnZUluQm91bmRzKGN1cnJlbnRFc3RpbWF0ZSwgYm91bmRpbmcsIGN1cnJlbnRFZGdlKSkge1xuICAgICAgICAgICAgLy8gdXBkYXRlIGxlYXN0LWJhZCBlZGdlc1xuICAgICAgICAgICAgdmFyIGN1cnJlbnRPT0JEZWdyZWUgPSBfZ2V0T3V0T2ZCb3VuZHNEZWdyZWUoY3VycmVudEVzdGltYXRlLCBib3VuZGluZyk7XG4gICAgICAgICAgICBpZiAoIW9vYkRlZ3JlZSB8fCBjdXJyZW50T09CRGVncmVlIDwgb29iRGVncmVlKSB7XG4gICAgICAgICAgICAgICAgb29iRGVncmVlID0gY3VycmVudE9PQkRlZ3JlZTtcbiAgICAgICAgICAgICAgICBiZXN0RWRnZSA9IGN1cnJlbnRFZGdlO1xuICAgICAgICAgICAgICAgIGJlc3RBbGlnbm1lbnQgPSBjdXJyZW50QWxpZ25tZW50O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZGlyZWN0aW9ucy5zcGxpY2UoZGlyZWN0aW9ucy5pbmRleE9mKGN1cnJlbnRFZGdlKSwgMSk7XG4gICAgICAgICAgICBpZiAoZGlyZWN0aW9ucy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgaWYgKGRpcmVjdGlvbnMuaW5kZXhPZihjdXJyZW50RWRnZSAqIC0xKSA+IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnRFZGdlID0gY3VycmVudEVkZ2UgKiAtMTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnRBbGlnbm1lbnQgPSBjdXJyZW50RWRnZTtcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudEVkZ2UgPSBkaXJlY3Rpb25zLnNsaWNlKC0xKVswXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY3VycmVudEVzdGltYXRlID0gX2VzdGltYXRlUG9zaXRpb24ocmVjdCwgdGFyZ2V0LCB7IHRhcmdldEVkZ2U6IGN1cnJlbnRFZGdlLCBhbGlnbm1lbnRFZGdlOiBjdXJyZW50QWxpZ25tZW50IH0sIGdhcCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGVsZW1lbnRSZWN0YW5nbGU6IGN1cnJlbnRFc3RpbWF0ZSxcbiAgICAgICAgICAgICAgICB0YXJnZXRFZGdlOiBjdXJyZW50RWRnZSxcbiAgICAgICAgICAgICAgICBhbGlnbm1lbnRFZGdlOiBjdXJyZW50QWxpZ25tZW50LFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyBub3RoaW5nIGZpdHMsIHVzZSBsZWFzdC1iYWQgb3B0aW9uXG4gICAgY3VycmVudEVzdGltYXRlID0gX2VzdGltYXRlUG9zaXRpb24ocmVjdCwgdGFyZ2V0LCB7IHRhcmdldEVkZ2U6IGJlc3RFZGdlLCBhbGlnbm1lbnRFZGdlOiBiZXN0QWxpZ25tZW50IH0sIGdhcCk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgZWxlbWVudFJlY3RhbmdsZTogY3VycmVudEVzdGltYXRlLFxuICAgICAgICB0YXJnZXRFZGdlOiBiZXN0RWRnZSxcbiAgICAgICAgYWxpZ25tZW50RWRnZTogYmVzdEFsaWdubWVudCxcbiAgICB9O1xufVxuLyoqXG4gKiBGbGlwcyBvbmx5IHRoZSBhbGlnbm1lbnQgZWRnZSBvZiBhbiBlbGVtZW50IHJlY3RhbmdsZS4gVGhpcyBpcyB1c2VkIGluc3RlYWQgb2YgbnVkZ2luZyB0aGUgYWxpZ25tZW50IGVkZ2VzXG4gKiBpbnRvIHBvc2l0aW9uLCB3aGVuIGBhbGlnblRhcmdldEVkZ2VgIGlzIHNwZWNpZmllZC5cbiAqL1xuZnVuY3Rpb24gX2ZsaXBBbGlnbm1lbnRFZGdlKGVsZW1lbnRFc3RpbWF0ZSwgdGFyZ2V0LCBnYXAsIGNvdmVyVGFyZ2V0KSB7XG4gICAgdmFyIGFsaWdubWVudEVkZ2UgPSBlbGVtZW50RXN0aW1hdGUuYWxpZ25tZW50RWRnZSwgdGFyZ2V0RWRnZSA9IGVsZW1lbnRFc3RpbWF0ZS50YXJnZXRFZGdlLCBlbGVtZW50UmVjdGFuZ2xlID0gZWxlbWVudEVzdGltYXRlLmVsZW1lbnRSZWN0YW5nbGU7XG4gICAgdmFyIG9wcG9zaXRlRWRnZSA9IGFsaWdubWVudEVkZ2UgKiAtMTtcbiAgICB2YXIgbmV3RXN0aW1hdGUgPSBfZXN0aW1hdGVQb3NpdGlvbihlbGVtZW50UmVjdGFuZ2xlLCB0YXJnZXQsIHsgdGFyZ2V0RWRnZTogdGFyZ2V0RWRnZSwgYWxpZ25tZW50RWRnZTogb3Bwb3NpdGVFZGdlIH0sIGdhcCwgY292ZXJUYXJnZXQpO1xuICAgIHJldHVybiB7XG4gICAgICAgIGVsZW1lbnRSZWN0YW5nbGU6IG5ld0VzdGltYXRlLFxuICAgICAgICB0YXJnZXRFZGdlOiB0YXJnZXRFZGdlLFxuICAgICAgICBhbGlnbm1lbnRFZGdlOiBvcHBvc2l0ZUVkZ2UsXG4gICAgfTtcbn1cbi8qKlxuICogQWRqdXN0cyBhIGVsZW1lbnQgcmVjdGFuZ2xlIHRvIGZpdCB3aXRoaW4gdGhlIGJvdW5kcyBnaXZlbi4gSWYgZGlyZWN0aW9uYWxIaW50Rml4ZWQgb3IgY292ZXJ0YXJnZXQgaXMgcGFzc2VkIGluXG4gKiB0aGVuIHRoZSBlbGVtZW50IHdpbGwgbm90IGZsaXAgc2lkZXMgb24gdGhlIHRhcmdldC4gVGhleSB3aWxsLCBob3dldmVyLCBiZSBudWRnZWQgdG8gZml0IHdpdGhpbiB0aGUgYm91bmRzIGdpdmVuLlxuICovXG5mdW5jdGlvbiBfYWRqdXN0Rml0V2l0aGluQm91bmRzKGVsZW1lbnQsIHRhcmdldCwgYm91bmRpbmcsIHBvc2l0aW9uRGF0YSwgZ2FwLCBkaXJlY3Rpb25hbEhpbnRGaXhlZCwgY292ZXJUYXJnZXQpIHtcbiAgICBpZiAoZ2FwID09PSB2b2lkIDApIHsgZ2FwID0gMDsgfVxuICAgIHZhciBhbGlnbm1lbnRFZGdlID0gcG9zaXRpb25EYXRhLmFsaWdubWVudEVkZ2UsIGFsaWduVGFyZ2V0RWRnZSA9IHBvc2l0aW9uRGF0YS5hbGlnblRhcmdldEVkZ2U7XG4gICAgdmFyIGVsZW1lbnRFc3RpbWF0ZSA9IHtcbiAgICAgICAgZWxlbWVudFJlY3RhbmdsZTogZWxlbWVudCxcbiAgICAgICAgdGFyZ2V0RWRnZTogcG9zaXRpb25EYXRhLnRhcmdldEVkZ2UsXG4gICAgICAgIGFsaWdubWVudEVkZ2U6IGFsaWdubWVudEVkZ2UsXG4gICAgfTtcbiAgICBpZiAoIWRpcmVjdGlvbmFsSGludEZpeGVkICYmICFjb3ZlclRhcmdldCkge1xuICAgICAgICBlbGVtZW50RXN0aW1hdGUgPSBfZmxpcFRvRml0KGVsZW1lbnQsIHRhcmdldCwgYm91bmRpbmcsIHBvc2l0aW9uRGF0YSwgZ2FwKTtcbiAgICB9XG4gICAgdmFyIG91dE9mQm91bmRzID0gX2dldE91dE9mQm91bmRzRWRnZXMoZWxlbWVudEVzdGltYXRlLmVsZW1lbnRSZWN0YW5nbGUsIGJvdW5kaW5nKTtcbiAgICAvLyBpZiBkaXJlY3Rpb25hbEhpbnRGaXhlZCBpcyBzcGVjaWZpZWQsIHdlIG5lZWQgdG8gZm9yY2UgdGhlIHRhcmdldCBlZGdlIHRvIG5vdCBjaGFuZ2VcbiAgICAvLyB3ZSBuZWVkICotMSBiZWNhdXNlIHRhcmdldEVkZ2UgcmVmZXJzIHRvIHRoZSB0YXJnZXQncyBlZGdlOyB0aGUgY2FsbG91dCBlZGdlIGlzIHRoZSBvcHBvc2l0ZVxuICAgIHZhciBmaXhlZEVkZ2UgPSBkaXJlY3Rpb25hbEhpbnRGaXhlZCA/IC1lbGVtZW50RXN0aW1hdGUudGFyZ2V0RWRnZSA6IHVuZGVmaW5lZDtcbiAgICBpZiAob3V0T2ZCb3VuZHMubGVuZ3RoID4gMCkge1xuICAgICAgICBpZiAoYWxpZ25UYXJnZXRFZGdlKSB7XG4gICAgICAgICAgICAvLyBUaGUgZWRnZSBvcHBvc2l0ZSB0byB0aGUgYWxpZ25tZW50IGVkZ2UgbWlnaHQgYmUgb3V0IG9mIGJvdW5kcy5cbiAgICAgICAgICAgIC8vIEZsaXAgYWxpZ25tZW50IHRvIHNlZSBpZiB3ZSBjYW4gZ2V0IGl0IHdpdGhpbiBib3VuZHMuXG4gICAgICAgICAgICBpZiAoZWxlbWVudEVzdGltYXRlLmFsaWdubWVudEVkZ2UgJiYgb3V0T2ZCb3VuZHMuaW5kZXhPZihlbGVtZW50RXN0aW1hdGUuYWxpZ25tZW50RWRnZSAqIC0xKSA+IC0xKSB7XG4gICAgICAgICAgICAgICAgdmFyIGZsaXBwZWRFbGVtZW50RXN0aW1hdGUgPSBfZmxpcEFsaWdubWVudEVkZ2UoZWxlbWVudEVzdGltYXRlLCB0YXJnZXQsIGdhcCwgY292ZXJUYXJnZXQpO1xuICAgICAgICAgICAgICAgIGlmIChfaXNSZWN0YW5nbGVXaXRoaW5Cb3VuZHMoZmxpcHBlZEVsZW1lbnRFc3RpbWF0ZS5lbGVtZW50UmVjdGFuZ2xlLCBib3VuZGluZykpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZsaXBwZWRFbGVtZW50RXN0aW1hdGU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAvLyBJZiB0aGUgZmxpcHBlZCBlbGVtZW50cyBlZGdlcyBhcmUgc3RpbGwgb3V0IG9mIGJvdW5kcywgdHJ5IG51ZGdpbmcgaXQuXG4gICAgICAgICAgICAgICAgICAgIGVsZW1lbnRFc3RpbWF0ZSA9IF9hbGlnbk91dE9mQm91bmRzRWRnZXMoX2dldE91dE9mQm91bmRzRWRnZXMoZmxpcHBlZEVsZW1lbnRFc3RpbWF0ZS5lbGVtZW50UmVjdGFuZ2xlLCBib3VuZGluZyksIGVsZW1lbnRFc3RpbWF0ZSwgYm91bmRpbmcsIGZpeGVkRWRnZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgZWxlbWVudEVzdGltYXRlID0gX2FsaWduT3V0T2ZCb3VuZHNFZGdlcyhvdXRPZkJvdW5kcywgZWxlbWVudEVzdGltYXRlLCBib3VuZGluZywgZml4ZWRFZGdlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGVsZW1lbnRFc3RpbWF0ZSA9IF9hbGlnbk91dE9mQm91bmRzRWRnZXMob3V0T2ZCb3VuZHMsIGVsZW1lbnRFc3RpbWF0ZSwgYm91bmRpbmcsIGZpeGVkRWRnZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGVsZW1lbnRFc3RpbWF0ZTtcbn1cbi8qKlxuICogSXRlcmF0ZXMgdGhyb3VnaCBhIGxpc3Qgb2Ygb3V0IG9mIGJvdW5kcyBlZGdlcyBhbmQgdHJpZXMgdG8gbnVkZ2UgYW5kIGFsaWduIHRoZW0uXG4gKiBAcGFyYW0gb3V0T2ZCb3VuZHNFZGdlcyAtIEFycmF5IG9mIGVkZ2VzIHRoYXQgYXJlIG91dCBvZiBib3VuZHNcbiAqIEBwYXJhbSBlbGVtZW50RXN0aW1hdGUgLSBUaGUgY3VycmVudCBlbGVtZW50IHBvc2l0aW9uaW5nIGVzdGltYXRlXG4gKiBAcGFyYW0gYm91bmRpbmcgLSBUaGUgY3VycmVudCBib3VuZHNcbiAqIEBwYXJhbSBwcmVzZXJ2ZUVkZ2UgLSBTcGVjaWZ5IGFuIGVkZ2UgdGhhdCBzaG91bGQgbm90IGJlIG1vZGlmaWVkXG4gKi9cbmZ1bmN0aW9uIF9hbGlnbk91dE9mQm91bmRzRWRnZXMob3V0T2ZCb3VuZHNFZGdlcywgZWxlbWVudEVzdGltYXRlLCBib3VuZGluZywgcHJlc2VydmVFZGdlKSB7XG4gICAgZm9yICh2YXIgX2kgPSAwLCBvdXRPZkJvdW5kc0VkZ2VzXzEgPSBvdXRPZkJvdW5kc0VkZ2VzOyBfaSA8IG91dE9mQm91bmRzRWRnZXNfMS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgdmFyIGRpcmVjdGlvbiA9IG91dE9mQm91bmRzRWRnZXNfMVtfaV07XG4gICAgICAgIHZhciBlZGdlQXR0ZW1wdCA9IHZvaWQgMDtcbiAgICAgICAgLy8gaWYgcHJlc2VydmVFZGdlIGlzIHNwZWNpZmllZCwgZG8gbm90IGNhbGwgX2FsaWduRWRnZXMsIHNraXAgZGlyZWN0bHkgdG8gX21vdmVFZGdlXG4gICAgICAgIC8vIHRoaXMgaXMgYmVjYXVzZSBfYWxpZ25FZGdlcyB3aWxsIG1vdmUgdGhlIG9wcG9zaXRlIGVkZ2VcbiAgICAgICAgaWYgKHByZXNlcnZlRWRnZSAmJiBwcmVzZXJ2ZUVkZ2UgPT09IGRpcmVjdGlvbiAqIC0xKSB7XG4gICAgICAgICAgICBlZGdlQXR0ZW1wdCA9IF9tb3ZlRWRnZShlbGVtZW50RXN0aW1hdGUuZWxlbWVudFJlY3RhbmdsZSwgZGlyZWN0aW9uLCBfZ2V0RWRnZVZhbHVlKGJvdW5kaW5nLCBkaXJlY3Rpb24pLCBmYWxzZSk7XG4gICAgICAgICAgICBlbGVtZW50RXN0aW1hdGUuZm9yY2VkSW5Cb3VuZHMgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZWRnZUF0dGVtcHQgPSBfYWxpZ25FZGdlcyhlbGVtZW50RXN0aW1hdGUuZWxlbWVudFJlY3RhbmdsZSwgYm91bmRpbmcsIGRpcmVjdGlvbik7XG4gICAgICAgICAgICB2YXIgaW5Cb3VuZHMgPSBfaXNFZGdlSW5Cb3VuZHMoZWRnZUF0dGVtcHQsIGJvdW5kaW5nLCBkaXJlY3Rpb24gKiAtMSk7XG4gICAgICAgICAgICAvLyBvbmx5IHVwZGF0ZSBlc3RpbWF0ZSBpZiB0aGUgYXR0ZW1wdCBkaWRuJ3QgYnJlYWsgb3V0IG9mIHRoZSBvcHBvc2l0ZSBib3VuZGluZyBlZGdlXG4gICAgICAgICAgICBpZiAoIWluQm91bmRzKSB7XG4gICAgICAgICAgICAgICAgZWRnZUF0dGVtcHQgPSBfbW92ZUVkZ2UoZWRnZUF0dGVtcHQsIGRpcmVjdGlvbiAqIC0xLCBfZ2V0RWRnZVZhbHVlKGJvdW5kaW5nLCBkaXJlY3Rpb24gKiAtMSksIGZhbHNlKTtcbiAgICAgICAgICAgICAgICBlbGVtZW50RXN0aW1hdGUuZm9yY2VkSW5Cb3VuZHMgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsZW1lbnRFc3RpbWF0ZS5lbGVtZW50UmVjdGFuZ2xlID0gZWRnZUF0dGVtcHQ7XG4gICAgfVxuICAgIHJldHVybiBlbGVtZW50RXN0aW1hdGU7XG59XG4vKipcbiAqIE1vdmVzIHRoZSBtaWRkbGUgcG9pbnQgb24gYW4gZWRnZSB0byB0aGUgcG9pbnQgZ2l2ZW4uXG4gKiBPbmx5IG1vdmVzIGluIG9uZSBkaXJlY3Rpb24uIEZvciBpbnN0YW5jZSBpZiBhIGJvdHRvbSBlZGdlIGlzIHBhc3NlZCBpbiwgdGhlblxuICogdGhlIGJvdHRvbSBlZGdlIHdpbGwgYmUgbW92ZWQgaW4gdGhlIHggYXhpcyB0byBtYXRjaCB0aGUgcG9pbnQuXG4gKi9cbmZ1bmN0aW9uIF9jZW50ZXJFZGdlVG9Qb2ludChyZWN0LCBlZGdlLCBwb2ludCkge1xuICAgIHZhciBwb3NpdGl2ZUVkZ2UgPSBfZ2V0RmxhbmtpbmdFZGdlcyhlZGdlKS5wb3NpdGl2ZUVkZ2U7XG4gICAgdmFyIGVsZW1lbnRNaWRkbGUgPSBfZ2V0Q2VudGVyVmFsdWUocmVjdCwgZWRnZSk7XG4gICAgdmFyIGRpc3RhbmNlVG9NaWRkbGUgPSBlbGVtZW50TWlkZGxlIC0gX2dldEVkZ2VWYWx1ZShyZWN0LCBwb3NpdGl2ZUVkZ2UpO1xuICAgIHJldHVybiBfbW92ZUVkZ2UocmVjdCwgcG9zaXRpdmVFZGdlLCBwb2ludCAtIGRpc3RhbmNlVG9NaWRkbGUpO1xufVxuLyoqXG4gKiBNb3ZlcyB0aGUgZWxlbWVudCByZWN0YW5nbGUgdG8gYmUgYXBwcm9wcmlhdGVseSBwb3NpdGlvbmVkIHJlbGF0aXZlIHRvIGEgZ2l2ZW4gdGFyZ2V0LlxuICogRG9lcyBub3QgZmxpcCBvciBhZGp1c3QgdGhlIGVsZW1lbnQuXG4gKi9cbmZ1bmN0aW9uIF9lc3RpbWF0ZVBvc2l0aW9uKGVsZW1lbnRUb1Bvc2l0aW9uLCB0YXJnZXQsIHBvc2l0aW9uRGF0YSwgZ2FwLCBjb3ZlclRhcmdldCkge1xuICAgIGlmIChnYXAgPT09IHZvaWQgMCkgeyBnYXAgPSAwOyB9XG4gICAgdmFyIGVzdGltYXRlZEVsZW1lbnRQb3NpdGlvbiA9IG5ldyBSZWN0YW5nbGUoZWxlbWVudFRvUG9zaXRpb24ubGVmdCwgZWxlbWVudFRvUG9zaXRpb24ucmlnaHQsIGVsZW1lbnRUb1Bvc2l0aW9uLnRvcCwgZWxlbWVudFRvUG9zaXRpb24uYm90dG9tKTtcbiAgICB2YXIgYWxpZ25tZW50RWRnZSA9IHBvc2l0aW9uRGF0YS5hbGlnbm1lbnRFZGdlLCB0YXJnZXRFZGdlID0gcG9zaXRpb25EYXRhLnRhcmdldEVkZ2U7XG4gICAgdmFyIGVsZW1lbnRFZGdlID0gY292ZXJUYXJnZXQgPyB0YXJnZXRFZGdlIDogdGFyZ2V0RWRnZSAqIC0xO1xuICAgIGVzdGltYXRlZEVsZW1lbnRQb3NpdGlvbiA9IGNvdmVyVGFyZ2V0XG4gICAgICAgID8gX2FsaWduRWRnZXMoZXN0aW1hdGVkRWxlbWVudFBvc2l0aW9uLCB0YXJnZXQsIHRhcmdldEVkZ2UsIGdhcClcbiAgICAgICAgOiBfYWxpZ25PcHBvc2l0ZUVkZ2VzKGVzdGltYXRlZEVsZW1lbnRQb3NpdGlvbiwgdGFyZ2V0LCB0YXJnZXRFZGdlLCBnYXApO1xuICAgIC8vIGlmIG5vIGFsaWdubWVudCBlZGdlIGlzIHByb3ZpZGVkIGl0J3Mgc3VwcG9zZWQgdG8gYmUgY2VudGVyZWQuXG4gICAgaWYgKCFhbGlnbm1lbnRFZGdlKSB7XG4gICAgICAgIHZhciB0YXJnZXRNaWRkbGVQb2ludCA9IF9nZXRDZW50ZXJWYWx1ZSh0YXJnZXQsIHRhcmdldEVkZ2UpO1xuICAgICAgICBlc3RpbWF0ZWRFbGVtZW50UG9zaXRpb24gPSBfY2VudGVyRWRnZVRvUG9pbnQoZXN0aW1hdGVkRWxlbWVudFBvc2l0aW9uLCBlbGVtZW50RWRnZSwgdGFyZ2V0TWlkZGxlUG9pbnQpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgZXN0aW1hdGVkRWxlbWVudFBvc2l0aW9uID0gX2FsaWduRWRnZXMoZXN0aW1hdGVkRWxlbWVudFBvc2l0aW9uLCB0YXJnZXQsIGFsaWdubWVudEVkZ2UpO1xuICAgIH1cbiAgICByZXR1cm4gZXN0aW1hdGVkRWxlbWVudFBvc2l0aW9uO1xufVxuLyoqXG4gKiBSZXR1cm5zIHRoZSBub24tb3Bwb3NpdGUgZWRnZXMgb2YgdGhlIHRhcmdldCBlZGdlLlxuICogRm9yIGluc3RhbmNlIGlmIGJvdHRvbSBpcyBwYXNzZWQgaW4gdGhlbiBsZWZ0IGFuZCByaWdodCB3aWxsIGJlIHJldHVybmVkLlxuICovXG5mdW5jdGlvbiBfZ2V0RmxhbmtpbmdFZGdlcyhlZGdlKSB7XG4gICAgaWYgKGVkZ2UgPT09IFJlY3RhbmdsZUVkZ2UudG9wIHx8IGVkZ2UgPT09IFJlY3RhbmdsZUVkZ2UuYm90dG9tKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBwb3NpdGl2ZUVkZ2U6IFJlY3RhbmdsZUVkZ2UubGVmdCxcbiAgICAgICAgICAgIG5lZ2F0aXZlRWRnZTogUmVjdGFuZ2xlRWRnZS5yaWdodCxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBwb3NpdGl2ZUVkZ2U6IFJlY3RhbmdsZUVkZ2UudG9wLFxuICAgICAgICAgICAgbmVnYXRpdmVFZGdlOiBSZWN0YW5nbGVFZGdlLmJvdHRvbSxcbiAgICAgICAgfTtcbiAgICB9XG59XG4vKipcbiAqIFJldHJpZXZlIHRoZSBmaW5hbCB2YWx1ZSBmb3IgdGhlIHJldHVybiBlZGdlIG9mIGBlbGVtZW50UmVjdGFuZ2xlYC4gSWYgdGhlIGBlbGVtZW50UmVjdGFuZ2xlYCBpcyBjbG9zZXIgdG8gb25lIHNpZGVcbiAqIG9mIHRoZSBib3VuZHMgdmVyc3VzIHRoZSBvdGhlciwgdGhlIHJldHVybiBlZGdlIGlzIGZsaXBwZWQgdG8gZ3JvdyBpbndhcmQuXG4gKi9cbmZ1bmN0aW9uIF9maW5hbGl6ZVJldHVybkVkZ2UoZWxlbWVudFJlY3RhbmdsZSwgcmV0dXJuRWRnZSwgYm91bmRzKSB7XG4gICAgaWYgKGJvdW5kcyAmJlxuICAgICAgICBNYXRoLmFicyhfZ2V0UmVsYXRpdmVFZGdlRGlmZmVyZW5jZShlbGVtZW50UmVjdGFuZ2xlLCBib3VuZHMsIHJldHVybkVkZ2UpKSA+XG4gICAgICAgICAgICBNYXRoLmFicyhfZ2V0UmVsYXRpdmVFZGdlRGlmZmVyZW5jZShlbGVtZW50UmVjdGFuZ2xlLCBib3VuZHMsIHJldHVybkVkZ2UgKiAtMSkpKSB7XG4gICAgICAgIHJldHVybiByZXR1cm5FZGdlICogLTE7XG4gICAgfVxuICAgIHJldHVybiByZXR1cm5FZGdlO1xufVxuLyoqXG4gKiBXaGV0aGVyIG9yIG5vdCB0aGUgY29uc2lkZXJlZCBlZGdlIG9mIHRoZSBlbGVtZW50UmVjdGFuZ2xlIGlzIGx5aW5nIG9uIHRoZSBlZGdlIG9mIHRoZSBib3VuZHNcbiAqIEBwYXJhbSBlbGVtZW50UmVjdGFuZ2xlIFRoZSByZWN0YW5nbGUgd2hvc2UgZWRnZSB3ZSBhcmUgY29uc2lkZXJpbmdcbiAqIEBwYXJhbSBib3VuZHMgVGhlIHJlY3RhbmdsZSBtYXJraW5nIHRoZSBib3VuZHNcbiAqIEBwYXJhbSBlZGdlIFRoZSB0YXJnZXQgZWRnZSB3ZSdyZSBjb25zaWRlcmluZ1xuICogQHJldHVybnMgSWYgdGhlIHRhcmdldCBlZGdlIG9mIHRoZSBlbGVtZW50UmVjdGFuZ2xlIGlzIGluIHRoZSBzYW1lIGxvY2F0aW9uIGFzIHRoYXQgZWRnZSBvZiB0aGUgYm91bmRzXG4gKi9cbmZ1bmN0aW9uIF9pc0VkZ2VPbkJvdW5kcyhlbGVtZW50UmVjdGFuZ2xlLCBlZGdlLCBib3VuZHMpIHtcbiAgICByZXR1cm4gYm91bmRzICE9PSB1bmRlZmluZWQgJiYgX2dldEVkZ2VWYWx1ZShlbGVtZW50UmVjdGFuZ2xlLCBlZGdlKSA9PT0gX2dldEVkZ2VWYWx1ZShib3VuZHMsIGVkZ2UpO1xufVxuLyoqXG4gKiBGaW5hbGl6ZXMgdGhlIGVsZW1lbnQgcG9zaXRpb24gYmFzZWQgb24gdGhlIGhvc3RFbGVtZW50LiBPbmx5IHJldHVybnMgdGhlXG4gKiByZWN0YW5nbGUgdmFsdWVzIHRvIHBvc2l0aW9uIHN1Y2ggdGhhdCB0aGV5IGFyZSBhbmNob3JlZCB0byB0aGUgdGFyZ2V0LlxuICogVGhpcyBoZWxwcyBwcmV2ZW50IHJlc2l6aW5nIGZyb20gbG9va2luZyB2ZXJ5IHN0cmFuZ2UuXG4gKiBGb3IgaW5zdGFuY2UsIGlmIHRoZSB0YXJnZXQgZWRnZSBpcyB0b3AgYW5kIGFsaWduZWQgd2l0aCB0aGUgbGVmdCBzaWRlIHRoZW5cbiAqIHRoZSBib3R0b20gYW5kIGxlZnQgdmFsdWVzIGFyZSByZXR1cm5lZCBzbyBhcyB0aGUgQ2FsbG91dCBzaHJpbmtzIGl0IHNocmlua3MgdG93YXJkcyB0aGF0IGNvcm5lci5cbiAqL1xuZnVuY3Rpb24gX2ZpbmFsaXplRWxlbWVudFBvc2l0aW9uKGVsZW1lbnRSZWN0YW5nbGUsIGhvc3RFbGVtZW50LCB0YXJnZXRFZGdlLCBib3VuZHMsIGFsaWdubWVudEVkZ2UsIGNvdmVyVGFyZ2V0LCBkb05vdEZpbmFsaXplUmV0dXJuRWRnZSwgZm9yY2VXaXRoaW5Cb3VuZHMpIHtcbiAgICB2YXIgcmV0dXJuVmFsdWUgPSB7fTtcbiAgICB2YXIgaG9zdFJlY3QgPSBfZ2V0UmVjdGFuZ2xlRnJvbUVsZW1lbnQoaG9zdEVsZW1lbnQpO1xuICAgIHZhciBlbGVtZW50RWRnZSA9IGNvdmVyVGFyZ2V0ID8gdGFyZ2V0RWRnZSA6IHRhcmdldEVkZ2UgKiAtMTtcbiAgICB2YXIgcmV0dXJuRWRnZSA9IGFsaWdubWVudEVkZ2UgPyBhbGlnbm1lbnRFZGdlIDogX2dldEZsYW5raW5nRWRnZXModGFyZ2V0RWRnZSkucG9zaXRpdmVFZGdlO1xuICAgIC8vIElmIHdlIGFyZSBmaW5hbGl6aW5nIHRoZSByZXR1cm4gZWRnZSwgY2hvb3NlIHRoZSBlZGdlIHN1Y2ggdGhhdCB3ZSBncm93IGF3YXkgZnJvbSB0aGUgYm91bmRzXG4gICAgLy8gSWYgd2UgYXJlIG5vdCBmaW5hbGl6aW5nIHRoZSByZXR1cm4gZWRnZSBidXQgdGhlIG9wcG9zaXRlIGVkZ2UgaXMgZmx1c2ggYWdhaW5zdCB0aGUgYm91bmRzLFxuICAgIC8vIGNob29zZSB0aGF0IGFzIHRoZSBhbmNob3IgZWRnZSBzbyB0aGUgZWxlbWVudCByZWN0IGNhbiBncm93IGF3YXkgZnJvbSB0aGUgYm91bmRzJyBlZGdlXG4gICAgLy8gSW4gdGhpcyBjYXNlIHRoZXJlIHdpbGwgbm90IGJlIGEgdmlzdWFsIGRpZmZlcmVuY2UgYmVjYXVzZSB0aGVyZSBpcyBubyBtb3JlIHJvb20gZm9yIHRoZSBlbGVtZW50UmVjdGFuZ2xlIHRvIGdyb3dcbiAgICAvLyBpbiB0aGUgdXN1YWwgZGlyZWN0aW9uXG4gICAgaWYgKCFkb05vdEZpbmFsaXplUmV0dXJuRWRnZSB8fCBfaXNFZGdlT25Cb3VuZHMoZWxlbWVudFJlY3RhbmdsZSwgZ2V0T3Bwb3NpdGVFZGdlKHJldHVybkVkZ2UpLCBib3VuZHMpKSB7XG4gICAgICAgIHJldHVybkVkZ2UgPSBfZmluYWxpemVSZXR1cm5FZGdlKGVsZW1lbnRSZWN0YW5nbGUsIHJldHVybkVkZ2UsIGJvdW5kcyk7XG4gICAgfVxuICAgIHJldHVyblZhbHVlW1JlY3RhbmdsZUVkZ2VbZWxlbWVudEVkZ2VdXSA9IF9nZXRSZWxhdGl2ZUVkZ2VEaWZmZXJlbmNlKGVsZW1lbnRSZWN0YW5nbGUsIGhvc3RSZWN0LCBlbGVtZW50RWRnZSk7XG4gICAgcmV0dXJuVmFsdWVbUmVjdGFuZ2xlRWRnZVtyZXR1cm5FZGdlXV0gPSBfZ2V0UmVsYXRpdmVFZGdlRGlmZmVyZW5jZShlbGVtZW50UmVjdGFuZ2xlLCBob3N0UmVjdCwgcmV0dXJuRWRnZSk7XG4gICAgLy8gaWYgdGhlIHBvc2l0aW9uZWQgZWxlbWVudCB3aWxsIHN0aWxsIG92ZXJmbG93LCByZXR1cm4gYWxsIGZvdXIgZWRnZXMgd2l0aCBpbi1ib3VuZHMgdmFsdWVzXG4gICAgaWYgKGZvcmNlV2l0aGluQm91bmRzKSB7XG4gICAgICAgIHJldHVyblZhbHVlW1JlY3RhbmdsZUVkZ2VbZWxlbWVudEVkZ2UgKiAtMV1dID0gX2dldFJlbGF0aXZlRWRnZURpZmZlcmVuY2UoZWxlbWVudFJlY3RhbmdsZSwgaG9zdFJlY3QsIGVsZW1lbnRFZGdlICogLTEpO1xuICAgICAgICByZXR1cm5WYWx1ZVtSZWN0YW5nbGVFZGdlW3JldHVybkVkZ2UgKiAtMV1dID0gX2dldFJlbGF0aXZlRWRnZURpZmZlcmVuY2UoZWxlbWVudFJlY3RhbmdsZSwgaG9zdFJlY3QsIHJldHVybkVkZ2UgKiAtMSk7XG4gICAgfVxuICAgIHJldHVybiByZXR1cm5WYWx1ZTtcbn1cbi8vIFNpbmNlIHRoZSBiZWFrIGlzIHJvdGF0ZWQgNDUgZGVncmVlcyB0aGUgYWN0dWFsIGhlaWdodC93aWR0aCBpcyB0aGUgbGVuZ3RoIG9mIHRoZSBkaWFnb25hbC5cbi8vIFdlIHN0aWxsIHdhbnQgdG8gcG9zaXRpb24gdGhlIGJlYWsgYmFzZWQgb24gaXQncyBtaWRwb2ludCB3aGljaCBkb2VzIG5vdCBjaGFuZ2UuIEl0IHdpbGxcbi8vIGJlIGF0IChiZWFrd2lkdGggLyAyLCBiZWFrd2lkdGggLyAyKVxuZnVuY3Rpb24gX2NhbGN1bGF0ZUFjdHVhbEJlYWtXaWR0aEluUGl4ZWxzKGJlYWtXaWR0aCkge1xuICAgIHJldHVybiBNYXRoLnNxcnQoYmVha1dpZHRoICogYmVha1dpZHRoICogMik7XG59XG4vKipcbiAqIFJldHVybnMgdGhlIGFwcHJvcHJpYXRlIElQb3NpdGlvbkRhdGEgYmFzZWQgb24gdGhlIHByb3BzIGFsdGVyZWQgZm9yIFJUTC5cbiAqIElmIGRpcmVjdGlvbmFsSGludEZvclJUTCBpcyBwYXNzZWQgaW4gdGhhdCBpcyB1c2VkIGlmIHRoZSBwYWdlIGlzIFJUTC5cbiAqIElmIGRpcmVjdGlvbmFsSGludCBpcyBzcGVjaWZpZWQsIG5vIGRpcmVjdGlvbmFsSGludEZvclJUTCBpcyBhdmFpbGFibGUsIGFuZCB0aGUgcGFnZSBpcyBSVEwsIHRoZSBoaW50IHdpbGwgYmVcbiAqIGZsaXBwZWQgKGUuZy4gYm90dG9tTGVmdEVkZ2Ugd291bGQgYmVjb21lIGJvdHRvbVJpZ2h0RWRnZSkuXG4gKlxuICogSWYgdGhlcmUgaXMgbm8gZGlyZWN0aW9uYWxIaW50IHBhc3NlZCBpbiwgYm90dG9tQXV0b0VkZ2UgaXMgY2hvc2VuIGF1dG9tYXRpY2FsbHkuXG4gKi9cbmZ1bmN0aW9uIF9nZXRQb3NpdGlvbkRhdGEoZGlyZWN0aW9uYWxIaW50LCBkaXJlY3Rpb25hbEhpbnRGb3JSVEwsIHByZXZpb3VzUG9zaXRpb25zKSB7XG4gICAgaWYgKGRpcmVjdGlvbmFsSGludCA9PT0gdm9pZCAwKSB7IGRpcmVjdGlvbmFsSGludCA9IERpcmVjdGlvbmFsSGludC5ib3R0b21BdXRvRWRnZTsgfVxuICAgIGlmIChwcmV2aW91c1Bvc2l0aW9ucykge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgYWxpZ25tZW50RWRnZTogcHJldmlvdXNQb3NpdGlvbnMuYWxpZ25tZW50RWRnZSxcbiAgICAgICAgICAgIGlzQXV0bzogcHJldmlvdXNQb3NpdGlvbnMuaXNBdXRvLFxuICAgICAgICAgICAgdGFyZ2V0RWRnZTogcHJldmlvdXNQb3NpdGlvbnMudGFyZ2V0RWRnZSxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgdmFyIHBvc2l0aW9uSW5mb3JtYXRpb24gPSBfX2Fzc2lnbih7fSwgRGlyZWN0aW9uYWxEaWN0aW9uYXJ5W2RpcmVjdGlvbmFsSGludF0pO1xuICAgIGlmIChnZXRSVEwoKSkge1xuICAgICAgICAvLyBJZiBhbGlnbm1lbnQgZWRnZSBleGlzdHMgYW5kIHRoYXQgYWxpZ25tZW50IGVkZ2UgaXMgLTIgb3IgMiwgcmlnaHQgb3IgbGVmdCwgdGhlbiBmbGlwIGl0LlxuICAgICAgICBpZiAocG9zaXRpb25JbmZvcm1hdGlvbi5hbGlnbm1lbnRFZGdlICYmIHBvc2l0aW9uSW5mb3JtYXRpb24uYWxpZ25tZW50RWRnZSAlIDIgPT09IDApIHtcbiAgICAgICAgICAgIHBvc2l0aW9uSW5mb3JtYXRpb24uYWxpZ25tZW50RWRnZSA9IHBvc2l0aW9uSW5mb3JtYXRpb24uYWxpZ25tZW50RWRnZSAqIC0xO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBkaXJlY3Rpb25hbEhpbnRGb3JSVEwgIT09IHVuZGVmaW5lZCA/IERpcmVjdGlvbmFsRGljdGlvbmFyeVtkaXJlY3Rpb25hbEhpbnRGb3JSVExdIDogcG9zaXRpb25JbmZvcm1hdGlvbjtcbiAgICB9XG4gICAgcmV0dXJuIHBvc2l0aW9uSW5mb3JtYXRpb247XG59XG4vKipcbiAqIEdldHMgdGhlIGFsaWdubWVudCBkYXRhIGZvciB0aGUgZ2l2ZW4gaW5mb3JtYXRpb24uIFRoaXMgb25seSByZWFsbHkgbWF0dGVycyBpZiB0aGUgcG9zaXRpb25pbmcgaXMgQXV0by5cbiAqIElmIGl0IGlzIGF1dG8gdGhlbiB0aGUgYWxpZ25tZW50RWRnZSBzaG91bGQgYmUgY2hvc2VuIGJhc2VkIG9uIHRoZSB0YXJnZXQgZWRnZSdzIHBvc2l0aW9uIHJlbGF0aXZlIHRvXG4gKiB0aGUgY2VudGVyIG9mIHRoZSBwYWdlLlxuICovXG5mdW5jdGlvbiBfZ2V0QWxpZ25tZW50RGF0YShwb3NpdGlvbkRhdGEsIHRhcmdldCwgYm91bmRpbmdSZWN0LCBjb3ZlclRhcmdldCwgYWxpZ25UYXJnZXRFZGdlKSB7XG4gICAgaWYgKHBvc2l0aW9uRGF0YS5pc0F1dG8pIHtcbiAgICAgICAgcG9zaXRpb25EYXRhLmFsaWdubWVudEVkZ2UgPSBnZXRDbG9zZXN0RWRnZShwb3NpdGlvbkRhdGEudGFyZ2V0RWRnZSwgdGFyZ2V0LCBib3VuZGluZ1JlY3QpO1xuICAgIH1cbiAgICBwb3NpdGlvbkRhdGEuYWxpZ25UYXJnZXRFZGdlID0gYWxpZ25UYXJnZXRFZGdlO1xuICAgIHJldHVybiBwb3NpdGlvbkRhdGE7XG59XG5mdW5jdGlvbiBnZXRDbG9zZXN0RWRnZSh0YXJnZXRFZGdlLCB0YXJnZXQsIGJvdW5kaW5nUmVjdCkge1xuICAgIHZhciB0YXJnZXRDZW50ZXIgPSBfZ2V0Q2VudGVyVmFsdWUodGFyZ2V0LCB0YXJnZXRFZGdlKTtcbiAgICB2YXIgYm91bmRpbmdDZW50ZXIgPSBfZ2V0Q2VudGVyVmFsdWUoYm91bmRpbmdSZWN0LCB0YXJnZXRFZGdlKTtcbiAgICB2YXIgX2EgPSBfZ2V0RmxhbmtpbmdFZGdlcyh0YXJnZXRFZGdlKSwgcG9zaXRpdmVFZGdlID0gX2EucG9zaXRpdmVFZGdlLCBuZWdhdGl2ZUVkZ2UgPSBfYS5uZWdhdGl2ZUVkZ2U7XG4gICAgaWYgKHRhcmdldENlbnRlciA8PSBib3VuZGluZ0NlbnRlcikge1xuICAgICAgICByZXR1cm4gcG9zaXRpdmVFZGdlO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIG5lZ2F0aXZlRWRnZTtcbiAgICB9XG59XG5mdW5jdGlvbiBfcG9zaXRpb25FbGVtZW50V2l0aGluQm91bmRzKGVsZW1lbnRUb1Bvc2l0aW9uLCB0YXJnZXQsIGJvdW5kaW5nLCBwb3NpdGlvbkRhdGEsIGdhcCwgZGlyZWN0aW9uYWxIaW50Rml4ZWQsIGNvdmVyVGFyZ2V0KSB7XG4gICAgdmFyIGVzdGltYXRlZEVsZW1lbnRQb3NpdGlvbiA9IF9lc3RpbWF0ZVBvc2l0aW9uKGVsZW1lbnRUb1Bvc2l0aW9uLCB0YXJnZXQsIHBvc2l0aW9uRGF0YSwgZ2FwLCBjb3ZlclRhcmdldCk7XG4gICAgaWYgKF9pc1JlY3RhbmdsZVdpdGhpbkJvdW5kcyhlc3RpbWF0ZWRFbGVtZW50UG9zaXRpb24sIGJvdW5kaW5nKSkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZWxlbWVudFJlY3RhbmdsZTogZXN0aW1hdGVkRWxlbWVudFBvc2l0aW9uLFxuICAgICAgICAgICAgdGFyZ2V0RWRnZTogcG9zaXRpb25EYXRhLnRhcmdldEVkZ2UsXG4gICAgICAgICAgICBhbGlnbm1lbnRFZGdlOiBwb3NpdGlvbkRhdGEuYWxpZ25tZW50RWRnZSxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiBfYWRqdXN0Rml0V2l0aGluQm91bmRzKGVzdGltYXRlZEVsZW1lbnRQb3NpdGlvbiwgdGFyZ2V0LCBib3VuZGluZywgcG9zaXRpb25EYXRhLCBnYXAsIGRpcmVjdGlvbmFsSGludEZpeGVkLCBjb3ZlclRhcmdldCk7XG4gICAgfVxufVxuZnVuY3Rpb24gX2ZpbmFsaXplQmVha1Bvc2l0aW9uKGVsZW1lbnRQb3NpdGlvbiwgcG9zaXRpb25lZEJlYWssIGJvdW5kcykge1xuICAgIHZhciB0YXJnZXRFZGdlID0gZWxlbWVudFBvc2l0aW9uLnRhcmdldEVkZ2UgKiAtMTtcbiAgICAvLyBUaGUgXCJob3N0XCIgZWxlbWVudCB0aGF0IHdlIHdpbGwgdXNlIHRvIGhlbHAgcG9zaXRpb24gdGhlIGJlYWsuXG4gICAgdmFyIGFjdHVhbEVsZW1lbnQgPSBuZXcgUmVjdGFuZ2xlKDAsIGVsZW1lbnRQb3NpdGlvbi5lbGVtZW50UmVjdGFuZ2xlLndpZHRoLCAwLCBlbGVtZW50UG9zaXRpb24uZWxlbWVudFJlY3RhbmdsZS5oZWlnaHQpO1xuICAgIHZhciByZXR1cm5WYWx1ZSA9IHt9O1xuICAgIHZhciByZXR1cm5FZGdlID0gX2ZpbmFsaXplUmV0dXJuRWRnZShlbGVtZW50UG9zaXRpb24uZWxlbWVudFJlY3RhbmdsZSwgZWxlbWVudFBvc2l0aW9uLmFsaWdubWVudEVkZ2UgPyBlbGVtZW50UG9zaXRpb24uYWxpZ25tZW50RWRnZSA6IF9nZXRGbGFua2luZ0VkZ2VzKHRhcmdldEVkZ2UpLnBvc2l0aXZlRWRnZSwgYm91bmRzKTtcbiAgICAvLyBvbmx5IHNob3cgdGhlIGJlYWsgaWYgdGhlIGNhbGxvdXQgaXMgbm90IGZ1bGx5IGNvdmVyaW5nIHRoZSB0YXJnZXRcbiAgICB2YXIgYmVha0VkZ2VEaWZmZXJlbmNlID0gX2dldFJlbGF0aXZlRWRnZURpZmZlcmVuY2UoZWxlbWVudFBvc2l0aW9uLmVsZW1lbnRSZWN0YW5nbGUsIGVsZW1lbnRQb3NpdGlvbi50YXJnZXRSZWN0YW5nbGUsIHRhcmdldEVkZ2UpO1xuICAgIHZhciBzaG93QmVhayA9IGJlYWtFZGdlRGlmZmVyZW5jZSA+IE1hdGguYWJzKF9nZXRFZGdlVmFsdWUocG9zaXRpb25lZEJlYWssIHRhcmdldEVkZ2UpKTtcbiAgICByZXR1cm5WYWx1ZVtSZWN0YW5nbGVFZGdlW3RhcmdldEVkZ2VdXSA9IF9nZXRFZGdlVmFsdWUocG9zaXRpb25lZEJlYWssIHRhcmdldEVkZ2UpO1xuICAgIHJldHVyblZhbHVlW1JlY3RhbmdsZUVkZ2VbcmV0dXJuRWRnZV1dID0gX2dldFJlbGF0aXZlRWRnZURpZmZlcmVuY2UocG9zaXRpb25lZEJlYWssIGFjdHVhbEVsZW1lbnQsIHJldHVybkVkZ2UpO1xuICAgIHJldHVybiB7XG4gICAgICAgIGVsZW1lbnRQb3NpdGlvbjogX19hc3NpZ24oe30sIHJldHVyblZhbHVlKSxcbiAgICAgICAgY2xvc2VzdEVkZ2U6IGdldENsb3Nlc3RFZGdlKGVsZW1lbnRQb3NpdGlvbi50YXJnZXRFZGdlLCBwb3NpdGlvbmVkQmVhaywgYWN0dWFsRWxlbWVudCksXG4gICAgICAgIHRhcmdldEVkZ2U6IHRhcmdldEVkZ2UsXG4gICAgICAgIGhpZGVCZWFrOiAhc2hvd0JlYWssXG4gICAgfTtcbn1cbmZ1bmN0aW9uIF9wb3NpdGlvbkJlYWsoYmVha1dpZHRoLCBlbGVtZW50UG9zaXRpb24pIHtcbiAgICB2YXIgdGFyZ2V0ID0gZWxlbWVudFBvc2l0aW9uLnRhcmdldFJlY3RhbmdsZTtcbiAgICAvKipcbiAgICAgKiBOb3RlIGFib3V0IGJlYWsgcG9zaXRpb25pbmc6IFRoZSBhY3R1YWwgYmVhayB3aWR0aCBvbmx5IG1hdHRlcnMgZm9yIGdldHRpbmcgdGhlIGdhcCBiZXR3ZWVuIHRoZSBjYWxsb3V0IGFuZFxuICAgICAqIHRhcmdldCwgaXQgZG9lcyBub3QgaW1wYWN0IHRoZSBiZWFrIHBsYWNlbWVudCB3aXRoaW4gdGhlIGNhbGxvdXQuIEZvciBleGFtcGxlIGV4YW1wbGUsIGlmIHRoZSBiZWFrV2lkdGggaXMgOCxcbiAgICAgKiB0aGVuIHRoZSBhY3R1YWwgYmVha1dpZHRoIGlzIHNxcnJvb3QoOF4yICsgOF4yKSA9IDExLjMxeDExLjMxLiBTbyB0aGUgY2FsbG91dCB3aWxsIG5lZWQgdG8gYmUgYW4gZXh0cmEgMyBwaXhlbHNcbiAgICAgKiBhd2F5IGZyb20gaXRzIHRhcmdldC4gV2hpbGUgdGhlIGJlYWsgaXMgYmVpbmcgcG9zaXRpb25lZCBpbiB0aGUgY2FsbG91dCBpdCBzdGlsbCBhY3RzIGFzIHRob3VnaCBpdCB3ZXJlIDh4OC5cbiAgICAgKi9cbiAgICB2YXIgX2EgPSBfZ2V0RmxhbmtpbmdFZGdlcyhlbGVtZW50UG9zaXRpb24udGFyZ2V0RWRnZSksIHBvc2l0aXZlRWRnZSA9IF9hLnBvc2l0aXZlRWRnZSwgbmVnYXRpdmVFZGdlID0gX2EubmVnYXRpdmVFZGdlO1xuICAgIHZhciBiZWFrVGFyZ2V0UG9pbnQgPSBfZ2V0Q2VudGVyVmFsdWUodGFyZ2V0LCBlbGVtZW50UG9zaXRpb24udGFyZ2V0RWRnZSk7XG4gICAgdmFyIGVsZW1lbnRCb3VuZHMgPSBuZXcgUmVjdGFuZ2xlKGJlYWtXaWR0aCAvIDIsIGVsZW1lbnRQb3NpdGlvbi5lbGVtZW50UmVjdGFuZ2xlLndpZHRoIC0gYmVha1dpZHRoIC8gMiwgYmVha1dpZHRoIC8gMiwgZWxlbWVudFBvc2l0aW9uLmVsZW1lbnRSZWN0YW5nbGUuaGVpZ2h0IC0gYmVha1dpZHRoIC8gMik7XG4gICAgdmFyIGJlYWtQb3NpdGlvbiA9IG5ldyBSZWN0YW5nbGUoMCwgYmVha1dpZHRoLCAwLCBiZWFrV2lkdGgpO1xuICAgIGJlYWtQb3NpdGlvbiA9IF9tb3ZlRWRnZShiZWFrUG9zaXRpb24sIGVsZW1lbnRQb3NpdGlvbi50YXJnZXRFZGdlICogLTEsIC1iZWFrV2lkdGggLyAyKTtcbiAgICBiZWFrUG9zaXRpb24gPSBfY2VudGVyRWRnZVRvUG9pbnQoYmVha1Bvc2l0aW9uLCBlbGVtZW50UG9zaXRpb24udGFyZ2V0RWRnZSAqIC0xLCBiZWFrVGFyZ2V0UG9pbnQgLSBfZ2V0UmVsYXRpdmVSZWN0RWRnZVZhbHVlKHBvc2l0aXZlRWRnZSwgZWxlbWVudFBvc2l0aW9uLmVsZW1lbnRSZWN0YW5nbGUpKTtcbiAgICBpZiAoIV9pc0VkZ2VJbkJvdW5kcyhiZWFrUG9zaXRpb24sIGVsZW1lbnRCb3VuZHMsIHBvc2l0aXZlRWRnZSkpIHtcbiAgICAgICAgYmVha1Bvc2l0aW9uID0gX2FsaWduRWRnZXMoYmVha1Bvc2l0aW9uLCBlbGVtZW50Qm91bmRzLCBwb3NpdGl2ZUVkZ2UpO1xuICAgIH1cbiAgICBlbHNlIGlmICghX2lzRWRnZUluQm91bmRzKGJlYWtQb3NpdGlvbiwgZWxlbWVudEJvdW5kcywgbmVnYXRpdmVFZGdlKSkge1xuICAgICAgICBiZWFrUG9zaXRpb24gPSBfYWxpZ25FZGdlcyhiZWFrUG9zaXRpb24sIGVsZW1lbnRCb3VuZHMsIG5lZ2F0aXZlRWRnZSk7XG4gICAgfVxuICAgIHJldHVybiBiZWFrUG9zaXRpb247XG59XG5mdW5jdGlvbiBfZ2V0UmVjdGFuZ2xlRnJvbUVsZW1lbnQoZWxlbWVudCkge1xuICAgIHZhciBjbGllbnRSZWN0ID0gZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICByZXR1cm4gbmV3IFJlY3RhbmdsZShjbGllbnRSZWN0LmxlZnQsIGNsaWVudFJlY3QucmlnaHQsIGNsaWVudFJlY3QudG9wLCBjbGllbnRSZWN0LmJvdHRvbSk7XG59XG5mdW5jdGlvbiBfZ2V0UmVjdGFuZ2xlRnJvbUlSZWN0KHJlY3QpIHtcbiAgICByZXR1cm4gbmV3IFJlY3RhbmdsZShyZWN0LmxlZnQsIHJlY3QucmlnaHQsIHJlY3QudG9wLCByZWN0LmJvdHRvbSk7XG59XG5mdW5jdGlvbiBfZ2V0VGFyZ2V0UmVjdChib3VuZHMsIHRhcmdldCkge1xuICAgIHZhciB0YXJnZXRSZWN0YW5nbGU7XG4gICAgaWYgKHRhcmdldCkge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tZXh0cmEtYm9vbGVhbi1jYXN0XG4gICAgICAgIGlmICghIXRhcmdldC5wcmV2ZW50RGVmYXVsdCkge1xuICAgICAgICAgICAgdmFyIGV2ID0gdGFyZ2V0O1xuICAgICAgICAgICAgdGFyZ2V0UmVjdGFuZ2xlID0gbmV3IFJlY3RhbmdsZShldi5jbGllbnRYLCBldi5jbGllbnRYLCBldi5jbGllbnRZLCBldi5jbGllbnRZKTtcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1leHRyYS1ib29sZWFuLWNhc3RcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICghIXRhcmdldC5nZXRCb3VuZGluZ0NsaWVudFJlY3QpIHtcbiAgICAgICAgICAgIHRhcmdldFJlY3RhbmdsZSA9IF9nZXRSZWN0YW5nbGVGcm9tRWxlbWVudCh0YXJnZXQpO1xuICAgICAgICAgICAgLy8gSFRNTEltZ0VsZW1lbnRzIGNhbiBoYXZlIHggYW5kIHkgdmFsdWVzLiBUaGUgY2hlY2sgZm9yIGl0IGJlaW5nIGEgcG9pbnQgbXVzdCBnbyBsYXN0LlxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdmFyIHJlY3RPclBvaW50ID0gdGFyZ2V0O1xuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGRlcHJlY2F0aW9uL2RlcHJlY2F0aW9uXG4gICAgICAgICAgICB2YXIgbGVmdCA9IHJlY3RPclBvaW50LmxlZnQgfHwgcmVjdE9yUG9pbnQueDtcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBkZXByZWNhdGlvbi9kZXByZWNhdGlvblxuICAgICAgICAgICAgdmFyIHRvcF8xID0gcmVjdE9yUG9pbnQudG9wIHx8IHJlY3RPclBvaW50Lnk7XG4gICAgICAgICAgICB2YXIgcmlnaHQgPSByZWN0T3JQb2ludC5yaWdodCB8fCBsZWZ0O1xuICAgICAgICAgICAgdmFyIGJvdHRvbSA9IHJlY3RPclBvaW50LmJvdHRvbSB8fCB0b3BfMTtcbiAgICAgICAgICAgIHRhcmdldFJlY3RhbmdsZSA9IG5ldyBSZWN0YW5nbGUobGVmdCwgcmlnaHQsIHRvcF8xLCBib3R0b20pO1xuICAgICAgICB9XG4gICAgICAgIGlmICghX2lzUmVjdGFuZ2xlV2l0aGluQm91bmRzKHRhcmdldFJlY3RhbmdsZSwgYm91bmRzKSkge1xuICAgICAgICAgICAgdmFyIG91dE9mQm91bmRzID0gX2dldE91dE9mQm91bmRzRWRnZXModGFyZ2V0UmVjdGFuZ2xlLCBib3VuZHMpO1xuICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBvdXRPZkJvdW5kc18xID0gb3V0T2ZCb3VuZHM7IF9pIDwgb3V0T2ZCb3VuZHNfMS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgZGlyZWN0aW9uID0gb3V0T2ZCb3VuZHNfMVtfaV07XG4gICAgICAgICAgICAgICAgdGFyZ2V0UmVjdGFuZ2xlW1JlY3RhbmdsZUVkZ2VbZGlyZWN0aW9uXV0gPSBib3VuZHNbUmVjdGFuZ2xlRWRnZVtkaXJlY3Rpb25dXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgdGFyZ2V0UmVjdGFuZ2xlID0gbmV3IFJlY3RhbmdsZSgwLCAwLCAwLCAwKTtcbiAgICB9XG4gICAgcmV0dXJuIHRhcmdldFJlY3RhbmdsZTtcbn1cbi8qKlxuICogSWYgbWF4IGhlaWdodCBpcyBsZXNzIHRoYW4gemVybyBpdCByZXR1cm5zIHRoZSBib3VuZHMgaGVpZ2h0IGluc3RlYWQuXG4gKi9cbmZ1bmN0aW9uIF9nZXRNYXhIZWlnaHRGcm9tVGFyZ2V0UmVjdGFuZ2xlKHRhcmdldFJlY3RhbmdsZSwgdGFyZ2V0RWRnZSwgZ2FwU3BhY2UsIGJvdW5kcywgY292ZXJUYXJnZXQpIHtcbiAgICB2YXIgbWF4SGVpZ2h0ID0gMDtcbiAgICB2YXIgZGlyZWN0aW9uYWxIaW50ID0gRGlyZWN0aW9uYWxEaWN0aW9uYXJ5W3RhcmdldEVkZ2VdO1xuICAgIC8vIElmIGNvdmVyIHRhcmdldCBpcyBzZXQsIHRoZW4gdGhlIG1heCBoZWlnaHQgc2hvdWxkIGJlIGNhbGN1bGF0ZWQgdXNpbmcgdGhlIG9wcG9zaXRlIG9mIHRoZSB0YXJnZXQgZWRnZSBzaW5jZVxuICAgIC8vIHRoYXQncyB0aGUgZGlyZWN0aW9uIHRoYXQgdGhlIGNhbGxvdXQgd2lsbCBleHBhbmQgaW4uXG4gICAgLy8gRm9yIGluc3RhbmNlLCBpZiB0aGUgZGlyZWN0aW9uYWxoaW50IGlzIGJvdHRvbUxlZnRFZGdlIHRoZW4gdGhlIGNhbGxvdXQgd2lsbCBwb3NpdGlvbiBzbyBpdCdzIGJvdHRvbSBlZGdlXG4gICAgLy8gaXMgYWxpZ25lZCB3aXRoIHRoZSBib3R0b20gb2YgdGhlIHRhcmdldCBhbmQgZXhwYW5kIHVwIHRvd2FyZHMgdGhlIHRvcCBvZiB0aGUgc2NyZWVuIGFuZCB0aGUgY2FsY3VsYXRlZCBtYXggaGVpZ2h0XG4gICAgLy8gaXMgKGJvdHRvbSBvZiB0YXJnZXQpIC0gKHRvcCBvZiBzY3JlZW4pIC0gZ2FwU3BhY2UuXG4gICAgdmFyIHRhcmdldCA9IGNvdmVyVGFyZ2V0ID8gZGlyZWN0aW9uYWxIaW50LnRhcmdldEVkZ2UgKiAtMSA6IGRpcmVjdGlvbmFsSGludC50YXJnZXRFZGdlO1xuICAgIGlmICh0YXJnZXQgPT09IFJlY3RhbmdsZUVkZ2UudG9wKSB7XG4gICAgICAgIG1heEhlaWdodCA9IF9nZXRFZGdlVmFsdWUodGFyZ2V0UmVjdGFuZ2xlLCBkaXJlY3Rpb25hbEhpbnQudGFyZ2V0RWRnZSkgLSBib3VuZHMudG9wIC0gZ2FwU3BhY2U7XG4gICAgfVxuICAgIGVsc2UgaWYgKHRhcmdldCA9PT0gUmVjdGFuZ2xlRWRnZS5ib3R0b20pIHtcbiAgICAgICAgbWF4SGVpZ2h0ID0gYm91bmRzLmJvdHRvbSAtIF9nZXRFZGdlVmFsdWUodGFyZ2V0UmVjdGFuZ2xlLCBkaXJlY3Rpb25hbEhpbnQudGFyZ2V0RWRnZSkgLSBnYXBTcGFjZTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIG1heEhlaWdodCA9IGJvdW5kcy5ib3R0b20gLSB0YXJnZXRSZWN0YW5nbGUudG9wIC0gZ2FwU3BhY2U7XG4gICAgfVxuICAgIHJldHVybiBtYXhIZWlnaHQgPiAwID8gbWF4SGVpZ2h0IDogYm91bmRzLmhlaWdodDtcbn1cbmZ1bmN0aW9uIF9wb3NpdGlvbkVsZW1lbnRSZWxhdGl2ZShwcm9wcywgZWxlbWVudFRvUG9zaXRpb24sIGJvdW5kaW5nUmVjdCwgcHJldmlvdXNQb3NpdGlvbnMpIHtcbiAgICB2YXIgZ2FwID0gcHJvcHMuZ2FwU3BhY2UgPyBwcm9wcy5nYXBTcGFjZSA6IDA7XG4gICAgdmFyIHRhcmdldFJlY3QgPSBfZ2V0VGFyZ2V0UmVjdChib3VuZGluZ1JlY3QsIHByb3BzLnRhcmdldCk7XG4gICAgdmFyIHBvc2l0aW9uRGF0YSA9IF9nZXRBbGlnbm1lbnREYXRhKF9nZXRQb3NpdGlvbkRhdGEocHJvcHMuZGlyZWN0aW9uYWxIaW50LCBwcm9wcy5kaXJlY3Rpb25hbEhpbnRGb3JSVEwsIHByZXZpb3VzUG9zaXRpb25zKSwgdGFyZ2V0UmVjdCwgYm91bmRpbmdSZWN0LCBwcm9wcy5jb3ZlclRhcmdldCwgcHJvcHMuYWxpZ25UYXJnZXRFZGdlKTtcbiAgICB2YXIgcG9zaXRpb25lZEVsZW1lbnQgPSBfcG9zaXRpb25FbGVtZW50V2l0aGluQm91bmRzKF9nZXRSZWN0YW5nbGVGcm9tRWxlbWVudChlbGVtZW50VG9Qb3NpdGlvbiksIHRhcmdldFJlY3QsIGJvdW5kaW5nUmVjdCwgcG9zaXRpb25EYXRhLCBnYXAsIHByb3BzLmRpcmVjdGlvbmFsSGludEZpeGVkLCBwcm9wcy5jb3ZlclRhcmdldCk7XG4gICAgcmV0dXJuIF9fYXNzaWduKF9fYXNzaWduKHt9LCBwb3NpdGlvbmVkRWxlbWVudCksIHsgdGFyZ2V0UmVjdGFuZ2xlOiB0YXJnZXRSZWN0IH0pO1xufVxuZnVuY3Rpb24gX2ZpbmFsaXplUG9zaXRpb25EYXRhKHBvc2l0aW9uZWRFbGVtZW50LCBob3N0RWxlbWVudCwgYm91bmRzLCBjb3ZlclRhcmdldCwgZG9Ob3RGaW5hbGl6ZVJldHVybkVkZ2UpIHtcbiAgICB2YXIgZmluYWxpemVkRWxlbWVudCA9IF9maW5hbGl6ZUVsZW1lbnRQb3NpdGlvbihwb3NpdGlvbmVkRWxlbWVudC5lbGVtZW50UmVjdGFuZ2xlLCBob3N0RWxlbWVudCwgcG9zaXRpb25lZEVsZW1lbnQudGFyZ2V0RWRnZSwgYm91bmRzLCBwb3NpdGlvbmVkRWxlbWVudC5hbGlnbm1lbnRFZGdlLCBjb3ZlclRhcmdldCwgZG9Ob3RGaW5hbGl6ZVJldHVybkVkZ2UsIHBvc2l0aW9uZWRFbGVtZW50LmZvcmNlZEluQm91bmRzKTtcbiAgICByZXR1cm4ge1xuICAgICAgICBlbGVtZW50UG9zaXRpb246IGZpbmFsaXplZEVsZW1lbnQsXG4gICAgICAgIHRhcmdldEVkZ2U6IHBvc2l0aW9uZWRFbGVtZW50LnRhcmdldEVkZ2UsXG4gICAgICAgIGFsaWdubWVudEVkZ2U6IHBvc2l0aW9uZWRFbGVtZW50LmFsaWdubWVudEVkZ2UsXG4gICAgfTtcbn1cbmZ1bmN0aW9uIF9wb3NpdGlvbkVsZW1lbnQocHJvcHMsIGhvc3RFbGVtZW50LCBlbGVtZW50VG9Qb3NpdGlvbiwgcHJldmlvdXNQb3NpdGlvbnMpIHtcbiAgICB2YXIgYm91bmRpbmdSZWN0ID0gcHJvcHMuYm91bmRzXG4gICAgICAgID8gX2dldFJlY3RhbmdsZUZyb21JUmVjdChwcm9wcy5ib3VuZHMpXG4gICAgICAgIDogbmV3IFJlY3RhbmdsZSgwLCB3aW5kb3cuaW5uZXJXaWR0aCAtIGdldFNjcm9sbGJhcldpZHRoKCksIDAsIHdpbmRvdy5pbm5lckhlaWdodCk7XG4gICAgdmFyIHBvc2l0aW9uZWRFbGVtZW50ID0gX3Bvc2l0aW9uRWxlbWVudFJlbGF0aXZlKHByb3BzLCBlbGVtZW50VG9Qb3NpdGlvbiwgYm91bmRpbmdSZWN0LCBwcmV2aW91c1Bvc2l0aW9ucyk7XG4gICAgcmV0dXJuIF9maW5hbGl6ZVBvc2l0aW9uRGF0YShwb3NpdGlvbmVkRWxlbWVudCwgaG9zdEVsZW1lbnQsIGJvdW5kaW5nUmVjdCwgcHJvcHMuY292ZXJUYXJnZXQpO1xufVxuZnVuY3Rpb24gX3Bvc2l0aW9uQ2FsbG91dChwcm9wcywgaG9zdEVsZW1lbnQsIGNhbGxvdXQsIHByZXZpb3VzUG9zaXRpb25zLCBkb05vdEZpbmFsaXplUmV0dXJuRWRnZSkge1xuICAgIHZhciBiZWFrV2lkdGggPSBwcm9wcy5pc0JlYWtWaXNpYmxlID8gcHJvcHMuYmVha1dpZHRoIHx8IDAgOiAwO1xuICAgIHZhciBnYXAgPSBfY2FsY3VsYXRlQWN0dWFsQmVha1dpZHRoSW5QaXhlbHMoYmVha1dpZHRoKSAvIDIgKyAocHJvcHMuZ2FwU3BhY2UgPyBwcm9wcy5nYXBTcGFjZSA6IDApO1xuICAgIHZhciBwb3NpdGlvblByb3BzID0gcHJvcHM7XG4gICAgcG9zaXRpb25Qcm9wcy5nYXBTcGFjZSA9IGdhcDtcbiAgICB2YXIgYm91bmRpbmdSZWN0ID0gcHJvcHMuYm91bmRzXG4gICAgICAgID8gX2dldFJlY3RhbmdsZUZyb21JUmVjdChwcm9wcy5ib3VuZHMpXG4gICAgICAgIDogbmV3IFJlY3RhbmdsZSgwLCB3aW5kb3cuaW5uZXJXaWR0aCAtIGdldFNjcm9sbGJhcldpZHRoKCksIDAsIHdpbmRvdy5pbm5lckhlaWdodCk7XG4gICAgdmFyIHBvc2l0aW9uZWRFbGVtZW50ID0gX3Bvc2l0aW9uRWxlbWVudFJlbGF0aXZlKHBvc2l0aW9uUHJvcHMsIGNhbGxvdXQsIGJvdW5kaW5nUmVjdCwgcHJldmlvdXNQb3NpdGlvbnMpO1xuICAgIHZhciBiZWFrUG9zaXRpb25lZCA9IF9wb3NpdGlvbkJlYWsoYmVha1dpZHRoLCBwb3NpdGlvbmVkRWxlbWVudCk7XG4gICAgdmFyIGZpbmFsaXplZEJlYWtQb3NpdGlvbiA9IF9maW5hbGl6ZUJlYWtQb3NpdGlvbihwb3NpdGlvbmVkRWxlbWVudCwgYmVha1Bvc2l0aW9uZWQsIGJvdW5kaW5nUmVjdCk7XG4gICAgcmV0dXJuIF9fYXNzaWduKF9fYXNzaWduKHt9LCBfZmluYWxpemVQb3NpdGlvbkRhdGEocG9zaXRpb25lZEVsZW1lbnQsIGhvc3RFbGVtZW50LCBib3VuZGluZ1JlY3QsIHByb3BzLmNvdmVyVGFyZ2V0LCBkb05vdEZpbmFsaXplUmV0dXJuRWRnZSkpLCB7IGJlYWtQb3NpdGlvbjogZmluYWxpemVkQmVha1Bvc2l0aW9uIH0pO1xufVxuZnVuY3Rpb24gX3Bvc2l0aW9uQ2FyZChwcm9wcywgaG9zdEVsZW1lbnQsIGNhbGxvdXQsIHByZXZpb3VzUG9zaXRpb25zKSB7XG4gICAgcmV0dXJuIF9wb3NpdGlvbkNhbGxvdXQocHJvcHMsIGhvc3RFbGVtZW50LCBjYWxsb3V0LCBwcmV2aW91c1Bvc2l0aW9ucywgdHJ1ZSk7XG59XG4vLyBFTkQgUFJJVkFURSBGVU5DVElPTlNcbmV4cG9ydCB2YXIgX19wb3NpdGlvbmluZ1Rlc3RQYWNrYWdlID0ge1xuICAgIF9maW5hbGl6ZVBvc2l0aW9uRGF0YTogX2ZpbmFsaXplUG9zaXRpb25EYXRhLFxuICAgIF9maW5hbGl6ZUJlYWtQb3NpdGlvbjogX2ZpbmFsaXplQmVha1Bvc2l0aW9uLFxuICAgIF9jYWxjdWxhdGVBY3R1YWxCZWFrV2lkdGhJblBpeGVsczogX2NhbGN1bGF0ZUFjdHVhbEJlYWtXaWR0aEluUGl4ZWxzLFxuICAgIF9wb3NpdGlvbkVsZW1lbnRXaXRoaW5Cb3VuZHM6IF9wb3NpdGlvbkVsZW1lbnRXaXRoaW5Cb3VuZHMsXG4gICAgX3Bvc2l0aW9uQmVhazogX3Bvc2l0aW9uQmVhayxcbiAgICBfZ2V0UG9zaXRpb25EYXRhOiBfZ2V0UG9zaXRpb25EYXRhLFxuICAgIF9nZXRNYXhIZWlnaHRGcm9tVGFyZ2V0UmVjdGFuZ2xlOiBfZ2V0TWF4SGVpZ2h0RnJvbVRhcmdldFJlY3RhbmdsZSxcbn07XG4vKipcbiAqIFVzZWQgdG8gcG9zaXRpb24gYW4gZWxlbWVudCByZWxhdGl2ZSB0byB0aGUgZ2l2ZW4gcG9zaXRpb25pbmcgcHJvcHMuXG4gKiBJZiBwb3NpdGlvbmluZyBoYXMgYmVlbiBjb21wbGV0ZWQgYmVmb3JlLCBwcmV2aW91c1Bvc2l0aW9ucyBjYW4gYmUgcGFzc2VkIHRvIGVuc3VyZSB0aGF0IHRoZSBwb3NpdGlvbmluZyBlbGVtZW50XG4gKiByZXBvc2l0aW9ucyBiYXNlZCBvbiBpdHMgcHJldmlvdXMgdGFyZ2V0cyByYXRoZXIgdGhhbiBzdGFydGluZyB3aXRoIGRpcmVjdGlvbmFsaGludC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBvc2l0aW9uRWxlbWVudChwcm9wcywgaG9zdEVsZW1lbnQsIGVsZW1lbnRUb1Bvc2l0aW9uLCBwcmV2aW91c1Bvc2l0aW9ucykge1xuICAgIHJldHVybiBfcG9zaXRpb25FbGVtZW50KHByb3BzLCBob3N0RWxlbWVudCwgZWxlbWVudFRvUG9zaXRpb24sIHByZXZpb3VzUG9zaXRpb25zKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBwb3NpdGlvbkNhbGxvdXQocHJvcHMsIGhvc3RFbGVtZW50LCBlbGVtZW50VG9Qb3NpdGlvbiwgcHJldmlvdXNQb3NpdGlvbnMpIHtcbiAgICByZXR1cm4gX3Bvc2l0aW9uQ2FsbG91dChwcm9wcywgaG9zdEVsZW1lbnQsIGVsZW1lbnRUb1Bvc2l0aW9uLCBwcmV2aW91c1Bvc2l0aW9ucyk7XG59XG5leHBvcnQgZnVuY3Rpb24gcG9zaXRpb25DYXJkKHByb3BzLCBob3N0RWxlbWVudCwgZWxlbWVudFRvUG9zaXRpb24sIHByZXZpb3VzUG9zaXRpb25zKSB7XG4gICAgcmV0dXJuIF9wb3NpdGlvbkNhcmQocHJvcHMsIGhvc3RFbGVtZW50LCBlbGVtZW50VG9Qb3NpdGlvbiwgcHJldmlvdXNQb3NpdGlvbnMpO1xufVxuLyoqXG4gKiBHZXRzIHRoZSBtYXhpbXVtIGhlaWdodCB0aGF0IGEgcmVjdGFuZ2xlIGNhbiBoYXZlIGluIG9yZGVyIHRvIGZpdCBiZWxvdyBvciBhYm92ZSBhIHRhcmdldC5cbiAqIElmIHRoZSBkaXJlY3Rpb25hbCBoaW50IHNwZWNpZmllcyBhIGxlZnQgb3IgcmlnaHQgZWRnZSAoaS5lLiBsZWZ0Q2VudGVyKSBpdCB3aWxsIGxpbWl0IHRoZSBoZWlnaHQgdG8gdGhlIHRvcEJvcmRlclxuICogb2YgdGhlIHRhcmdldCBnaXZlbi5cbiAqIElmIG5vIGJvdW5kcyBhcmUgcHJvdmlkZWQgdGhlbiB0aGUgd2luZG93IGlzIHRyZWF0ZWQgYXMgdGhlIGJvdW5kcy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldE1heEhlaWdodCh0YXJnZXQsIHRhcmdldEVkZ2UsIGdhcFNwYWNlLCBib3VuZHMsIGNvdmVyVGFyZ2V0KSB7XG4gICAgaWYgKGdhcFNwYWNlID09PSB2b2lkIDApIHsgZ2FwU3BhY2UgPSAwOyB9XG4gICAgdmFyIG1vdXNlVGFyZ2V0ID0gdGFyZ2V0O1xuICAgIHZhciBlbGVtZW50VGFyZ2V0ID0gdGFyZ2V0O1xuICAgIHZhciByZWN0T3JQb2ludFRhcmdldCA9IHRhcmdldDtcbiAgICB2YXIgdGFyZ2V0UmVjdDtcbiAgICB2YXIgYm91bmRpbmdSZWN0YW5nbGUgPSBib3VuZHNcbiAgICAgICAgPyBfZ2V0UmVjdGFuZ2xlRnJvbUlSZWN0KGJvdW5kcylcbiAgICAgICAgOiBuZXcgUmVjdGFuZ2xlKDAsIHdpbmRvdy5pbm5lcldpZHRoIC0gZ2V0U2Nyb2xsYmFyV2lkdGgoKSwgMCwgd2luZG93LmlubmVySGVpZ2h0KTtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZGVwcmVjYXRpb24vZGVwcmVjYXRpb25cbiAgICB2YXIgbGVmdCA9IHJlY3RPclBvaW50VGFyZ2V0LmxlZnQgfHwgcmVjdE9yUG9pbnRUYXJnZXQueDtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZGVwcmVjYXRpb24vZGVwcmVjYXRpb25cbiAgICB2YXIgdG9wID0gcmVjdE9yUG9pbnRUYXJnZXQudG9wIHx8IHJlY3RPclBvaW50VGFyZ2V0Lnk7XG4gICAgdmFyIHJpZ2h0ID0gcmVjdE9yUG9pbnRUYXJnZXQucmlnaHQgfHwgbGVmdDtcbiAgICB2YXIgYm90dG9tID0gcmVjdE9yUG9pbnRUYXJnZXQuYm90dG9tIHx8IHRvcDtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tZXh0cmEtYm9vbGVhbi1jYXN0IC0tIG1heSBub3QgYWN0dWFsbHkgYmUgYSBNb3VzZUV2ZW50XG4gICAgaWYgKCEhbW91c2VUYXJnZXQuc3RvcFByb3BhZ2F0aW9uKSB7XG4gICAgICAgIHRhcmdldFJlY3QgPSBuZXcgUmVjdGFuZ2xlKG1vdXNlVGFyZ2V0LmNsaWVudFgsIG1vdXNlVGFyZ2V0LmNsaWVudFgsIG1vdXNlVGFyZ2V0LmNsaWVudFksIG1vdXNlVGFyZ2V0LmNsaWVudFkpO1xuICAgIH1cbiAgICBlbHNlIGlmIChsZWZ0ICE9PSB1bmRlZmluZWQgJiYgdG9wICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdGFyZ2V0UmVjdCA9IG5ldyBSZWN0YW5nbGUobGVmdCwgcmlnaHQsIHRvcCwgYm90dG9tKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHRhcmdldFJlY3QgPSBfZ2V0UmVjdGFuZ2xlRnJvbUVsZW1lbnQoZWxlbWVudFRhcmdldCk7XG4gICAgfVxuICAgIHJldHVybiBfZ2V0TWF4SGVpZ2h0RnJvbVRhcmdldFJlY3RhbmdsZSh0YXJnZXRSZWN0LCB0YXJnZXRFZGdlLCBnYXBTcGFjZSwgYm91bmRpbmdSZWN0YW5nbGUsIGNvdmVyVGFyZ2V0KTtcbn1cbi8qKlxuICogUmV0dXJucyB0aGUgb3Bwb3NpdGUgZWRnZSBvZiB0aGUgZ2l2ZW4gUmVjdGFuZ2xlRWRnZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldE9wcG9zaXRlRWRnZShlZGdlKSB7XG4gICAgcmV0dXJuIGVkZ2UgKiAtMTtcbn1cbmZ1bmN0aW9uIF9nZXRCb3VuZHNGcm9tVGFyZ2V0V2luZG93KHRhcmdldCwgdGFyZ2V0V2luZG93KSB7XG4gICAgdmFyIHNlZ21lbnRzID0gdW5kZWZpbmVkO1xuICAgIGlmICh0YXJnZXRXaW5kb3cuZ2V0V2luZG93U2VnbWVudHMpIHtcbiAgICAgICAgc2VnbWVudHMgPSB0YXJnZXRXaW5kb3cuZ2V0V2luZG93U2VnbWVudHMoKTtcbiAgICB9XG4gICAgLy8gSWRlbnRpZnkgaWYgd2UncmUgZGVhbGluZyB3aXRoIHNpbmdsZSBzY3JlZW4gc2NlbmFyaW9zLlxuICAgIGlmIChzZWdtZW50cyA9PT0gdW5kZWZpbmVkIHx8IHNlZ21lbnRzLmxlbmd0aCA8PSAxKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0b3A6IDAsXG4gICAgICAgICAgICBsZWZ0OiAwLFxuICAgICAgICAgICAgcmlnaHQ6IHRhcmdldFdpbmRvdy5pbm5lcldpZHRoLFxuICAgICAgICAgICAgYm90dG9tOiB0YXJnZXRXaW5kb3cuaW5uZXJIZWlnaHQsXG4gICAgICAgICAgICB3aWR0aDogdGFyZ2V0V2luZG93LmlubmVyV2lkdGgsXG4gICAgICAgICAgICBoZWlnaHQ6IHRhcmdldFdpbmRvdy5pbm5lckhlaWdodCxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgLy8gTG9naWMgZm9yIGRldGVybWluaW5nIGR1YWwgc2NyZWVuIHNjZW5hcmlvcy5cbiAgICB2YXIgeCA9IDA7XG4gICAgdmFyIHkgPSAwO1xuICAgIC8vIElmIHRoZSB0YXJnZXQgaXMgYW4gRWxlbWVudCBnZXQgY29vcmRpbmF0ZXMgZm9yIGl0cyBjZW50ZXIuXG4gICAgaWYgKHRhcmdldCAhPT0gbnVsbCAmJiAhIXRhcmdldC5nZXRCb3VuZGluZ0NsaWVudFJlY3QpIHtcbiAgICAgICAgdmFyIGNsaWVudFJlY3QgPSB0YXJnZXQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgIHggPSAoY2xpZW50UmVjdC5sZWZ0ICsgY2xpZW50UmVjdC5yaWdodCkgLyAyO1xuICAgICAgICB5ID0gKGNsaWVudFJlY3QudG9wICsgY2xpZW50UmVjdC5ib3R0b20pIC8gMjtcbiAgICB9XG4gICAgLy8gSWYgdGhlIHRhcmdldCBpcyBub3QgbnVsbCBnZXQgeC1heGlzIGFuZCB5LWF4aXMgY29vcmRpbmF0ZXMgZGlyZWN0bHkuXG4gICAgZWxzZSBpZiAodGFyZ2V0ICE9PSBudWxsKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBkZXByZWNhdGlvbi9kZXByZWNhdGlvblxuICAgICAgICB4ID0gdGFyZ2V0LmxlZnQgfHwgdGFyZ2V0Lng7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBkZXByZWNhdGlvbi9kZXByZWNhdGlvblxuICAgICAgICB5ID0gdGFyZ2V0LnRvcCB8fCB0YXJnZXQueTtcbiAgICB9XG4gICAgdmFyIGJvdW5kcyA9IHsgdG9wOiAwLCBsZWZ0OiAwLCByaWdodDogMCwgYm90dG9tOiAwLCB3aWR0aDogMCwgaGVpZ2h0OiAwIH07XG4gICAgLy8gRGVmaW5lIHdoaWNoIHdpbmRvdyBzZWdtZW50IGFyZSB0aGUgY29vcmRpbmF0ZXMgaW4gYW5kIGNhbGN1bGF0ZSBib3VuZHMgYmFzZWQgb24gdGhhdC5cbiAgICBmb3IgKHZhciBfaSA9IDAsIHNlZ21lbnRzXzEgPSBzZWdtZW50czsgX2kgPCBzZWdtZW50c18xLmxlbmd0aDsgX2krKykge1xuICAgICAgICB2YXIgc2VnbWVudCA9IHNlZ21lbnRzXzFbX2ldO1xuICAgICAgICBpZiAoeCAmJiBzZWdtZW50LmxlZnQgPD0geCAmJiBzZWdtZW50LnJpZ2h0ID49IHggJiYgeSAmJiBzZWdtZW50LnRvcCA8PSB5ICYmIHNlZ21lbnQuYm90dG9tID49IHkpIHtcbiAgICAgICAgICAgIGJvdW5kcyA9IHtcbiAgICAgICAgICAgICAgICB0b3A6IHNlZ21lbnQudG9wLFxuICAgICAgICAgICAgICAgIGxlZnQ6IHNlZ21lbnQubGVmdCxcbiAgICAgICAgICAgICAgICByaWdodDogc2VnbWVudC5yaWdodCxcbiAgICAgICAgICAgICAgICBib3R0b206IHNlZ21lbnQuYm90dG9tLFxuICAgICAgICAgICAgICAgIHdpZHRoOiBzZWdtZW50LndpZHRoLFxuICAgICAgICAgICAgICAgIGhlaWdodDogc2VnbWVudC5oZWlnaHQsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBib3VuZHM7XG59XG5leHBvcnQgZnVuY3Rpb24gZ2V0Qm91bmRzRnJvbVRhcmdldFdpbmRvdyh0YXJnZXQsIHRhcmdldFdpbmRvdykge1xuICAgIHJldHVybiBfZ2V0Qm91bmRzRnJvbVRhcmdldFdpbmRvdyh0YXJnZXQsIHRhcmdldFdpbmRvdyk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wb3NpdGlvbmluZy5qcy5tYXAiLCIvKipcbiAqIFRoZSBoZWxwZXIgZnVuY3Rpb25zIGhlcmUgd2lsbCBtYWtlIHRoZSB0YXJnZXQgZWxlbWVudCBhcyBtb2RhbCB0byBzY3JlZW4gcmVhZGVycywgYnkgcGxhY2luZyBhcmlhLWhpZGRlbiBvbiBlbGVtZW50c1xuICogdGhhdCBhcmUgc2libGluZ3MgdG8gdGhlIHRhcmdldCBlbGVtZW50IGFuZCB0aGUgdGFyZ2V0IGVsZW1lbnQncyBhbmNlc3RvcnMgKGJlY2F1c2UgYXJpYS1oaWRkZW4gZ2V0cyBpbmhlcml0ZWQpLlxuICogVGhhdCB3YXksIGFsbCBvdGhlciBlbGVtZW50cyBvbiB0aGUgcGFnZSBhcmUgaGlkZGVuIHRvIHRoZSBzY3JlZW4gcmVhZGVyLlxuICovXG5pbXBvcnQgeyBnZXREb2N1bWVudCB9IGZyb20gJy4vZG9tL2dldERvY3VtZW50Jztcbi8qKiBUYWcgbmFtZXMgdG8gaWdub3JlIHdoZW4gbW9kYWxpemluZyAqL1xudmFyIHRhZ3NUb0lnbm9yZSA9IFsnVEVNUExBVEUnLCAnU1RZTEUnLCAnU0NSSVBUJ107XG4vKipcbiAqIENhbGwgdGhpcyBvbiBhIHRhcmdldCBlbGVtZW50IHRvIG1ha2UgaXQgbW9kYWwgdG8gc2NyZWVuIHJlYWRlcnMuXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gdGhhdCB1bmRvZXMgdGhlIGNoYW5nZXMgaXQgbWFkZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG1vZGFsaXplKHRhcmdldCkge1xuICAgIHZhciB0YXJnZXREb2N1bWVudCA9IGdldERvY3VtZW50KHRhcmdldCk7XG4gICAgaWYgKCF0YXJnZXREb2N1bWVudCkge1xuICAgICAgICAvLyBjYW4ndCBkbyB0aGlzIGluIFNTUlxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkgeyByZXR1cm4gdW5kZWZpbmVkOyB9O1xuICAgIH1cbiAgICB2YXIgYWZmZWN0ZWROb2RlcyA9IFtdO1xuICAgIC8vIHN0YXJ0IGF0IHRhcmdldCwgdGhlbiByZWN1cnNlIGFuZCBkbyB0aGUgc2FtZSBmb3IgcGFyZW50LCB1bnRpbCB3ZSByZWFjaCA8Ym9keT5cbiAgICB3aGlsZSAodGFyZ2V0ICE9PSB0YXJnZXREb2N1bWVudC5ib2R5ICYmIHRhcmdldC5wYXJlbnRFbGVtZW50KSB7XG4gICAgICAgIC8vIGdyYWIgYWxsIHNpYmxpbmdzIG9mIGN1cnJlbnQgZWxlbWVudFxuICAgICAgICBmb3IgKHZhciBfaSA9IDAsIF9hID0gdGFyZ2V0LnBhcmVudEVsZW1lbnQuY2hpbGRyZW47IF9pIDwgX2EubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICB2YXIgc2libGluZyA9IF9hW19pXTtcbiAgICAgICAgICAgIC8vIGJ1dCBpZ25vcmUgZWxlbWVudHMgdGhhdCBhcmUgYWxyZWFkeSBhcmlhLWhpZGRlblxuICAgICAgICAgICAgdmFyIGFyaWFIaWRkZW4gPSBzaWJsaW5nLmdldEF0dHJpYnV0ZSgnYXJpYS1oaWRkZW4nKTtcbiAgICAgICAgICAgIGlmIChzaWJsaW5nICE9PSB0YXJnZXQgJiYgKGFyaWFIaWRkZW4gPT09IG51bGwgfHwgYXJpYUhpZGRlbiA9PT0gdm9pZCAwID8gdm9pZCAwIDogYXJpYUhpZGRlbi50b0xvd2VyQ2FzZSgpKSAhPT0gJ3RydWUnICYmIHRhZ3NUb0lnbm9yZS5pbmRleE9mKHNpYmxpbmcudGFnTmFtZSkgPT09IC0xKSB7XG4gICAgICAgICAgICAgICAgYWZmZWN0ZWROb2Rlcy5wdXNoKFtzaWJsaW5nLCBhcmlhSGlkZGVuXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGFyZ2V0ID0gdGFyZ2V0LnBhcmVudEVsZW1lbnQ7XG4gICAgfVxuICAgIC8vIHRha2UgYWxsIHRob3NlIGVsZW1lbnRzIGFuZCBzZXQgYXJpYS1oaWRkZW49dHJ1ZSBvbiB0aGVtXG4gICAgYWZmZWN0ZWROb2Rlcy5mb3JFYWNoKGZ1bmN0aW9uIChfYSkge1xuICAgICAgICB2YXIgbm9kZSA9IF9hWzBdO1xuICAgICAgICBub2RlLnNldEF0dHJpYnV0ZSgnYXJpYS1oaWRkZW4nLCAndHJ1ZScpO1xuICAgIH0pO1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHVubW9kYWxpemUoYWZmZWN0ZWROb2Rlcyk7XG4gICAgICAgIGFmZmVjdGVkTm9kZXMgPSBbXTsgLy8gZGlzcG9zZVxuICAgIH07XG59XG4vKipcbiAqIFVuZG9lcyB0aGUgY2hhbmdlcyB0aGF0IG1vZGFsaXplKCkgZGlkLlxuICovXG5mdW5jdGlvbiB1bm1vZGFsaXplKGFmZmVjdGVkTm9kZXMpIHtcbiAgICBhZmZlY3RlZE5vZGVzLmZvckVhY2goZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgIHZhciBub2RlID0gX2FbMF0sIG9yaWdpbmFsVmFsdWUgPSBfYVsxXTtcbiAgICAgICAgLy8gUmVzdG9yZSB0aGUgb3JpZ2luYWwgdmFsdWUgKGZhbHNlIG9yIHVuc2V0KVxuICAgICAgICBpZiAob3JpZ2luYWxWYWx1ZSkge1xuICAgICAgICAgICAgbm9kZS5zZXRBdHRyaWJ1dGUoJ2FyaWEtaGlkZGVuJywgb3JpZ2luYWxWYWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBub2RlLnJlbW92ZUF0dHJpYnV0ZSgnYXJpYS1oaWRkZW4nKTtcbiAgICAgICAgfVxuICAgIH0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bW9kYWxpemUuanMubWFwIiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuLyoqXG4gKiBIb29rIHRvIGluaXRpYWxpemUgYW5kIHJldHVybiBhIGNvbnN0YW50IHZhbHVlLiBVbmxpa2UgYFJlYWN0LnVzZU1lbW9gLCB0aGlzIGlzIGd1YXJhbnRlZWQgdG9cbiAqIGFsd2F5cyByZXR1cm4gdGhlIHNhbWUgdmFsdWUgKGFuZCBpZiB0aGUgaW5pdGlhbGl6ZXIgaXMgYSBmdW5jdGlvbiwgb25seSBjYWxsIGl0IG9uY2UpLlxuICogVGhpcyBpcyBzaW1pbGFyIHRvIHNldHRpbmcgYSBwcml2YXRlIG1lbWJlciBpbiBhIGNsYXNzIGNvbnN0cnVjdG9yLlxuICpcbiAqIElmIHRoZSB2YWx1ZSBzaG91bGQgZXZlciBjaGFuZ2UgYmFzZWQgb24gZGVwZW5kZW5jaWVzLCB1c2UgYFJlYWN0LnVzZU1lbW9gIGluc3RlYWQuXG4gKlxuICogQHBhcmFtIGluaXRpYWxWYWx1ZSAtIEluaXRpYWwgdmFsdWUsIG9yIGZ1bmN0aW9uIHRvIGdldCB0aGUgaW5pdGlhbCB2YWx1ZS4gU2ltaWxhciB0byBgdXNlU3RhdGVgLFxuICogb25seSB0aGUgdmFsdWUvZnVuY3Rpb24gcGFzc2VkIGluIHRoZSBmaXJzdCB0aW1lIHRoaXMgaXMgY2FsbGVkIGlzIHJlc3BlY3RlZC5cbiAqIEByZXR1cm5zIFRoZSB2YWx1ZS4gVGhlIGlkZW50aXR5IG9mIHRoaXMgdmFsdWUgd2lsbCBhbHdheXMgYmUgdGhlIHNhbWUuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1c2VDb25zdChpbml0aWFsVmFsdWUpIHtcbiAgICAvLyBVc2UgdXNlUmVmIHRvIHN0b3JlIHRoZSB2YWx1ZSBiZWNhdXNlIGl0J3MgdGhlIGxlYXN0IGV4cGVuc2l2ZSBidWlsdC1pbiBob29rIHRoYXQgd29ya3MgaGVyZVxuICAgIC8vICh3ZSBjb3VsZCBhbHNvIHVzZSBgY29uc3QgW3ZhbHVlXSA9IFJlYWN0LnVzZVN0YXRlKGluaXRpYWxWYWx1ZSlgIGJ1dCB0aGF0J3MgbW9yZSBleHBlbnNpdmVcbiAgICAvLyBpbnRlcm5hbGx5IGR1ZSB0byByZWR1Y2VyIGhhbmRsaW5nIHdoaWNoIHdlIGRvbid0IG5lZWQpXG4gICAgdmFyIHJlZiA9IFJlYWN0LnVzZVJlZigpO1xuICAgIGlmIChyZWYuY3VycmVudCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIC8vIEJveCB0aGUgdmFsdWUgaW4gYW4gb2JqZWN0IHNvIHdlIGNhbiB0ZWxsIGlmIGl0J3MgaW5pdGlhbGl6ZWQgZXZlbiBpZiB0aGUgaW5pdGlhbGl6ZXJcbiAgICAgICAgLy8gcmV0dXJucy9pcyB1bmRlZmluZWRcbiAgICAgICAgcmVmLmN1cnJlbnQgPSB7XG4gICAgICAgICAgICB2YWx1ZTogdHlwZW9mIGluaXRpYWxWYWx1ZSA9PT0gJ2Z1bmN0aW9uJyA/IGluaXRpYWxWYWx1ZSgpIDogaW5pdGlhbFZhbHVlLFxuICAgICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4gcmVmLmN1cnJlbnQudmFsdWU7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD11c2VDb25zdC5qcy5tYXAiLCJpbXBvcnQgeyBBc3luYyB9IGZyb20gJ0BmbHVlbnR1aS91dGlsaXRpZXMnO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgdXNlQ29uc3QgfSBmcm9tICcuL3VzZUNvbnN0Jztcbi8qKlxuICogSG9vayB0byBwcm92aWRlIGFuIEFzeW5jIGluc3RhbmNlIHRoYXQgaXMgYXV0b21hdGljYWxseSBjbGVhbmVkIHVwIG9uIGRpc21vdW50LlxuICovXG5leHBvcnQgZnVuY3Rpb24gdXNlQXN5bmMoKSB7XG4gICAgdmFyIGFzeW5jID0gdXNlQ29uc3QoZnVuY3Rpb24gKCkgeyByZXR1cm4gbmV3IEFzeW5jKCk7IH0pO1xuICAgIC8vIEZ1bmN0aW9uIHRoYXQgcmV0dXJucyBhIGZ1bmN0aW9uIGluIG9yZGVyIHRvIGRpc3Bvc2UgdGhlIGFzeW5jIGluc3RhbmNlIG9uIHVubW91bnRcbiAgICBSZWFjdC51c2VFZmZlY3QoZnVuY3Rpb24gKCkgeyByZXR1cm4gZnVuY3Rpb24gKCkgeyByZXR1cm4gYXN5bmMuZGlzcG9zZSgpOyB9OyB9LCBbYXN5bmNdKTtcbiAgICByZXR1cm4gYXN5bmM7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD11c2VBc3luYy5qcy5tYXAiLCJpbXBvcnQgeyBvbiB9IGZyb20gJ0BmbHVlbnR1aS91dGlsaXRpZXMnO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuLyoqXG4gKiBIb29rIHRvIGF0dGFjaCBhbiBldmVudCBoYW5kbGVyIG9uIG1vdW50IGFuZCBoYW5kbGUgY2xlYW51cC5cbiAqIEBwYXJhbSBlbGVtZW50IC0gRWxlbWVudCAob3IgcmVmIHRvIGFuIGVsZW1lbnQpIHRvIGF0dGFjaCB0aGUgZXZlbnQgaGFuZGxlciB0b1xuICogQHBhcmFtIGV2ZW50TmFtZSAtIFRoZSBldmVudCB0byBhdHRhY2ggYSBoYW5kbGVyIGZvclxuICogQHBhcmFtIGNhbGxiYWNrIC0gVGhlIGhhbmRsZXIgZm9yIHRoZSBldmVudFxuICogQHBhcmFtIHVzZUNhcHR1cmUgLSBXaGV0aGVyIG9yIG5vdCB0byBhdHRhY2ggdGhlIGhhbmRsZXIgZm9yIHRoZSBjYXB0dXJlIHBoYXNlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1c2VPbkV2ZW50KGVsZW1lbnQsIGV2ZW50TmFtZSwgY2FsbGJhY2ssIHVzZUNhcHR1cmUpIHtcbiAgICAvLyBVc2UgYSByZWYgZm9yIHRoZSBjYWxsYmFjayB0byBwcmV2ZW50IHJlcGVhdGVkbHkgYXR0YWNoaW5nL3VuYXR0YWNoaW5nIGNhbGxiYWNrcyB0aGF0IGFyZSB1bnN0YWJsZSBhY3Jvc3MgcmVuZGVyc1xuICAgIHZhciBjYWxsYmFja1JlZiA9IFJlYWN0LnVzZVJlZihjYWxsYmFjayk7XG4gICAgY2FsbGJhY2tSZWYuY3VycmVudCA9IGNhbGxiYWNrO1xuICAgIFJlYWN0LnVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBhY3R1YWxFbGVtZW50ID0gZWxlbWVudCAmJiAnY3VycmVudCcgaW4gZWxlbWVudCA/IGVsZW1lbnQuY3VycmVudCA6IGVsZW1lbnQ7XG4gICAgICAgIGlmICghYWN0dWFsRWxlbWVudCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHZhciBkaXNwb3NlID0gb24oYWN0dWFsRWxlbWVudCwgZXZlbnROYW1lLCBmdW5jdGlvbiAoZXYpIHsgcmV0dXJuIGNhbGxiYWNrUmVmLmN1cnJlbnQoZXYpOyB9LCB1c2VDYXB0dXJlKTtcbiAgICAgICAgcmV0dXJuIGRpc3Bvc2U7XG4gICAgfSwgW2VsZW1lbnQsIGV2ZW50TmFtZSwgdXNlQ2FwdHVyZV0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXNlT25FdmVudC5qcy5tYXAiLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG4vKipcbiAqIENvbnRleHQgZm9yIHByb3ZpZGluZyB0aGUgd2luZG93LlxuICovXG5leHBvcnQgdmFyIFdpbmRvd0NvbnRleHQgPSBSZWFjdC5jcmVhdGVDb250ZXh0KHtcbiAgICB3aW5kb3c6IHR5cGVvZiB3aW5kb3cgPT09ICdvYmplY3QnID8gd2luZG93IDogdW5kZWZpbmVkLFxufSk7XG4vKipcbiAqIEhvb2sgdG8gYWNjZXNzIHRoZSB3aW5kb3cgb2JqZWN0LiBUaGlzIGNhbiBiZSBvdmVycmlkZGVuIGNvbnRleHR1YWxseSB1c2luZyB0aGUgYFdpbmRvd1Byb3ZpZGVyYC5cbiAqL1xuZXhwb3J0IHZhciB1c2VXaW5kb3cgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBSZWFjdC51c2VDb250ZXh0KFdpbmRvd0NvbnRleHQpLndpbmRvdzsgfTtcbi8qKlxuICogSG9vayB0byBhY2Nlc3MgdGhlIGRvY3VtZW50IG9iamVjdC4gVGhpcyBjYW4gYmUgb3ZlcnJpZGRlbiBjb250ZXh0dWFsbHkgdXNpbmcgdGhlIGBXaW5kb3dQcm92aWRlcmAuXG4gKi9cbmV4cG9ydCB2YXIgdXNlRG9jdW1lbnQgPSBmdW5jdGlvbiAoKSB7IHZhciBfYTsgcmV0dXJuIChfYSA9IFJlYWN0LnVzZUNvbnRleHQoV2luZG93Q29udGV4dCkud2luZG93KSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuZG9jdW1lbnQ7IH07XG4vKipcbiAqIENvbXBvbmVudCB0byBwcm92aWRlIHRoZSB3aW5kb3cgb2JqZWN0IGNvbnRleHR1YWxseS4gVGhpcyBpcyB1c2VmdWwgd2hlbiByZW5kZXJpbmcgY29udGVudCB0byBhbiBlbGVtZW50XG4gKiBjb250YWluZWQgd2l0aGluIGEgY2hpbGQgd2luZG93IG9yIGlmcmFtZSBlbGVtZW50LCB3aGVyZSBldmVudCBoYW5kbGVycyBhbmQgc3R5bGluZyBtdXN0IGJlIHByb2plY3RlZFxuICogdG8gYW4gYWx0ZXJuYXRpdmUgd2luZG93IG9yIGRvY3VtZW50LlxuICovXG5leHBvcnQgdmFyIFdpbmRvd1Byb3ZpZGVyID0gZnVuY3Rpb24gKHByb3BzKSB7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoV2luZG93Q29udGV4dC5Qcm92aWRlciwgeyB2YWx1ZTogcHJvcHMgfSwgcHJvcHMuY2hpbGRyZW4pO1xufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVdpbmRvd1Byb3ZpZGVyLmpzLm1hcCIsImltcG9ydCB7IF9fYXNzaWduIH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBLZXlDb2RlcywgZGl2UHJvcGVydGllcywgZG9lc0VsZW1lbnRDb250YWluRm9jdXMsIGdldERvY3VtZW50LCBnZXROYXRpdmVQcm9wcywgZ2V0UHJvcHNXaXRoRGVmYXVsdHMsIGdldFdpbmRvdywgbW9kYWxpemUsIH0gZnJvbSAnLi4vLi4vVXRpbGl0aWVzJztcbmltcG9ydCB7IHVzZU1lcmdlZFJlZnMsIHVzZUFzeW5jLCB1c2VPbkV2ZW50IH0gZnJvbSAnQGZsdWVudHVpL3JlYWN0LWhvb2tzJztcbmltcG9ydCB7IHVzZVdpbmRvdyB9IGZyb20gJ0BmbHVlbnR1aS9yZWFjdC13aW5kb3ctcHJvdmlkZXInO1xuZnVuY3Rpb24gdXNlU2Nyb2xsYmFyQXN5bmMocHJvcHMsIHJvb3QpIHtcbiAgICB2YXIgYXN5bmMgPSB1c2VBc3luYygpO1xuICAgIHZhciBfYSA9IFJlYWN0LnVzZVN0YXRlKGZhbHNlKSwgbmVlZHNWZXJ0aWNhbFNjcm9sbEJhclN0YXRlID0gX2FbMF0sIHNldE5lZWRzVmVydGljYWxTY3JvbGxCYXIgPSBfYVsxXTtcbiAgICBSZWFjdC51c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgICAgICBhc3luYy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIF9hO1xuICAgICAgICAgICAgLy8gSWYgb3ZlcmZsb3dZIGlzIG92ZXJyaWRkZW4sIGRvbid0IHdhc3RlIHRpbWUgY2FsY3VsYXRpbmcgd2hldGhlciB0aGUgc2Nyb2xsYmFyIGlzIG5lY2Vzc2FyeS5cbiAgICAgICAgICAgIGlmIChwcm9wcy5zdHlsZSAmJiBwcm9wcy5zdHlsZS5vdmVyZmxvd1kpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgbmVlZHNWZXJ0aWNhbFNjcm9sbEJhciA9IGZhbHNlO1xuICAgICAgICAgICAgaWYgKHJvb3QgJiYgcm9vdC5jdXJyZW50ICYmICgoX2EgPSByb290LmN1cnJlbnQpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5maXJzdEVsZW1lbnRDaGlsZCkpIHtcbiAgICAgICAgICAgICAgICAvLyBDbGllbnRIZWlnaHQgcmV0dXJucyB0aGUgY2xpZW50IGhlaWdodCBvZiBhbiBlbGVtZW50IHJvdW5kZWQgdG8gYW5cbiAgICAgICAgICAgICAgICAvLyBpbnRlZ2VyLiBPbiBzb21lIGJyb3dzZXJzIGF0IGRpZmZlcmVudCB6b29tIGxldmVscyB0aGlzIHJvdW5kaW5nXG4gICAgICAgICAgICAgICAgLy8gY2FuIGdlbmVyYXRlIGRpZmZlcmVudCByZXN1bHRzIGZvciB0aGUgcm9vdCBjb250YWluZXIgYW5kIGNoaWxkIGV2ZW5cbiAgICAgICAgICAgICAgICAvLyB0aG91Z2ggdGhleSBhcmUgdGhlIHNhbWUgaGVpZ2h0LiBUaGlzIGNhdXNlcyB1cyB0byBzaG93IGEgc2Nyb2xsIGJhclxuICAgICAgICAgICAgICAgIC8vIHdoZW4gbm90IG5lZWRlZC4gSWRlYWxseSB3ZSB3b3VsZCB1c2UgQm91bmRpbmdDbGllbnRSZWN0KCkuaGVpZ2h0XG4gICAgICAgICAgICAgICAgLy8gaW5zdGVhZCBob3dldmVyIHNlZW1zIHRoYXQgdGhlIEFQSSBpcyA5MCUgc2xvd2VyIHRoYW4gdXNpbmcgQ2xpZW50SGVpZ2h0LlxuICAgICAgICAgICAgICAgIC8vIFRoZXJlZm9yZSBpbnN0ZWFkIHdlIHdpbGwgY2FsY3VsYXRlIHRoZSBkaWZmZXJlbmNlIGJldHdlZW4gaGVpZ2h0cyBhbmRcbiAgICAgICAgICAgICAgICAvLyBhbGxvdyBmb3IgYSAxcHggZGlmZmVyZW5jZSB0byBzdGlsbCBiZSBjb25zaWRlcmVkIG9rIGFuZCBub3Qgc2hvdyB0aGVcbiAgICAgICAgICAgICAgICAvLyBzY3JvbGwgYmFyLlxuICAgICAgICAgICAgICAgIHZhciByb290SGVpZ2h0ID0gcm9vdC5jdXJyZW50LmNsaWVudEhlaWdodDtcbiAgICAgICAgICAgICAgICB2YXIgZmlyc3RDaGlsZEhlaWdodCA9IHJvb3QuY3VycmVudC5maXJzdEVsZW1lbnRDaGlsZC5jbGllbnRIZWlnaHQ7XG4gICAgICAgICAgICAgICAgaWYgKHJvb3RIZWlnaHQgPiAwICYmIGZpcnN0Q2hpbGRIZWlnaHQgPiByb290SGVpZ2h0KSB7XG4gICAgICAgICAgICAgICAgICAgIG5lZWRzVmVydGljYWxTY3JvbGxCYXIgPSBmaXJzdENoaWxkSGVpZ2h0IC0gcm9vdEhlaWdodCA+IDE7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG5lZWRzVmVydGljYWxTY3JvbGxCYXJTdGF0ZSAhPT0gbmVlZHNWZXJ0aWNhbFNjcm9sbEJhcikge1xuICAgICAgICAgICAgICAgIHNldE5lZWRzVmVydGljYWxTY3JvbGxCYXIobmVlZHNWZXJ0aWNhbFNjcm9sbEJhcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkgeyByZXR1cm4gYXN5bmMuZGlzcG9zZSgpOyB9O1xuICAgIH0pO1xuICAgIHJldHVybiBuZWVkc1ZlcnRpY2FsU2Nyb2xsQmFyU3RhdGU7XG59XG5mdW5jdGlvbiBkZWZhdWx0Rm9jdXNSZXN0b3JlcihvcHRpb25zKSB7XG4gICAgdmFyIG9yaWdpbmFsRWxlbWVudCA9IG9wdGlvbnMub3JpZ2luYWxFbGVtZW50LCBjb250YWluc0ZvY3VzID0gb3B0aW9ucy5jb250YWluc0ZvY3VzO1xuICAgIGlmIChvcmlnaW5hbEVsZW1lbnQgJiYgY29udGFpbnNGb2N1cyAmJiBvcmlnaW5hbEVsZW1lbnQgIT09IGdldFdpbmRvdygpKSB7XG4gICAgICAgIC8vIE1ha2Ugc3VyZSB0aGF0IHRoZSBmb2N1cyBtZXRob2QgYWN0dWFsbHkgZXhpc3RzXG4gICAgICAgIC8vIEluIHNvbWUgY2FzZXMgdGhlIG9iamVjdCBtaWdodCBleGlzdCBidXQgbm90IGJlIGEgcmVhbCBlbGVtZW50LlxuICAgICAgICAvLyBUaGlzIGlzIHByaW1hcmlseSBmb3IgSUUgMTEgYW5kIHNob3VsZCBiZSByZW1vdmVkIG9uY2UgSUUgMTEgaXMgbm8gbG9uZ2VyIGluIHVzZS5cbiAgICAgICAgLy8gVGhpcyBpcyB3cmFwcGVkIGluIGEgc2V0VGltZW91dCBiZWNhdXNlIG9mIGEgUmVhY3QgMTYgYnVnIHRoYXQgaXMgcmVzb2x2ZWQgaW4gMTcuXG4gICAgICAgIC8vIE9uY2Ugd2UgbW92ZSB0byAxNywgdGhlIHNldFRpbWVvdXQgc2hvdWxkIGJlIHJlbW92ZWQgKHJlZjogaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0L2lzc3Vlcy8xNzg5NCNpc3N1ZWNvbW1lbnQtNjU2MDk0NDA1KVxuICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBfYTtcbiAgICAgICAgICAgIChfYSA9IG9yaWdpbmFsRWxlbWVudC5mb2N1cykgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmNhbGwob3JpZ2luYWxFbGVtZW50KTtcbiAgICAgICAgfSwgMCk7XG4gICAgfVxufVxuZnVuY3Rpb24gdXNlUmVzdG9yZUZvY3VzKHByb3BzLCByb290KSB7XG4gICAgdmFyIF9hID0gcHJvcHMub25SZXN0b3JlRm9jdXMsIG9uUmVzdG9yZUZvY3VzID0gX2EgPT09IHZvaWQgMCA/IGRlZmF1bHRGb2N1c1Jlc3RvcmVyIDogX2E7XG4gICAgdmFyIG9yaWdpbmFsRm9jdXNlZEVsZW1lbnQgPSBSZWFjdC51c2VSZWYoKTtcbiAgICB2YXIgY29udGFpbnNGb2N1cyA9IFJlYWN0LnVzZVJlZihmYWxzZSk7XG4gICAgUmVhY3QudXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgb3JpZ2luYWxGb2N1c2VkRWxlbWVudC5jdXJyZW50ID0gZ2V0RG9jdW1lbnQoKS5hY3RpdmVFbGVtZW50O1xuICAgICAgICBpZiAoZG9lc0VsZW1lbnRDb250YWluRm9jdXMocm9vdC5jdXJyZW50KSkge1xuICAgICAgICAgICAgY29udGFpbnNGb2N1cy5jdXJyZW50ID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIF9hO1xuICAgICAgICAgICAgb25SZXN0b3JlRm9jdXMgPT09IG51bGwgfHwgb25SZXN0b3JlRm9jdXMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9uUmVzdG9yZUZvY3VzKHtcbiAgICAgICAgICAgICAgICBvcmlnaW5hbEVsZW1lbnQ6IG9yaWdpbmFsRm9jdXNlZEVsZW1lbnQuY3VycmVudCxcbiAgICAgICAgICAgICAgICBjb250YWluc0ZvY3VzOiBjb250YWluc0ZvY3VzLmN1cnJlbnQsXG4gICAgICAgICAgICAgICAgZG9jdW1lbnRDb250YWluc0ZvY3VzOiAoKF9hID0gZ2V0RG9jdW1lbnQoKSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmhhc0ZvY3VzKCkpIHx8IGZhbHNlLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAvLyBEZS1yZWZlcmVuY2UgRE9NIE5vZGUgdG8gYXZvaWQgcmV0YWlubWVudCB2aWEgdHJhbnNwaWxlZCBjbG9zdXJlIG9mIF9vbktleURvd25cbiAgICAgICAgICAgIG9yaWdpbmFsRm9jdXNlZEVsZW1lbnQuY3VycmVudCA9IHVuZGVmaW5lZDtcbiAgICAgICAgfTtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0LWhvb2tzL2V4aGF1c3RpdmUtZGVwcyAtLSBzaG91bGQgb25seSBydW4gb24gZmlyc3QgcmVuZGVyXG4gICAgfSwgW10pO1xuICAgIHVzZU9uRXZlbnQocm9vdCwgJ2ZvY3VzJywgUmVhY3QudXNlQ2FsbGJhY2soZnVuY3Rpb24gKCkge1xuICAgICAgICBjb250YWluc0ZvY3VzLmN1cnJlbnQgPSB0cnVlO1xuICAgIH0sIFtdKSwgdHJ1ZSk7XG4gICAgdXNlT25FdmVudChyb290LCAnYmx1cicsIFJlYWN0LnVzZUNhbGxiYWNrKGZ1bmN0aW9uIChldikge1xuICAgICAgICAvKiogVGhlIHBvcHVwIHNob3VsZCB1cGRhdGUgdGhpcy5fY29udGFpbnNGb2N1cyB3aGVuOlxuICAgICAgICAgKiByZWxhdGVkVGFyZ2V0IGV4aXN0cyBBTkRcbiAgICAgICAgICogdGhlIHJlbGF0ZWRUYXJnZXQgaXMgbm90IGNvbnRhaW5lZCB3aXRoaW4gdGhlIHBvcHVwLlxuICAgICAgICAgKiBJZiB0aGUgcmVsYXRlZFRhcmdldCBpcyB3aXRoaW4gdGhlIHBvcHVwLCB0aGF0IG1lYW5zIHRoZSBwb3B1cCBzdGlsbCBoYXMgZm9jdXNcbiAgICAgICAgICogYW5kIGZvY3VzZWQgbW92ZWQgZnJvbSBvbmUgZWxlbWVudCB0byBhbm90aGVyIHdpdGhpbiB0aGUgcG9wdXAuXG4gICAgICAgICAqIElmIHJlbGF0ZWRUYXJnZXQgaXMgdW5kZWZpbmVkIG9yIG51bGwgdGhhdCB1c3VhbGx5IG1lYW5zIHRoYXQgYVxuICAgICAgICAgKiBrZXlib2FyZCBldmVudCBvY2N1cnJlZCBhbmQgZm9jdXMgZGlkbid0IGNoYW5nZVxuICAgICAgICAgKi9cbiAgICAgICAgaWYgKHJvb3QuY3VycmVudCAmJiBldi5yZWxhdGVkVGFyZ2V0ICYmICFyb290LmN1cnJlbnQuY29udGFpbnMoZXYucmVsYXRlZFRhcmdldCkpIHtcbiAgICAgICAgICAgIGNvbnRhaW5zRm9jdXMuY3VycmVudCA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9leGhhdXN0aXZlLWRlcHMgLS0gc2hvdWxkIG9ubHkgcnVuIG9uIGZpcnN0IHJlbmRlclxuICAgIH0sIFtdKSwgdHJ1ZSk7XG59XG5mdW5jdGlvbiB1c2VIaWRlU2libGluZ05vZGVzKHByb3BzLCByb290KSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGRlcHJlY2F0aW9uL2RlcHJlY2F0aW9uXG4gICAgdmFyIHNob3VsZEhpZGVTaWJsaW5ncyA9IFN0cmluZyhwcm9wc1snYXJpYS1tb2RhbCddKS50b0xvd2VyQ2FzZSgpID09PSAndHJ1ZScgJiYgcHJvcHMuZW5hYmxlQXJpYUhpZGRlblNpYmxpbmdzO1xuICAgIFJlYWN0LnVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICghKHNob3VsZEhpZGVTaWJsaW5ncyAmJiByb290LmN1cnJlbnQpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHVubW9kYWxpemUgPSBtb2RhbGl6ZShyb290LmN1cnJlbnQpO1xuICAgICAgICByZXR1cm4gdW5tb2RhbGl6ZTtcbiAgICB9LCBbcm9vdCwgc2hvdWxkSGlkZVNpYmxpbmdzXSk7XG59XG4vKipcbiAqIFRoaXMgYWRkcyBhY2Nlc3NpYmlsaXR5IHRvIERpYWxvZyBhbmQgUGFuZWwgY29udHJvbHNcbiAqL1xuZXhwb3J0IHZhciBQb3B1cCA9IFJlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gKHByb3BzV2l0aG91dERlZmF1bHRzLCBmb3J3YXJkZWRSZWYpIHtcbiAgICB2YXIgcHJvcHMgPSBnZXRQcm9wc1dpdGhEZWZhdWx0cyh7IHNob3VsZFJlc3RvcmVGb2N1czogdHJ1ZSwgZW5hYmxlQXJpYUhpZGRlblNpYmxpbmdzOiB0cnVlIH0sIHByb3BzV2l0aG91dERlZmF1bHRzKTtcbiAgICB2YXIgcm9vdCA9IFJlYWN0LnVzZVJlZigpO1xuICAgIHZhciBtZXJnZWRSb290UmVmID0gdXNlTWVyZ2VkUmVmcyhyb290LCBmb3J3YXJkZWRSZWYpO1xuICAgIHVzZUhpZGVTaWJsaW5nTm9kZXMocHJvcHMsIHJvb3QpO1xuICAgIHVzZVJlc3RvcmVGb2N1cyhwcm9wcywgcm9vdCk7XG4gICAgdmFyIHJvbGUgPSBwcm9wcy5yb2xlLCBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUsIGFyaWFMYWJlbCA9IHByb3BzLmFyaWFMYWJlbCwgYXJpYUxhYmVsbGVkQnkgPSBwcm9wcy5hcmlhTGFiZWxsZWRCeSwgYXJpYURlc2NyaWJlZEJ5ID0gcHJvcHMuYXJpYURlc2NyaWJlZEJ5LCBzdHlsZSA9IHByb3BzLnN0eWxlLCBjaGlsZHJlbiA9IHByb3BzLmNoaWxkcmVuLCBvbkRpc21pc3MgPSBwcm9wcy5vbkRpc21pc3M7XG4gICAgdmFyIG5lZWRzVmVydGljYWxTY3JvbGxCYXIgPSB1c2VTY3JvbGxiYXJBc3luYyhwcm9wcywgcm9vdCk7XG4gICAgdmFyIG9uS2V5RG93biA9IFJlYWN0LnVzZUNhbGxiYWNrKGZ1bmN0aW9uIChldikge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZGVwcmVjYXRpb24vZGVwcmVjYXRpb25cbiAgICAgICAgc3dpdGNoIChldi53aGljaCkge1xuICAgICAgICAgICAgY2FzZSBLZXlDb2Rlcy5lc2NhcGU6XG4gICAgICAgICAgICAgICAgaWYgKG9uRGlzbWlzcykge1xuICAgICAgICAgICAgICAgICAgICBvbkRpc21pc3MoZXYpO1xuICAgICAgICAgICAgICAgICAgICBldi5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgICAgICBldi5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9LCBbb25EaXNtaXNzXSk7XG4gICAgdmFyIHdpbiA9IHVzZVdpbmRvdygpO1xuICAgIHVzZU9uRXZlbnQod2luLCAna2V5ZG93bicsIG9uS2V5RG93bik7XG4gICAgcmV0dXJuIChSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIF9fYXNzaWduKHsgcmVmOiBtZXJnZWRSb290UmVmIH0sIGdldE5hdGl2ZVByb3BzKHByb3BzLCBkaXZQcm9wZXJ0aWVzKSwgeyBjbGFzc05hbWU6IGNsYXNzTmFtZSwgcm9sZTogcm9sZSwgXCJhcmlhLWxhYmVsXCI6IGFyaWFMYWJlbCwgXCJhcmlhLWxhYmVsbGVkYnlcIjogYXJpYUxhYmVsbGVkQnksIFwiYXJpYS1kZXNjcmliZWRieVwiOiBhcmlhRGVzY3JpYmVkQnksIG9uS2V5RG93bjogb25LZXlEb3duLCBzdHlsZTogX19hc3NpZ24oeyBvdmVyZmxvd1k6IG5lZWRzVmVydGljYWxTY3JvbGxCYXIgPyAnc2Nyb2xsJyA6IHVuZGVmaW5lZCwgb3V0bGluZTogJ25vbmUnIH0sIHN0eWxlKSB9KSwgY2hpbGRyZW4pKTtcbn0pO1xuUG9wdXAuZGlzcGxheU5hbWUgPSAnUG9wdXAnO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9UG9wdXAuanMubWFwIiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuLyoqXG4gKiBDb250ZXh0IGZvciBwcm92aWRpbmcgdGhlIHdpbmRvdy5cbiAqL1xuZXhwb3J0IHZhciBXaW5kb3dDb250ZXh0ID0gUmVhY3QuY3JlYXRlQ29udGV4dCh7XG4gICAgd2luZG93OiB0eXBlb2Ygd2luZG93ID09PSAnb2JqZWN0JyA/IHdpbmRvdyA6IHVuZGVmaW5lZCxcbn0pO1xuLyoqXG4gKiBIb29rIHRvIGFjY2VzcyB0aGUgd2luZG93IG9iamVjdC4gVGhpcyBjYW4gYmUgb3ZlcnJpZGRlbiBjb250ZXh0dWFsbHkgdXNpbmcgdGhlIGBXaW5kb3dQcm92aWRlcmAuXG4gKi9cbmV4cG9ydCB2YXIgdXNlV2luZG93ID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gUmVhY3QudXNlQ29udGV4dChXaW5kb3dDb250ZXh0KS53aW5kb3c7IH07XG4vKipcbiAqIEhvb2sgdG8gYWNjZXNzIHRoZSBkb2N1bWVudCBvYmplY3QuIFRoaXMgY2FuIGJlIG92ZXJyaWRkZW4gY29udGV4dHVhbGx5IHVzaW5nIHRoZSBgV2luZG93UHJvdmlkZXJgLlxuICovXG5leHBvcnQgdmFyIHVzZURvY3VtZW50ID0gZnVuY3Rpb24gKCkgeyB2YXIgX2E7IHJldHVybiAoX2EgPSBSZWFjdC51c2VDb250ZXh0KFdpbmRvd0NvbnRleHQpLndpbmRvdykgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmRvY3VtZW50OyB9O1xuLyoqXG4gKiBDb21wb25lbnQgdG8gcHJvdmlkZSB0aGUgd2luZG93IG9iamVjdCBjb250ZXh0dWFsbHkuIFRoaXMgaXMgdXNlZnVsIHdoZW4gcmVuZGVyaW5nIGNvbnRlbnQgdG8gYW4gZWxlbWVudFxuICogY29udGFpbmVkIHdpdGhpbiBhIGNoaWxkIHdpbmRvdyBvciBpZnJhbWUgZWxlbWVudCwgd2hlcmUgZXZlbnQgaGFuZGxlcnMgYW5kIHN0eWxpbmcgbXVzdCBiZSBwcm9qZWN0ZWRcbiAqIHRvIGFuIGFsdGVybmF0aXZlIHdpbmRvdyBvciBkb2N1bWVudC5cbiAqL1xuZXhwb3J0IHZhciBXaW5kb3dQcm92aWRlciA9IGZ1bmN0aW9uIChwcm9wcykge1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFdpbmRvd0NvbnRleHQuUHJvdmlkZXIsIHsgdmFsdWU6IHByb3BzIH0sIHByb3BzLmNoaWxkcmVuKTtcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1XaW5kb3dQcm92aWRlci5qcy5tYXAiLCJ2YXIgX2E7XG5pbXBvcnQgeyBfX2Fzc2lnbiB9IGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgRGlyZWN0aW9uYWxIaW50IH0gZnJvbSAnLi4vLi4vY29tbW9uL0RpcmVjdGlvbmFsSGludCc7XG5pbXBvcnQgeyBjc3MsIGRpdlByb3BlcnRpZXMsIGVsZW1lbnRDb250YWlucywgZm9jdXNGaXJzdENoaWxkLCBnZXROYXRpdmVQcm9wcywgb24sIHNoYWxsb3dDb21wYXJlLCBnZXRQcm9wc1dpdGhEZWZhdWx0cywgfSBmcm9tICcuLi8uLi9VdGlsaXRpZXMnO1xuaW1wb3J0IHsgcG9zaXRpb25DYWxsb3V0LCBSZWN0YW5nbGVFZGdlLCBwb3NpdGlvbkNhcmQsIGdldEJvdW5kc0Zyb21UYXJnZXRXaW5kb3cgfSBmcm9tICcuLi8uLi9Qb3NpdGlvbmluZyc7XG5pbXBvcnQgeyBQb3B1cCB9IGZyb20gJy4uLy4uL1BvcHVwJztcbmltcG9ydCB7IGNsYXNzTmFtZXNGdW5jdGlvbiB9IGZyb20gJy4uLy4uL1V0aWxpdGllcyc7XG5pbXBvcnQgeyBBbmltYXRpb25DbGFzc05hbWVzIH0gZnJvbSAnLi4vLi4vU3R5bGluZyc7XG5pbXBvcnQgeyB1c2VNZXJnZWRSZWZzLCB1c2VBc3luYywgdXNlQ29uc3QsIHVzZVRhcmdldCwgdXNlT25FdmVudCB9IGZyb20gJ0BmbHVlbnR1aS9yZWFjdC1ob29rcyc7XG52YXIgQ09NUE9ORU5UX05BTUUgPSAnQ2FsbG91dENvbnRlbnRCYXNlJztcbnZhciBBTklNQVRJT05TID0gKF9hID0ge30sXG4gICAgX2FbUmVjdGFuZ2xlRWRnZS50b3BdID0gQW5pbWF0aW9uQ2xhc3NOYW1lcy5zbGlkZVVwSW4xMCxcbiAgICBfYVtSZWN0YW5nbGVFZGdlLmJvdHRvbV0gPSBBbmltYXRpb25DbGFzc05hbWVzLnNsaWRlRG93bkluMTAsXG4gICAgX2FbUmVjdGFuZ2xlRWRnZS5sZWZ0XSA9IEFuaW1hdGlvbkNsYXNzTmFtZXMuc2xpZGVMZWZ0SW4xMCxcbiAgICBfYVtSZWN0YW5nbGVFZGdlLnJpZ2h0XSA9IEFuaW1hdGlvbkNsYXNzTmFtZXMuc2xpZGVSaWdodEluMTAsXG4gICAgX2EpO1xudmFyIEJFQUtfT1JJR0lOX1BPU0lUSU9OID0geyB0b3A6IDAsIGxlZnQ6IDAgfTtcbi8vIE1pY3Jvc29mdCBFZGdlIHdpbGwgb3ZlcndyaXRlIGlubGluZSBzdHlsZXMgaWYgdGhlcmUgaXMgYW4gYW5pbWF0aW9uIHBlcnRhaW5pbmcgdG8gdGhhdCBzdHlsZS5cbi8vIFRvIGhlbHAgZW5zdXJlIHRoYXQgZWRnZSB3aWxsIHJlc3BlY3QgdGhlIG9mZnNjcmVlbiBzdHlsZSBvcGFjaXR5XG4vLyBmaWx0ZXIgbmVlZHMgdG8gYmUgYWRkZWQgYXMgYW4gYWRkaXRpb25hbCB3YXkgdG8gc2V0IG9wYWNpdHkuXG4vLyBBbHNvIHNldCBwb2ludGVyLWV2ZW50czogbm9uZSBzbyB0aGF0IHRoZSBjYWxsb3V0IHdpbGwgbm90IG9jY2x1ZGUgdGhlIGVsZW1lbnQgaXQgaXNcbi8vIGdvaW5nIHRvIGJlIHBvc2l0aW9uZWQgYWdhaW5zdFxudmFyIE9GRl9TQ1JFRU5fU1RZTEUgPSB7XG4gICAgb3BhY2l0eTogMCxcbiAgICBmaWx0ZXI6ICdvcGFjaXR5KDApJyxcbiAgICBwb2ludGVyRXZlbnRzOiAnbm9uZScsXG59O1xuLy8gcm9sZSBhbmQgcm9sZSBkZXNjcmlwdGlvbiBnbyBoYW5kLWluLWhhbmQuIEJvdGggd291bGQgYmUgaW5jbHVkZWQgYnkgc3ByZWFkaW5nIGdldE5hdGl2ZVByb3BzIGZvciBhIGJhc2ljIGVsZW1lbnRcbi8vIFRoaXMgY29uc3RhbnQgYXJyYXkgY2FuIGJlIHVzZWQgdG8gZmlsdGVyIHRoZXNlIG91dCBvZiBuYXRpdmUgcHJvcHMgc3ByZWFkIG9uIGNhbGxvdXQgcm9vdCBhbmQgYXBwbHkgdGhlbSB0b2dldGhlciBvblxuLy8gY2FsbG91dE1haW4gKHRoZSBQb3B1cCBjb21wb25lbnQgd2l0aGluIHRoZSBjYWxsb3V0KVxudmFyIEFSSUFfUk9MRV9BVFRSSUJVVEVTID0gWydyb2xlJywgJ2FyaWEtcm9sZWRlc2NyaXB0aW9uJ107XG52YXIgREVGQVVMVF9QUk9QUyA9IHtcbiAgICBwcmV2ZW50RGlzbWlzc09uTG9zdEZvY3VzOiBmYWxzZSxcbiAgICBwcmV2ZW50RGlzbWlzc09uU2Nyb2xsOiBmYWxzZSxcbiAgICBwcmV2ZW50RGlzbWlzc09uUmVzaXplOiBmYWxzZSxcbiAgICBpc0JlYWtWaXNpYmxlOiB0cnVlLFxuICAgIGJlYWtXaWR0aDogMTYsXG4gICAgZ2FwU3BhY2U6IDAsXG4gICAgbWluUGFnZVBhZGRpbmc6IDgsXG4gICAgZGlyZWN0aW9uYWxIaW50OiBEaXJlY3Rpb25hbEhpbnQuYm90dG9tQXV0b0VkZ2UsXG59O1xudmFyIGdldENsYXNzTmFtZXMgPSBjbGFzc05hbWVzRnVuY3Rpb24oe1xuICAgIGRpc2FibGVDYWNoaW5nOiB0cnVlLCAvLyBkaXNhYmxpbmcgY2FjaGluZyBiZWNhdXNlIHN0eWxlc1Byb3AucG9zaXRpb24gbXV0YXRlcyBvZnRlblxufSk7XG4vKipcbiAqIChIb29rKSB0byByZXR1cm4gYSBmdW5jdGlvbiB0byBsYXppbHkgZmV0Y2ggdGhlIGJvdW5kcyBvZiB0aGUgdGFyZ2V0IGVsZW1lbnQgZm9yIHRoZSBjYWxsb3V0LlxuICovXG5mdW5jdGlvbiB1c2VCb3VuZHMoX2EsIHRhcmdldFJlZiwgdGFyZ2V0V2luZG93KSB7XG4gICAgdmFyIGJvdW5kcyA9IF9hLmJvdW5kcywgX2IgPSBfYS5taW5QYWdlUGFkZGluZywgbWluUGFnZVBhZGRpbmcgPSBfYiA9PT0gdm9pZCAwID8gREVGQVVMVF9QUk9QUy5taW5QYWdlUGFkZGluZyA6IF9iLCB0YXJnZXQgPSBfYS50YXJnZXQ7XG4gICAgdmFyIF9jID0gUmVhY3QudXNlU3RhdGUoZmFsc2UpLCB0YXJnZXRXaW5kb3dSZXNpemVkID0gX2NbMF0sIHNldFRhcmdldFdpbmRvd1Jlc2l6ZWQgPSBfY1sxXTtcbiAgICB2YXIgY2FjaGVkQm91bmRzID0gUmVhY3QudXNlUmVmKCk7XG4gICAgdmFyIGdldEJvdW5kcyA9IFJlYWN0LnVzZUNhbGxiYWNrKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKCFjYWNoZWRCb3VuZHMuY3VycmVudCB8fCB0YXJnZXRXaW5kb3dSZXNpemVkKSB7XG4gICAgICAgICAgICB2YXIgY3VycmVudEJvdW5kcyA9IHR5cGVvZiBib3VuZHMgPT09ICdmdW5jdGlvbicgPyAodGFyZ2V0V2luZG93ID8gYm91bmRzKHRhcmdldCwgdGFyZ2V0V2luZG93KSA6IHVuZGVmaW5lZCkgOiBib3VuZHM7XG4gICAgICAgICAgICBpZiAoIWN1cnJlbnRCb3VuZHMgJiYgdGFyZ2V0V2luZG93KSB7XG4gICAgICAgICAgICAgICAgY3VycmVudEJvdW5kcyA9IGdldEJvdW5kc0Zyb21UYXJnZXRXaW5kb3codGFyZ2V0UmVmLmN1cnJlbnQsIHRhcmdldFdpbmRvdyk7XG4gICAgICAgICAgICAgICAgY3VycmVudEJvdW5kcyA9IHtcbiAgICAgICAgICAgICAgICAgICAgdG9wOiBjdXJyZW50Qm91bmRzLnRvcCArIG1pblBhZ2VQYWRkaW5nLFxuICAgICAgICAgICAgICAgICAgICBsZWZ0OiBjdXJyZW50Qm91bmRzLmxlZnQgKyBtaW5QYWdlUGFkZGluZyxcbiAgICAgICAgICAgICAgICAgICAgcmlnaHQ6IGN1cnJlbnRCb3VuZHMucmlnaHQgLSBtaW5QYWdlUGFkZGluZyxcbiAgICAgICAgICAgICAgICAgICAgYm90dG9tOiBjdXJyZW50Qm91bmRzLmJvdHRvbSAtIG1pblBhZ2VQYWRkaW5nLFxuICAgICAgICAgICAgICAgICAgICB3aWR0aDogY3VycmVudEJvdW5kcy53aWR0aCAtIG1pblBhZ2VQYWRkaW5nICogMixcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiBjdXJyZW50Qm91bmRzLmhlaWdodCAtIG1pblBhZ2VQYWRkaW5nICogMixcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FjaGVkQm91bmRzLmN1cnJlbnQgPSBjdXJyZW50Qm91bmRzO1xuICAgICAgICAgICAgdGFyZ2V0V2luZG93UmVzaXplZCAmJiBzZXRUYXJnZXRXaW5kb3dSZXNpemVkKGZhbHNlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY2FjaGVkQm91bmRzLmN1cnJlbnQ7XG4gICAgfSwgW2JvdW5kcywgbWluUGFnZVBhZGRpbmcsIHRhcmdldCwgdGFyZ2V0UmVmLCB0YXJnZXRXaW5kb3csIHRhcmdldFdpbmRvd1Jlc2l6ZWRdKTtcbiAgICB2YXIgYXN5bmMgPSB1c2VBc3luYygpO1xuICAgIHVzZU9uRXZlbnQodGFyZ2V0V2luZG93LCAncmVzaXplJywgYXN5bmMuZGVib3VuY2UoZnVuY3Rpb24gKCkge1xuICAgICAgICBzZXRUYXJnZXRXaW5kb3dSZXNpemVkKHRydWUpO1xuICAgIH0sIDUwMCwgeyBsZWFkaW5nOiB0cnVlIH0pKTtcbiAgICByZXR1cm4gZ2V0Qm91bmRzO1xufVxuLyoqXG4gKiAoSG9vaykgdG8gcmV0dXJuIHRoZSBtYXhpbXVtIGF2YWlsYWJsZSBoZWlnaHQgZm9yIHRoZSBDYWxsb3V0IHRvIHJlbmRlciBpbnRvLlxuICovXG5mdW5jdGlvbiB1c2VNYXhIZWlnaHQoX2EsIGdldEJvdW5kcywgcG9zaXRpb25zKSB7XG4gICAgdmFyIF9iO1xuICAgIHZhciBjYWxsb3V0TWF4SGVpZ2h0ID0gX2EuY2FsbG91dE1heEhlaWdodCwgZmluYWxIZWlnaHQgPSBfYS5maW5hbEhlaWdodCwgZGlyZWN0aW9uYWxIaW50ID0gX2EuZGlyZWN0aW9uYWxIaW50LCBkaXJlY3Rpb25hbEhpbnRGaXhlZCA9IF9hLmRpcmVjdGlvbmFsSGludEZpeGVkLCBoaWRkZW4gPSBfYS5oaWRkZW47XG4gICAgdmFyIF9jID0gUmVhY3QudXNlU3RhdGUoKSwgbWF4SGVpZ2h0ID0gX2NbMF0sIHNldE1heEhlaWdodCA9IF9jWzFdO1xuICAgIHZhciBfZCA9IChfYiA9IHBvc2l0aW9ucyA9PT0gbnVsbCB8fCBwb3NpdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHBvc2l0aW9ucy5lbGVtZW50UG9zaXRpb24pICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6IHt9LCB0b3AgPSBfZC50b3AsIGJvdHRvbSA9IF9kLmJvdHRvbTtcbiAgICBSZWFjdC51c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIHZhciBfYiA9IChfYSA9IGdldEJvdW5kcygpKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiB7fSwgdG9wQm91bmRzID0gX2IudG9wLCBib3R0b21Cb3VuZHMgPSBfYi5ib3R0b207XG4gICAgICAgIGlmICghY2FsbG91dE1heEhlaWdodCAmJiAhaGlkZGVuKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHRvcCA9PT0gJ251bWJlcicgJiYgYm90dG9tQm91bmRzKSB7XG4gICAgICAgICAgICAgICAgc2V0TWF4SGVpZ2h0KGJvdHRvbUJvdW5kcyAtIHRvcCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgYm90dG9tID09PSAnbnVtYmVyJyAmJiB0eXBlb2YgdG9wQm91bmRzID09PSAnbnVtYmVyJyAmJiBib3R0b21Cb3VuZHMpIHtcbiAgICAgICAgICAgICAgICBzZXRNYXhIZWlnaHQoYm90dG9tQm91bmRzIC0gdG9wQm91bmRzIC0gYm90dG9tKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChjYWxsb3V0TWF4SGVpZ2h0KSB7XG4gICAgICAgICAgICBzZXRNYXhIZWlnaHQoY2FsbG91dE1heEhlaWdodCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBzZXRNYXhIZWlnaHQodW5kZWZpbmVkKTtcbiAgICAgICAgfVxuICAgIH0sIFtib3R0b20sIGNhbGxvdXRNYXhIZWlnaHQsIGZpbmFsSGVpZ2h0LCBkaXJlY3Rpb25hbEhpbnQsIGRpcmVjdGlvbmFsSGludEZpeGVkLCBnZXRCb3VuZHMsIGhpZGRlbiwgcG9zaXRpb25zLCB0b3BdKTtcbiAgICByZXR1cm4gbWF4SGVpZ2h0O1xufVxuLyoqXG4gKiAoSG9vaykgdG8gZmluZCB0aGUgY3VycmVudCBwb3NpdGlvbiBvZiBDYWxsb3V0LiBJZiBDYWxsb3V0IGlzIHJlc2l6ZWQgdGhlbiBhIG5ldyBwb3NpdGlvbiBpcyBjYWxjdWxhdGVkLlxuICovXG5mdW5jdGlvbiB1c2VQb3NpdGlvbnMocHJvcHMsIGhvc3RFbGVtZW50LCBjYWxsb3V0RWxlbWVudCwgdGFyZ2V0UmVmLCBnZXRCb3VuZHMpIHtcbiAgICB2YXIgX2EgPSBSZWFjdC51c2VTdGF0ZSgpLCBwb3NpdGlvbnMgPSBfYVswXSwgc2V0UG9zaXRpb25zID0gX2FbMV07XG4gICAgdmFyIHBvc2l0aW9uQXR0ZW1wdHMgPSBSZWFjdC51c2VSZWYoMCk7XG4gICAgdmFyIHByZXZpb3VzVGFyZ2V0ID0gUmVhY3QudXNlUmVmKCk7XG4gICAgdmFyIGFzeW5jID0gdXNlQXN5bmMoKTtcbiAgICB2YXIgaGlkZGVuID0gcHJvcHMuaGlkZGVuLCB0YXJnZXQgPSBwcm9wcy50YXJnZXQsIGZpbmFsSGVpZ2h0ID0gcHJvcHMuZmluYWxIZWlnaHQsIGNhbGxvdXRNYXhIZWlnaHQgPSBwcm9wcy5jYWxsb3V0TWF4SGVpZ2h0LCBvblBvc2l0aW9uZWQgPSBwcm9wcy5vblBvc2l0aW9uZWQsIGRpcmVjdGlvbmFsSGludCA9IHByb3BzLmRpcmVjdGlvbmFsSGludDtcbiAgICBSZWFjdC51c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoIWhpZGRlbikge1xuICAgICAgICAgICAgdmFyIHRpbWVySWRfMSA9IGFzeW5jLnJlcXVlc3RBbmltYXRpb25GcmFtZShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdmFyIF9hLCBfYjtcbiAgICAgICAgICAgICAgICBpZiAoaG9zdEVsZW1lbnQuY3VycmVudCAmJiBjYWxsb3V0RWxlbWVudCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgY3VycmVudFByb3BzID0gX19hc3NpZ24oX19hc3NpZ24oe30sIHByb3BzKSwgeyB0YXJnZXQ6IHRhcmdldFJlZi5jdXJyZW50LCBib3VuZHM6IGdldEJvdW5kcygpIH0pO1xuICAgICAgICAgICAgICAgICAgICAvLyBkdXBsaWNhdGUgY2FsbG91dEVsZW1lbnQgJiByZW1vdmUgdXNlTWF4SGVpZ2h0J3MgbWF4SGVpZ2h0IGZvciBwb3NpdGlvbiBjYWxjXG4gICAgICAgICAgICAgICAgICAgIHZhciBkdXBlQ2FsbG91dEVsZW1lbnQgPSBjYWxsb3V0RWxlbWVudC5jbG9uZU5vZGUodHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgIGR1cGVDYWxsb3V0RWxlbWVudC5zdHlsZS5tYXhIZWlnaHQgPSBjYWxsb3V0TWF4SGVpZ2h0ID8gXCJcIiArIGNhbGxvdXRNYXhIZWlnaHQgOiAnJztcbiAgICAgICAgICAgICAgICAgICAgZHVwZUNhbGxvdXRFbGVtZW50LnN0eWxlLnZpc2liaWxpdHkgPSAnaGlkZGVuJztcbiAgICAgICAgICAgICAgICAgICAgKF9hID0gY2FsbG91dEVsZW1lbnQucGFyZW50RWxlbWVudCkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmFwcGVuZENoaWxkKGR1cGVDYWxsb3V0RWxlbWVudCk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBwcmV2aW91c1Bvc2l0aW9ucyA9IHByZXZpb3VzVGFyZ2V0LmN1cnJlbnQgPT09IHRhcmdldCA/IHBvc2l0aW9ucyA6IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICAgICAgLy8gSWYgdGhlcmUgaXMgYSBmaW5hbEhlaWdodCBnaXZlbiB0aGVuIHdlIGFzc3VtZSB0aGF0IHRoZSB1c2VyIGtub3dzIGFuZCB3aWxsIGhhbmRsZVxuICAgICAgICAgICAgICAgICAgICAvLyBhZGRpdGlvbmFsIHBvc2l0aW9uaW5nIGFkanVzdG1lbnRzIHNvIHdlIHNob3VsZCBjYWxsIHBvc2l0aW9uQ2FyZFxuICAgICAgICAgICAgICAgICAgICB2YXIgbmV3UG9zaXRpb25zID0gZmluYWxIZWlnaHRcbiAgICAgICAgICAgICAgICAgICAgICAgID8gcG9zaXRpb25DYXJkKGN1cnJlbnRQcm9wcywgaG9zdEVsZW1lbnQuY3VycmVudCwgZHVwZUNhbGxvdXRFbGVtZW50LCBwcmV2aW91c1Bvc2l0aW9ucylcbiAgICAgICAgICAgICAgICAgICAgICAgIDogcG9zaXRpb25DYWxsb3V0KGN1cnJlbnRQcm9wcywgaG9zdEVsZW1lbnQuY3VycmVudCwgZHVwZUNhbGxvdXRFbGVtZW50LCBwcmV2aW91c1Bvc2l0aW9ucyk7XG4gICAgICAgICAgICAgICAgICAgIC8vIGNsZWFuIHVwIGR1cGxpY2F0ZSBjYWxsb3V0RWxlbWVudFxuICAgICAgICAgICAgICAgICAgICAoX2IgPSBjYWxsb3V0RWxlbWVudC5wYXJlbnRFbGVtZW50KSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IucmVtb3ZlQ2hpbGQoZHVwZUNhbGxvdXRFbGVtZW50KTtcbiAgICAgICAgICAgICAgICAgICAgLy8gU2V0IHRoZSBuZXcgcG9zaXRpb24gb25seSB3aGVuIHRoZSBwb3NpdGlvbnMgZG8gbm90IGV4aXN0IG9yIG9uZSBvZiB0aGUgbmV3IGNhbGxvdXQgcG9zaXRpb25zXG4gICAgICAgICAgICAgICAgICAgIC8vIGlzIGRpZmZlcmVudC4gVGhlIHBvc2l0aW9uIHNob3VsZCBub3QgY2hhbmdlIGlmIHRoZSBwb3NpdGlvbiBpcyB3aXRoaW4gMiBkZWNpbWFsIHBsYWNlcy5cbiAgICAgICAgICAgICAgICAgICAgaWYgKCghcG9zaXRpb25zICYmIG5ld1Bvc2l0aW9ucykgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgIChwb3NpdGlvbnMgJiYgbmV3UG9zaXRpb25zICYmICFhcmVQb3NpdGlvbnNFcXVhbChwb3NpdGlvbnMsIG5ld1Bvc2l0aW9ucykgJiYgcG9zaXRpb25BdHRlbXB0cy5jdXJyZW50IDwgNSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFdlIHNob3VsZCBub3QgcmVwb3NpdGlvbiB0aGUgY2FsbG91dCBtb3JlIHRoYW4gYSBmZXcgdGltZXMsIGlmIGl0IGlzIHRoZW4gdGhlIGNvbnRlbnQgaXMgbGlrZWx5IHJlc2l6aW5nXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBhbmQgd2Ugc2hvdWxkIHN0b3AgdHJ5aW5nIHRvIHJlcG9zaXRpb24gdG8gcHJldmVudCBhIHN0YWNrIG92ZXJmbG93LlxuICAgICAgICAgICAgICAgICAgICAgICAgcG9zaXRpb25BdHRlbXB0cy5jdXJyZW50Kys7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZXRQb3NpdGlvbnMobmV3UG9zaXRpb25zKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChwb3NpdGlvbkF0dGVtcHRzLmN1cnJlbnQgPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBPbmx5IGNhbGwgdGhlIG9uUG9zaXRpb25lZCBjYWxsYmFjayBpZiB0aGUgY2FsbG91dCBoYXMgYmVlbiByZS1wb3NpdGlvbmVkIGF0IGxlYXN0IG9uY2UuXG4gICAgICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbkF0dGVtcHRzLmN1cnJlbnQgPSAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgb25Qb3NpdGlvbmVkID09PSBudWxsIHx8IG9uUG9zaXRpb25lZCA9PT0gdm9pZCAwID8gdm9pZCAwIDogb25Qb3NpdGlvbmVkKHBvc2l0aW9ucyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCBjYWxsb3V0RWxlbWVudCk7XG4gICAgICAgICAgICBwcmV2aW91c1RhcmdldC5jdXJyZW50ID0gdGFyZ2V0O1xuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBhc3luYy5jYW5jZWxBbmltYXRpb25GcmFtZSh0aW1lcklkXzEpO1xuICAgICAgICAgICAgICAgIHByZXZpb3VzVGFyZ2V0LmN1cnJlbnQgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgLy8gV2hlbiB0aGUgY2FsbG91dCBpcyBoaWRkZW4sIGNsZWFyIHBvc2l0aW9uIHN0YXRlIHNvIHRoYXQgaXQgaXMgbm90IGFjY2lkZW50YWxseSB1c2VkIG5leHQgcmVuZGVyLlxuICAgICAgICAgICAgc2V0UG9zaXRpb25zKHVuZGVmaW5lZCk7XG4gICAgICAgICAgICBwb3NpdGlvbkF0dGVtcHRzLmN1cnJlbnQgPSAwO1xuICAgICAgICB9XG4gICAgfSwgW1xuICAgICAgICBoaWRkZW4sXG4gICAgICAgIGRpcmVjdGlvbmFsSGludCxcbiAgICAgICAgYXN5bmMsXG4gICAgICAgIGNhbGxvdXRFbGVtZW50LFxuICAgICAgICBjYWxsb3V0TWF4SGVpZ2h0LFxuICAgICAgICBob3N0RWxlbWVudCxcbiAgICAgICAgdGFyZ2V0UmVmLFxuICAgICAgICBmaW5hbEhlaWdodCxcbiAgICAgICAgZ2V0Qm91bmRzLFxuICAgICAgICBvblBvc2l0aW9uZWQsXG4gICAgICAgIHBvc2l0aW9ucyxcbiAgICAgICAgcHJvcHMsXG4gICAgICAgIHRhcmdldCxcbiAgICBdKTtcbiAgICByZXR1cm4gcG9zaXRpb25zO1xufVxuLyoqXG4gKiAoSG9vaykgdG8gc2V0IHVwIGJlaGF2aW9yIHRvIGF1dG9tYXRpY2FsbHkgZm9jdXMgdGhlIGNhbGxvdXQgd2hlbiBpdCBhcHBlYXJzLCBpZiBpbmRpY2F0ZWQgYnkgcHJvcHMuXG4gKi9cbmZ1bmN0aW9uIHVzZUF1dG9Gb2N1cyhfYSwgcG9zaXRpb25zLCBjYWxsb3V0RWxlbWVudCkge1xuICAgIHZhciBoaWRkZW4gPSBfYS5oaWRkZW4sIHNldEluaXRpYWxGb2N1cyA9IF9hLnNldEluaXRpYWxGb2N1cztcbiAgICB2YXIgYXN5bmMgPSB1c2VBc3luYygpO1xuICAgIHZhciBoYXNQb3NpdGlvbnMgPSAhIXBvc2l0aW9ucztcbiAgICBSZWFjdC51c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoIWhpZGRlbiAmJiBzZXRJbml0aWFsRm9jdXMgJiYgaGFzUG9zaXRpb25zICYmIGNhbGxvdXRFbGVtZW50KSB7XG4gICAgICAgICAgICB2YXIgdGltZXJJZF8yID0gYXN5bmMucmVxdWVzdEFuaW1hdGlvbkZyYW1lKGZ1bmN0aW9uICgpIHsgcmV0dXJuIGZvY3VzRmlyc3RDaGlsZChjYWxsb3V0RWxlbWVudCk7IH0sIGNhbGxvdXRFbGVtZW50KTtcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7IHJldHVybiBhc3luYy5jYW5jZWxBbmltYXRpb25GcmFtZSh0aW1lcklkXzIpOyB9O1xuICAgICAgICB9XG4gICAgfSwgW2hpZGRlbiwgaGFzUG9zaXRpb25zLCBhc3luYywgY2FsbG91dEVsZW1lbnQsIHNldEluaXRpYWxGb2N1c10pO1xufVxuLyoqXG4gKiAoSG9vaykgdG8gc2V0IHVwIHZhcmlvdXMgaGFuZGxlcnMgdG8gZGlzbWlzcyB0aGUgcG9wdXAgd2hlbiBpdCBsb3NlcyBmb2N1cyBvciB0aGUgd2luZG93IHNjcm9sbHMgb3Igc2ltaWxhciBjYXNlcy5cbiAqL1xuZnVuY3Rpb24gdXNlRGlzbWlzc0hhbmRsZXJzKF9hLCBwb3NpdGlvbnMsIGhvc3RFbGVtZW50LCB0YXJnZXRSZWYsIHRhcmdldFdpbmRvdykge1xuICAgIHZhciBoaWRkZW4gPSBfYS5oaWRkZW4sIG9uRGlzbWlzcyA9IF9hLm9uRGlzbWlzcywgXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGRlcHJlY2F0aW9uL2RlcHJlY2F0aW9uXG4gICAgcHJldmVudERpc21pc3NPblNjcm9sbCA9IF9hLnByZXZlbnREaXNtaXNzT25TY3JvbGwsIFxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBkZXByZWNhdGlvbi9kZXByZWNhdGlvblxuICAgIHByZXZlbnREaXNtaXNzT25SZXNpemUgPSBfYS5wcmV2ZW50RGlzbWlzc09uUmVzaXplLCBcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZGVwcmVjYXRpb24vZGVwcmVjYXRpb25cbiAgICBwcmV2ZW50RGlzbWlzc09uTG9zdEZvY3VzID0gX2EucHJldmVudERpc21pc3NPbkxvc3RGb2N1cywgZGlzbWlzc09uVGFyZ2V0Q2xpY2sgPSBfYS5kaXNtaXNzT25UYXJnZXRDbGljaywgc2hvdWxkRGlzbWlzc09uV2luZG93Rm9jdXMgPSBfYS5zaG91bGREaXNtaXNzT25XaW5kb3dGb2N1cywgcHJldmVudERpc21pc3NPbkV2ZW50ID0gX2EucHJldmVudERpc21pc3NPbkV2ZW50O1xuICAgIHZhciBpc01vdXNlRG93bk9uUG9wdXAgPSBSZWFjdC51c2VSZWYoZmFsc2UpO1xuICAgIHZhciBhc3luYyA9IHVzZUFzeW5jKCk7XG4gICAgdmFyIG1vdXNlRG93bkhhbmRsZXJzID0gdXNlQ29uc3QoW1xuICAgICAgICBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpc01vdXNlRG93bk9uUG9wdXAuY3VycmVudCA9IHRydWU7XG4gICAgICAgIH0sXG4gICAgICAgIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlzTW91c2VEb3duT25Qb3B1cC5jdXJyZW50ID0gZmFsc2U7XG4gICAgICAgIH0sXG4gICAgXSk7XG4gICAgdmFyIHBvc2l0aW9uc0V4aXN0cyA9ICEhcG9zaXRpb25zO1xuICAgIFJlYWN0LnVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBkaXNtaXNzT25TY3JvbGwgPSBmdW5jdGlvbiAoZXYpIHtcbiAgICAgICAgICAgIGlmIChwb3NpdGlvbnNFeGlzdHMgJiYgIXByZXZlbnREaXNtaXNzT25TY3JvbGwpIHtcbiAgICAgICAgICAgICAgICBkaXNtaXNzT25DbGlja09yU2Nyb2xsKGV2KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgdmFyIGRpc21pc3NPblJlc2l6ZSA9IGZ1bmN0aW9uIChldikge1xuICAgICAgICAgICAgaWYgKCFwcmV2ZW50RGlzbWlzc09uUmVzaXplICYmICEocHJldmVudERpc21pc3NPbkV2ZW50ICYmIHByZXZlbnREaXNtaXNzT25FdmVudChldikpKSB7XG4gICAgICAgICAgICAgICAgb25EaXNtaXNzID09PSBudWxsIHx8IG9uRGlzbWlzcyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb25EaXNtaXNzKGV2KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgdmFyIGRpc21pc3NPbkxvc3RGb2N1cyA9IGZ1bmN0aW9uIChldikge1xuICAgICAgICAgICAgaWYgKCFwcmV2ZW50RGlzbWlzc09uTG9zdEZvY3VzKSB7XG4gICAgICAgICAgICAgICAgZGlzbWlzc09uQ2xpY2tPclNjcm9sbChldik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHZhciBkaXNtaXNzT25DbGlja09yU2Nyb2xsID0gZnVuY3Rpb24gKGV2KSB7XG4gICAgICAgICAgICB2YXIgZXZlbnRQYXRocyA9IGV2LmNvbXBvc2VkUGF0aCA/IGV2LmNvbXBvc2VkUGF0aCgpIDogW107XG4gICAgICAgICAgICB2YXIgdGFyZ2V0ID0gZXZlbnRQYXRocy5sZW5ndGggPiAwID8gZXZlbnRQYXRoc1swXSA6IGV2LnRhcmdldDtcbiAgICAgICAgICAgIHZhciBpc0V2ZW50VGFyZ2V0T3V0c2lkZUNhbGxvdXQgPSBob3N0RWxlbWVudC5jdXJyZW50ICYmICFlbGVtZW50Q29udGFpbnMoaG9zdEVsZW1lbnQuY3VycmVudCwgdGFyZ2V0KTtcbiAgICAgICAgICAgIC8vIElmIG1vdXNlIGlzIHByZXNzZWQgZG93biBvbiBjYWxsb3V0IGJ1dCBtb3ZlZCBvdXRzaWRlIHRoZW4gcmVsZWFzZWQsIGRvbid0IGRpc21pc3MgdGhlIGNhbGxvdXQuXG4gICAgICAgICAgICBpZiAoaXNFdmVudFRhcmdldE91dHNpZGVDYWxsb3V0ICYmIGlzTW91c2VEb3duT25Qb3B1cC5jdXJyZW50KSB7XG4gICAgICAgICAgICAgICAgaXNNb3VzZURvd25PblBvcHVwLmN1cnJlbnQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoKCF0YXJnZXRSZWYuY3VycmVudCAmJiBpc0V2ZW50VGFyZ2V0T3V0c2lkZUNhbGxvdXQpIHx8XG4gICAgICAgICAgICAgICAgKGV2LnRhcmdldCAhPT0gdGFyZ2V0V2luZG93ICYmXG4gICAgICAgICAgICAgICAgICAgIGlzRXZlbnRUYXJnZXRPdXRzaWRlQ2FsbG91dCAmJlxuICAgICAgICAgICAgICAgICAgICAoIXRhcmdldFJlZi5jdXJyZW50IHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAnc3RvcFByb3BhZ2F0aW9uJyBpbiB0YXJnZXRSZWYuY3VycmVudCB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgZGlzbWlzc09uVGFyZ2V0Q2xpY2sgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICh0YXJnZXQgIT09IHRhcmdldFJlZi5jdXJyZW50ICYmICFlbGVtZW50Q29udGFpbnModGFyZ2V0UmVmLmN1cnJlbnQsIHRhcmdldCkpKSkpIHtcbiAgICAgICAgICAgICAgICBpZiAocHJldmVudERpc21pc3NPbkV2ZW50ICYmIHByZXZlbnREaXNtaXNzT25FdmVudChldikpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBvbkRpc21pc3MgPT09IG51bGwgfHwgb25EaXNtaXNzID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvbkRpc21pc3MoZXYpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICB2YXIgZGlzbWlzc09uVGFyZ2V0V2luZG93Qmx1ciA9IGZ1bmN0aW9uIChldikge1xuICAgICAgICAgICAgLy8gRG8gbm90aGluZ1xuICAgICAgICAgICAgaWYgKCFzaG91bGREaXNtaXNzT25XaW5kb3dGb2N1cykge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICgoKHByZXZlbnREaXNtaXNzT25FdmVudCAmJiAhcHJldmVudERpc21pc3NPbkV2ZW50KGV2KSkgfHxcbiAgICAgICAgICAgICAgICAoIXByZXZlbnREaXNtaXNzT25FdmVudCAmJiAhcHJldmVudERpc21pc3NPbkxvc3RGb2N1cykpICYmXG4gICAgICAgICAgICAgICAgISh0YXJnZXRXaW5kb3cgPT09IG51bGwgfHwgdGFyZ2V0V2luZG93ID09PSB2b2lkIDAgPyB2b2lkIDAgOiB0YXJnZXRXaW5kb3cuZG9jdW1lbnQuaGFzRm9jdXMoKSkgJiZcbiAgICAgICAgICAgICAgICBldi5yZWxhdGVkVGFyZ2V0ID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgb25EaXNtaXNzID09PSBudWxsIHx8IG9uRGlzbWlzcyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb25EaXNtaXNzKGV2KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgLy8gVGhpcyBpcyBhZGRlZCBzbyB0aGUgY2FsbG91dCB3aWxsIGRpc21pc3Mgd2hlbiB0aGUgd2luZG93IGlzIHNjcm9sbGVkXG4gICAgICAgIC8vIGJ1dCBub3Qgd2hlbiBzb21ldGhpbmcgaW5zaWRlIHRoZSBjYWxsb3V0IGlzIHNjcm9sbGVkLiBUaGUgZGVsYXkgc2VlbXNcbiAgICAgICAgLy8gdG8gYmUgcmVxdWlyZWQgdG8gYXZvaWQgUmVhY3QgZmlyaW5nIGFuIGFzeW5jIGZvY3VzIGV2ZW50IGluIElFIGZyb21cbiAgICAgICAgLy8gdGhlIHRhcmdldCBjaGFuZ2luZyBmb2N1cyBxdWlja2x5IHByaW9yIHRvIHJlbmRlcmluZyB0aGUgY2FsbG91dC5cbiAgICAgICAgdmFyIGRpc3Bvc2FibGVzUHJvbWlzZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlKSB7XG4gICAgICAgICAgICBhc3luYy5zZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBpZiAoIWhpZGRlbiAmJiB0YXJnZXRXaW5kb3cpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGRpc3Bvc2FibGVzXzEgPSBbXG4gICAgICAgICAgICAgICAgICAgICAgICBvbih0YXJnZXRXaW5kb3csICdzY3JvbGwnLCBkaXNtaXNzT25TY3JvbGwsIHRydWUpLFxuICAgICAgICAgICAgICAgICAgICAgICAgb24odGFyZ2V0V2luZG93LCAncmVzaXplJywgZGlzbWlzc09uUmVzaXplLCB0cnVlKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uKHRhcmdldFdpbmRvdy5kb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsICdmb2N1cycsIGRpc21pc3NPbkxvc3RGb2N1cywgdHJ1ZSksXG4gICAgICAgICAgICAgICAgICAgICAgICBvbih0YXJnZXRXaW5kb3cuZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LCAnY2xpY2snLCBkaXNtaXNzT25Mb3N0Rm9jdXMsIHRydWUpLFxuICAgICAgICAgICAgICAgICAgICAgICAgb24odGFyZ2V0V2luZG93LCAnYmx1cicsIGRpc21pc3NPblRhcmdldFdpbmRvd0JsdXIsIHRydWUpLFxuICAgICAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRpc3Bvc2FibGVzXzEuZm9yRWFjaChmdW5jdGlvbiAoZGlzcG9zZSkgeyByZXR1cm4gZGlzcG9zZSgpOyB9KTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgMCk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgZGlzcG9zYWJsZXNQcm9taXNlLnRoZW4oZnVuY3Rpb24gKGRpc3Bvc2UpIHsgcmV0dXJuIGRpc3Bvc2UoKTsgfSk7XG4gICAgICAgIH07XG4gICAgfSwgW1xuICAgICAgICBoaWRkZW4sXG4gICAgICAgIGFzeW5jLFxuICAgICAgICBob3N0RWxlbWVudCxcbiAgICAgICAgdGFyZ2V0UmVmLFxuICAgICAgICB0YXJnZXRXaW5kb3csXG4gICAgICAgIG9uRGlzbWlzcyxcbiAgICAgICAgc2hvdWxkRGlzbWlzc09uV2luZG93Rm9jdXMsXG4gICAgICAgIGRpc21pc3NPblRhcmdldENsaWNrLFxuICAgICAgICBwcmV2ZW50RGlzbWlzc09uTG9zdEZvY3VzLFxuICAgICAgICBwcmV2ZW50RGlzbWlzc09uUmVzaXplLFxuICAgICAgICBwcmV2ZW50RGlzbWlzc09uU2Nyb2xsLFxuICAgICAgICBwb3NpdGlvbnNFeGlzdHMsXG4gICAgICAgIHByZXZlbnREaXNtaXNzT25FdmVudCxcbiAgICBdKTtcbiAgICByZXR1cm4gbW91c2VEb3duSGFuZGxlcnM7XG59XG5leHBvcnQgdmFyIENhbGxvdXRDb250ZW50QmFzZSA9IFJlYWN0Lm1lbW8oUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiAocHJvcHNXaXRob3V0RGVmYXVsdHMsIGZvcndhcmRlZFJlZikge1xuICAgIHZhciBwcm9wcyA9IGdldFByb3BzV2l0aERlZmF1bHRzKERFRkFVTFRfUFJPUFMsIHByb3BzV2l0aG91dERlZmF1bHRzKTtcbiAgICB2YXIgc3R5bGVzID0gcHJvcHMuc3R5bGVzLCBzdHlsZSA9IHByb3BzLnN0eWxlLCBhcmlhTGFiZWwgPSBwcm9wcy5hcmlhTGFiZWwsIGFyaWFEZXNjcmliZWRCeSA9IHByb3BzLmFyaWFEZXNjcmliZWRCeSwgYXJpYUxhYmVsbGVkQnkgPSBwcm9wcy5hcmlhTGFiZWxsZWRCeSwgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLCBpc0JlYWtWaXNpYmxlID0gcHJvcHMuaXNCZWFrVmlzaWJsZSwgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbiwgYmVha1dpZHRoID0gcHJvcHMuYmVha1dpZHRoLCBjYWxsb3V0V2lkdGggPSBwcm9wcy5jYWxsb3V0V2lkdGgsIGNhbGxvdXRNYXhXaWR0aCA9IHByb3BzLmNhbGxvdXRNYXhXaWR0aCwgY2FsbG91dE1pbldpZHRoID0gcHJvcHMuY2FsbG91dE1pbldpZHRoLCBkb05vdExheWVyID0gcHJvcHMuZG9Ob3RMYXllciwgZmluYWxIZWlnaHQgPSBwcm9wcy5maW5hbEhlaWdodCwgX2EgPSBwcm9wcy5oaWRlT3ZlcmZsb3csIGhpZGVPdmVyZmxvdyA9IF9hID09PSB2b2lkIDAgPyAhIWZpbmFsSGVpZ2h0IDogX2EsIGJhY2tncm91bmRDb2xvciA9IHByb3BzLmJhY2tncm91bmRDb2xvciwgY2FsbG91dE1heEhlaWdodCA9IHByb3BzLmNhbGxvdXRNYXhIZWlnaHQsIG9uU2Nyb2xsID0gcHJvcHMub25TY3JvbGwsIFxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBkZXByZWNhdGlvbi9kZXByZWNhdGlvblxuICAgIF9iID0gcHJvcHMuc2hvdWxkUmVzdG9yZUZvY3VzLCBcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZGVwcmVjYXRpb24vZGVwcmVjYXRpb25cbiAgICBzaG91bGRSZXN0b3JlRm9jdXMgPSBfYiA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9iLCB0YXJnZXQgPSBwcm9wcy50YXJnZXQsIGhpZGRlbiA9IHByb3BzLmhpZGRlbiwgb25MYXllck1vdW50ZWQgPSBwcm9wcy5vbkxheWVyTW91bnRlZDtcbiAgICB2YXIgaG9zdEVsZW1lbnQgPSBSZWFjdC51c2VSZWYobnVsbCk7XG4gICAgdmFyIF9jID0gUmVhY3QudXNlU3RhdGUobnVsbCksIGNhbGxvdXRFbGVtZW50ID0gX2NbMF0sIHNldENhbGxvdXRFbGVtZW50ID0gX2NbMV07XG4gICAgdmFyIGNhbGxvdXRDYWxsYmFjayA9IFJlYWN0LnVzZUNhbGxiYWNrKGZ1bmN0aW9uIChjYWxsb3V0RWwpIHtcbiAgICAgICAgc2V0Q2FsbG91dEVsZW1lbnQoY2FsbG91dEVsKTtcbiAgICB9LCBbXSk7XG4gICAgdmFyIHJvb3RSZWYgPSB1c2VNZXJnZWRSZWZzKGhvc3RFbGVtZW50LCBmb3J3YXJkZWRSZWYpO1xuICAgIHZhciBfZCA9IHVzZVRhcmdldChwcm9wcy50YXJnZXQsIHtcbiAgICAgICAgY3VycmVudDogY2FsbG91dEVsZW1lbnQsXG4gICAgfSksIHRhcmdldFJlZiA9IF9kWzBdLCB0YXJnZXRXaW5kb3cgPSBfZFsxXTtcbiAgICB2YXIgZ2V0Qm91bmRzID0gdXNlQm91bmRzKHByb3BzLCB0YXJnZXRSZWYsIHRhcmdldFdpbmRvdyk7XG4gICAgdmFyIHBvc2l0aW9ucyA9IHVzZVBvc2l0aW9ucyhwcm9wcywgaG9zdEVsZW1lbnQsIGNhbGxvdXRFbGVtZW50LCB0YXJnZXRSZWYsIGdldEJvdW5kcyk7XG4gICAgdmFyIG1heEhlaWdodCA9IHVzZU1heEhlaWdodChwcm9wcywgZ2V0Qm91bmRzLCBwb3NpdGlvbnMpO1xuICAgIHZhciBfZSA9IHVzZURpc21pc3NIYW5kbGVycyhwcm9wcywgcG9zaXRpb25zLCBob3N0RWxlbWVudCwgdGFyZ2V0UmVmLCB0YXJnZXRXaW5kb3cpLCBtb3VzZURvd25PblBvcHVwID0gX2VbMF0sIG1vdXNlVXBPblBvcHVwID0gX2VbMV07XG4gICAgLy8gZG8gbm90IHNldCBib3RoIHRvcCBhbmQgYm90dG9tIGNzcyBwcm9wcyBmcm9tIHBvc2l0aW9uc1xuICAgIC8vIGluc3RlYWQsIHVzZSBtYXhIZWlnaHRcbiAgICB2YXIgaXNGb3JjZWRJbkJvdW5kcyA9IChwb3NpdGlvbnMgPT09IG51bGwgfHwgcG9zaXRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBwb3NpdGlvbnMuZWxlbWVudFBvc2l0aW9uLnRvcCkgJiYgKHBvc2l0aW9ucyA9PT0gbnVsbCB8fCBwb3NpdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHBvc2l0aW9ucy5lbGVtZW50UG9zaXRpb24uYm90dG9tKTtcbiAgICB2YXIgY3NzUG9zaXRpb25zID0gX19hc3NpZ24oX19hc3NpZ24oe30sIHBvc2l0aW9ucyA9PT0gbnVsbCB8fCBwb3NpdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHBvc2l0aW9ucy5lbGVtZW50UG9zaXRpb24pLCB7IG1heEhlaWdodDogbWF4SGVpZ2h0IH0pO1xuICAgIGlmIChpc0ZvcmNlZEluQm91bmRzKSB7XG4gICAgICAgIGNzc1Bvc2l0aW9ucy5ib3R0b20gPSB1bmRlZmluZWQ7XG4gICAgfVxuICAgIHVzZUF1dG9Gb2N1cyhwcm9wcywgcG9zaXRpb25zLCBjYWxsb3V0RWxlbWVudCk7XG4gICAgUmVhY3QudXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKCFoaWRkZW4pIHtcbiAgICAgICAgICAgIG9uTGF5ZXJNb3VudGVkID09PSBudWxsIHx8IG9uTGF5ZXJNb3VudGVkID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvbkxheWVyTW91bnRlZCgpO1xuICAgICAgICB9XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9leGhhdXN0aXZlLWRlcHMgLS0gc2hvdWxkIG9ubHkgcnVuIGlmIGhpZGRlbiBjaGFuZ2VzXG4gICAgfSwgW2hpZGRlbl0pO1xuICAgIC8vIElmIHRoZXJlIGlzIG5vIHRhcmdldCB3aW5kb3cgdGhlbiB3ZSBhcmUgbGlrZWx5IGluIHNlcnZlciBzaWRlIHJlbmRlcmluZyBhbmQgd2Ugc2hvdWxkIG5vdCByZW5kZXIgYW55dGhpbmcuXG4gICAgaWYgKCF0YXJnZXRXaW5kb3cpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHZhciBvdmVyZmxvd1lIaWRkZW4gPSBoaWRlT3ZlcmZsb3c7XG4gICAgdmFyIGJlYWtWaXNpYmxlID0gaXNCZWFrVmlzaWJsZSAmJiAhIXRhcmdldDtcbiAgICB2YXIgY2xhc3NOYW1lcyA9IGdldENsYXNzTmFtZXMoc3R5bGVzLCB7XG4gICAgICAgIHRoZW1lOiBwcm9wcy50aGVtZSxcbiAgICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWUsXG4gICAgICAgIG92ZXJmbG93WUhpZGRlbjogb3ZlcmZsb3dZSGlkZGVuLFxuICAgICAgICBjYWxsb3V0V2lkdGg6IGNhbGxvdXRXaWR0aCxcbiAgICAgICAgcG9zaXRpb25zOiBwb3NpdGlvbnMsXG4gICAgICAgIGJlYWtXaWR0aDogYmVha1dpZHRoLFxuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IGJhY2tncm91bmRDb2xvcixcbiAgICAgICAgY2FsbG91dE1heFdpZHRoOiBjYWxsb3V0TWF4V2lkdGgsXG4gICAgICAgIGNhbGxvdXRNaW5XaWR0aDogY2FsbG91dE1pbldpZHRoLFxuICAgICAgICBkb05vdExheWVyOiBkb05vdExheWVyLFxuICAgIH0pO1xuICAgIHZhciBvdmVyZmxvd1N0eWxlID0gX19hc3NpZ24oX19hc3NpZ24oeyBtYXhIZWlnaHQ6IGNhbGxvdXRNYXhIZWlnaHQgPyBjYWxsb3V0TWF4SGVpZ2h0IDogJzEwMCUnIH0sIHN0eWxlKSwgKG92ZXJmbG93WUhpZGRlbiAmJiB7IG92ZXJmbG93WTogJ2hpZGRlbicgfSkpO1xuICAgIHZhciB2aXNpYmlsaXR5U3R5bGUgPSBwcm9wcy5oaWRkZW4gPyB7IHZpc2liaWxpdHk6ICdoaWRkZW4nIH0gOiB1bmRlZmluZWQ7XG4gICAgLy8gUmVhY3QuQ1NTUHJvcGVydGllcyBkb2VzIG5vdCB1bmRlcnN0YW5kIElSYXdTdHlsZSwgc28gdGhlIGlubGluZSBhbmltYXRpb25zIHdpbGwgbmVlZCB0byBiZSBjYXN0IGFzIGFueSBmb3Igbm93LlxuICAgIHJldHVybiAoUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7IHJlZjogcm9vdFJlZiwgY2xhc3NOYW1lOiBjbGFzc05hbWVzLmNvbnRhaW5lciwgc3R5bGU6IHZpc2liaWxpdHlTdHlsZSB9LFxuICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIF9fYXNzaWduKHt9LCBnZXROYXRpdmVQcm9wcyhwcm9wcywgZGl2UHJvcGVydGllcywgQVJJQV9ST0xFX0FUVFJJQlVURVMpLCB7IGNsYXNzTmFtZTogY3NzKGNsYXNzTmFtZXMucm9vdCwgcG9zaXRpb25zICYmIHBvc2l0aW9ucy50YXJnZXRFZGdlICYmIEFOSU1BVElPTlNbcG9zaXRpb25zLnRhcmdldEVkZ2VdKSwgc3R5bGU6IHBvc2l0aW9ucyA/IF9fYXNzaWduKHt9LCBjc3NQb3NpdGlvbnMpIDogT0ZGX1NDUkVFTl9TVFlMRSwgXG4gICAgICAgICAgICAvLyBTYWZhcmkgYW5kIEZpcmVmb3ggb24gTWFjIE9TIHJlcXVpcmVzIHRoaXMgdG8gYmFjay1zdG9wIGNsaWNrIGV2ZW50cyBzbyBmb2N1cyByZW1haW5zIGluIHRoZSBDYWxsb3V0LlxuICAgICAgICAgICAgLy8gU2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0hUTUwvRWxlbWVudC9idXR0b24jQ2xpY2tpbmdfYW5kX2ZvY3VzXG4gICAgICAgICAgICB0YWJJbmRleDogLTEsIHJlZjogY2FsbG91dENhbGxiYWNrIH0pLFxuICAgICAgICAgICAgYmVha1Zpc2libGUgJiYgUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7IGNsYXNzTmFtZTogY2xhc3NOYW1lcy5iZWFrLCBzdHlsZTogZ2V0QmVha1Bvc2l0aW9uKHBvc2l0aW9ucykgfSksXG4gICAgICAgICAgICBiZWFrVmlzaWJsZSAmJiBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHsgY2xhc3NOYW1lOiBjbGFzc05hbWVzLmJlYWtDdXJ0YWluIH0pLFxuICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChQb3B1cFxuICAgICAgICAgICAgLy8gZG9uJ3QgdXNlIGdldE5hdGl2ZUVsZW1lbnRQcm9wcyBmb3Igcm9sZSBhbmQgcm9sZWRlc2NyaXB0aW9uIGJlY2F1c2UgaXQgd2lsbCBhbHNvXG4gICAgICAgICAgICAvLyBwYXNzIHRocm91Z2ggZGF0YS0qIHByb3BzIChyZXN1bHRpbmcgaW4gdGhlbSBiZWluZyB1c2VkIGluIHR3byBwbGFjZXMpXG4gICAgICAgICAgICAsIHsgXG4gICAgICAgICAgICAgICAgLy8gZG9uJ3QgdXNlIGdldE5hdGl2ZUVsZW1lbnRQcm9wcyBmb3Igcm9sZSBhbmQgcm9sZWRlc2NyaXB0aW9uIGJlY2F1c2UgaXQgd2lsbCBhbHNvXG4gICAgICAgICAgICAgICAgLy8gcGFzcyB0aHJvdWdoIGRhdGEtKiBwcm9wcyAocmVzdWx0aW5nIGluIHRoZW0gYmVpbmcgdXNlZCBpbiB0d28gcGxhY2VzKVxuICAgICAgICAgICAgICAgIHJvbGU6IHByb3BzLnJvbGUsIFwiYXJpYS1yb2xlZGVzY3JpcHRpb25cIjogcHJvcHNbJ2FyaWEtcm9sZWRlc2NyaXB0aW9uJ10sIGFyaWFEZXNjcmliZWRCeTogYXJpYURlc2NyaWJlZEJ5LCBhcmlhTGFiZWw6IGFyaWFMYWJlbCwgYXJpYUxhYmVsbGVkQnk6IGFyaWFMYWJlbGxlZEJ5LCBjbGFzc05hbWU6IGNsYXNzTmFtZXMuY2FsbG91dE1haW4sIG9uRGlzbWlzczogcHJvcHMub25EaXNtaXNzLCBvbk1vdXNlRG93bjogbW91c2VEb3duT25Qb3B1cCwgb25Nb3VzZVVwOiBtb3VzZVVwT25Qb3B1cCwgb25SZXN0b3JlRm9jdXM6IHByb3BzLm9uUmVzdG9yZUZvY3VzLCBvblNjcm9sbDogb25TY3JvbGwsIHNob3VsZFJlc3RvcmVGb2N1czogc2hvdWxkUmVzdG9yZUZvY3VzLCBzdHlsZTogb3ZlcmZsb3dTdHlsZSB9LCBjaGlsZHJlbikpKSk7XG59KSwgZnVuY3Rpb24gKHByZXZpb3VzUHJvcHMsIG5leHRQcm9wcykge1xuICAgIGlmICghbmV4dFByb3BzLnNob3VsZFVwZGF0ZVdoZW5IaWRkZW4gJiYgcHJldmlvdXNQcm9wcy5oaWRkZW4gJiYgbmV4dFByb3BzLmhpZGRlbikge1xuICAgICAgICAvLyBEbyBub3QgdXBkYXRlIHdoZW4gaGlkZGVuLlxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIHNoYWxsb3dDb21wYXJlKHByZXZpb3VzUHJvcHMsIG5leHRQcm9wcyk7XG59KTtcbi8qKlxuICogKFV0aWxpdHkpIHRvIGZpbmQgYW5kIHJldHVybiB0aGUgY3VycmVudCBgQ2FsbG91dGAgQmVhayBwb3NpdGlvbi5cbiAqXG4gKiBAcGFyYW0gcG9zaXRpb25zXG4gKi9cbmZ1bmN0aW9uIGdldEJlYWtQb3NpdGlvbihwb3NpdGlvbnMpIHtcbiAgICB2YXIgX2EsIF9iO1xuICAgIHZhciBiZWFrUG9zaXRpb25TdHlsZSA9IF9fYXNzaWduKF9fYXNzaWduKHt9LCAoX2EgPSBwb3NpdGlvbnMgPT09IG51bGwgfHwgcG9zaXRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBwb3NpdGlvbnMuYmVha1Bvc2l0aW9uKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuZWxlbWVudFBvc2l0aW9uKSwgeyBkaXNwbGF5OiAoKF9iID0gcG9zaXRpb25zID09PSBudWxsIHx8IHBvc2l0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogcG9zaXRpb25zLmJlYWtQb3NpdGlvbikgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLmhpZGVCZWFrKSA/ICdub25lJyA6IHVuZGVmaW5lZCB9KTtcbiAgICBpZiAoIWJlYWtQb3NpdGlvblN0eWxlLnRvcCAmJiAhYmVha1Bvc2l0aW9uU3R5bGUuYm90dG9tICYmICFiZWFrUG9zaXRpb25TdHlsZS5sZWZ0ICYmICFiZWFrUG9zaXRpb25TdHlsZS5yaWdodCkge1xuICAgICAgICBiZWFrUG9zaXRpb25TdHlsZS5sZWZ0ID0gQkVBS19PUklHSU5fUE9TSVRJT04ubGVmdDtcbiAgICAgICAgYmVha1Bvc2l0aW9uU3R5bGUudG9wID0gQkVBS19PUklHSU5fUE9TSVRJT04udG9wO1xuICAgIH1cbiAgICByZXR1cm4gYmVha1Bvc2l0aW9uU3R5bGU7XG59XG4vKipcbiAqIChVdGlsaXR5KSB1c2VkIHRvIGNvbXBhcmUgdHdvIGRpZmZlcmVudCBlbGVtZW50UG9zaXRpb25zIHRvIGRldGVybWluZSB3aGV0aGVyIHRoZXkgYXJlIGVxdWFsLlxuICpcbiAqIEBwYXJhbSBwcmV2RWxlbWVudFBvc2l0aW9uc1xuICogQHBhcmFtIG5ld0VsZW1lbnRQb3NpdGlvblxuICovXG5mdW5jdGlvbiBhcmVQb3NpdGlvbnNFcXVhbChwcmV2RWxlbWVudFBvc2l0aW9ucywgbmV3RWxlbWVudFBvc2l0aW9uKSB7XG4gICAgcmV0dXJuIChjb21wYXJlUG9zaXRpb25zKHByZXZFbGVtZW50UG9zaXRpb25zLmVsZW1lbnRQb3NpdGlvbiwgbmV3RWxlbWVudFBvc2l0aW9uLmVsZW1lbnRQb3NpdGlvbikgJiZcbiAgICAgICAgY29tcGFyZVBvc2l0aW9ucyhwcmV2RWxlbWVudFBvc2l0aW9ucy5iZWFrUG9zaXRpb24uZWxlbWVudFBvc2l0aW9uLCBuZXdFbGVtZW50UG9zaXRpb24uYmVha1Bvc2l0aW9uLmVsZW1lbnRQb3NpdGlvbikpO1xufVxuLyoqXG4gKiAoVXRpbGl0eSkgdXNlZCBpbiAqKmFyZVBvc2l0aW9uc0VxdWFsKiogdG8gY29tcGFyZSB0d28gZGlmZmVyZW50IGVsZW1lbnRQb3NpdGlvbnMuXG4gKlxuICogQHBhcmFtIHByZXZFbGVtZW50UG9zaXRpb25zXG4gKiBAcGFyYW0gbmV3RWxlbWVudFBvc2l0aW9uc1xuICovXG5mdW5jdGlvbiBjb21wYXJlUG9zaXRpb25zKHByZXZFbGVtZW50UG9zaXRpb25zLCBuZXdFbGVtZW50UG9zaXRpb25zKSB7XG4gICAgZm9yICh2YXIga2V5IGluIG5ld0VsZW1lbnRQb3NpdGlvbnMpIHtcbiAgICAgICAgaWYgKG5ld0VsZW1lbnRQb3NpdGlvbnMuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgICAgICAgdmFyIG9sZFBvc2l0aW9uRWRnZSA9IHByZXZFbGVtZW50UG9zaXRpb25zW2tleV07XG4gICAgICAgICAgICB2YXIgbmV3UG9zaXRpb25FZGdlID0gbmV3RWxlbWVudFBvc2l0aW9uc1trZXldO1xuICAgICAgICAgICAgaWYgKG9sZFBvc2l0aW9uRWRnZSAhPT0gdW5kZWZpbmVkICYmIG5ld1Bvc2l0aW9uRWRnZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgaWYgKG9sZFBvc2l0aW9uRWRnZS50b0ZpeGVkKDIpICE9PSBuZXdQb3NpdGlvbkVkZ2UudG9GaXhlZCgyKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xufVxuQ2FsbG91dENvbnRlbnRCYXNlLmRpc3BsYXlOYW1lID0gQ09NUE9ORU5UX05BTUU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1DYWxsb3V0Q29udGVudC5iYXNlLmpzLm1hcCIsImltcG9ydCB7IGdldERvY3VtZW50IH0gZnJvbSAnQGZsdWVudHVpL3V0aWxpdGllcyc7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyB1c2VXaW5kb3cgfSBmcm9tICdAZmx1ZW50dWkvcmVhY3Qtd2luZG93LXByb3ZpZGVyJztcbi8qKlxuICogSG9vayB0byBjYWxjdWxhdGUgYW5kIGNhY2hlIHRoZSB0YXJnZXQgZWxlbWVudCBzcGVjaWZpZWQgYnkgdGhlIGdpdmVuIHRhcmdldCBhdHRyaWJ1dGUsXG4gKiBhcyB3ZWxsIGFzIHRoZSB0YXJnZXQgZWxlbWVudCdzIChvciBob3N0IGVsZW1lbnQncykgcGFyZW50IHdpbmRvd1xuICogQHBhcmFtIHRhcmdldC0gVGFyZ2V0IHNlbGVjdG9yIHBhc3NlZCB0byB0aGUgY29tcG9uZW50IGFzIGEgcHJvcGVydHksIGRlc2NyaWJpbmcgdGhlIGVsZW1lbnQgdGhhdFxuICogdGhlIGNhbGxvdXQgc2hvdWxkIHRhcmdldFxuICogQHBhcmFtIGhvc3RFbGVtZW50LSBUaGUgY2FsbG91dCdzIGhvc3QgZWxlbWVudCwgdXNlZCBmb3IgZGV0ZXJtaW5pbmcgdGhlIHBhcmVudCB3aW5kb3cuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1c2VUYXJnZXQodGFyZ2V0LCBob3N0RWxlbWVudCkge1xuICAgIHZhciBwcmV2aW91c1RhcmdldFByb3AgPSBSZWFjdC51c2VSZWYoKTtcbiAgICB2YXIgdGFyZ2V0UmVmID0gUmVhY3QudXNlUmVmKG51bGwpO1xuICAgIC8qKlxuICAgICAqIFN0b3JlcyBhbiBpbnN0YW5jZSBvZiBXaW5kb3csIHVzZWQgdG8gY2hlY2tcbiAgICAgKiBmb3Igc2VydmVyIHNpZGUgcmVuZGVyaW5nIGFuZCBpZiBmb2N1cyB3YXMgbG9zdC5cbiAgICAgKi9cbiAgICB2YXIgdGFyZ2V0V2luZG93ID0gdXNlV2luZG93KCk7XG4gICAgLy8gSWYgdGhlIHRhcmdldCBlbGVtZW50IGNoYW5nZWQsIGZpbmQgdGhlIG5ldyBvbmUuIElmIHdlIGFyZSB0cmFja2luZ1xuICAgIC8vIHRhcmdldCB3aXRoIGNsYXNzIG5hbWUsIGFsd2F5cyBmaW5kIGVsZW1lbnQgYmVjYXVzZSB3ZSBkbyBub3Qga25vdyBpZlxuICAgIC8vIGZhYnJpYyBoYXMgcmVuZGVyZWQgYSBuZXcgZWxlbWVudCBhbmQgZGlzcG9zZWQgdGhlIG9sZCBlbGVtZW50LlxuICAgIGlmICghdGFyZ2V0IHx8IHRhcmdldCAhPT0gcHJldmlvdXNUYXJnZXRQcm9wLmN1cnJlbnQgfHwgdHlwZW9mIHRhcmdldCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgdmFyIGN1cnJlbnRFbGVtZW50ID0gaG9zdEVsZW1lbnQgPT09IG51bGwgfHwgaG9zdEVsZW1lbnQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGhvc3RFbGVtZW50LmN1cnJlbnQ7XG4gICAgICAgIGlmICh0YXJnZXQpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgdGFyZ2V0ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgIHZhciBjdXJyZW50RG9jID0gZ2V0RG9jdW1lbnQoY3VycmVudEVsZW1lbnQpO1xuICAgICAgICAgICAgICAgIHRhcmdldFJlZi5jdXJyZW50ID0gY3VycmVudERvYyA/IGN1cnJlbnREb2MucXVlcnlTZWxlY3Rvcih0YXJnZXQpIDogbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKCdzdG9wUHJvcGFnYXRpb24nIGluIHRhcmdldCkge1xuICAgICAgICAgICAgICAgIHRhcmdldFJlZi5jdXJyZW50ID0gdGFyZ2V0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoJ2dldEJvdW5kaW5nQ2xpZW50UmVjdCcgaW4gdGFyZ2V0KSB7XG4gICAgICAgICAgICAgICAgdGFyZ2V0UmVmLmN1cnJlbnQgPSB0YXJnZXQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICgnY3VycmVudCcgaW4gdGFyZ2V0KSB7XG4gICAgICAgICAgICAgICAgdGFyZ2V0UmVmLmN1cnJlbnQgPSB0YXJnZXQuY3VycmVudDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRhcmdldFJlZi5jdXJyZW50ID0gdGFyZ2V0O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHByZXZpb3VzVGFyZ2V0UHJvcC5jdXJyZW50ID0gdGFyZ2V0O1xuICAgIH1cbiAgICByZXR1cm4gW3RhcmdldFJlZiwgdGFyZ2V0V2luZG93XTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXVzZVRhcmdldC5qcy5tYXAiLCJpbXBvcnQgeyBIaWdoQ29udHJhc3RTZWxlY3RvciwgZm9jdXNDbGVhciwgZ2V0R2xvYmFsQ2xhc3NOYW1lcywgWkluZGV4ZXMgfSBmcm9tICcuLi8uLi9TdHlsaW5nJztcbmZ1bmN0aW9uIGdldEJlYWtTdHlsZShiZWFrV2lkdGgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBoZWlnaHQ6IGJlYWtXaWR0aCxcbiAgICAgICAgd2lkdGg6IGJlYWtXaWR0aCxcbiAgICB9O1xufVxudmFyIEdsb2JhbENsYXNzTmFtZXMgPSB7XG4gICAgY29udGFpbmVyOiAnbXMtQ2FsbG91dC1jb250YWluZXInLFxuICAgIHJvb3Q6ICdtcy1DYWxsb3V0JyxcbiAgICBiZWFrOiAnbXMtQ2FsbG91dC1iZWFrJyxcbiAgICBiZWFrQ3VydGFpbjogJ21zLUNhbGxvdXQtYmVha0N1cnRhaW4nLFxuICAgIGNhbGxvdXRNYWluOiAnbXMtQ2FsbG91dC1tYWluJyxcbn07XG5leHBvcnQgdmFyIGdldFN0eWxlcyA9IGZ1bmN0aW9uIChwcm9wcykge1xuICAgIHZhciBfYTtcbiAgICB2YXIgdGhlbWUgPSBwcm9wcy50aGVtZSwgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLCBvdmVyZmxvd1lIaWRkZW4gPSBwcm9wcy5vdmVyZmxvd1lIaWRkZW4sIGNhbGxvdXRXaWR0aCA9IHByb3BzLmNhbGxvdXRXaWR0aCwgYmVha1dpZHRoID0gcHJvcHMuYmVha1dpZHRoLCBiYWNrZ3JvdW5kQ29sb3IgPSBwcm9wcy5iYWNrZ3JvdW5kQ29sb3IsIGNhbGxvdXRNYXhXaWR0aCA9IHByb3BzLmNhbGxvdXRNYXhXaWR0aCwgY2FsbG91dE1pbldpZHRoID0gcHJvcHMuY2FsbG91dE1pbldpZHRoLCBkb05vdExheWVyID0gcHJvcHMuZG9Ob3RMYXllcjtcbiAgICB2YXIgY2xhc3NOYW1lcyA9IGdldEdsb2JhbENsYXNzTmFtZXMoR2xvYmFsQ2xhc3NOYW1lcywgdGhlbWUpO1xuICAgIHZhciBzZW1hbnRpY0NvbG9ycyA9IHRoZW1lLnNlbWFudGljQ29sb3JzLCBlZmZlY3RzID0gdGhlbWUuZWZmZWN0cztcbiAgICByZXR1cm4ge1xuICAgICAgICBjb250YWluZXI6IFtcbiAgICAgICAgICAgIGNsYXNzTmFtZXMuY29udGFpbmVyLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgcm9vdDogW1xuICAgICAgICAgICAgY2xhc3NOYW1lcy5yb290LFxuICAgICAgICAgICAgdGhlbWUuZm9udHMubWVkaXVtLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgICAgICAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgICAgICAgICAgICB6SW5kZXg6IGRvTm90TGF5ZXIgPyBaSW5kZXhlcy5MYXllciA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICBib3hTaXppbmc6ICdib3JkZXItYm94JyxcbiAgICAgICAgICAgICAgICBib3JkZXJSYWRpdXM6IGVmZmVjdHMucm91bmRlZENvcm5lcjIsXG4gICAgICAgICAgICAgICAgYm94U2hhZG93OiBlZmZlY3RzLmVsZXZhdGlvbjE2LFxuICAgICAgICAgICAgICAgIHNlbGVjdG9yczogKF9hID0ge30sXG4gICAgICAgICAgICAgICAgICAgIF9hW0hpZ2hDb250cmFzdFNlbGVjdG9yXSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJvcmRlcldpZHRoOiAxLFxuICAgICAgICAgICAgICAgICAgICAgICAgYm9yZGVyU3R5bGU6ICdzb2xpZCcsXG4gICAgICAgICAgICAgICAgICAgICAgICBib3JkZXJDb2xvcjogJ1dpbmRvd1RleHQnLFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBfYSksXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZm9jdXNDbGVhcigpLFxuICAgICAgICAgICAgY2xhc3NOYW1lLFxuICAgICAgICAgICAgISFjYWxsb3V0V2lkdGggJiYgeyB3aWR0aDogY2FsbG91dFdpZHRoIH0sXG4gICAgICAgICAgICAhIWNhbGxvdXRNYXhXaWR0aCAmJiB7IG1heFdpZHRoOiBjYWxsb3V0TWF4V2lkdGggfSxcbiAgICAgICAgICAgICEhY2FsbG91dE1pbldpZHRoICYmIHsgbWluV2lkdGg6IGNhbGxvdXRNaW5XaWR0aCB9LFxuICAgICAgICBdLFxuICAgICAgICBiZWFrOiBbXG4gICAgICAgICAgICBjbGFzc05hbWVzLmJlYWssXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiBzZW1hbnRpY0NvbG9ycy5tZW51QmFja2dyb3VuZCxcbiAgICAgICAgICAgICAgICBib3hTaGFkb3c6ICdpbmhlcml0JyxcbiAgICAgICAgICAgICAgICBib3JkZXI6ICdpbmhlcml0JyxcbiAgICAgICAgICAgICAgICBib3hTaXppbmc6ICdib3JkZXItYm94JyxcbiAgICAgICAgICAgICAgICB0cmFuc2Zvcm06ICdyb3RhdGUoNDVkZWcpJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBnZXRCZWFrU3R5bGUoYmVha1dpZHRoKSxcbiAgICAgICAgICAgIGJhY2tncm91bmRDb2xvciAmJiB7XG4gICAgICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiBiYWNrZ3JvdW5kQ29sb3IsXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBiZWFrQ3VydGFpbjogW1xuICAgICAgICAgICAgY2xhc3NOYW1lcy5iZWFrQ3VydGFpbixcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgICAgICAgICAgICB0b3A6IDAsXG4gICAgICAgICAgICAgICAgcmlnaHQ6IDAsXG4gICAgICAgICAgICAgICAgYm90dG9tOiAwLFxuICAgICAgICAgICAgICAgIGxlZnQ6IDAsXG4gICAgICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiBzZW1hbnRpY0NvbG9ycy5tZW51QmFja2dyb3VuZCxcbiAgICAgICAgICAgICAgICBib3JkZXJSYWRpdXM6IGVmZmVjdHMucm91bmRlZENvcm5lcjIsXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBjYWxsb3V0TWFpbjogW1xuICAgICAgICAgICAgY2xhc3NOYW1lcy5jYWxsb3V0TWFpbixcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IHNlbWFudGljQ29sb3JzLm1lbnVCYWNrZ3JvdW5kLFxuICAgICAgICAgICAgICAgIG92ZXJmbG93WDogJ2hpZGRlbicsXG4gICAgICAgICAgICAgICAgb3ZlcmZsb3dZOiAnYXV0bycsXG4gICAgICAgICAgICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gICAgICAgICAgICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICAgICAgICAgICAgICBib3JkZXJSYWRpdXM6IGVmZmVjdHMucm91bmRlZENvcm5lcjIsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgb3ZlcmZsb3dZSGlkZGVuICYmIHtcbiAgICAgICAgICAgICAgICBvdmVyZmxvd1k6ICdoaWRkZW4nLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGJhY2tncm91bmRDb2xvciAmJiB7XG4gICAgICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiBiYWNrZ3JvdW5kQ29sb3IsXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgIH07XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Q2FsbG91dENvbnRlbnQuc3R5bGVzLmpzLm1hcCIsImltcG9ydCB7IHN0eWxlZCB9IGZyb20gJy4uLy4uL1V0aWxpdGllcyc7XG5pbXBvcnQgeyBDYWxsb3V0Q29udGVudEJhc2UgfSBmcm9tICcuL0NhbGxvdXRDb250ZW50LmJhc2UnO1xuaW1wb3J0IHsgZ2V0U3R5bGVzIH0gZnJvbSAnLi9DYWxsb3V0Q29udGVudC5zdHlsZXMnO1xuZXhwb3J0IHZhciBDYWxsb3V0Q29udGVudCA9IHN0eWxlZChDYWxsb3V0Q29udGVudEJhc2UsIGdldFN0eWxlcywgdW5kZWZpbmVkLCB7XG4gICAgc2NvcGU6ICdDYWxsb3V0Q29udGVudCcsXG59KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUNhbGxvdXRDb250ZW50LmpzLm1hcCIsImltcG9ydCB7IF9fYXNzaWduIH0gZnJvbSBcInRzbGliXCI7XG4vKipcbiAqIE1lcmdlIG5ldyBhbmQgb2xkIHNldHRpbmdzLCBnaXZpbmcgcHJpb3JpdHkgdG8gbmV3IHNldHRpbmdzLlxuICogTmV3IHNldHRpbmdzIGlzIG9wdGlvbmFsIGluIHdoaWNoIGNhc2Ugb2xkU2V0dGluZ3MgaXMgcmV0dXJuZWQgYXMtaXMuXG4gKiBAcGFyYW0gb2xkU2V0dGluZ3MgLSBPbGQgc2V0dGluZ3MgdG8gZmFsbCBiYWNrIHRvLlxuICogQHBhcmFtIG5ld1NldHRpbmdzIC0gTmV3IHNldHRpbmdzIHRoYXQgd2lsbCBiZSBtZXJnZWQgb3ZlciBvbGRTZXR0aW5ncy5cbiAqIEByZXR1cm5zIE1lcmdlZCBzZXR0aW5ncy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG1lcmdlU2V0dGluZ3Mob2xkU2V0dGluZ3MsIG5ld1NldHRpbmdzKSB7XG4gICAgaWYgKG9sZFNldHRpbmdzID09PSB2b2lkIDApIHsgb2xkU2V0dGluZ3MgPSB7fTsgfVxuICAgIHZhciBtZXJnZVNldHRpbmdzV2l0aCA9IF9pc1NldHRpbmdzRnVuY3Rpb24obmV3U2V0dGluZ3MpID8gbmV3U2V0dGluZ3MgOiBfc2V0dGluZ3NNZXJnZVdpdGgobmV3U2V0dGluZ3MpO1xuICAgIHJldHVybiBtZXJnZVNldHRpbmdzV2l0aChvbGRTZXR0aW5ncyk7XG59XG5leHBvcnQgZnVuY3Rpb24gbWVyZ2VTY29wZWRTZXR0aW5ncyhvbGRTZXR0aW5ncywgbmV3U2V0dGluZ3MpIHtcbiAgICBpZiAob2xkU2V0dGluZ3MgPT09IHZvaWQgMCkgeyBvbGRTZXR0aW5ncyA9IHt9OyB9XG4gICAgdmFyIG1lcmdlU2V0dGluZ3NXaXRoID0gX2lzU2V0dGluZ3NGdW5jdGlvbihuZXdTZXR0aW5ncykgPyBuZXdTZXR0aW5ncyA6IF9zY29wZWRTZXR0aW5nc01lcmdlV2l0aChuZXdTZXR0aW5ncyk7XG4gICAgcmV0dXJuIG1lcmdlU2V0dGluZ3NXaXRoKG9sZFNldHRpbmdzKTtcbn1cbmZ1bmN0aW9uIF9pc1NldHRpbmdzRnVuY3Rpb24oc2V0dGluZ3MpIHtcbiAgICByZXR1cm4gdHlwZW9mIHNldHRpbmdzID09PSAnZnVuY3Rpb24nO1xufVxuZnVuY3Rpb24gX3NldHRpbmdzTWVyZ2VXaXRoKG5ld1NldHRpbmdzKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChzZXR0aW5ncykgeyByZXR1cm4gKG5ld1NldHRpbmdzID8gX19hc3NpZ24oX19hc3NpZ24oe30sIHNldHRpbmdzKSwgbmV3U2V0dGluZ3MpIDogc2V0dGluZ3MpOyB9O1xufVxuZnVuY3Rpb24gX3Njb3BlZFNldHRpbmdzTWVyZ2VXaXRoKHNjb3BlZFNldHRpbmdzRnJvbVByb3BzKSB7XG4gICAgaWYgKHNjb3BlZFNldHRpbmdzRnJvbVByb3BzID09PSB2b2lkIDApIHsgc2NvcGVkU2V0dGluZ3NGcm9tUHJvcHMgPSB7fTsgfVxuICAgIHJldHVybiBmdW5jdGlvbiAob2xkU2NvcGVkU2V0dGluZ3MpIHtcbiAgICAgICAgdmFyIG5ld1Njb3BlZFNldHRpbmdzID0gX19hc3NpZ24oe30sIG9sZFNjb3BlZFNldHRpbmdzKTtcbiAgICAgICAgZm9yICh2YXIgc2NvcGVOYW1lIGluIHNjb3BlZFNldHRpbmdzRnJvbVByb3BzKSB7XG4gICAgICAgICAgICBpZiAoc2NvcGVkU2V0dGluZ3NGcm9tUHJvcHMuaGFzT3duUHJvcGVydHkoc2NvcGVOYW1lKSkge1xuICAgICAgICAgICAgICAgIG5ld1Njb3BlZFNldHRpbmdzW3Njb3BlTmFtZV0gPSBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgb2xkU2NvcGVkU2V0dGluZ3Nbc2NvcGVOYW1lXSksIHNjb3BlZFNldHRpbmdzRnJvbVByb3BzW3Njb3BlTmFtZV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXdTY29wZWRTZXR0aW5ncztcbiAgICB9O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWVyZ2VTZXR0aW5ncy5qcy5tYXAiLCJpbXBvcnQgeyBfX2V4dGVuZHMgfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IEN1c3RvbWl6YXRpb25zIH0gZnJvbSAnLi9DdXN0b21pemF0aW9ucyc7XG5pbXBvcnQgeyBDdXN0b21pemVyQ29udGV4dCB9IGZyb20gJy4vQ3VzdG9taXplckNvbnRleHQnO1xuaW1wb3J0IHsgbWVyZ2VDdXN0b21pemF0aW9ucyB9IGZyb20gJy4vbWVyZ2VDdXN0b21pemF0aW9ucyc7XG4vKipcbiAqIFRoZSBDdXN0b21pemVyIGNvbXBvbmVudCBhbGxvd3MgZm9yIGRlZmF1bHQgcHJvcHMgdG8gYmUgbWl4ZWQgaW50byBjb21wb25lbnRzIHdoaWNoXG4gKiBhcmUgZGVjb3JhdGVkIHdpdGggdGhlIGN1c3RvbWl6YWJsZSgpIGRlY29yYXRvciwgb3IgdXNlIHRoZSBzdHlsZWQgSE9DLiBUaGlzIGVuYWJsZXNcbiAqIGluamVjdGlvbiBzY2VuYXJpb3MgbGlrZTpcbiAqXG4gKiAxLiByZW5kZXIgc3ZnIGljb25zIGluc3RlYWQgb2YgdGhlIGljb24gZm9udCB3aXRoaW4gYWxsIGJ1dHRvbnNcbiAqIDIuIGluamVjdCBhIGN1c3RvbSB0aGVtZSBvYmplY3QgaW50byBhIGNvbXBvbmVudFxuICpcbiAqIFByb3BzIGFyZSBwcm92aWRlZCB2aWEgdGhlIHNldHRpbmdzIHByb3Agd2hpY2ggc2hvdWxkIGJlIG9uZSBvZiB0aGUgZm9sbG93aW5nOlxuICogLSBBIGpzb24gbWFwIHdoaWNoIGNvbnRhaW5zIDEgb3IgbW9yZSBuYW1lL3ZhbHVlIHBhaXJzIHJlcHJlc2VudGluZyBpbmplY3RhYmxlIHByb3BzLlxuICogLSBBIGZ1bmN0aW9uIHRoYXQgcmVjZWl2ZXMgdGhlIGN1cnJlbnQgc2V0dGluZ3MgYW5kIHJldHVybnMgdGhlIG5ldyBvbmVzIHRoYXQgYXBwbHkgdG8gdGhlIHNjb3BlXG4gKlxuICogQHB1YmxpY1xuICpcbiAqIEBkZXByZWNhdGVkIFRoaXMgY29tcG9uZW50IGlzIGRlcHJlY2F0ZWQgZm9yIHB1cnBvc2Ugb2YgYXBwbHlpbmcgdGhlbWUgdG8gY29tcG9uZW50c1xuICogYXMgb2YgYEBmbHVlbnR1aS9yZWFjdGAgdmVyc2lvbiA4LiBVc2UgYFRoZW1lUHJvdmlkZXJgIGZvciBhcHBseWluZyB0aGVtZSBpbnN0ZWFkLlxuICovXG52YXIgQ3VzdG9taXplciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoQ3VzdG9taXplciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBDdXN0b21pemVyKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIgIT09IG51bGwgJiYgX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuX29uQ3VzdG9taXphdGlvbkNoYW5nZSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIF90aGlzLmZvcmNlVXBkYXRlKCk7IH07XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgQ3VzdG9taXplci5wcm90b3R5cGUuY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIEN1c3RvbWl6YXRpb25zLm9ic2VydmUodGhpcy5fb25DdXN0b21pemF0aW9uQ2hhbmdlKTtcbiAgICB9O1xuICAgIEN1c3RvbWl6ZXIucHJvdG90eXBlLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBDdXN0b21pemF0aW9ucy51bm9ic2VydmUodGhpcy5fb25DdXN0b21pemF0aW9uQ2hhbmdlKTtcbiAgICB9O1xuICAgIEN1c3RvbWl6ZXIucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdmFyIGNvbnRleHRUcmFuc2Zvcm0gPSB0aGlzLnByb3BzLmNvbnRleHRUcmFuc2Zvcm07XG4gICAgICAgIHJldHVybiAoUmVhY3QuY3JlYXRlRWxlbWVudChDdXN0b21pemVyQ29udGV4dC5Db25zdW1lciwgbnVsbCwgZnVuY3Rpb24gKHBhcmVudENvbnRleHQpIHtcbiAgICAgICAgICAgIHZhciBuZXdDb250ZXh0ID0gbWVyZ2VDdXN0b21pemF0aW9ucyhfdGhpcy5wcm9wcywgcGFyZW50Q29udGV4dCk7XG4gICAgICAgICAgICBpZiAoY29udGV4dFRyYW5zZm9ybSkge1xuICAgICAgICAgICAgICAgIG5ld0NvbnRleHQgPSBjb250ZXh0VHJhbnNmb3JtKG5ld0NvbnRleHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ3VzdG9taXplckNvbnRleHQuUHJvdmlkZXIsIHsgdmFsdWU6IG5ld0NvbnRleHQgfSwgX3RoaXMucHJvcHMuY2hpbGRyZW4pO1xuICAgICAgICB9KSk7XG4gICAgfTtcbiAgICByZXR1cm4gQ3VzdG9taXplcjtcbn0oUmVhY3QuQ29tcG9uZW50KSk7XG5leHBvcnQgeyBDdXN0b21pemVyIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1DdXN0b21pemVyLmpzLm1hcCIsImltcG9ydCB7IG1lcmdlU2V0dGluZ3MsIG1lcmdlU2NvcGVkU2V0dGluZ3MgfSBmcm9tICcuL21lcmdlU2V0dGluZ3MnO1xuLyoqXG4gKiBNZXJnZSBwcm9wcyBhbmQgY3VzdG9taXphdGlvbnMgZ2l2aW5nIHByaW9yaXR5IHRvIHByb3BzIG92ZXIgY29udGV4dC5cbiAqIE5PVEU6IFRoaXMgZnVuY3Rpb24gd2lsbCBhbHdheXMgcGVyZm9ybSBtdWx0aXBsZSBtZXJnZSBvcGVyYXRpb25zLiBVc2Ugd2l0aCBjYXV0aW9uLlxuICogQHBhcmFtIHByb3BzIC0gTmV3IHNldHRpbmdzIHRvIG1lcmdlIGluLlxuICogQHBhcmFtIHBhcmVudENvbnRleHQgLSBDb250ZXh0IGNvbnRhaW5pbmcgY3VycmVudCBzZXR0aW5ncy5cbiAqIEByZXR1cm5zIE1lcmdlZCBjdXN0b21pemF0aW9ucy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG1lcmdlQ3VzdG9taXphdGlvbnMocHJvcHMsIHBhcmVudENvbnRleHQpIHtcbiAgICB2YXIgX2EgPSAocGFyZW50Q29udGV4dCB8fCB7fSkuY3VzdG9taXphdGlvbnMsIGN1c3RvbWl6YXRpb25zID0gX2EgPT09IHZvaWQgMCA/IHsgc2V0dGluZ3M6IHt9LCBzY29wZWRTZXR0aW5nczoge30gfSA6IF9hO1xuICAgIHJldHVybiB7XG4gICAgICAgIGN1c3RvbWl6YXRpb25zOiB7XG4gICAgICAgICAgICBzZXR0aW5nczogbWVyZ2VTZXR0aW5ncyhjdXN0b21pemF0aW9ucy5zZXR0aW5ncywgcHJvcHMuc2V0dGluZ3MpLFxuICAgICAgICAgICAgc2NvcGVkU2V0dGluZ3M6IG1lcmdlU2NvcGVkU2V0dGluZ3MoY3VzdG9taXphdGlvbnMuc2NvcGVkU2V0dGluZ3MsIHByb3BzLnNjb3BlZFNldHRpbmdzKSxcbiAgICAgICAgICAgIGluQ3VzdG9taXplckNvbnRleHQ6IHRydWUsXG4gICAgICAgIH0sXG4gICAgfTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1lcmdlQ3VzdG9taXphdGlvbnMuanMubWFwIiwiaW1wb3J0IHsgX19hc3NpZ24gfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGdldE5hdGl2ZVByb3BzLCBkaXZQcm9wZXJ0aWVzLCBjbGFzc05hbWVzRnVuY3Rpb24sIGdldERvY3VtZW50LCBtZW1vaXplRnVuY3Rpb24sIGdldFJUTCwgQ3VzdG9taXplciwgdXNlRm9jdXNSZWN0cywgfSBmcm9tICcuLi8uLi9VdGlsaXRpZXMnO1xuaW1wb3J0IHsgY3JlYXRlVGhlbWUgfSBmcm9tICcuLi8uLi9TdHlsaW5nJztcbmltcG9ydCB7IHVzZU1lcmdlZFJlZnMgfSBmcm9tICdAZmx1ZW50dWkvcmVhY3QtaG9va3MnO1xudmFyIGdldENsYXNzTmFtZXMgPSBjbGFzc05hbWVzRnVuY3Rpb24oKTtcbnZhciBnZXRGYWJyaWNUaGVtZSA9IG1lbW9pemVGdW5jdGlvbihmdW5jdGlvbiAodGhlbWUsIGlzUlRMKSB7IHJldHVybiBjcmVhdGVUaGVtZShfX2Fzc2lnbihfX2Fzc2lnbih7fSwgdGhlbWUpLCB7IHJ0bDogaXNSVEwgfSkpOyB9KTtcbnZhciBnZXREaXIgPSBmdW5jdGlvbiAoX2EpIHtcbiAgICB2YXIgdGhlbWUgPSBfYS50aGVtZSwgZGlyID0gX2EuZGlyO1xuICAgIHZhciBjb250ZXh0RGlyID0gZ2V0UlRMKHRoZW1lKSA/ICdydGwnIDogJ2x0cic7XG4gICAgdmFyIHBhZ2VEaXIgPSBnZXRSVEwoKSA/ICdydGwnIDogJ2x0cic7XG4gICAgdmFyIGNvbXBvbmVudERpciA9IGRpciA/IGRpciA6IGNvbnRleHREaXI7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgLy8gSWYgRmFicmljIGRpciAhPT0gY29udGV4dERpclxuICAgICAgICAvLyBPciBJZiBjb250ZXh0RGlyICE9PSBwYWdlRGlyXG4gICAgICAgIC8vIFRoZW4gd2UgbmVlZCB0byBzZXQgZGlyIG9mIHRoZSBGYWJyaWMgcm9vdFxuICAgICAgICByb290RGlyOiBjb21wb25lbnREaXIgIT09IGNvbnRleHREaXIgfHwgY29tcG9uZW50RGlyICE9PSBwYWdlRGlyID8gY29tcG9uZW50RGlyIDogZGlyLFxuICAgICAgICAvLyBJZiBkaXIgIT09IGNvbnRleHREaXIgfHwgcGFnZURpclxuICAgICAgICAvLyB0aGVuIHNldCBjb250ZXh0dWFsIHRoZW1lIGFyb3VuZCBjb250ZW50XG4gICAgICAgIG5lZWRzVGhlbWU6IGNvbXBvbmVudERpciAhPT0gY29udGV4dERpcixcbiAgICB9O1xufTtcbmV4cG9ydCB2YXIgRmFicmljQmFzZSA9IFJlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gKHByb3BzLCByZWYpIHtcbiAgICB2YXIgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLCB0aGVtZSA9IHByb3BzLnRoZW1lLCBhcHBseVRoZW1lID0gcHJvcHMuYXBwbHlUaGVtZSwgYXBwbHlUaGVtZVRvQm9keSA9IHByb3BzLmFwcGx5VGhlbWVUb0JvZHksIHN0eWxlcyA9IHByb3BzLnN0eWxlcztcbiAgICB2YXIgY2xhc3NOYW1lcyA9IGdldENsYXNzTmFtZXMoc3R5bGVzLCB7XG4gICAgICAgIHRoZW1lOiB0aGVtZSxcbiAgICAgICAgYXBwbHlUaGVtZTogYXBwbHlUaGVtZSxcbiAgICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWUsXG4gICAgfSk7XG4gICAgdmFyIHJvb3RFbGVtZW50ID0gUmVhY3QudXNlUmVmKG51bGwpO1xuICAgIHVzZUFwcGx5VGhlbWVUb0JvZHkoYXBwbHlUaGVtZVRvQm9keSwgY2xhc3NOYW1lcywgcm9vdEVsZW1lbnQpO1xuICAgIHVzZUZvY3VzUmVjdHMocm9vdEVsZW1lbnQpO1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFJlYWN0LkZyYWdtZW50LCBudWxsLCB1c2VSZW5kZXJlZENvbnRlbnQocHJvcHMsIGNsYXNzTmFtZXMsIHJvb3RFbGVtZW50LCByZWYpKTtcbn0pO1xuRmFicmljQmFzZS5kaXNwbGF5TmFtZSA9ICdGYWJyaWNCYXNlJztcbmZ1bmN0aW9uIHVzZVJlbmRlcmVkQ29udGVudChwcm9wcywgX2EsIHJvb3RFbGVtZW50LCByZWYpIHtcbiAgICB2YXIgcm9vdCA9IF9hLnJvb3Q7XG4gICAgdmFyIF9iID0gcHJvcHMuYXMsIFJvb3QgPSBfYiA9PT0gdm9pZCAwID8gJ2RpdicgOiBfYiwgZGlyID0gcHJvcHMuZGlyLCB0aGVtZSA9IHByb3BzLnRoZW1lO1xuICAgIHZhciBkaXZQcm9wcyA9IGdldE5hdGl2ZVByb3BzKHByb3BzLCBkaXZQcm9wZXJ0aWVzLCBbJ2RpciddKTtcbiAgICB2YXIgX2MgPSBnZXREaXIocHJvcHMpLCByb290RGlyID0gX2Mucm9vdERpciwgbmVlZHNUaGVtZSA9IF9jLm5lZWRzVGhlbWU7XG4gICAgdmFyIHJlbmRlcmVkQ29udGVudCA9IFJlYWN0LmNyZWF0ZUVsZW1lbnQoUm9vdCwgX19hc3NpZ24oeyBkaXI6IHJvb3REaXIgfSwgZGl2UHJvcHMsIHsgY2xhc3NOYW1lOiByb290LCByZWY6IHVzZU1lcmdlZFJlZnMocm9vdEVsZW1lbnQsIHJlZikgfSkpO1xuICAgIC8vIENyZWF0ZSB0aGUgY29udGV4dHVhbCB0aGVtZSBpZiBjb21wb25lbnQgZGlyZWN0aW9uIGRvZXMgbm90IG1hdGNoIHBhcmVudCBkaXJlY3Rpb24uXG4gICAgaWYgKG5lZWRzVGhlbWUpIHtcbiAgICAgICAgLy8gRGlzYWJsaW5nIFRoZW1lUHJvdmlkZXIgaGVyZSBiZWNhdXNlIHRoZW1lIGRvZXNuJ3QgbmVlZCB0byBiZSByZS1wcm92aWRlZCBieSBUaGVtZVByb3ZpZGVyIGlmIGRpciBoYXMgY2hhbmdlZC5cbiAgICAgICAgcmVuZGVyZWRDb250ZW50ID0gKFxuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZGVwcmVjYXRpb24vZGVwcmVjYXRpb25cbiAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChDdXN0b21pemVyLCB7IHNldHRpbmdzOiB7IHRoZW1lOiBnZXRGYWJyaWNUaGVtZSh0aGVtZSwgZGlyID09PSAncnRsJykgfSB9LCByZW5kZXJlZENvbnRlbnQpKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlbmRlcmVkQ29udGVudDtcbn1cbmZ1bmN0aW9uIHVzZUFwcGx5VGhlbWVUb0JvZHkoYXBwbHlUaGVtZVRvQm9keSwgX2EsIHJvb3RFbGVtZW50KSB7XG4gICAgdmFyIGJvZHlUaGVtZWQgPSBfYS5ib2R5VGhlbWVkO1xuICAgIFJlYWN0LnVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChhcHBseVRoZW1lVG9Cb2R5KSB7XG4gICAgICAgICAgICB2YXIgY3VycmVudERvY18xID0gZ2V0RG9jdW1lbnQocm9vdEVsZW1lbnQuY3VycmVudCk7XG4gICAgICAgICAgICBpZiAoY3VycmVudERvY18xKSB7XG4gICAgICAgICAgICAgICAgY3VycmVudERvY18xLmJvZHkuY2xhc3NMaXN0LmFkZChib2R5VGhlbWVkKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBjdXJyZW50RG9jXzEuYm9keS5jbGFzc0xpc3QucmVtb3ZlKGJvZHlUaGVtZWQpO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LCBbYm9keVRoZW1lZCwgYXBwbHlUaGVtZVRvQm9keSwgcm9vdEVsZW1lbnRdKTtcbiAgICByZXR1cm4gcm9vdEVsZW1lbnQ7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1GYWJyaWMuYmFzZS5qcy5tYXAiLCJpbXBvcnQgeyBnZXRHbG9iYWxDbGFzc05hbWVzIH0gZnJvbSAnLi4vLi4vU3R5bGluZyc7XG52YXIgaW5oZXJpdEZvbnQgPSB7IGZvbnRGYW1pbHk6ICdpbmhlcml0JyB9O1xudmFyIEdsb2JhbENsYXNzTmFtZXMgPSB7XG4gICAgcm9vdDogJ21zLUZhYnJpYycsXG4gICAgYm9keVRoZW1lZDogJ21zLUZhYnJpYy1ib2R5VGhlbWVkJyxcbn07XG5leHBvcnQgdmFyIGdldFN0eWxlcyA9IGZ1bmN0aW9uIChwcm9wcykge1xuICAgIHZhciB0aGVtZSA9IHByb3BzLnRoZW1lLCBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUsIGFwcGx5VGhlbWUgPSBwcm9wcy5hcHBseVRoZW1lO1xuICAgIHZhciBjbGFzc05hbWVzID0gZ2V0R2xvYmFsQ2xhc3NOYW1lcyhHbG9iYWxDbGFzc05hbWVzLCB0aGVtZSk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgcm9vdDogW1xuICAgICAgICAgICAgY2xhc3NOYW1lcy5yb290LFxuICAgICAgICAgICAgdGhlbWUuZm9udHMubWVkaXVtLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLm5ldXRyYWxQcmltYXJ5LFxuICAgICAgICAgICAgICAgIHNlbGVjdG9yczoge1xuICAgICAgICAgICAgICAgICAgICAnJiBidXR0b24nOiBpbmhlcml0Rm9udCxcbiAgICAgICAgICAgICAgICAgICAgJyYgaW5wdXQnOiBpbmhlcml0Rm9udCxcbiAgICAgICAgICAgICAgICAgICAgJyYgdGV4dGFyZWEnOiBpbmhlcml0Rm9udCxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIC8vIGFwcGx5IHRoZW1lIHRvIG9ubHkgaWYgYXBwbHlUaGVtZSBpcyB0cnVlXG4gICAgICAgICAgICBhcHBseVRoZW1lICYmIHtcbiAgICAgICAgICAgICAgICBjb2xvcjogdGhlbWUuc2VtYW50aWNDb2xvcnMuYm9keVRleHQsXG4gICAgICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS5zZW1hbnRpY0NvbG9ycy5ib2R5QmFja2dyb3VuZCxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjbGFzc05hbWUsXG4gICAgICAgIF0sXG4gICAgICAgIGJvZHlUaGVtZWQ6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnNlbWFudGljQ29sb3JzLmJvZHlCYWNrZ3JvdW5kLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICB9O1xufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUZhYnJpYy5zdHlsZXMuanMubWFwIiwiaW1wb3J0IHsgc3R5bGVkIH0gZnJvbSAnLi4vLi4vVXRpbGl0aWVzJztcbmltcG9ydCB7IEZhYnJpY0Jhc2UgfSBmcm9tICcuL0ZhYnJpYy5iYXNlJztcbmltcG9ydCB7IGdldFN0eWxlcyB9IGZyb20gJy4vRmFicmljLnN0eWxlcyc7XG4vKipcbiAqIEBkZXByZWNhdGVkIFRoaXMgY29tcG9uZW50IGlzIGRlcHJlY2F0ZWQgYXMgb2YgYEBmbHVlbnR1aS9yZWFjdGAgdmVyc2lvbiA4LiBVc2UgYFRoZW1lUHJvdmlkZXJgIGluc3RlYWQuXG4gKi9cbmV4cG9ydCB2YXIgRmFicmljID0gc3R5bGVkKEZhYnJpY0Jhc2UsIGdldFN0eWxlcywgdW5kZWZpbmVkLCB7XG4gICAgc2NvcGU6ICdGYWJyaWMnLFxufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1GYWJyaWMuanMubWFwIiwidmFyIF9sYXllcnNCeUhvc3RJZCA9IHt9O1xudmFyIF9sYXllckhvc3RzQnlJZCA9IHt9O1xudmFyIGRlZmF1bHRIb3N0SWQgPSAnZmx1ZW50LWRlZmF1bHQtbGF5ZXItaG9zdCc7XG52YXIgX2RlZmF1bHRIb3N0U2VsZWN0b3IgPSBcIiNcIiArIGRlZmF1bHRIb3N0SWQ7XG4vKipcbiAqIFJlZ2lzdGVyIGEgbGF5ZXIgZm9yIGEgZ2l2ZW4gaG9zdCBpZFxuICogQHBhcmFtIGhvc3RJZCBJZCBvZiB0aGUgbGF5ZXIgaG9zdFxuICogQHBhcmFtIGxheWVyIExheWVyIGluc3RhbmNlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZWdpc3RlckxheWVyKGhvc3RJZCwgY2FsbGJhY2spIHtcbiAgICBpZiAoIV9sYXllcnNCeUhvc3RJZFtob3N0SWRdKSB7XG4gICAgICAgIF9sYXllcnNCeUhvc3RJZFtob3N0SWRdID0gW107XG4gICAgfVxuICAgIF9sYXllcnNCeUhvc3RJZFtob3N0SWRdLnB1c2goY2FsbGJhY2spO1xuICAgIHZhciBsYXllckhvc3RzID0gX2xheWVySG9zdHNCeUlkW2hvc3RJZF07XG4gICAgaWYgKGxheWVySG9zdHMpIHtcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBsYXllckhvc3RzXzEgPSBsYXllckhvc3RzOyBfaSA8IGxheWVySG9zdHNfMS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIHZhciBsYXllckhvc3QgPSBsYXllckhvc3RzXzFbX2ldO1xuICAgICAgICAgICAgbGF5ZXJIb3N0Lm5vdGlmeUxheWVyc0NoYW5nZWQoKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbi8qKlxuICogVW5yZWdpc3RlciBhIGxheWVyIGZvciBhIGdpdmVuIGhvc3QgaWRcbiAqIEBwYXJhbSBob3N0SWQgSWQgb2YgdGhlIGxheWVyIGhvc3RcbiAqIEBwYXJhbSBsYXllciBMYXllciBpbnN0YW5jZVxuICovXG5leHBvcnQgZnVuY3Rpb24gdW5yZWdpc3RlckxheWVyKGhvc3RJZCwgY2FsbGJhY2spIHtcbiAgICB2YXIgbGF5ZXJzID0gX2xheWVyc0J5SG9zdElkW2hvc3RJZF07XG4gICAgaWYgKGxheWVycykge1xuICAgICAgICB2YXIgaWR4ID0gbGF5ZXJzLmluZGV4T2YoY2FsbGJhY2spO1xuICAgICAgICBpZiAoaWR4ID49IDApIHtcbiAgICAgICAgICAgIGxheWVycy5zcGxpY2UoaWR4LCAxKTtcbiAgICAgICAgICAgIGlmIChsYXllcnMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgZGVsZXRlIF9sYXllcnNCeUhvc3RJZFtob3N0SWRdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHZhciBsYXllckhvc3RzID0gX2xheWVySG9zdHNCeUlkW2hvc3RJZF07XG4gICAgaWYgKGxheWVySG9zdHMpIHtcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBsYXllckhvc3RzXzIgPSBsYXllckhvc3RzOyBfaSA8IGxheWVySG9zdHNfMi5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIHZhciBsYXllckhvc3QgPSBsYXllckhvc3RzXzJbX2ldO1xuICAgICAgICAgICAgbGF5ZXJIb3N0Lm5vdGlmeUxheWVyc0NoYW5nZWQoKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbi8qKlxuICogR2V0cyB0aGUgbnVtYmVyIG9mIGxheWVycyBjdXJyZW50bHkgcmVnaXN0ZXJlZCB3aXRoIGEgaG9zdCBpZC5cbiAqIEBwYXJhbSBob3N0SWQgSWQgb2YgdGhlIGxheWVyIGhvc3QuXG4gKiBAcmV0dXJucyBUaGUgbnVtYmVyIG9mIGxheWVycyBjdXJyZW50bHkgcmVnaXN0ZXJlZCB3aXRoIHRoZSBob3N0LlxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0TGF5ZXJDb3VudChob3N0SWQpIHtcbiAgICB2YXIgbGF5ZXJzID0gX2xheWVySG9zdHNCeUlkW2hvc3RJZF07XG4gICAgcmV0dXJuIGxheWVycyA/IGxheWVycy5sZW5ndGggOiAwO1xufVxuLyoqXG4gKiBHZXRzIHRoZSBMYXllciBIb3N0IGluc3RhbmNlIGFzc29jaWF0ZWQgd2l0aCBhIGhvc3RJZCwgaWYgYXBwbGljYWJsZS5cbiAqIEBwYXJhbSBob3N0SWRcbiAqIEByZXR1cm5zIEEgY29tcG9uZW50IHJlZiBmb3IgdGhlIGFzc29jaWF0ZWQgbGF5ZXIgaG9zdC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldExheWVySG9zdChob3N0SWQpIHtcbiAgICB2YXIgbGF5ZXJIb3N0cyA9IF9sYXllckhvc3RzQnlJZFtob3N0SWRdO1xuICAgIHJldHVybiAobGF5ZXJIb3N0cyAmJiBsYXllckhvc3RzWzBdKSB8fCB1bmRlZmluZWQ7XG59XG4vKipcbiAqIFJlZ2lzdGVycyBhIExheWVyIEhvc3Qgd2l0aCBhbiBhc3NvY2lhdGVkIGhvc3RJZC5cbiAqIEBwYXJhbSBob3N0SWQgSWQgb2YgdGhlIGxheWVyIGhvc3RcbiAqIEBwYXJhbSBsYXllckhvc3QgbGF5ZXIgaG9zdCBpbnN0YW5jZVxuICovXG5leHBvcnQgZnVuY3Rpb24gcmVnaXN0ZXJMYXllckhvc3QoaG9zdElkLCBsYXllckhvc3QpIHtcbiAgICB2YXIgbGF5ZXJIb3N0cyA9IF9sYXllckhvc3RzQnlJZFtob3N0SWRdIHx8IChfbGF5ZXJIb3N0c0J5SWRbaG9zdElkXSA9IFtdKTtcbiAgICAvLyBJbnNlcnQgdGhpcyBhdCB0aGUgc3RhcnQgb2YgYW4gYXJyYXkgdG8gYXZvaWQgcmFjZSBjb25kaXRpb25zIGJldHdlZW4gbW91bnQgYW5kIHVubW91bnQuXG4gICAgLy8gSWYgYSBMYXllckhvc3QgaXMgcmUtbW91bnRlZCwgYW5kIG1vdW50IG9mIHRoZSBuZXcgaW5zdGFuY2UgbWF5IG9jY3VyIGJlZm9yZSB0aGUgdW5tb3VudCBvZiB0aGUgb2xkIG9uZS5cbiAgICAvLyBQdXR0aW5nIHRoZSBuZXcgaW5zdGFuY2UgYXQgdGhlIHN0YXJ0IG9mIHRoaXMgYXJyYXkgZW5zdXJlcyB0aGF0IGNhbGxzIHRvIGBnZXRMYXllckhvc3RgIHdpbGwgaW1tZWRpYXRlbHlcbiAgICAvLyBnZXQgdGhlIG5ldyBvbmUgZXZlbiBpZiB0aGUgb2xkIG9uZSBpcyBhcm91bmQgYnJpZWZseS5cbiAgICBsYXllckhvc3RzLnVuc2hpZnQobGF5ZXJIb3N0KTtcbn1cbi8qKlxuICogVW5yZWdpc3RlcnMgYSBMYXllciBIb3N0IGZyb20gdGhlIGFzc29jaWF0ZWQgaG9zdElkLlxuICogQHBhcmFtIGhvc3RJZCBJZCBvZiB0aGUgbGF5ZXIgaG9zdFxuICogQHBhcmFtIGxheWVySG9zdCBsYXllciBob3N0IGluc3RhbmNlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1bnJlZ2lzdGVyTGF5ZXJIb3N0KGhvc3RJZCwgbGF5ZXJIb3N0KSB7XG4gICAgdmFyIGxheWVySG9zdHMgPSBfbGF5ZXJIb3N0c0J5SWRbaG9zdElkXTtcbiAgICBpZiAobGF5ZXJIb3N0cykge1xuICAgICAgICB2YXIgaWR4ID0gbGF5ZXJIb3N0cy5pbmRleE9mKGxheWVySG9zdCk7XG4gICAgICAgIGlmIChpZHggPj0gMCkge1xuICAgICAgICAgICAgbGF5ZXJIb3N0cy5zcGxpY2UoaWR4LCAxKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobGF5ZXJIb3N0cy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIGRlbGV0ZSBfbGF5ZXJIb3N0c0J5SWRbaG9zdElkXTtcbiAgICAgICAgfVxuICAgIH1cbn1cbi8qKlxuICogV2hlbiBubyBkZWZhdWx0IGxheWVyIGhvc3QgaXMgcHJvdmlkZWQsIHRoaXMgZnVuY3Rpb24gaXMgZXhlY3V0ZWQgdG8gY3JlYXRlIHRoZSBkZWZhdWx0IGhvc3QuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVEZWZhdWx0TGF5ZXJIb3N0KGRvYykge1xuICAgIHZhciBob3N0ID0gZG9jLmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIGhvc3Quc2V0QXR0cmlidXRlKCdpZCcsIGRlZmF1bHRIb3N0SWQpO1xuICAgIGhvc3Quc3R5bGUuY3NzVGV4dCA9ICdwb3NpdGlvbjpmaXhlZDt6LWluZGV4OjEwMDAwMDAnO1xuICAgIGRvYyA9PT0gbnVsbCB8fCBkb2MgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGRvYy5ib2R5LmFwcGVuZENoaWxkKGhvc3QpO1xuICAgIHJldHVybiBob3N0O1xufVxuLyoqXG4gKiBUaGlzIGZ1bmN0aW9uIGNhbiBiZSBvcHRpb25hbGx5IGNhbGxlZCB0byBjbGVhbiB1cCB0aGUgZGVmYXVsdCBsYXllciBob3N0IGFzIG5lZWRlZC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNsZWFudXBEZWZhdWx0TGF5ZXJIb3N0KGRvYykge1xuICAgIHZhciBob3N0ID0gZG9jLnF1ZXJ5U2VsZWN0b3IoXCIjXCIgKyBkZWZhdWx0SG9zdElkKTtcbiAgICBpZiAoaG9zdCkge1xuICAgICAgICBkb2MucmVtb3ZlQ2hpbGQoaG9zdCk7XG4gICAgfVxufVxuLyoqXG4gKiBVc2VkIGZvciBub3RpZnlpbmcgYXBwbGljYWJsZSBMYXllcnMgdGhhdCBhIGhvc3QgaXMgYXZhaWxhYmxlL3VuYXZhaWxhYmxlIGFuZCB0byByZS1ldmFsdWF0ZSBMYXllcnMgdGhhdFxuICogY2FyZSBhYm91dCB0aGUgc3BlY2lmaWMgaG9zdC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG5vdGlmeUhvc3RDaGFuZ2VkKGlkKSB7XG4gICAgaWYgKF9sYXllcnNCeUhvc3RJZFtpZF0pIHtcbiAgICAgICAgX2xheWVyc0J5SG9zdElkW2lkXS5mb3JFYWNoKGZ1bmN0aW9uIChjYWxsYmFjaykgeyByZXR1cm4gY2FsbGJhY2soKTsgfSk7XG4gICAgfVxufVxuLyoqXG4gKiBTZXRzIHRoZSBkZWZhdWx0IHRhcmdldCBzZWxlY3RvciB0byB1c2Ugd2hlbiBkZXRlcm1pbmluZyB0aGUgaG9zdCBpbiB3aGljaFxuICogTGF5ZXJlZCBjb250ZW50IHdpbGwgYmUgaW5qZWN0ZWQgaW50by4gSWYgbm90IHByb3ZpZGVkLCBhbiBlbGVtZW50IHdpbGwgYmVcbiAqIGNyZWF0ZWQgYXQgdGhlIGVuZCBvZiB0aGUgZG9jdW1lbnQgYm9keS5cbiAqXG4gKiBQYXNzaW5nIGluIGEgZmFsc3kgdmFsdWUgd2lsbCBjbGVhciB0aGUgZGVmYXVsdCB0YXJnZXQgYW5kIHJlc2V0IGJhY2sgdG9cbiAqIHVzaW5nIGEgY3JlYXRlZCBlbGVtZW50IGF0IHRoZSBlbmQgb2YgZG9jdW1lbnQgYm9keS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNldERlZmF1bHRUYXJnZXQoc2VsZWN0b3IpIHtcbiAgICBfZGVmYXVsdEhvc3RTZWxlY3RvciA9IHNlbGVjdG9yO1xufVxuLyoqXG4gKiBHZXQgdGhlIGRlZmF1bHQgdGFyZ2V0IHNlbGVjdG9yIHdoZW4gZGV0ZXJtaW5pbmcgYSBob3N0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXREZWZhdWx0VGFyZ2V0KCkge1xuICAgIHJldHVybiBfZGVmYXVsdEhvc3RTZWxlY3Rvcjtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUxheWVyLm5vdGlmaWNhdGlvbi5qcy5tYXAiLCJpbXBvcnQgeyBfX2Fzc2lnbiB9IGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0ICogYXMgUmVhY3RET00gZnJvbSAncmVhY3QtZG9tJztcbmltcG9ydCB7IEZhYnJpYyB9IGZyb20gJy4uLy4uL0ZhYnJpYyc7XG5pbXBvcnQgeyBjbGFzc05hbWVzRnVuY3Rpb24sIHNldFBvcnRhbEF0dHJpYnV0ZSwgc2V0VmlydHVhbFBhcmVudCB9IGZyb20gJy4uLy4uL1V0aWxpdGllcyc7XG5pbXBvcnQgeyByZWdpc3RlckxheWVyLCBnZXREZWZhdWx0VGFyZ2V0LCB1bnJlZ2lzdGVyTGF5ZXIsIGdldExheWVySG9zdCwgY3JlYXRlRGVmYXVsdExheWVySG9zdCwgfSBmcm9tICcuL0xheWVyLm5vdGlmaWNhdGlvbic7XG5pbXBvcnQgeyB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0LCB1c2VNZXJnZWRSZWZzLCB1c2VXYXJuaW5ncyB9IGZyb20gJ0BmbHVlbnR1aS9yZWFjdC1ob29rcyc7XG5pbXBvcnQgeyB1c2VEb2N1bWVudCB9IGZyb20gJy4uLy4uL1dpbmRvd1Byb3ZpZGVyJztcbnZhciBnZXRDbGFzc05hbWVzID0gY2xhc3NOYW1lc0Z1bmN0aW9uKCk7XG5leHBvcnQgdmFyIExheWVyQmFzZSA9IFJlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gKHByb3BzLCByZWYpIHtcbiAgICB2YXIgcm9vdFJlZiA9IFJlYWN0LnVzZVJlZihudWxsKTtcbiAgICB2YXIgbWVyZ2VkUmVmID0gdXNlTWVyZ2VkUmVmcyhyb290UmVmLCByZWYpO1xuICAgIHZhciBsYXllclJlZiA9IFJlYWN0LnVzZVJlZigpO1xuICAgIC8vIFRyYWNrcyBpZiB0aGUgbGF5ZXIgbW91bnQgZXZlbnRzIG5lZWQgdG8gYmUgcmFpc2VkLlxuICAgIC8vIFJlcXVpcmVkIHRvIGFsbG93IHRoZSBET00gdG8gcmVuZGVyIGFmdGVyIHRoZSBsYXllciBlbGVtZW50IGlzIGFkZGVkLlxuICAgIHZhciBfYSA9IFJlYWN0LnVzZVN0YXRlKGZhbHNlKSwgbmVlZFJhaXNlTGF5ZXJNb3VudCA9IF9hWzBdLCBzZXROZWVkUmFpc2VMYXllck1vdW50ID0gX2FbMV07XG4gICAgdmFyIGRvYyA9IHVzZURvY3VtZW50KCk7XG4gICAgdmFyIGV2ZW50QnViYmxpbmdFbmFibGVkID0gcHJvcHMuZXZlbnRCdWJibGluZ0VuYWJsZWQsIHN0eWxlcyA9IHByb3BzLnN0eWxlcywgdGhlbWUgPSBwcm9wcy50aGVtZSwgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLCBjaGlsZHJlbiA9IHByb3BzLmNoaWxkcmVuLCBob3N0SWQgPSBwcm9wcy5ob3N0SWQsIF9iID0gcHJvcHMub25MYXllckRpZE1vdW50LCBvbkxheWVyRGlkTW91bnQgPSBfYiA9PT0gdm9pZCAwID8gZnVuY3Rpb24gKCkgeyByZXR1cm4gdW5kZWZpbmVkOyB9IDogX2IsIFxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBkZXByZWNhdGlvbi9kZXByZWNhdGlvblxuICAgIF9jID0gcHJvcHMub25MYXllck1vdW50ZWQsIFxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBkZXByZWNhdGlvbi9kZXByZWNhdGlvblxuICAgIG9uTGF5ZXJNb3VudGVkID0gX2MgPT09IHZvaWQgMCA/IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHVuZGVmaW5lZDsgfSA6IF9jLCBvbkxheWVyV2lsbFVubW91bnQgPSBwcm9wcy5vbkxheWVyV2lsbFVubW91bnQsIGluc2VydEZpcnN0ID0gcHJvcHMuaW5zZXJ0Rmlyc3Q7XG4gICAgdmFyIGNsYXNzTmFtZXMgPSBnZXRDbGFzc05hbWVzKHN0eWxlcywge1xuICAgICAgICB0aGVtZTogdGhlbWUsXG4gICAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lLFxuICAgICAgICBpc05vdEhvc3Q6ICFob3N0SWQsXG4gICAgfSk7XG4gICAgLy8gUmV0dXJucyB0aGUgdXNlciBwcm92aWRlZCBob3N0SWQgcHJvcHMgZWxlbWVudCwgdGhlIGRlZmF1bHQgdGFyZ2V0IHNlbGVjdG9yLFxuICAgIC8vIG9yIHVuZGVmaW5lZCBpZiBkb2N1bWVudCBkb2Vzbid0IGV4aXN0LlxuICAgIHZhciBnZXRIb3N0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX2EsIF9iO1xuICAgICAgICBpZiAoaG9zdElkKSB7XG4gICAgICAgICAgICB2YXIgbGF5ZXJIb3N0ID0gZ2V0TGF5ZXJIb3N0KGhvc3RJZCk7XG4gICAgICAgICAgICBpZiAobGF5ZXJIb3N0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIChfYSA9IGxheWVySG9zdC5yb290UmVmLmN1cnJlbnQpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gKF9iID0gZG9jID09PSBudWxsIHx8IGRvYyA9PT0gdm9pZCAwID8gdm9pZCAwIDogZG9jLmdldEVsZW1lbnRCeUlkKGhvc3RJZCkpICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB2YXIgZGVmYXVsdEhvc3RTZWxlY3RvciA9IGdldERlZmF1bHRUYXJnZXQoKTtcbiAgICAgICAgICAgIC8vIEZpbmQgdGhlIGhvc3QuXG4gICAgICAgICAgICB2YXIgaG9zdCA9IGRlZmF1bHRIb3N0U2VsZWN0b3IgPyBkb2MgPT09IG51bGwgfHwgZG9jID09PSB2b2lkIDAgPyB2b2lkIDAgOiBkb2MucXVlcnlTZWxlY3RvcihkZWZhdWx0SG9zdFNlbGVjdG9yKSA6IG51bGw7XG4gICAgICAgICAgICAvLyBJZiBubyBob3N0IGlzIGF2YWlsYWJsZSwgY3JlYXRlIGEgY29udGFpbmVyIGZvciBpbmplY3RpbmcgbGF5ZXJzIGluLlxuICAgICAgICAgICAgLy8gSGF2aW5nIGEgY29udGFpbmVyIHNjb3BlcyBsYXlvdXQgY29tcHV0YXRpb24uXG4gICAgICAgICAgICBpZiAoIWhvc3QgJiYgZG9jKSB7XG4gICAgICAgICAgICAgICAgaG9zdCA9IGNyZWF0ZURlZmF1bHRMYXllckhvc3QoZG9jKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBob3N0O1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvLyBSZW1vdmVzIHRoZSBjdXJyZW50IGxheWVyIGVsZW1lbnQncyBwYXJlbnROb2RlIGFuZCBydW5zIG9uTGF5ZXJXaWxsVW5tb3VudCBwcm9wIGlmIHByb3ZpZGVkLlxuICAgIHZhciByZW1vdmVMYXllckVsZW1lbnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIG9uTGF5ZXJXaWxsVW5tb3VudCA9PT0gbnVsbCB8fCBvbkxheWVyV2lsbFVubW91bnQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9uTGF5ZXJXaWxsVW5tb3VudCgpO1xuICAgICAgICB2YXIgZWxlbSA9IGxheWVyUmVmLmN1cnJlbnQ7XG4gICAgICAgIC8vIENsZWFyIHJlZiBiZWZvcmUgcmVtb3ZpbmcgZnJvbSB0aGUgRE9NXG4gICAgICAgIGxheWVyUmVmLmN1cnJlbnQgPSB1bmRlZmluZWQ7XG4gICAgICAgIGlmIChlbGVtICYmIGVsZW0ucGFyZW50Tm9kZSkge1xuICAgICAgICAgICAgZWxlbS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGVsZW0pO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvLyBJZiBhIGRvYyBvciBob3N0IGV4aXN0cywgaXQgd2lsbCByZW1vdmUgYW5kIHVwZGF0ZSBsYXllciBwYXJlbnROb2Rlcy5cbiAgICB2YXIgY3JlYXRlTGF5ZXJFbGVtZW50ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX2EsIF9iO1xuICAgICAgICB2YXIgaG9zdCA9IGdldEhvc3QoKTtcbiAgICAgICAgaWYgKCFob3N0KSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgLy8gUmVtb3ZlIGFuZCByZS1jcmVhdGUgYW55IHByZXZpb3VzIGV4aXN0aW5nIGxheWVyIGVsZW1lbnRzLlxuICAgICAgICByZW1vdmVMYXllckVsZW1lbnQoKTtcbiAgICAgICAgdmFyIGVsID0gKF9iID0gKChfYSA9IGhvc3Qub3duZXJEb2N1bWVudCkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogZG9jKSkgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICBpZiAoZWwpIHtcbiAgICAgICAgICAgIGVsLmNsYXNzTmFtZSA9IGNsYXNzTmFtZXMucm9vdDtcbiAgICAgICAgICAgIHNldFBvcnRhbEF0dHJpYnV0ZShlbCk7XG4gICAgICAgICAgICBzZXRWaXJ0dWFsUGFyZW50KGVsLCByb290UmVmLmN1cnJlbnQpO1xuICAgICAgICAgICAgaW5zZXJ0Rmlyc3QgPyBob3N0Lmluc2VydEJlZm9yZShlbCwgaG9zdC5maXJzdENoaWxkKSA6IGhvc3QuYXBwZW5kQ2hpbGQoZWwpO1xuICAgICAgICAgICAgbGF5ZXJSZWYuY3VycmVudCA9IGVsO1xuICAgICAgICAgICAgc2V0TmVlZFJhaXNlTGF5ZXJNb3VudCh0cnVlKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgICAgIGNyZWF0ZUxheWVyRWxlbWVudCgpO1xuICAgICAgICAvLyBDaGVjayBpZiB0aGUgdXNlciBwcm92aWRlZCBhIGhvc3RJZCBwcm9wIGFuZCByZWdpc3RlciB0aGUgbGF5ZXIgd2l0aCB0aGUgSUQuXG4gICAgICAgIGlmIChob3N0SWQpIHtcbiAgICAgICAgICAgIHJlZ2lzdGVyTGF5ZXIoaG9zdElkLCBjcmVhdGVMYXllckVsZW1lbnQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZW1vdmVMYXllckVsZW1lbnQoKTtcbiAgICAgICAgICAgIGlmIChob3N0SWQpIHtcbiAgICAgICAgICAgICAgICB1bnJlZ2lzdGVyTGF5ZXIoaG9zdElkLCBjcmVhdGVMYXllckVsZW1lbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaG9va3MvZXhoYXVzdGl2ZS1kZXBzIC0tIHNob3VsZCBydW4gaWYgdGhlIGhvc3RJZCB1cGRhdGVzLlxuICAgIH0sIFtob3N0SWRdKTtcbiAgICBSZWFjdC51c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAobGF5ZXJSZWYuY3VycmVudCAmJiBuZWVkUmFpc2VMYXllck1vdW50KSB7XG4gICAgICAgICAgICBvbkxheWVyTW91bnRlZCA9PT0gbnVsbCB8fCBvbkxheWVyTW91bnRlZCA9PT0gdm9pZCAwID8gdm9pZCAwIDogb25MYXllck1vdW50ZWQoKTtcbiAgICAgICAgICAgIG9uTGF5ZXJEaWRNb3VudCA9PT0gbnVsbCB8fCBvbkxheWVyRGlkTW91bnQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9uTGF5ZXJEaWRNb3VudCgpO1xuICAgICAgICAgICAgc2V0TmVlZFJhaXNlTGF5ZXJNb3VudChmYWxzZSk7XG4gICAgICAgIH1cbiAgICB9LCBbbmVlZFJhaXNlTGF5ZXJNb3VudCwgb25MYXllck1vdW50ZWQsIG9uTGF5ZXJEaWRNb3VudF0pO1xuICAgIHVzZURlYnVnV2FybmluZ3MocHJvcHMpO1xuICAgIHJldHVybiAoUmVhY3QuY3JlYXRlRWxlbWVudChcInNwYW5cIiwgeyBjbGFzc05hbWU6IFwibXMtbGF5ZXJcIiwgcmVmOiBtZXJnZWRSZWYgfSwgbGF5ZXJSZWYuY3VycmVudCAmJlxuICAgICAgICBSZWFjdERPTS5jcmVhdGVQb3J0YWwoXG4gICAgICAgIC8qIGVzbGludC1kaXNhYmxlIGRlcHJlY2F0aW9uL2RlcHJlY2F0aW9uICovXG4gICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRmFicmljLCBfX2Fzc2lnbih7fSwgKCFldmVudEJ1YmJsaW5nRW5hYmxlZCAmJiBnZXRGaWx0ZXJlZEV2ZW50cygpKSwgeyBjbGFzc05hbWU6IGNsYXNzTmFtZXMuY29udGVudCB9KSwgY2hpbGRyZW4pLCBcbiAgICAgICAgLyogZXNsaW50LWVuYWJsZSBkZXByZWNhdGlvbi9kZXByZWNhdGlvbiAqL1xuICAgICAgICBsYXllclJlZi5jdXJyZW50KSkpO1xufSk7XG5MYXllckJhc2UuZGlzcGxheU5hbWUgPSAnTGF5ZXJCYXNlJztcbnZhciBmaWx0ZXJlZEV2ZW50UHJvcHM7XG52YXIgb25GaWx0ZXJFdmVudCA9IGZ1bmN0aW9uIChldikge1xuICAgIC8vIFdlIHNob3VsZCBqdXN0IGJlIGFibGUgdG8gY2hlY2sgZXYuYnViYmxlIGhlcmUgYW5kIG9ubHkgc3RvcCBldmVudHMgdGhhdCBhcmUgYnViYmxpbmcgdXAuIEhvd2V2ZXIsIGV2ZW4gdGhvdWdoXG4gICAgLy8gbW91c2VlbnRlciBhbmQgbW91c2VsZWF2ZSBkbyBOT1QgYnViYmxlIHVwLCB0aGV5IGFyZSBzaG93aW5nIHVwIGFzIGJ1YmJsaW5nLiBUaGVyZWZvcmUgd2Ugc3RvcCBldmVudHMgYmFzZWQgb25cbiAgICAvLyBldmVudCBuYW1lIHJhdGhlciB0aGFuIGV2LmJ1YmJsZS5cbiAgICBpZiAoZXYuZXZlbnRQaGFzZSA9PT0gRXZlbnQuQlVCQkxJTkdfUEhBU0UgJiZcbiAgICAgICAgZXYudHlwZSAhPT0gJ21vdXNlZW50ZXInICYmXG4gICAgICAgIGV2LnR5cGUgIT09ICdtb3VzZWxlYXZlJyAmJlxuICAgICAgICBldi50eXBlICE9PSAndG91Y2hzdGFydCcgJiZcbiAgICAgICAgZXYudHlwZSAhPT0gJ3RvdWNoZW5kJykge1xuICAgICAgICBldi5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICB9XG59O1xuZnVuY3Rpb24gZ2V0RmlsdGVyZWRFdmVudHMoKSB7XG4gICAgaWYgKCFmaWx0ZXJlZEV2ZW50UHJvcHMpIHtcbiAgICAgICAgZmlsdGVyZWRFdmVudFByb3BzID0ge307XG4gICAgICAgIFtcbiAgICAgICAgICAgICdvbkNsaWNrJyxcbiAgICAgICAgICAgICdvbkNvbnRleHRNZW51JyxcbiAgICAgICAgICAgICdvbkRvdWJsZUNsaWNrJyxcbiAgICAgICAgICAgICdvbkRyYWcnLFxuICAgICAgICAgICAgJ29uRHJhZ0VuZCcsXG4gICAgICAgICAgICAnb25EcmFnRW50ZXInLFxuICAgICAgICAgICAgJ29uRHJhZ0V4aXQnLFxuICAgICAgICAgICAgJ29uRHJhZ0xlYXZlJyxcbiAgICAgICAgICAgICdvbkRyYWdPdmVyJyxcbiAgICAgICAgICAgICdvbkRyYWdTdGFydCcsXG4gICAgICAgICAgICAnb25Ecm9wJyxcbiAgICAgICAgICAgICdvbk1vdXNlRG93bicsXG4gICAgICAgICAgICAnb25Nb3VzZUVudGVyJyxcbiAgICAgICAgICAgICdvbk1vdXNlTGVhdmUnLFxuICAgICAgICAgICAgJ29uTW91c2VNb3ZlJyxcbiAgICAgICAgICAgICdvbk1vdXNlT3ZlcicsXG4gICAgICAgICAgICAnb25Nb3VzZU91dCcsXG4gICAgICAgICAgICAnb25Nb3VzZVVwJyxcbiAgICAgICAgICAgICdvblRvdWNoTW92ZScsXG4gICAgICAgICAgICAnb25Ub3VjaFN0YXJ0JyxcbiAgICAgICAgICAgICdvblRvdWNoQ2FuY2VsJyxcbiAgICAgICAgICAgICdvblRvdWNoRW5kJyxcbiAgICAgICAgICAgICdvbktleURvd24nLFxuICAgICAgICAgICAgJ29uS2V5UHJlc3MnLFxuICAgICAgICAgICAgJ29uS2V5VXAnLFxuICAgICAgICAgICAgJ29uRm9jdXMnLFxuICAgICAgICAgICAgJ29uQmx1cicsXG4gICAgICAgICAgICAnb25DaGFuZ2UnLFxuICAgICAgICAgICAgJ29uSW5wdXQnLFxuICAgICAgICAgICAgJ29uSW52YWxpZCcsXG4gICAgICAgICAgICAnb25TdWJtaXQnLFxuICAgICAgICBdLmZvckVhY2goZnVuY3Rpb24gKG5hbWUpIHsgcmV0dXJuIChmaWx0ZXJlZEV2ZW50UHJvcHNbbmFtZV0gPSBvbkZpbHRlckV2ZW50KTsgfSk7XG4gICAgfVxuICAgIHJldHVybiBmaWx0ZXJlZEV2ZW50UHJvcHM7XG59XG5mdW5jdGlvbiB1c2VEZWJ1Z1dhcm5pbmdzKHByb3BzKSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0LWhvb2tzL3J1bGVzLW9mLWhvb2tzIC0tIGJ1aWxkLXRpbWUgY29uZGl0aW9uYWxcbiAgICAgICAgdXNlV2FybmluZ3Moe1xuICAgICAgICAgICAgbmFtZTogJ0xheWVyJyxcbiAgICAgICAgICAgIHByb3BzOiBwcm9wcyxcbiAgICAgICAgICAgIGRlcHJlY2F0aW9uczogeyBvbkxheWVyTW91bnRlZDogJ29uTGF5ZXJEaWRNb3VudCcgfSxcbiAgICAgICAgfSk7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9TGF5ZXIuYmFzZS5qcy5tYXAiLCIvKipcbiAqIFNldHMgdGhlIHZpcnR1YWwgcGFyZW50IG9mIGFuIGVsZW1lbnQuXG4gKiBQYXNzIGB1bmRlZmluZWRgIGFzIHRoZSBgcGFyZW50YCB0byBjbGVhciB0aGUgdmlydHVhbCBwYXJlbnQuXG4gKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgZnVuY3Rpb24gc2V0VmlydHVhbFBhcmVudChjaGlsZCwgcGFyZW50KSB7XG4gICAgdmFyIHZpcnR1YWxDaGlsZCA9IGNoaWxkO1xuICAgIHZhciB2aXJ0dWFsUGFyZW50ID0gcGFyZW50O1xuICAgIGlmICghdmlydHVhbENoaWxkLl92aXJ0dWFsKSB7XG4gICAgICAgIHZpcnR1YWxDaGlsZC5fdmlydHVhbCA9IHtcbiAgICAgICAgICAgIGNoaWxkcmVuOiBbXSxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgdmFyIG9sZFBhcmVudCA9IHZpcnR1YWxDaGlsZC5fdmlydHVhbC5wYXJlbnQ7XG4gICAgaWYgKG9sZFBhcmVudCAmJiBvbGRQYXJlbnQgIT09IHBhcmVudCkge1xuICAgICAgICAvLyBSZW1vdmUgdGhlIGNoaWxkIGZyb20gaXRzIG9sZCBwYXJlbnQuXG4gICAgICAgIHZhciBpbmRleCA9IG9sZFBhcmVudC5fdmlydHVhbC5jaGlsZHJlbi5pbmRleE9mKHZpcnR1YWxDaGlsZCk7XG4gICAgICAgIGlmIChpbmRleCA+IC0xKSB7XG4gICAgICAgICAgICBvbGRQYXJlbnQuX3ZpcnR1YWwuY2hpbGRyZW4uc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICB2aXJ0dWFsQ2hpbGQuX3ZpcnR1YWwucGFyZW50ID0gdmlydHVhbFBhcmVudCB8fCB1bmRlZmluZWQ7XG4gICAgaWYgKHZpcnR1YWxQYXJlbnQpIHtcbiAgICAgICAgaWYgKCF2aXJ0dWFsUGFyZW50Ll92aXJ0dWFsKSB7XG4gICAgICAgICAgICB2aXJ0dWFsUGFyZW50Ll92aXJ0dWFsID0ge1xuICAgICAgICAgICAgICAgIGNoaWxkcmVuOiBbXSxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgdmlydHVhbFBhcmVudC5fdmlydHVhbC5jaGlsZHJlbi5wdXNoKHZpcnR1YWxDaGlsZCk7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2V0VmlydHVhbFBhcmVudC5qcy5tYXAiLCJpbXBvcnQgeyBaSW5kZXhlcywgZ2V0R2xvYmFsQ2xhc3NOYW1lcyB9IGZyb20gJy4uLy4uL1N0eWxpbmcnO1xudmFyIEdsb2JhbENsYXNzTmFtZXMgPSB7XG4gICAgcm9vdDogJ21zLUxheWVyJyxcbiAgICByb290Tm9Ib3N0OiAnbXMtTGF5ZXItLWZpeGVkJyxcbiAgICBjb250ZW50OiAnbXMtTGF5ZXItY29udGVudCcsXG59O1xuZXhwb3J0IHZhciBnZXRTdHlsZXMgPSBmdW5jdGlvbiAocHJvcHMpIHtcbiAgICB2YXIgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLCBpc05vdEhvc3QgPSBwcm9wcy5pc05vdEhvc3QsIHRoZW1lID0gcHJvcHMudGhlbWU7XG4gICAgdmFyIGNsYXNzTmFtZXMgPSBnZXRHbG9iYWxDbGFzc05hbWVzKEdsb2JhbENsYXNzTmFtZXMsIHRoZW1lKTtcbiAgICByZXR1cm4ge1xuICAgICAgICByb290OiBbXG4gICAgICAgICAgICBjbGFzc05hbWVzLnJvb3QsXG4gICAgICAgICAgICB0aGVtZS5mb250cy5tZWRpdW0sXG4gICAgICAgICAgICBpc05vdEhvc3QgJiYgW1xuICAgICAgICAgICAgICAgIGNsYXNzTmFtZXMucm9vdE5vSG9zdCxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiAnZml4ZWQnLFxuICAgICAgICAgICAgICAgICAgICB6SW5kZXg6IFpJbmRleGVzLkxheWVyLFxuICAgICAgICAgICAgICAgICAgICB0b3A6IDAsXG4gICAgICAgICAgICAgICAgICAgIGxlZnQ6IDAsXG4gICAgICAgICAgICAgICAgICAgIGJvdHRvbTogMCxcbiAgICAgICAgICAgICAgICAgICAgcmlnaHQ6IDAsXG4gICAgICAgICAgICAgICAgICAgIHZpc2liaWxpdHk6ICdoaWRkZW4nLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgY2xhc3NOYW1lLFxuICAgICAgICBdLFxuICAgICAgICBjb250ZW50OiBbXG4gICAgICAgICAgICBjbGFzc05hbWVzLmNvbnRlbnQsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdmlzaWJpbGl0eTogJ3Zpc2libGUnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICB9O1xufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUxheWVyLnN0eWxlcy5qcy5tYXAiLCJpbXBvcnQgeyBzdHlsZWQgfSBmcm9tICcuLi8uLi9VdGlsaXRpZXMnO1xuaW1wb3J0IHsgTGF5ZXJCYXNlIH0gZnJvbSAnLi9MYXllci5iYXNlJztcbmltcG9ydCB7IGdldFN0eWxlcyB9IGZyb20gJy4vTGF5ZXIuc3R5bGVzJztcbmV4cG9ydCB2YXIgTGF5ZXIgPSBzdHlsZWQoTGF5ZXJCYXNlLCBnZXRTdHlsZXMsIHVuZGVmaW5lZCwge1xuICAgIHNjb3BlOiAnTGF5ZXInLFxuICAgIGZpZWxkczogWydob3N0SWQnLCAndGhlbWUnLCAnc3R5bGVzJ10sXG59KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUxheWVyLmpzLm1hcCIsImltcG9ydCB7IF9fYXNzaWduLCBfX3Jlc3QgfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IENhbGxvdXRDb250ZW50IH0gZnJvbSAnLi9DYWxsb3V0Q29udGVudCc7XG5pbXBvcnQgeyBMYXllciB9IGZyb20gJy4uLy4uL0xheWVyJztcbmV4cG9ydCB2YXIgQ2FsbG91dCA9IFJlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gKF9hLCBmb3J3YXJkZWRSZWYpIHtcbiAgICB2YXIgbGF5ZXJQcm9wcyA9IF9hLmxheWVyUHJvcHMsIGRvTm90TGF5ZXIgPSBfYS5kb05vdExheWVyLCByZXN0ID0gX19yZXN0KF9hLCBbXCJsYXllclByb3BzXCIsIFwiZG9Ob3RMYXllclwiXSk7XG4gICAgdmFyIGNvbnRlbnQgPSBSZWFjdC5jcmVhdGVFbGVtZW50KENhbGxvdXRDb250ZW50LCBfX2Fzc2lnbih7fSwgcmVzdCwgeyBkb05vdExheWVyOiBkb05vdExheWVyLCByZWY6IGZvcndhcmRlZFJlZiB9KSk7XG4gICAgcmV0dXJuIGRvTm90TGF5ZXIgPyBjb250ZW50IDogUmVhY3QuY3JlYXRlRWxlbWVudChMYXllciwgX19hc3NpZ24oe30sIGxheWVyUHJvcHMpLCBjb250ZW50KTtcbn0pO1xuQ2FsbG91dC5kaXNwbGF5TmFtZSA9ICdDYWxsb3V0Jztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUNhbGxvdXQuanMubWFwIiwiaW1wb3J0IHsgX19hc3NpZ24sIF9fZXh0ZW5kcyB9IGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgaGFzU3VibWVudSwgZ2V0SXNDaGVja2VkIH0gZnJvbSAnLi4vLi4vdXRpbGl0aWVzL2NvbnRleHR1YWxNZW51L2luZGV4JztcbmltcG9ydCB7IGdldFJUTCwgaW5pdGlhbGl6ZUNvbXBvbmVudFJlZiB9IGZyb20gJy4uLy4uL1V0aWxpdGllcyc7XG5pbXBvcnQgeyBJY29uIH0gZnJvbSAnLi4vLi4vSWNvbic7XG52YXIgZGVmYXVsdEljb25SZW5kZXJlciA9IGZ1bmN0aW9uIChwcm9wcykge1xuICAgIHZhciBpdGVtID0gcHJvcHMuaXRlbSwgY2xhc3NOYW1lcyA9IHByb3BzLmNsYXNzTmFtZXM7XG4gICAgdmFyIGljb25Qcm9wcyA9IGl0ZW0uaWNvblByb3BzO1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KEljb24sIF9fYXNzaWduKHt9LCBpY29uUHJvcHMsIHsgY2xhc3NOYW1lOiBjbGFzc05hbWVzLmljb24gfSkpO1xufTtcbnZhciByZW5kZXJJdGVtSWNvbiA9IGZ1bmN0aW9uIChwcm9wcykge1xuICAgIHZhciBpdGVtID0gcHJvcHMuaXRlbSwgaGFzSWNvbnMgPSBwcm9wcy5oYXNJY29ucztcbiAgICBpZiAoIWhhc0ljb25zKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBpZiAoaXRlbS5vblJlbmRlckljb24pIHtcbiAgICAgICAgcmV0dXJuIGl0ZW0ub25SZW5kZXJJY29uKHByb3BzLCBkZWZhdWx0SWNvblJlbmRlcmVyKTtcbiAgICB9XG4gICAgcmV0dXJuIGRlZmF1bHRJY29uUmVuZGVyZXIocHJvcHMpO1xufTtcbnZhciByZW5kZXJDaGVja01hcmtJY29uID0gZnVuY3Rpb24gKF9hKSB7XG4gICAgdmFyIG9uQ2hlY2ttYXJrQ2xpY2sgPSBfYS5vbkNoZWNrbWFya0NsaWNrLCBpdGVtID0gX2EuaXRlbSwgY2xhc3NOYW1lcyA9IF9hLmNsYXNzTmFtZXM7XG4gICAgdmFyIGlzSXRlbUNoZWNrZWQgPSBnZXRJc0NoZWNrZWQoaXRlbSk7XG4gICAgaWYgKG9uQ2hlY2ttYXJrQ2xpY2spIHtcbiAgICAgICAgLy8gRW5zdXJlcyB0aGF0IHRoZSBpdGVtIGlzIHBhc3NlZCBhcyB0aGUgZmlyc3QgYXJndW1lbnQgdG8gdGhlIGNoZWNrbWFyayBjbGljayBjYWxsYmFjay5cbiAgICAgICAgdmFyIG9uQ2xpY2sgPSBmdW5jdGlvbiAoZSkgeyByZXR1cm4gb25DaGVja21hcmtDbGljayhpdGVtLCBlKTsgfTtcbiAgICAgICAgcmV0dXJuIChSZWFjdC5jcmVhdGVFbGVtZW50KEljb24sIHsgaWNvbk5hbWU6IGl0ZW0uY2FuQ2hlY2sgIT09IGZhbHNlICYmIGlzSXRlbUNoZWNrZWQgPyAnQ2hlY2tNYXJrJyA6ICcnLCBjbGFzc05hbWU6IGNsYXNzTmFtZXMuY2hlY2ttYXJrSWNvbiwgXG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QvanN4LW5vLWJpbmRcbiAgICAgICAgICAgIG9uQ2xpY2s6IG9uQ2xpY2sgfSkpO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbn07XG52YXIgcmVuZGVySXRlbU5hbWUgPSBmdW5jdGlvbiAoX2EpIHtcbiAgICB2YXIgaXRlbSA9IF9hLml0ZW0sIGNsYXNzTmFtZXMgPSBfYS5jbGFzc05hbWVzO1xuICAgIC8qIGVzbGludC1kaXNhYmxlIGRlcHJlY2F0aW9uL2RlcHJlY2F0aW9uICovXG4gICAgaWYgKGl0ZW0udGV4dCB8fCBpdGVtLm5hbWUpIHtcbiAgICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIHsgY2xhc3NOYW1lOiBjbGFzc05hbWVzLmxhYmVsIH0sIGl0ZW0udGV4dCB8fCBpdGVtLm5hbWUpO1xuICAgIH1cbiAgICAvKiBlc2xpbnQtZW5hYmxlIGRlcHJlY2F0aW9uL2RlcHJlY2F0aW9uICovXG4gICAgcmV0dXJuIG51bGw7XG59O1xudmFyIHJlbmRlclNlY29uZGFyeVRleHQgPSBmdW5jdGlvbiAoX2EpIHtcbiAgICB2YXIgaXRlbSA9IF9hLml0ZW0sIGNsYXNzTmFtZXMgPSBfYS5jbGFzc05hbWVzO1xuICAgIGlmIChpdGVtLnNlY29uZGFyeVRleHQpIHtcbiAgICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIHsgY2xhc3NOYW1lOiBjbGFzc05hbWVzLnNlY29uZGFyeVRleHQgfSwgaXRlbS5zZWNvbmRhcnlUZXh0KTtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG59O1xudmFyIHJlbmRlclN1Yk1lbnVJY29uID0gZnVuY3Rpb24gKF9hKSB7XG4gICAgdmFyIGl0ZW0gPSBfYS5pdGVtLCBjbGFzc05hbWVzID0gX2EuY2xhc3NOYW1lcywgdGhlbWUgPSBfYS50aGVtZTtcbiAgICBpZiAoaGFzU3VibWVudShpdGVtKSkge1xuICAgICAgICByZXR1cm4gKFJlYWN0LmNyZWF0ZUVsZW1lbnQoSWNvbiwgX19hc3NpZ24oeyBpY29uTmFtZTogZ2V0UlRMKHRoZW1lKSA/ICdDaGV2cm9uTGVmdCcgOiAnQ2hldnJvblJpZ2h0JyB9LCBpdGVtLnN1Ym1lbnVJY29uUHJvcHMsIHsgY2xhc3NOYW1lOiBjbGFzc05hbWVzLnN1Yk1lbnVJY29uIH0pKSk7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xufTtcbnZhciBDb250ZXh0dWFsTWVudUl0ZW1CYXNlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhDb250ZXh0dWFsTWVudUl0ZW1CYXNlLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIENvbnRleHR1YWxNZW51SXRlbUJhc2UocHJvcHMpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgcHJvcHMpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLm9wZW5TdWJNZW51ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIF9hID0gX3RoaXMucHJvcHMsIGl0ZW0gPSBfYS5pdGVtLCBvcGVuU3ViTWVudSA9IF9hLm9wZW5TdWJNZW51LCBnZXRTdWJtZW51VGFyZ2V0ID0gX2EuZ2V0U3VibWVudVRhcmdldDtcbiAgICAgICAgICAgIGlmIChnZXRTdWJtZW51VGFyZ2V0KSB7XG4gICAgICAgICAgICAgICAgdmFyIHN1Ym1lbnVUYXJnZXQgPSBnZXRTdWJtZW51VGFyZ2V0KCk7XG4gICAgICAgICAgICAgICAgaWYgKGhhc1N1Ym1lbnUoaXRlbSkgJiYgb3BlblN1Yk1lbnUgJiYgc3VibWVudVRhcmdldCkge1xuICAgICAgICAgICAgICAgICAgICBvcGVuU3ViTWVudShpdGVtLCBzdWJtZW51VGFyZ2V0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIF90aGlzLmRpc21pc3NTdWJNZW51ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIF9hID0gX3RoaXMucHJvcHMsIGl0ZW0gPSBfYS5pdGVtLCBkaXNtaXNzU3ViTWVudSA9IF9hLmRpc21pc3NTdWJNZW51O1xuICAgICAgICAgICAgaWYgKGhhc1N1Ym1lbnUoaXRlbSkgJiYgZGlzbWlzc1N1Yk1lbnUpIHtcbiAgICAgICAgICAgICAgICBkaXNtaXNzU3ViTWVudSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBfdGhpcy5kaXNtaXNzTWVudSA9IGZ1bmN0aW9uIChkaXNtaXNzQWxsKSB7XG4gICAgICAgICAgICB2YXIgZGlzbWlzc01lbnUgPSBfdGhpcy5wcm9wcy5kaXNtaXNzTWVudTtcbiAgICAgICAgICAgIGlmIChkaXNtaXNzTWVudSkge1xuICAgICAgICAgICAgICAgIGRpc21pc3NNZW51KHVuZGVmaW5lZCAvKiBldiAqLywgZGlzbWlzc0FsbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIGluaXRpYWxpemVDb21wb25lbnRSZWYoX3RoaXMpO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIENvbnRleHR1YWxNZW51SXRlbUJhc2UucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF9hID0gdGhpcy5wcm9wcywgaXRlbSA9IF9hLml0ZW0sIGNsYXNzTmFtZXMgPSBfYS5jbGFzc05hbWVzO1xuICAgICAgICB2YXIgcmVuZGVyQ29udGVudCA9IGl0ZW0ub25SZW5kZXJDb250ZW50IHx8IHRoaXMuX3JlbmRlckxheW91dDtcbiAgICAgICAgcmV0dXJuIChSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHsgY2xhc3NOYW1lOiBpdGVtLnNwbGl0ID8gY2xhc3NOYW1lcy5saW5rQ29udGVudE1lbnUgOiBjbGFzc05hbWVzLmxpbmtDb250ZW50IH0sIHJlbmRlckNvbnRlbnQodGhpcy5wcm9wcywge1xuICAgICAgICAgICAgcmVuZGVyQ2hlY2tNYXJrSWNvbjogcmVuZGVyQ2hlY2tNYXJrSWNvbixcbiAgICAgICAgICAgIHJlbmRlckl0ZW1JY29uOiByZW5kZXJJdGVtSWNvbixcbiAgICAgICAgICAgIHJlbmRlckl0ZW1OYW1lOiByZW5kZXJJdGVtTmFtZSxcbiAgICAgICAgICAgIHJlbmRlclNlY29uZGFyeVRleHQ6IHJlbmRlclNlY29uZGFyeVRleHQsXG4gICAgICAgICAgICByZW5kZXJTdWJNZW51SWNvbjogcmVuZGVyU3ViTWVudUljb24sXG4gICAgICAgIH0pKSk7XG4gICAgfTtcbiAgICBDb250ZXh0dWFsTWVudUl0ZW1CYXNlLnByb3RvdHlwZS5fcmVuZGVyTGF5b3V0ID0gZnVuY3Rpb24gKHByb3BzLCBkZWZhdWx0UmVuZGVycykge1xuICAgICAgICByZXR1cm4gKFJlYWN0LmNyZWF0ZUVsZW1lbnQoUmVhY3QuRnJhZ21lbnQsIG51bGwsXG4gICAgICAgICAgICBkZWZhdWx0UmVuZGVycy5yZW5kZXJDaGVja01hcmtJY29uKHByb3BzKSxcbiAgICAgICAgICAgIGRlZmF1bHRSZW5kZXJzLnJlbmRlckl0ZW1JY29uKHByb3BzKSxcbiAgICAgICAgICAgIGRlZmF1bHRSZW5kZXJzLnJlbmRlckl0ZW1OYW1lKHByb3BzKSxcbiAgICAgICAgICAgIGRlZmF1bHRSZW5kZXJzLnJlbmRlclNlY29uZGFyeVRleHQocHJvcHMpLFxuICAgICAgICAgICAgZGVmYXVsdFJlbmRlcnMucmVuZGVyU3ViTWVudUljb24ocHJvcHMpKSk7XG4gICAgfTtcbiAgICByZXR1cm4gQ29udGV4dHVhbE1lbnVJdGVtQmFzZTtcbn0oUmVhY3QuQ29tcG9uZW50KSk7XG5leHBvcnQgeyBDb250ZXh0dWFsTWVudUl0ZW1CYXNlIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1Db250ZXh0dWFsTWVudUl0ZW0uYmFzZS5qcy5tYXAiLCJleHBvcnQgdmFyIEtUUF9QUkVGSVggPSAna3RwJztcbmV4cG9ydCB2YXIgS1RQX1NFUEFSQVRPUiA9ICctJztcbmV4cG9ydCB2YXIgS1RQX0ZVTExfUFJFRklYID0gS1RQX1BSRUZJWCArIEtUUF9TRVBBUkFUT1I7XG5leHBvcnQgdmFyIERBVEFLVFBfVEFSR0VUID0gJ2RhdGEta3RwLXRhcmdldCc7XG5leHBvcnQgdmFyIERBVEFLVFBfRVhFQ1VURV9UQVJHRVQgPSAnZGF0YS1rdHAtZXhlY3V0ZS10YXJnZXQnO1xuZXhwb3J0IHZhciBEQVRBS1RQX0FSSUFfVEFSR0VUID0gJ2RhdGEta3RwLWFyaWEtdGFyZ2V0JztcbmV4cG9ydCB2YXIgS1RQX0xBWUVSX0lEID0gJ2t0cC1sYXllci1pZCc7XG5leHBvcnQgdmFyIEtUUF9BUklBX1NFUEFSQVRPUiA9ICcsICc7XG4vLyBFdmVudHNcbmV4cG9ydCB2YXIgS2V5dGlwRXZlbnRzO1xuKGZ1bmN0aW9uIChLZXl0aXBFdmVudHMpIHtcbiAgICBLZXl0aXBFdmVudHMuS0VZVElQX0FEREVEID0gJ2tleXRpcEFkZGVkJztcbiAgICBLZXl0aXBFdmVudHMuS0VZVElQX1JFTU9WRUQgPSAna2V5dGlwUmVtb3ZlZCc7XG4gICAgS2V5dGlwRXZlbnRzLktFWVRJUF9VUERBVEVEID0gJ2tleXRpcFVwZGF0ZWQnO1xuICAgIEtleXRpcEV2ZW50cy5QRVJTSVNURURfS0VZVElQX0FEREVEID0gJ3BlcnNpc3RlZEtleXRpcEFkZGVkJztcbiAgICBLZXl0aXBFdmVudHMuUEVSU0lTVEVEX0tFWVRJUF9SRU1PVkVEID0gJ3BlcnNpc3RlZEtleXRpcFJlbW92ZWQnO1xuICAgIEtleXRpcEV2ZW50cy5QRVJTSVNURURfS0VZVElQX0VYRUNVVEUgPSAncGVyc2lzdGVkS2V5dGlwRXhlY3V0ZSc7XG4gICAgS2V5dGlwRXZlbnRzLkVOVEVSX0tFWVRJUF9NT0RFID0gJ2VudGVyS2V5dGlwTW9kZSc7XG4gICAgS2V5dGlwRXZlbnRzLkVYSVRfS0VZVElQX01PREUgPSAnZXhpdEtleXRpcE1vZGUnO1xufSkoS2V5dGlwRXZlbnRzIHx8IChLZXl0aXBFdmVudHMgPSB7fSkpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9S2V5dGlwQ29uc3RhbnRzLmpzLm1hcCIsImltcG9ydCB7IG1lbW9pemVGdW5jdGlvbiB9IGZyb20gJy4uLy4uL1V0aWxpdGllcyc7XG5pbXBvcnQgeyBtZXJnZVN0eWxlU2V0cyB9IGZyb20gJy4uLy4uL1N0eWxpbmcnO1xuLyoqXG4gKiBAZGVwcmVjYXRlZCB1c2UgZ2V0U3R5bGVzIGV4cG9ydGVkIGZyb20gVmVydGljYWxEaXZpZGVyLnN0eWxlcy50c1xuICovXG5leHBvcnQgdmFyIGdldERpdmlkZXJDbGFzc05hbWVzID0gbWVtb2l6ZUZ1bmN0aW9uKFxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGRlcHJlY2F0aW9uL2RlcHJlY2F0aW9uXG5mdW5jdGlvbiAodGhlbWUpIHtcbiAgICByZXR1cm4gbWVyZ2VTdHlsZVNldHMoe1xuICAgICAgICB3cmFwcGVyOiB7XG4gICAgICAgICAgICBkaXNwbGF5OiAnaW5saW5lLWZsZXgnLFxuICAgICAgICAgICAgaGVpZ2h0OiAnMTAwJScsXG4gICAgICAgICAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgICAgICAgfSxcbiAgICAgICAgZGl2aWRlcjoge1xuICAgICAgICAgICAgd2lkdGg6IDEsXG4gICAgICAgICAgICBoZWlnaHQ6ICcxMDAlJyxcbiAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUucGFsZXR0ZS5uZXV0cmFsVGVydGlhcnlBbHQsXG4gICAgICAgIH0sXG4gICAgfSk7XG59KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVZlcnRpY2FsRGl2aWRlci5jbGFzc05hbWVzLmpzLm1hcCIsImltcG9ydCB7IF9fYXNzaWduIH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBjb25jYXRTdHlsZVNldHMsIGdldEZvY3VzU3R5bGUsIEhpZ2hDb250cmFzdFNlbGVjdG9yLCBnZXRTY3JlZW5TZWxlY3RvciwgU2NyZWVuV2lkdGhNYXhNZWRpdW0sIEljb25Gb250U2l6ZXMsIGdldEhpZ2hDb250cmFzdE5vQWRqdXN0U3R5bGUsIH0gZnJvbSAnLi4vLi4vU3R5bGluZyc7XG5pbXBvcnQgeyBtZW1vaXplRnVuY3Rpb24gfSBmcm9tICcuLi8uLi9VdGlsaXRpZXMnO1xuZXhwb3J0IHZhciBDT05URVhUVUFMX01FTlVfSVRFTV9IRUlHSFQgPSAzNjtcbnZhciBNZWRpdW1TY3JlZW5TZWxlY3RvciA9IGdldFNjcmVlblNlbGVjdG9yKDAsIFNjcmVlbldpZHRoTWF4TWVkaXVtKTtcbmV4cG9ydCB2YXIgZ2V0TWVudUl0ZW1TdHlsZXMgPSBtZW1vaXplRnVuY3Rpb24oZnVuY3Rpb24gKHRoZW1lKSB7XG4gICAgdmFyIF9hLCBfYiwgX2MsIF9kLCBfZTtcbiAgICB2YXIgc2VtYW50aWNDb2xvcnMgPSB0aGVtZS5zZW1hbnRpY0NvbG9ycywgZm9udHMgPSB0aGVtZS5mb250cywgcGFsZXR0ZSA9IHRoZW1lLnBhbGV0dGU7XG4gICAgdmFyIENvbnRleHR1YWxNZW51SXRlbUJhY2tncm91bmRIb3ZlckNvbG9yID0gc2VtYW50aWNDb2xvcnMubWVudUl0ZW1CYWNrZ3JvdW5kSG92ZXJlZDtcbiAgICB2YXIgQ29udGV4dHVhbE1lbnVJdGVtVGV4dEhvdmVyQ29sb3IgPSBzZW1hbnRpY0NvbG9ycy5tZW51SXRlbVRleHRIb3ZlcmVkO1xuICAgIHZhciBDb250ZXh0dWFsTWVudUl0ZW1CYWNrZ3JvdW5kU2VsZWN0ZWRDb2xvciA9IHNlbWFudGljQ29sb3JzLm1lbnVJdGVtQmFja2dyb3VuZFByZXNzZWQ7XG4gICAgdmFyIENvbnRleHR1YWxNZW51SXRlbURpdmlkZXJDb2xvciA9IHNlbWFudGljQ29sb3JzLmJvZHlEaXZpZGVyO1xuICAgIHZhciBtZW51SXRlbVN0eWxlcyA9IHtcbiAgICAgICAgaXRlbTogW1xuICAgICAgICAgICAgZm9udHMubWVkaXVtLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGNvbG9yOiBzZW1hbnRpY0NvbG9ycy5ib2R5VGV4dCxcbiAgICAgICAgICAgICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgICAgICAgICAgICAgICBib3hTaXppbmc6ICdib3JkZXItYm94JyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIGRpdmlkZXI6IHtcbiAgICAgICAgICAgIGRpc3BsYXk6ICdibG9jaycsXG4gICAgICAgICAgICBoZWlnaHQ6ICcxcHgnLFxuICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiBDb250ZXh0dWFsTWVudUl0ZW1EaXZpZGVyQ29sb3IsXG4gICAgICAgICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgICAgICAgfSxcbiAgICAgICAgcm9vdDogW1xuICAgICAgICAgICAgZ2V0Rm9jdXNTdHlsZSh0aGVtZSksXG4gICAgICAgICAgICBmb250cy5tZWRpdW0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgY29sb3I6IHNlbWFudGljQ29sb3JzLmJvZHlUZXh0LFxuICAgICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogJ3RyYW5zcGFyZW50JyxcbiAgICAgICAgICAgICAgICBib3JkZXI6ICdub25lJyxcbiAgICAgICAgICAgICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgICAgICAgICAgIGhlaWdodDogQ09OVEVYVFVBTF9NRU5VX0lURU1fSEVJR0hULFxuICAgICAgICAgICAgICAgIGxpbmVIZWlnaHQ6IENPTlRFWFRVQUxfTUVOVV9JVEVNX0hFSUdIVCxcbiAgICAgICAgICAgICAgICBkaXNwbGF5OiAnYmxvY2snLFxuICAgICAgICAgICAgICAgIGN1cnNvcjogJ3BvaW50ZXInLFxuICAgICAgICAgICAgICAgIHBhZGRpbmc6ICcwcHggOHB4IDAgNHB4JyxcbiAgICAgICAgICAgICAgICB0ZXh0QWxpZ246ICdsZWZ0JyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIHJvb3REaXNhYmxlZDoge1xuICAgICAgICAgICAgY29sb3I6IHNlbWFudGljQ29sb3JzLmRpc2FibGVkQm9keVRleHQsXG4gICAgICAgICAgICBjdXJzb3I6ICdkZWZhdWx0JyxcbiAgICAgICAgICAgIHBvaW50ZXJFdmVudHM6ICdub25lJyxcbiAgICAgICAgICAgIHNlbGVjdG9yczogKF9hID0ge30sXG4gICAgICAgICAgICAgICAgX2FbSGlnaENvbnRyYXN0U2VsZWN0b3JdID0gX19hc3NpZ24oeyBcbiAgICAgICAgICAgICAgICAgICAgLy8gZW5zdXJlIGRpc2FibGVkIHRleHQgbG9va3MgZGlmZmVyZW50IHRoYW4gZW5hYmxlZFxuICAgICAgICAgICAgICAgICAgICBjb2xvcjogJ0dyYXlUZXh0Jywgb3BhY2l0eTogMSB9LCBnZXRIaWdoQ29udHJhc3ROb0FkanVzdFN0eWxlKCkpLFxuICAgICAgICAgICAgICAgIF9hKSxcbiAgICAgICAgfSxcbiAgICAgICAgcm9vdEhvdmVyZWQ6IHtcbiAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogQ29udGV4dHVhbE1lbnVJdGVtQmFja2dyb3VuZEhvdmVyQ29sb3IsXG4gICAgICAgICAgICBjb2xvcjogQ29udGV4dHVhbE1lbnVJdGVtVGV4dEhvdmVyQ29sb3IsXG4gICAgICAgICAgICBzZWxlY3RvcnM6IHtcbiAgICAgICAgICAgICAgICAnLm1zLUNvbnRleHR1YWxNZW51LWljb24nOiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbG9yOiBwYWxldHRlLnRoZW1lRGFya0FsdCxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICcubXMtQ29udGV4dHVhbE1lbnUtc3VibWVudUljb24nOiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbG9yOiBwYWxldHRlLm5ldXRyYWxQcmltYXJ5LFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgICByb290Rm9jdXNlZDoge1xuICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiBwYWxldHRlLndoaXRlLFxuICAgICAgICB9LFxuICAgICAgICByb290Q2hlY2tlZDoge1xuICAgICAgICAgICAgc2VsZWN0b3JzOiB7XG4gICAgICAgICAgICAgICAgJy5tcy1Db250ZXh0dWFsTWVudS1jaGVja21hcmtJY29uJzoge1xuICAgICAgICAgICAgICAgICAgICBjb2xvcjogcGFsZXR0ZS5uZXV0cmFsUHJpbWFyeSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgICAgcm9vdFByZXNzZWQ6IHtcbiAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogQ29udGV4dHVhbE1lbnVJdGVtQmFja2dyb3VuZFNlbGVjdGVkQ29sb3IsXG4gICAgICAgICAgICBzZWxlY3RvcnM6IHtcbiAgICAgICAgICAgICAgICAnLm1zLUNvbnRleHR1YWxNZW51LWljb24nOiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbG9yOiBwYWxldHRlLnRoZW1lRGFyayxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICcubXMtQ29udGV4dHVhbE1lbnUtc3VibWVudUljb24nOiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbG9yOiBwYWxldHRlLm5ldXRyYWxQcmltYXJ5LFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgICByb290RXhwYW5kZWQ6IHtcbiAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogQ29udGV4dHVhbE1lbnVJdGVtQmFja2dyb3VuZFNlbGVjdGVkQ29sb3IsXG4gICAgICAgICAgICBjb2xvcjogc2VtYW50aWNDb2xvcnMuYm9keVRleHRDaGVja2VkLFxuICAgICAgICAgICAgc2VsZWN0b3JzOiAoX2IgPSB7XG4gICAgICAgICAgICAgICAgICAgICcubXMtQ29udGV4dHVhbE1lbnUtc3VibWVudUljb24nOiAoX2MgPSB7fSxcbiAgICAgICAgICAgICAgICAgICAgICAgIF9jW0hpZ2hDb250cmFzdFNlbGVjdG9yXSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBpY29ucyBpbnNpZGUgb2YgYW5jaG9yIHRhZ3MgYXJlIG5vdCBwcm9wZXJseSBpbmhlcml0aW5nIGNvbG9yIGluIGhpZ2ggY29udHJhc3RcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogJ2luaGVyaXQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIF9jKVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgX2JbSGlnaENvbnRyYXN0U2VsZWN0b3JdID0gX19hc3NpZ24oe30sIGdldEhpZ2hDb250cmFzdE5vQWRqdXN0U3R5bGUoKSksXG4gICAgICAgICAgICAgICAgX2IpLFxuICAgICAgICB9LFxuICAgICAgICBsaW5rQ29udGVudDoge1xuICAgICAgICAgICAgd2hpdGVTcGFjZTogJ25vd3JhcCcsXG4gICAgICAgICAgICBoZWlnaHQ6ICdpbmhlcml0JyxcbiAgICAgICAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgICAgICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgICAgICAgICAgbWF4V2lkdGg6ICcxMDAlJyxcbiAgICAgICAgfSxcbiAgICAgICAgYW5jaG9yTGluazoge1xuICAgICAgICAgICAgcGFkZGluZzogJzBweCA4cHggMCA0cHgnLFxuICAgICAgICAgICAgdGV4dFJlbmRlcmluZzogJ2F1dG8nLFxuICAgICAgICAgICAgY29sb3I6ICdpbmhlcml0JyxcbiAgICAgICAgICAgIGxldHRlclNwYWNpbmc6ICdub3JtYWwnLFxuICAgICAgICAgICAgd29yZFNwYWNpbmc6ICdub3JtYWwnLFxuICAgICAgICAgICAgdGV4dFRyYW5zZm9ybTogJ25vbmUnLFxuICAgICAgICAgICAgdGV4dEluZGVudDogJzBweCcsXG4gICAgICAgICAgICB0ZXh0U2hhZG93OiAnbm9uZScsXG4gICAgICAgICAgICB0ZXh0RGVjb3JhdGlvbjogJ25vbmUnLFxuICAgICAgICAgICAgYm94U2l6aW5nOiAnYm9yZGVyLWJveCcsXG4gICAgICAgIH0sXG4gICAgICAgIGxhYmVsOiB7XG4gICAgICAgICAgICBtYXJnaW46ICcwIDRweCcsXG4gICAgICAgICAgICB2ZXJ0aWNhbEFsaWduOiAnbWlkZGxlJyxcbiAgICAgICAgICAgIGRpc3BsYXk6ICdpbmxpbmUtYmxvY2snLFxuICAgICAgICAgICAgZmxleEdyb3c6ICcxJyxcbiAgICAgICAgICAgIHRleHRPdmVyZmxvdzogJ2VsbGlwc2lzJyxcbiAgICAgICAgICAgIHdoaXRlU3BhY2U6ICdub3dyYXAnLFxuICAgICAgICB9LFxuICAgICAgICBzZWNvbmRhcnlUZXh0OiB7XG4gICAgICAgICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5uZXV0cmFsU2Vjb25kYXJ5LFxuICAgICAgICAgICAgcGFkZGluZ0xlZnQ6ICcyMHB4JyxcbiAgICAgICAgICAgIHRleHRBbGlnbjogJ3JpZ2h0JyxcbiAgICAgICAgfSxcbiAgICAgICAgaWNvbjoge1xuICAgICAgICAgICAgZGlzcGxheTogJ2lubGluZS1ibG9jaycsXG4gICAgICAgICAgICBtaW5IZWlnaHQ6ICcxcHgnLFxuICAgICAgICAgICAgbWF4SGVpZ2h0OiBDT05URVhUVUFMX01FTlVfSVRFTV9IRUlHSFQsXG4gICAgICAgICAgICBmb250U2l6ZTogSWNvbkZvbnRTaXplcy5tZWRpdW0sXG4gICAgICAgICAgICB3aWR0aDogSWNvbkZvbnRTaXplcy5tZWRpdW0sXG4gICAgICAgICAgICBtYXJnaW46ICcwIDRweCcsXG4gICAgICAgICAgICB2ZXJ0aWNhbEFsaWduOiAnbWlkZGxlJyxcbiAgICAgICAgICAgIGZsZXhTaHJpbms6ICcwJyxcbiAgICAgICAgICAgIHNlbGVjdG9yczogKF9kID0ge30sXG4gICAgICAgICAgICAgICAgX2RbTWVkaXVtU2NyZWVuU2VsZWN0b3JdID0ge1xuICAgICAgICAgICAgICAgICAgICBmb250U2l6ZTogSWNvbkZvbnRTaXplcy5sYXJnZSxcbiAgICAgICAgICAgICAgICAgICAgd2lkdGg6IEljb25Gb250U2l6ZXMubGFyZ2UsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBfZCksXG4gICAgICAgIH0sXG4gICAgICAgIGljb25Db2xvcjoge1xuICAgICAgICAgICAgY29sb3I6IHNlbWFudGljQ29sb3JzLm1lbnVJY29uLFxuICAgICAgICB9LFxuICAgICAgICBpY29uRGlzYWJsZWQ6IHtcbiAgICAgICAgICAgIGNvbG9yOiBzZW1hbnRpY0NvbG9ycy5kaXNhYmxlZEJvZHlUZXh0LFxuICAgICAgICB9LFxuICAgICAgICBjaGVja21hcmtJY29uOiB7XG4gICAgICAgICAgICBjb2xvcjogc2VtYW50aWNDb2xvcnMuYm9keVN1YnRleHQsXG4gICAgICAgIH0sXG4gICAgICAgIHN1Yk1lbnVJY29uOiB7XG4gICAgICAgICAgICBoZWlnaHQ6IENPTlRFWFRVQUxfTUVOVV9JVEVNX0hFSUdIVCxcbiAgICAgICAgICAgIGxpbmVIZWlnaHQ6IENPTlRFWFRVQUxfTUVOVV9JVEVNX0hFSUdIVCxcbiAgICAgICAgICAgIGNvbG9yOiBwYWxldHRlLm5ldXRyYWxTZWNvbmRhcnksXG4gICAgICAgICAgICB0ZXh0QWxpZ246ICdjZW50ZXInLFxuICAgICAgICAgICAgZGlzcGxheTogJ2lubGluZS1ibG9jaycsXG4gICAgICAgICAgICB2ZXJ0aWNhbEFsaWduOiAnbWlkZGxlJyxcbiAgICAgICAgICAgIGZsZXhTaHJpbms6ICcwJyxcbiAgICAgICAgICAgIGZvbnRTaXplOiBJY29uRm9udFNpemVzLnNtYWxsLFxuICAgICAgICAgICAgc2VsZWN0b3JzOiAoX2UgPSB7XG4gICAgICAgICAgICAgICAgICAgICc6aG92ZXInOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogcGFsZXR0ZS5uZXV0cmFsUHJpbWFyeSxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgJzphY3RpdmUnOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogcGFsZXR0ZS5uZXV0cmFsUHJpbWFyeSxcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgX2VbTWVkaXVtU2NyZWVuU2VsZWN0b3JdID0ge1xuICAgICAgICAgICAgICAgICAgICBmb250U2l6ZTogSWNvbkZvbnRTaXplcy5tZWRpdW0sIC8vIDE2cHhcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIF9lKSxcbiAgICAgICAgfSxcbiAgICAgICAgc3BsaXRCdXR0b25GbGV4Q29udGFpbmVyOiBbXG4gICAgICAgICAgICBnZXRGb2N1c1N0eWxlKHRoZW1lKSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiBDT05URVhUVUFMX01FTlVfSVRFTV9IRUlHSFQsXG4gICAgICAgICAgICAgICAgZmxleFdyYXA6ICdub3dyYXAnLFxuICAgICAgICAgICAgICAgIGp1c3RpZnlDb250ZW50OiAnY2VudGVyJyxcbiAgICAgICAgICAgICAgICBhbGlnbkl0ZW1zOiAnZmxleC1zdGFydCcsXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgIH07XG4gICAgcmV0dXJuIGNvbmNhdFN0eWxlU2V0cyhtZW51SXRlbVN0eWxlcyk7XG59KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUNvbnRleHR1YWxNZW51LmNuc3R5bGVzLmpzLm1hcCIsImltcG9ydCB7IGdldERpdmlkZXJDbGFzc05hbWVzIH0gZnJvbSAnLi4vRGl2aWRlci9WZXJ0aWNhbERpdmlkZXIuY2xhc3NOYW1lcyc7XG5pbXBvcnQgeyBnZXRNZW51SXRlbVN0eWxlcyB9IGZyb20gJy4vQ29udGV4dHVhbE1lbnUuY25zdHlsZXMnO1xuaW1wb3J0IHsgbWVyZ2VTdHlsZVNldHMsIGdldEdsb2JhbENsYXNzTmFtZXMsIGdldFNjcmVlblNlbGVjdG9yLCBTY3JlZW5XaWR0aE1heE1lZGl1bSwgaGlkZGVuQ29udGVudFN0eWxlLCB9IGZyb20gJy4uLy4uL1N0eWxpbmcnO1xuaW1wb3J0IHsgbWVtb2l6ZUZ1bmN0aW9uLCBJc0ZvY3VzVmlzaWJsZUNsYXNzTmFtZSB9IGZyb20gJy4uLy4uL1V0aWxpdGllcyc7XG52YXIgQ09OVEVYVFVBTF9TUExJVF9NRU5VX01JTldJRFRIID0gJzI4cHgnO1xudmFyIE1lZGl1bVNjcmVlblNlbGVjdG9yID0gZ2V0U2NyZWVuU2VsZWN0b3IoMCwgU2NyZWVuV2lkdGhNYXhNZWRpdW0pO1xuZXhwb3J0IHZhciBnZXRTcGxpdEJ1dHRvblZlcnRpY2FsRGl2aWRlckNsYXNzTmFtZXMgPSBtZW1vaXplRnVuY3Rpb24oXG4vKiBlc2xpbnQtZGlzYWJsZSBkZXByZWNhdGlvbi9kZXByZWNhdGlvbiAqL1xuZnVuY3Rpb24gKHRoZW1lKSB7XG4gICAgdmFyIF9hO1xuICAgIHJldHVybiBtZXJnZVN0eWxlU2V0cyhnZXREaXZpZGVyQ2xhc3NOYW1lcyh0aGVtZSksIHtcbiAgICAgICAgLyogZXNsaW50LWVuYWJsZSBkZXByZWNhdGlvbi9kZXByZWNhdGlvbiAqL1xuICAgICAgICB3cmFwcGVyOiB7XG4gICAgICAgICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgICAgICAgIHJpZ2h0OiAyOCxcbiAgICAgICAgICAgIHNlbGVjdG9yczogKF9hID0ge30sXG4gICAgICAgICAgICAgICAgX2FbTWVkaXVtU2NyZWVuU2VsZWN0b3JdID0ge1xuICAgICAgICAgICAgICAgICAgICByaWdodDogMzIsIC8vIGZvbnRTaXplIG9mIHRoZSBpY29uIGluY3JlYXNlZCBmcm9tIDEycHggdG8gMTZweFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgX2EpLFxuICAgICAgICB9LFxuICAgICAgICBkaXZpZGVyOiB7XG4gICAgICAgICAgICBoZWlnaHQ6IDE2LFxuICAgICAgICAgICAgd2lkdGg6IDEsXG4gICAgICAgIH0sXG4gICAgfSk7XG59KTtcbnZhciBHbG9iYWxDbGFzc05hbWVzID0ge1xuICAgIGl0ZW06ICdtcy1Db250ZXh0dWFsTWVudS1pdGVtJyxcbiAgICBkaXZpZGVyOiAnbXMtQ29udGV4dHVhbE1lbnUtZGl2aWRlcicsXG4gICAgcm9vdDogJ21zLUNvbnRleHR1YWxNZW51LWxpbmsnLFxuICAgIGlzQ2hlY2tlZDogJ2lzLWNoZWNrZWQnLFxuICAgIGlzRXhwYW5kZWQ6ICdpcy1leHBhbmRlZCcsXG4gICAgaXNEaXNhYmxlZDogJ2lzLWRpc2FibGVkJyxcbiAgICBsaW5rQ29udGVudDogJ21zLUNvbnRleHR1YWxNZW51LWxpbmtDb250ZW50JyxcbiAgICBsaW5rQ29udGVudE1lbnU6ICdtcy1Db250ZXh0dWFsTWVudS1saW5rQ29udGVudCcsXG4gICAgaWNvbjogJ21zLUNvbnRleHR1YWxNZW51LWljb24nLFxuICAgIGljb25Db2xvcjogJ21zLUNvbnRleHR1YWxNZW51LWljb25Db2xvcicsXG4gICAgY2hlY2ttYXJrSWNvbjogJ21zLUNvbnRleHR1YWxNZW51LWNoZWNrbWFya0ljb24nLFxuICAgIHN1Yk1lbnVJY29uOiAnbXMtQ29udGV4dHVhbE1lbnUtc3VibWVudUljb24nLFxuICAgIGxhYmVsOiAnbXMtQ29udGV4dHVhbE1lbnUtaXRlbVRleHQnLFxuICAgIHNlY29uZGFyeVRleHQ6ICdtcy1Db250ZXh0dWFsTWVudS1zZWNvbmRhcnlUZXh0JyxcbiAgICBzcGxpdE1lbnU6ICdtcy1Db250ZXh0dWFsTWVudS1zcGxpdE1lbnUnLFxuICAgIHNjcmVlblJlYWRlclRleHQ6ICdtcy1Db250ZXh0dWFsTWVudS1zY3JlZW5SZWFkZXJUZXh0Jyxcbn07XG4vKipcbiAqIEBkZXByZWNhdGVkIFdpbGwgYmUgcmVtb3ZlZCBpbiBcXD49IDcuMC5cbiAqIFRoaXMgaXMgYSBwYWNrYWdlLWludGVybmFsIG1ldGhvZCB0aGF0IGhhcyBiZWVuIGRlcGVuZGVkIG9uLlxuICogSXQgaXMgYmVpbmcga2VwdCBpbiB0aGlzIGZvcm0gZm9yIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5LlxuICogQGludGVybmFsXG4gKi9cbi8vIFRPRE86IEF1ZGl0IHBlcmYuIGltcGFjdCBvZiBhbmQgcG90ZW50aWFsbHkgcmVtb3ZlIG1lbW9pemVGdW5jdGlvbi5cbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9taWNyb3NvZnQvZmx1ZW50dWkvaXNzdWVzLzU1MzRcbmV4cG9ydCB2YXIgZ2V0SXRlbUNsYXNzTmFtZXMgPSBtZW1vaXplRnVuY3Rpb24oZnVuY3Rpb24gKHRoZW1lLCBkaXNhYmxlZCwgZXhwYW5kZWQsIGNoZWNrZWQsIGlzQW5jaG9yTGluaywga25vd25JY29uLCBpdGVtQ2xhc3NOYW1lLCBkaXZpZGVyQ2xhc3NOYW1lLCBpY29uQ2xhc3NOYW1lLCBzdWJNZW51Q2xhc3NOYW1lLCBwcmltYXJ5RGlzYWJsZWQsIGNsYXNzTmFtZSkge1xuICAgIHZhciBfYSwgX2IsIF9jLCBfZDtcbiAgICB2YXIgc3R5bGVzID0gZ2V0TWVudUl0ZW1TdHlsZXModGhlbWUpO1xuICAgIHZhciBjbGFzc05hbWVzID0gZ2V0R2xvYmFsQ2xhc3NOYW1lcyhHbG9iYWxDbGFzc05hbWVzLCB0aGVtZSk7XG4gICAgcmV0dXJuIG1lcmdlU3R5bGVTZXRzKHtcbiAgICAgICAgaXRlbTogW2NsYXNzTmFtZXMuaXRlbSwgc3R5bGVzLml0ZW0sIGl0ZW1DbGFzc05hbWVdLFxuICAgICAgICBkaXZpZGVyOiBbY2xhc3NOYW1lcy5kaXZpZGVyLCBzdHlsZXMuZGl2aWRlciwgZGl2aWRlckNsYXNzTmFtZV0sXG4gICAgICAgIHJvb3Q6IFtcbiAgICAgICAgICAgIGNsYXNzTmFtZXMucm9vdCxcbiAgICAgICAgICAgIHN0eWxlcy5yb290LFxuICAgICAgICAgICAgY2hlY2tlZCAmJiBbY2xhc3NOYW1lcy5pc0NoZWNrZWQsIHN0eWxlcy5yb290Q2hlY2tlZF0sXG4gICAgICAgICAgICBpc0FuY2hvckxpbmsgJiYgc3R5bGVzLmFuY2hvckxpbmssXG4gICAgICAgICAgICBleHBhbmRlZCAmJiBbY2xhc3NOYW1lcy5pc0V4cGFuZGVkLCBzdHlsZXMucm9vdEV4cGFuZGVkXSxcbiAgICAgICAgICAgIGRpc2FibGVkICYmIFtjbGFzc05hbWVzLmlzRGlzYWJsZWQsIHN0eWxlcy5yb290RGlzYWJsZWRdLFxuICAgICAgICAgICAgIWRpc2FibGVkICYmXG4gICAgICAgICAgICAgICAgIWV4cGFuZGVkICYmIFtcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHNlbGVjdG9yczogKF9hID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICc6aG92ZXInOiBzdHlsZXMucm9vdEhvdmVyZWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJzphY3RpdmUnOiBzdHlsZXMucm9vdFByZXNzZWRcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBfYVtcIi5cIiArIElzRm9jdXNWaXNpYmxlQ2xhc3NOYW1lICsgXCIgJjpmb2N1cywgLlwiICsgSXNGb2N1c1Zpc2libGVDbGFzc05hbWUgKyBcIiAmOmZvY3VzOmhvdmVyXCJdID0gc3R5bGVzLnJvb3RGb2N1c2VkLFxuICAgICAgICAgICAgICAgICAgICAgICAgX2FbXCIuXCIgKyBJc0ZvY3VzVmlzaWJsZUNsYXNzTmFtZSArIFwiICY6aG92ZXJcIl0gPSB7IGJhY2tncm91bmQ6ICdpbmhlcml0OycgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hKSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIGNsYXNzTmFtZSxcbiAgICAgICAgXSxcbiAgICAgICAgc3BsaXRQcmltYXJ5OiBbXG4gICAgICAgICAgICBzdHlsZXMucm9vdCxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB3aWR0aDogXCJjYWxjKDEwMCUgLSBcIiArIENPTlRFWFRVQUxfU1BMSVRfTUVOVV9NSU5XSURUSCArIFwiKVwiLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNoZWNrZWQgJiYgWydpcy1jaGVja2VkJywgc3R5bGVzLnJvb3RDaGVja2VkXSxcbiAgICAgICAgICAgIChkaXNhYmxlZCB8fCBwcmltYXJ5RGlzYWJsZWQpICYmIFsnaXMtZGlzYWJsZWQnLCBzdHlsZXMucm9vdERpc2FibGVkXSxcbiAgICAgICAgICAgICEoZGlzYWJsZWQgfHwgcHJpbWFyeURpc2FibGVkKSAmJlxuICAgICAgICAgICAgICAgICFjaGVja2VkICYmIFtcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHNlbGVjdG9yczogKF9iID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICc6aG92ZXInOiBzdHlsZXMucm9vdEhvdmVyZWRcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyB3aGVuIGhvdmVyaW5nIG92ZXIgdGhlIHNwbGl0UHJpbWFyeSBhbHNvIGFmZmVjdCB0aGUgc3BsaXRNZW51XG4gICAgICAgICAgICAgICAgICAgICAgICBfYltcIjpob3ZlciB+IC5cIiArIGNsYXNzTmFtZXMuc3BsaXRNZW51XSA9IHN0eWxlcy5yb290SG92ZXJlZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIF9iWyc6YWN0aXZlJ10gPSBzdHlsZXMucm9vdFByZXNzZWQsXG4gICAgICAgICAgICAgICAgICAgICAgICBfYltcIi5cIiArIElzRm9jdXNWaXNpYmxlQ2xhc3NOYW1lICsgXCIgJjpmb2N1cywgLlwiICsgSXNGb2N1c1Zpc2libGVDbGFzc05hbWUgKyBcIiAmOmZvY3VzOmhvdmVyXCJdID0gc3R5bGVzLnJvb3RGb2N1c2VkLFxuICAgICAgICAgICAgICAgICAgICAgICAgX2JbXCIuXCIgKyBJc0ZvY3VzVmlzaWJsZUNsYXNzTmFtZSArIFwiICY6aG92ZXJcIl0gPSB7IGJhY2tncm91bmQ6ICdpbmhlcml0OycgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIF9iKSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgXSxcbiAgICAgICAgXSxcbiAgICAgICAgc3BsaXRNZW51OiBbXG4gICAgICAgICAgICBjbGFzc05hbWVzLnNwbGl0TWVudSxcbiAgICAgICAgICAgIHN0eWxlcy5yb290LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGZsZXhCYXNpczogJzAnLFxuICAgICAgICAgICAgICAgIHBhZGRpbmc6ICcwIDhweCcsXG4gICAgICAgICAgICAgICAgbWluV2lkdGg6IENPTlRFWFRVQUxfU1BMSVRfTUVOVV9NSU5XSURUSCxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBleHBhbmRlZCAmJiBbJ2lzLWV4cGFuZGVkJywgc3R5bGVzLnJvb3RFeHBhbmRlZF0sXG4gICAgICAgICAgICBkaXNhYmxlZCAmJiBbJ2lzLWRpc2FibGVkJywgc3R5bGVzLnJvb3REaXNhYmxlZF0sXG4gICAgICAgICAgICAhZGlzYWJsZWQgJiZcbiAgICAgICAgICAgICAgICAhZXhwYW5kZWQgJiYgW1xuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgc2VsZWN0b3JzOiAoX2MgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJzpob3Zlcic6IHN0eWxlcy5yb290SG92ZXJlZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnOmFjdGl2ZSc6IHN0eWxlcy5yb290UHJlc3NlZFxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIF9jW1wiLlwiICsgSXNGb2N1c1Zpc2libGVDbGFzc05hbWUgKyBcIiAmOmZvY3VzLCAuXCIgKyBJc0ZvY3VzVmlzaWJsZUNsYXNzTmFtZSArIFwiICY6Zm9jdXM6aG92ZXJcIl0gPSBzdHlsZXMucm9vdEZvY3VzZWQsXG4gICAgICAgICAgICAgICAgICAgICAgICBfY1tcIi5cIiArIElzRm9jdXNWaXNpYmxlQ2xhc3NOYW1lICsgXCIgJjpob3ZlclwiXSA9IHsgYmFja2dyb3VuZDogJ2luaGVyaXQ7JyB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgX2MpLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBdLFxuICAgICAgICBdLFxuICAgICAgICBhbmNob3JMaW5rOiBzdHlsZXMuYW5jaG9yTGluayxcbiAgICAgICAgbGlua0NvbnRlbnQ6IFtjbGFzc05hbWVzLmxpbmtDb250ZW50LCBzdHlsZXMubGlua0NvbnRlbnRdLFxuICAgICAgICBsaW5rQ29udGVudE1lbnU6IFtcbiAgICAgICAgICAgIGNsYXNzTmFtZXMubGlua0NvbnRlbnRNZW51LFxuICAgICAgICAgICAgc3R5bGVzLmxpbmtDb250ZW50LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGp1c3RpZnlDb250ZW50OiAnY2VudGVyJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIGljb246IFtcbiAgICAgICAgICAgIGNsYXNzTmFtZXMuaWNvbixcbiAgICAgICAgICAgIGtub3duSWNvbiAmJiBzdHlsZXMuaWNvbkNvbG9yLFxuICAgICAgICAgICAgc3R5bGVzLmljb24sXG4gICAgICAgICAgICBpY29uQ2xhc3NOYW1lLFxuICAgICAgICAgICAgZGlzYWJsZWQgJiYgW2NsYXNzTmFtZXMuaXNEaXNhYmxlZCwgc3R5bGVzLmljb25EaXNhYmxlZF0sXG4gICAgICAgIF0sXG4gICAgICAgIGljb25Db2xvcjogc3R5bGVzLmljb25Db2xvcixcbiAgICAgICAgY2hlY2ttYXJrSWNvbjogW2NsYXNzTmFtZXMuY2hlY2ttYXJrSWNvbiwga25vd25JY29uICYmIHN0eWxlcy5jaGVja21hcmtJY29uLCBzdHlsZXMuaWNvbiwgaWNvbkNsYXNzTmFtZV0sXG4gICAgICAgIHN1Yk1lbnVJY29uOiBbXG4gICAgICAgICAgICBjbGFzc05hbWVzLnN1Yk1lbnVJY29uLFxuICAgICAgICAgICAgc3R5bGVzLnN1Yk1lbnVJY29uLFxuICAgICAgICAgICAgc3ViTWVudUNsYXNzTmFtZSxcbiAgICAgICAgICAgIGV4cGFuZGVkICYmIHsgY29sb3I6IHRoZW1lLnBhbGV0dGUubmV1dHJhbFByaW1hcnkgfSxcbiAgICAgICAgICAgIGRpc2FibGVkICYmIFtzdHlsZXMuaWNvbkRpc2FibGVkXSxcbiAgICAgICAgXSxcbiAgICAgICAgbGFiZWw6IFtjbGFzc05hbWVzLmxhYmVsLCBzdHlsZXMubGFiZWxdLFxuICAgICAgICBzZWNvbmRhcnlUZXh0OiBbY2xhc3NOYW1lcy5zZWNvbmRhcnlUZXh0LCBzdHlsZXMuc2Vjb25kYXJ5VGV4dF0sXG4gICAgICAgIHNwbGl0Q29udGFpbmVyOiBbXG4gICAgICAgICAgICBzdHlsZXMuc3BsaXRCdXR0b25GbGV4Q29udGFpbmVyLFxuICAgICAgICAgICAgIWRpc2FibGVkICYmXG4gICAgICAgICAgICAgICAgIWNoZWNrZWQgJiYgW1xuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgc2VsZWN0b3JzOiAoX2QgPSB7fSxcbiAgICAgICAgICAgICAgICAgICAgICAgIF9kW1wiLlwiICsgSXNGb2N1c1Zpc2libGVDbGFzc05hbWUgKyBcIiAmOmZvY3VzLCAuXCIgKyBJc0ZvY3VzVmlzaWJsZUNsYXNzTmFtZSArIFwiICY6Zm9jdXM6aG92ZXJcIl0gPSBzdHlsZXMucm9vdEZvY3VzZWQsXG4gICAgICAgICAgICAgICAgICAgICAgICBfZCksXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF0sXG4gICAgICAgIF0sXG4gICAgICAgIHNjcmVlblJlYWRlclRleHQ6IFtcbiAgICAgICAgICAgIGNsYXNzTmFtZXMuc2NyZWVuUmVhZGVyVGV4dCxcbiAgICAgICAgICAgIHN0eWxlcy5zY3JlZW5SZWFkZXJUZXh0LFxuICAgICAgICAgICAgaGlkZGVuQ29udGVudFN0eWxlLFxuICAgICAgICAgICAgeyB2aXNpYmlsaXR5OiAnaGlkZGVuJyB9LFxuICAgICAgICBdLFxuICAgIH0pO1xufSk7XG4vKipcbiAqIFdyYXBwZXIgZnVuY3Rpb24gZm9yIGdlbmVyYXRpbmcgQ29udGV4dHVhbE1lbnVJdGVtIGNsYXNzTmFtZXMgd2hpY2ggYWRoZXJlcyB0b1xuICogdGhlIGdldFN0eWxlcyBBUEksIGJ1dCBpbnZva2VzIG1lbW9pemVkIGNsYXNzTmFtZSBnZW5lcmF0b3IgZnVuY3Rpb24gd2l0aFxuICogcHJpbWl0aXZlIHZhbHVlcy5cbiAqXG4gKiBAcGFyYW0gcHJvcHMgdGhlIENvbnRleHR1YWxNZW51SXRlbSBzdHlsZSBwcm9wcyB1c2VkIHRvIGdlbmVyYXRlIGl0cyBzdHlsZXMuXG4gKi9cbmV4cG9ydCB2YXIgZ2V0SXRlbVN0eWxlcyA9IGZ1bmN0aW9uIChwcm9wcykge1xuICAgIHZhciB0aGVtZSA9IHByb3BzLnRoZW1lLCBkaXNhYmxlZCA9IHByb3BzLmRpc2FibGVkLCBleHBhbmRlZCA9IHByb3BzLmV4cGFuZGVkLCBjaGVja2VkID0gcHJvcHMuY2hlY2tlZCwgaXNBbmNob3JMaW5rID0gcHJvcHMuaXNBbmNob3JMaW5rLCBrbm93bkljb24gPSBwcm9wcy5rbm93bkljb24sIGl0ZW1DbGFzc05hbWUgPSBwcm9wcy5pdGVtQ2xhc3NOYW1lLCBkaXZpZGVyQ2xhc3NOYW1lID0gcHJvcHMuZGl2aWRlckNsYXNzTmFtZSwgaWNvbkNsYXNzTmFtZSA9IHByb3BzLmljb25DbGFzc05hbWUsIHN1Yk1lbnVDbGFzc05hbWUgPSBwcm9wcy5zdWJNZW51Q2xhc3NOYW1lLCBwcmltYXJ5RGlzYWJsZWQgPSBwcm9wcy5wcmltYXJ5RGlzYWJsZWQsIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZTtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZGVwcmVjYXRpb24vZGVwcmVjYXRpb25cbiAgICByZXR1cm4gZ2V0SXRlbUNsYXNzTmFtZXModGhlbWUsIGRpc2FibGVkLCBleHBhbmRlZCwgY2hlY2tlZCwgaXNBbmNob3JMaW5rLCBrbm93bkljb24sIGl0ZW1DbGFzc05hbWUsIGRpdmlkZXJDbGFzc05hbWUsIGljb25DbGFzc05hbWUsIHN1Yk1lbnVDbGFzc05hbWUsIHByaW1hcnlEaXNhYmxlZCwgY2xhc3NOYW1lKTtcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1Db250ZXh0dWFsTWVudS5jbGFzc05hbWVzLmpzLm1hcCIsImltcG9ydCB7IHN0eWxlZCB9IGZyb20gJy4uLy4uL1V0aWxpdGllcyc7XG5pbXBvcnQgeyBDb250ZXh0dWFsTWVudUl0ZW1CYXNlIH0gZnJvbSAnLi9Db250ZXh0dWFsTWVudUl0ZW0uYmFzZSc7XG5pbXBvcnQgeyBnZXRJdGVtU3R5bGVzIH0gZnJvbSAnLi9Db250ZXh0dWFsTWVudS5jbGFzc05hbWVzJztcbi8qKlxuICogQ29udGV4dHVhbE1lbnVJdGVtIGRlc2NyaXB0aW9uXG4gKi9cbmV4cG9ydCB2YXIgQ29udGV4dHVhbE1lbnVJdGVtID0gc3R5bGVkKENvbnRleHR1YWxNZW51SXRlbUJhc2UsIGdldEl0ZW1TdHlsZXMsIHVuZGVmaW5lZCwgeyBzY29wZTogJ0NvbnRleHR1YWxNZW51SXRlbScgfSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1Db250ZXh0dWFsTWVudUl0ZW0uanMubWFwIiwiaW1wb3J0IHsgX19leHRlbmRzIH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBpbml0aWFsaXplQ29tcG9uZW50UmVmLCBzaGFsbG93Q29tcGFyZSB9IGZyb20gJy4uLy4uLy4uL1V0aWxpdGllcyc7XG52YXIgQ29udGV4dHVhbE1lbnVJdGVtV3JhcHBlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoQ29udGV4dHVhbE1lbnVJdGVtV3JhcHBlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBDb250ZXh0dWFsTWVudUl0ZW1XcmFwcGVyKHByb3BzKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIHByb3BzKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5fb25JdGVtTW91c2VFbnRlciA9IGZ1bmN0aW9uIChldikge1xuICAgICAgICAgICAgdmFyIF9hID0gX3RoaXMucHJvcHMsIGl0ZW0gPSBfYS5pdGVtLCBvbkl0ZW1Nb3VzZUVudGVyID0gX2Eub25JdGVtTW91c2VFbnRlcjtcbiAgICAgICAgICAgIGlmIChvbkl0ZW1Nb3VzZUVudGVyKSB7XG4gICAgICAgICAgICAgICAgb25JdGVtTW91c2VFbnRlcihpdGVtLCBldiwgZXYuY3VycmVudFRhcmdldCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIF90aGlzLl9vbkl0ZW1DbGljayA9IGZ1bmN0aW9uIChldikge1xuICAgICAgICAgICAgdmFyIF9hID0gX3RoaXMucHJvcHMsIGl0ZW0gPSBfYS5pdGVtLCBvbkl0ZW1DbGlja0Jhc2UgPSBfYS5vbkl0ZW1DbGlja0Jhc2U7XG4gICAgICAgICAgICBpZiAob25JdGVtQ2xpY2tCYXNlKSB7XG4gICAgICAgICAgICAgICAgb25JdGVtQ2xpY2tCYXNlKGl0ZW0sIGV2LCBldi5jdXJyZW50VGFyZ2V0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgX3RoaXMuX29uSXRlbU1vdXNlTGVhdmUgPSBmdW5jdGlvbiAoZXYpIHtcbiAgICAgICAgICAgIHZhciBfYSA9IF90aGlzLnByb3BzLCBpdGVtID0gX2EuaXRlbSwgb25JdGVtTW91c2VMZWF2ZSA9IF9hLm9uSXRlbU1vdXNlTGVhdmU7XG4gICAgICAgICAgICBpZiAob25JdGVtTW91c2VMZWF2ZSkge1xuICAgICAgICAgICAgICAgIG9uSXRlbU1vdXNlTGVhdmUoaXRlbSwgZXYpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBfdGhpcy5fb25JdGVtS2V5RG93biA9IGZ1bmN0aW9uIChldikge1xuICAgICAgICAgICAgdmFyIF9hID0gX3RoaXMucHJvcHMsIGl0ZW0gPSBfYS5pdGVtLCBvbkl0ZW1LZXlEb3duID0gX2Eub25JdGVtS2V5RG93bjtcbiAgICAgICAgICAgIGlmIChvbkl0ZW1LZXlEb3duKSB7XG4gICAgICAgICAgICAgICAgb25JdGVtS2V5RG93bihpdGVtLCBldik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIF90aGlzLl9vbkl0ZW1Nb3VzZU1vdmUgPSBmdW5jdGlvbiAoZXYpIHtcbiAgICAgICAgICAgIHZhciBfYSA9IF90aGlzLnByb3BzLCBpdGVtID0gX2EuaXRlbSwgb25JdGVtTW91c2VNb3ZlID0gX2Eub25JdGVtTW91c2VNb3ZlO1xuICAgICAgICAgICAgaWYgKG9uSXRlbU1vdXNlTW92ZSkge1xuICAgICAgICAgICAgICAgIG9uSXRlbU1vdXNlTW92ZShpdGVtLCBldiwgZXYuY3VycmVudFRhcmdldCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIF90aGlzLl9nZXRTdWJtZW51VGFyZ2V0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgfTtcbiAgICAgICAgaW5pdGlhbGl6ZUNvbXBvbmVudFJlZihfdGhpcyk7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgQ29udGV4dHVhbE1lbnVJdGVtV3JhcHBlci5wcm90b3R5cGUuc2hvdWxkQ29tcG9uZW50VXBkYXRlID0gZnVuY3Rpb24gKG5ld1Byb3BzKSB7XG4gICAgICAgIHJldHVybiAhc2hhbGxvd0NvbXBhcmUobmV3UHJvcHMsIHRoaXMucHJvcHMpO1xuICAgIH07XG4gICAgcmV0dXJuIENvbnRleHR1YWxNZW51SXRlbVdyYXBwZXI7XG59KFJlYWN0LkNvbXBvbmVudCkpO1xuZXhwb3J0IHsgQ29udGV4dHVhbE1lbnVJdGVtV3JhcHBlciB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Q29udGV4dHVhbE1lbnVJdGVtV3JhcHBlci5qcy5tYXAiLCJpbXBvcnQgeyB1c2VSZWYsIHVzZUVmZmVjdCB9IGZyb20gJ3JlYWN0Jztcbi8qKlxuICogSG9vayBrZWVwaW5nIHRyYWNrIG9mIGEgZ2l2ZW4gdmFsdWUgZnJvbSBhIHByZXZpb3VzIGV4ZWN1dGlvbiBvZiB0aGUgY29tcG9uZW50IHRoZSBIb29rIGlzIHVzZWQgaW4uXG4gKlxuICogU2VlIFtSZWFjdCBIb29rcyBGQVFdKGh0dHBzOi8vcmVhY3Rqcy5vcmcvZG9jcy9ob29rcy1mYXEuaHRtbCNob3ctdG8tZ2V0LXRoZS1wcmV2aW91cy1wcm9wcy1vci1zdGF0ZSlcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVzZVByZXZpb3VzKHZhbHVlKSB7XG4gICAgdmFyIHJlZiA9IHVzZVJlZigpO1xuICAgIHVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJlZi5jdXJyZW50ID0gdmFsdWU7XG4gICAgfSk7XG4gICAgcmV0dXJuIHJlZi5jdXJyZW50O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXNlUHJldmlvdXMuanMubWFwIiwiaW1wb3J0IHsgX19hc3NpZ24sIF9fc3ByZWFkQXJyYXkgfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IEV2ZW50R3JvdXAsIGdldElkIH0gZnJvbSAnLi4vLi4vVXRpbGl0aWVzJztcbmltcG9ydCB7IEtleXRpcEV2ZW50cyB9IGZyb20gJy4uLy4uL3V0aWxpdGllcy9rZXl0aXBzL0tleXRpcENvbnN0YW50cyc7XG4vKipcbiAqIFRoaXMgY2xhc3MgaXMgcmVzcG9uc2libGUgZm9yIGhhbmRsaW5nIHJlZ2lzdGVyaW5nLCB1cGRhdGluZywgYW5kIHVucmVnaXN0ZXJpbmcgb2Yga2V5dGlwc1xuICovXG52YXIgS2V5dGlwTWFuYWdlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBLZXl0aXBNYW5hZ2VyKCkge1xuICAgICAgICB0aGlzLmtleXRpcHMgPSB7fTtcbiAgICAgICAgdGhpcy5wZXJzaXN0ZWRLZXl0aXBzID0ge307XG4gICAgICAgIHRoaXMuc2VxdWVuY2VNYXBwaW5nID0ge307XG4gICAgICAgIC8vIFRoaXMgaXMgKGFuZCBzaG91bGQgYmUpIHVwZGF0ZWQgYW5kIGtlcHQgaW4gc3luY1xuICAgICAgICAvLyB3aXRoIHRoZSBpbktleXRpcE1vZGUgaW4gS2V5dGlwTGF5ZXIuXG4gICAgICAgIHRoaXMuaW5LZXl0aXBNb2RlID0gZmFsc2U7XG4gICAgICAgIC8vIEJvb2xlYW4gdGhhdCBnZXRzIGNoZWNrZWQgYmVmb3JlIGVudGVyaW5nIGtleXRpcCBtb2RlIGJ5IHRoZSBLZXl0aXBMYXllclxuICAgICAgICAvLyBVc2VkIGZvciBhbiBvdmVycmlkZSBpbiBzcGVjaWFsIGNhc2VzIChlLmcuIERpc2FibGUgZW50ZXJpbmcga2V5dGlwIG1vZGUgd2hlbiBhIG1vZGFsIGlzIHNob3duKVxuICAgICAgICB0aGlzLnNob3VsZEVudGVyS2V5dGlwTW9kZSA9IHRydWU7XG4gICAgICAgIC8vIEJvb2xlYW4gdG8gaW5kaWNhdGUgd2hldGhlciB0byBkZWxheSBmaXJpbmcgYW4gZXZlbnQgdG8gdXBkYXRlIHN1YnNjcmliZXJzIG9mXG4gICAgICAgIC8vIGtleXRpcCBkYXRhIGNoYW5nZWQuXG4gICAgICAgIHRoaXMuZGVsYXlVcGRhdGluZ0tleXRpcENoYW5nZSA9IGZhbHNlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTdGF0aWMgZnVuY3Rpb24gdG8gZ2V0IHNpbmdsZXRvbiBLZXl0aXBNYW5hZ2VyIGluc3RhbmNlXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyBTaW5nbGV0b24gS2V5dGlwTWFuYWdlciBpbnN0YW5jZVxuICAgICAqL1xuICAgIEtleXRpcE1hbmFnZXIuZ2V0SW5zdGFuY2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pbnN0YW5jZTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEluaXRpYWxpemF0aW9uIGNvZGUgdG8gc2V0IHNldCBwYXJhbWV0ZXJzIHRvIGRlZmluZVxuICAgICAqIGhvdyB0aGUgS2V5dGlwTWFuYWdlciBoYW5kbGVzIGtleXRpcCBkYXRhLlxuICAgICAqXG4gICAgICogQHBhcmFtIGRlbGF5VXBkYXRpbmdLZXl0aXBDaGFuZ2UgLSBUL0YgaWYgd2Ugc2hvdWxkIGRlbGF5IG5vdGlmaXlpbmcga2V5dGlwIHN1YnNjcmliZXJzXG4gICAgICogb2Yga2V5dGlwIGNoYW5nZXNcbiAgICAgKi9cbiAgICBLZXl0aXBNYW5hZ2VyLnByb3RvdHlwZS5pbml0ID0gZnVuY3Rpb24gKGRlbGF5VXBkYXRpbmdLZXl0aXBDaGFuZ2UpIHtcbiAgICAgICAgdGhpcy5kZWxheVVwZGF0aW5nS2V5dGlwQ2hhbmdlID0gZGVsYXlVcGRhdGluZ0tleXRpcENoYW5nZTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFJlZ2lzdGVycyBhIGtleXRpcFxuICAgICAqXG4gICAgICogQHBhcmFtIGtleXRpcFByb3BzIC0gS2V5dGlwIHRvIHJlZ2lzdGVyXG4gICAgICogQHBhcmFtIHBlcnNpc3RlZCAtIFQvRiBpZiB0aGlzIGtleXRpcCBzaG91bGQgYmUgcGVyc2lzdGVkLCBkZWZhdWx0IGlzIGZhbHNlXG4gICAgICogQHJldHVybnMgVW5pcXVlIElEIGZvciB0aGlzIGtleXRpcFxuICAgICAqL1xuICAgIEtleXRpcE1hbmFnZXIucHJvdG90eXBlLnJlZ2lzdGVyID0gZnVuY3Rpb24gKGtleXRpcFByb3BzLCBwZXJzaXN0ZWQpIHtcbiAgICAgICAgaWYgKHBlcnNpc3RlZCA9PT0gdm9pZCAwKSB7IHBlcnNpc3RlZCA9IGZhbHNlOyB9XG4gICAgICAgIHZhciBwcm9wcyA9IGtleXRpcFByb3BzO1xuICAgICAgICBpZiAoIXBlcnNpc3RlZCkge1xuICAgICAgICAgICAgLy8gQWRkIHRoZSBvdmVyZmxvd1NldFNlcXVlbmNlIGlmIG5lY2Vzc2FyeVxuICAgICAgICAgICAgcHJvcHMgPSB0aGlzLmFkZFBhcmVudE92ZXJmbG93KGtleXRpcFByb3BzKTtcbiAgICAgICAgICAgIHRoaXMuc2VxdWVuY2VNYXBwaW5nW3Byb3BzLmtleVNlcXVlbmNlcy50b1N0cmluZygpXSA9IHByb3BzO1xuICAgICAgICB9XG4gICAgICAgIC8vIENyZWF0ZSBhIHVuaXF1ZSBrZXl0aXBcbiAgICAgICAgdmFyIHVuaXF1ZUtleXRpcCA9IHRoaXMuX2dldFVuaXF1ZUt0cChwcm9wcyk7XG4gICAgICAgIC8vIEFkZCB0byBkaWN0aW9uYXJ5XG4gICAgICAgIHBlcnNpc3RlZFxuICAgICAgICAgICAgPyAodGhpcy5wZXJzaXN0ZWRLZXl0aXBzW3VuaXF1ZUtleXRpcC51bmlxdWVJRF0gPSB1bmlxdWVLZXl0aXApXG4gICAgICAgICAgICA6ICh0aGlzLmtleXRpcHNbdW5pcXVlS2V5dGlwLnVuaXF1ZUlEXSA9IHVuaXF1ZUtleXRpcCk7XG4gICAgICAgIC8vIFdlIG9ubHkgd2FudCB0byBhZGQgc29tZXRoaW5nIG5ldyBpZiB3ZSBhcmUgY3VycmVudGx5IHNob3dpbmcga2V5dGlwIG1vZGVcbiAgICAgICAgaWYgKHRoaXMuaW5LZXl0aXBNb2RlIHx8ICF0aGlzLmRlbGF5VXBkYXRpbmdLZXl0aXBDaGFuZ2UpIHtcbiAgICAgICAgICAgIHZhciBldmVudF8xID0gcGVyc2lzdGVkID8gS2V5dGlwRXZlbnRzLlBFUlNJU1RFRF9LRVlUSVBfQURERUQgOiBLZXl0aXBFdmVudHMuS0VZVElQX0FEREVEO1xuICAgICAgICAgICAgRXZlbnRHcm91cC5yYWlzZSh0aGlzLCBldmVudF8xLCB7XG4gICAgICAgICAgICAgICAga2V5dGlwOiBwcm9wcyxcbiAgICAgICAgICAgICAgICB1bmlxdWVJRDogdW5pcXVlS2V5dGlwLnVuaXF1ZUlELFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHVuaXF1ZUtleXRpcC51bmlxdWVJRDtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFVwZGF0ZSBhIGtleXRpcFxuICAgICAqXG4gICAgICogQHBhcmFtIGtleXRpcFByb3BzIC0gS2V5dGlwIHRvIHVwZGF0ZVxuICAgICAqIEBwYXJhbSB1bmlxdWVJRCAtIFVuaXF1ZSBJRCBvZiB0aGlzIGtleXRpcFxuICAgICAqL1xuICAgIEtleXRpcE1hbmFnZXIucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uIChrZXl0aXBQcm9wcywgdW5pcXVlSUQpIHtcbiAgICAgICAgdmFyIG5ld0tleXRpcFByb3BzID0gdGhpcy5hZGRQYXJlbnRPdmVyZmxvdyhrZXl0aXBQcm9wcyk7XG4gICAgICAgIHZhciB1bmlxdWVLZXl0aXAgPSB0aGlzLl9nZXRVbmlxdWVLdHAobmV3S2V5dGlwUHJvcHMsIHVuaXF1ZUlEKTtcbiAgICAgICAgdmFyIG9sZEtleVRpcCA9IHRoaXMua2V5dGlwc1t1bmlxdWVJRF07XG4gICAgICAgIGlmIChvbGRLZXlUaXApIHtcbiAgICAgICAgICAgIC8vIFVwZGF0ZSBldmVyeXRoaW5nIGV4Y2VwdCAndmlzaWJsZSdcbiAgICAgICAgICAgIHVuaXF1ZUtleXRpcC5rZXl0aXAudmlzaWJsZSA9IG9sZEtleVRpcC5rZXl0aXAudmlzaWJsZTtcbiAgICAgICAgICAgIC8vIFVwZGF0ZSBrZXl0aXAgaW4gdGhpcy5rZXl0aXBzXG4gICAgICAgICAgICB0aGlzLmtleXRpcHNbdW5pcXVlSURdID0gdW5pcXVlS2V5dGlwO1xuICAgICAgICAgICAgLy8gVXBkYXRlIHRoZSBzZXF1ZW5jZSB0byBiZSB1cCB0byBkYXRlXG4gICAgICAgICAgICBkZWxldGUgdGhpcy5zZXF1ZW5jZU1hcHBpbmdbb2xkS2V5VGlwLmtleXRpcC5rZXlTZXF1ZW5jZXMudG9TdHJpbmcoKV07XG4gICAgICAgICAgICB0aGlzLnNlcXVlbmNlTWFwcGluZ1t1bmlxdWVLZXl0aXAua2V5dGlwLmtleVNlcXVlbmNlcy50b1N0cmluZygpXSA9IHVuaXF1ZUtleXRpcC5rZXl0aXA7XG4gICAgICAgICAgICAvLyBSYWlzZSBldmVudCBvbmx5IGlmIHdlIGFyZSBjdXJyZW50bHkgaW4ga2V5dGlwIG1vZGVcbiAgICAgICAgICAgIGlmICh0aGlzLmluS2V5dGlwTW9kZSB8fCAhdGhpcy5kZWxheVVwZGF0aW5nS2V5dGlwQ2hhbmdlKSB7XG4gICAgICAgICAgICAgICAgRXZlbnRHcm91cC5yYWlzZSh0aGlzLCBLZXl0aXBFdmVudHMuS0VZVElQX1VQREFURUQsIHtcbiAgICAgICAgICAgICAgICAgICAga2V5dGlwOiB1bmlxdWVLZXl0aXAua2V5dGlwLFxuICAgICAgICAgICAgICAgICAgICB1bmlxdWVJRDogdW5pcXVlS2V5dGlwLnVuaXF1ZUlELFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBVbnJlZ2lzdGVycyBhIGtleXRpcFxuICAgICAqXG4gICAgICogQHBhcmFtIGtleXRpcFRvUmVtb3ZlIC0gSUtleXRpcFByb3BzIG9mIHRoZSBrZXl0aXAgdG8gcmVtb3ZlXG4gICAgICogQHBhcmFtIHVuaXF1ZUlEIC0gVW5pcXVlIElEIG9mIHRoaXMga2V5dGlwXG4gICAgICogQHBhcmFtIHBlcnNpc3RlZCAtIFQvRiBpZiB0aGlzIGtleXRpcCBzaG91bGQgYmUgcGVyc2lzdGVkLCBkZWZhdWx0IGlzIGZhbHNlXG4gICAgICovXG4gICAgS2V5dGlwTWFuYWdlci5wcm90b3R5cGUudW5yZWdpc3RlciA9IGZ1bmN0aW9uIChrZXl0aXBUb1JlbW92ZSwgdW5pcXVlSUQsIHBlcnNpc3RlZCkge1xuICAgICAgICBpZiAocGVyc2lzdGVkID09PSB2b2lkIDApIHsgcGVyc2lzdGVkID0gZmFsc2U7IH1cbiAgICAgICAgcGVyc2lzdGVkID8gZGVsZXRlIHRoaXMucGVyc2lzdGVkS2V5dGlwc1t1bmlxdWVJRF0gOiBkZWxldGUgdGhpcy5rZXl0aXBzW3VuaXF1ZUlEXTtcbiAgICAgICAgIXBlcnNpc3RlZCAmJiBkZWxldGUgdGhpcy5zZXF1ZW5jZU1hcHBpbmdba2V5dGlwVG9SZW1vdmUua2V5U2VxdWVuY2VzLnRvU3RyaW5nKCldO1xuICAgICAgICB2YXIgZXZlbnQgPSBwZXJzaXN0ZWQgPyBLZXl0aXBFdmVudHMuUEVSU0lTVEVEX0tFWVRJUF9SRU1PVkVEIDogS2V5dGlwRXZlbnRzLktFWVRJUF9SRU1PVkVEO1xuICAgICAgICAvLyBVcGRhdGUga2V5dGlwcyBvbmx5IGlmIHdlJ3JlIGluIGtleXRpcCBtb2RlXG4gICAgICAgIGlmICh0aGlzLmluS2V5dGlwTW9kZSB8fCAhdGhpcy5kZWxheVVwZGF0aW5nS2V5dGlwQ2hhbmdlKSB7XG4gICAgICAgICAgICBFdmVudEdyb3VwLnJhaXNlKHRoaXMsIGV2ZW50LCB7XG4gICAgICAgICAgICAgICAga2V5dGlwOiBrZXl0aXBUb1JlbW92ZSxcbiAgICAgICAgICAgICAgICB1bmlxdWVJRDogdW5pcXVlSUQsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgLyoqXG4gICAgICogTWFudWFsIGNhbGwgdG8gZW50ZXIga2V5dGlwIG1vZGVcbiAgICAgKi9cbiAgICBLZXl0aXBNYW5hZ2VyLnByb3RvdHlwZS5lbnRlcktleXRpcE1vZGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIEV2ZW50R3JvdXAucmFpc2UodGhpcywgS2V5dGlwRXZlbnRzLkVOVEVSX0tFWVRJUF9NT0RFKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIE1hbnVhbCBjYWxsIHRvIGV4aXQga2V5dGlwIG1vZGVcbiAgICAgKi9cbiAgICBLZXl0aXBNYW5hZ2VyLnByb3RvdHlwZS5leGl0S2V5dGlwTW9kZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgRXZlbnRHcm91cC5yYWlzZSh0aGlzLCBLZXl0aXBFdmVudHMuRVhJVF9LRVlUSVBfTU9ERSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBHZXRzIGFsbCBJS2V5dGlwUHJvcHMgZnJvbSB0aGlzLmtleXRpcHNcbiAgICAgKlxuICAgICAqIEByZXR1cm5zIEFsbCBrZXl0aXBzIHN0b3JlZCBpbiB0aGUgbWFuYWdlclxuICAgICAqL1xuICAgIEtleXRpcE1hbmFnZXIucHJvdG90eXBlLmdldEtleXRpcHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHJldHVybiBPYmplY3Qua2V5cyh0aGlzLmtleXRpcHMpLm1hcChmdW5jdGlvbiAoa2V5KSB7IHJldHVybiBfdGhpcy5rZXl0aXBzW2tleV0ua2V5dGlwOyB9KTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEFkZHMgdGhlIG92ZXJmbG93U2V0U2VxdWVuY2UgdG8gdGhlIGtleXRpcFByb3BzIGlmIGl0cyBwYXJlbnQga2V5dGlwIGFsc28gaGFzIGl0XG4gICAgICpcbiAgICAgKiBAcGFyYW0ga2V5dGlwUHJvcHMgLSBLZXl0aXAgcHJvcHMgdG8gYWRkIG92ZXJmbG93U2V0U2VxdWVuY2UgdG8gaWYgbmVjZXNzYXJ5XG4gICAgICogQHJldHVybnMgLSBNb2RpZmllZCBrZXl0aXAgcHJvcHMsIGlmIG5lZWRlZCB0byBiZSBtb2RpZmllZFxuICAgICAqL1xuICAgIEtleXRpcE1hbmFnZXIucHJvdG90eXBlLmFkZFBhcmVudE92ZXJmbG93ID0gZnVuY3Rpb24gKGtleXRpcFByb3BzKSB7XG4gICAgICAgIHZhciBmdWxsU2VxdWVuY2UgPSBfX3NwcmVhZEFycmF5KFtdLCBrZXl0aXBQcm9wcy5rZXlTZXF1ZW5jZXMpO1xuICAgICAgICBmdWxsU2VxdWVuY2UucG9wKCk7XG4gICAgICAgIGlmIChmdWxsU2VxdWVuY2UubGVuZ3RoICE9PSAwKSB7XG4gICAgICAgICAgICB2YXIgcGFyZW50S2V5dGlwID0gdGhpcy5zZXF1ZW5jZU1hcHBpbmdbZnVsbFNlcXVlbmNlLnRvU3RyaW5nKCldO1xuICAgICAgICAgICAgaWYgKHBhcmVudEtleXRpcCAmJiBwYXJlbnRLZXl0aXAub3ZlcmZsb3dTZXRTZXF1ZW5jZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBfX2Fzc2lnbihfX2Fzc2lnbih7fSwga2V5dGlwUHJvcHMpLCB7IG92ZXJmbG93U2V0U2VxdWVuY2U6IHBhcmVudEtleXRpcC5vdmVyZmxvd1NldFNlcXVlbmNlIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBrZXl0aXBQcm9wcztcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFB1YmxpYyBmdW5jdGlvbiB0byBiaW5kIGZvciBvdmVyZmxvdyBpdGVtcyB0aGF0IGhhdmUgYSBzdWJtZW51XG4gICAgICovXG4gICAgS2V5dGlwTWFuYWdlci5wcm90b3R5cGUubWVudUV4ZWN1dGUgPSBmdW5jdGlvbiAob3ZlcmZsb3dCdXR0b25TZXF1ZW5jZXMsIGtleXRpcFNlcXVlbmNlcykge1xuICAgICAgICBFdmVudEdyb3VwLnJhaXNlKHRoaXMsIEtleXRpcEV2ZW50cy5QRVJTSVNURURfS0VZVElQX0VYRUNVVEUsIHtcbiAgICAgICAgICAgIG92ZXJmbG93QnV0dG9uU2VxdWVuY2VzOiBvdmVyZmxvd0J1dHRvblNlcXVlbmNlcyxcbiAgICAgICAgICAgIGtleXRpcFNlcXVlbmNlczoga2V5dGlwU2VxdWVuY2VzLFxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gSVVuaXF1ZUtleXRpcCBvYmplY3RcbiAgICAgKlxuICAgICAqIEBwYXJhbSBrZXl0aXBQcm9wcyAtIElLZXl0aXBQcm9wc1xuICAgICAqIEBwYXJhbSB1bmlxdWVJRCAtIFVuaXF1ZSBJRCwgd2lsbCBkZWZhdWx0IHRvIHRoZSBuZXh0IHVuaXF1ZSBJRCBpZiBub3QgcGFzc2VkXG4gICAgICogQHJldHVybnMgSVVuaXF1ZUtleXRpcCBvYmplY3RcbiAgICAgKi9cbiAgICBLZXl0aXBNYW5hZ2VyLnByb3RvdHlwZS5fZ2V0VW5pcXVlS3RwID0gZnVuY3Rpb24gKGtleXRpcFByb3BzLCB1bmlxdWVJRCkge1xuICAgICAgICBpZiAodW5pcXVlSUQgPT09IHZvaWQgMCkgeyB1bmlxdWVJRCA9IGdldElkKCk7IH1cbiAgICAgICAgcmV0dXJuIHsga2V5dGlwOiBfX2Fzc2lnbih7fSwga2V5dGlwUHJvcHMpLCB1bmlxdWVJRDogdW5pcXVlSUQgfTtcbiAgICB9O1xuICAgIEtleXRpcE1hbmFnZXIuX2luc3RhbmNlID0gbmV3IEtleXRpcE1hbmFnZXIoKTtcbiAgICByZXR1cm4gS2V5dGlwTWFuYWdlcjtcbn0oKSk7XG5leHBvcnQgeyBLZXl0aXBNYW5hZ2VyIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1LZXl0aXBNYW5hZ2VyLmpzLm1hcCIsImltcG9ydCB7IF9fc3ByZWFkQXJyYXkgfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IEtUUF9TRVBBUkFUT1IsIEtUUF9QUkVGSVgsIERBVEFLVFBfVEFSR0VULCBEQVRBS1RQX0VYRUNVVEVfVEFSR0VULCBLVFBfTEFZRVJfSUQgfSBmcm9tICcuL0tleXRpcENvbnN0YW50cyc7XG5pbXBvcnQgeyBhZGRFbGVtZW50QXRJbmRleCB9IGZyb20gJy4uLy4uL1V0aWxpdGllcyc7XG4vKipcbiAqIENvbnZlcnRzIGEgd2hvbGUgc2V0IG9mIEtleVNlcXVlbmNlcyBpbnRvIG9uZSBrZXl0aXAgSUQsIHdoaWNoIHdpbGwgYmUgdGhlIElEIGZvciB0aGUgbGFzdCBrZXl0aXAgc2VxdWVuY2Ugc3BlY2lmaWVkXG4gKiBrZXlTZXF1ZW5jZXMgc2hvdWxkIG5vdCBpbmNsdWRlIHRoZSBpbml0aWFsIGtleXRpcCAnc3RhcnQnIHNlcXVlbmNlLlxuICpcbiAqIEBwYXJhbSBrZXlTZXF1ZW5jZXMgLSBGdWxsIHBhdGggb2YgSUtleVNlcXVlbmNlcyBmb3Igb25lIGtleXRpcC5cbiAqIEByZXR1cm5zIFN0cmluZyB0byB1c2UgZm9yIHRoZSBrZXl0aXAgSUQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzZXF1ZW5jZXNUb0lEKGtleVNlcXVlbmNlcykge1xuICAgIHJldHVybiBrZXlTZXF1ZW5jZXMucmVkdWNlKGZ1bmN0aW9uIChwcmV2VmFsdWUsIGtleVNlcXVlbmNlKSB7XG4gICAgICAgIHJldHVybiBwcmV2VmFsdWUgKyBLVFBfU0VQQVJBVE9SICsga2V5U2VxdWVuY2Uuc3BsaXQoJycpLmpvaW4oS1RQX1NFUEFSQVRPUik7XG4gICAgfSwgS1RQX1BSRUZJWCk7XG59XG4vKipcbiAqIE1lcmdlcyBhbiBvdmVyZmxvdyBzZXF1ZW5jZSB3aXRoIGEga2V5IHNlcXVlbmNlLlxuICpcbiAqIEBwYXJhbSBrZXlTZXF1ZW5jZXMgLSBGdWxsIHNlcXVlbmNlIGZvciBvbmUga2V5dGlwLlxuICogQHBhcmFtIG92ZXJmbG93S2V5U2VxdWVuY2VzIC0gRnVsbCBvdmVyZmxvdyBrZXl0aXAgc2VxdWVuY2UuXG4gKiBAcmV0dXJucyBTZXF1ZW5jZSB0aGF0IHdpbGwgYmUgdXNlZCBieSB0aGUga2V5dGlwIHdoZW4gaW4gdGhlIG92ZXJmbG93LlxuICovXG5leHBvcnQgZnVuY3Rpb24gbWVyZ2VPdmVyZmxvd3Moa2V5U2VxdWVuY2VzLCBvdmVyZmxvd0tleVNlcXVlbmNlcykge1xuICAgIHZhciBvdmVyZmxvd1NlcXVlbmNlTGVuID0gb3ZlcmZsb3dLZXlTZXF1ZW5jZXMubGVuZ3RoO1xuICAgIHZhciBvdmVyZmxvd1NlcXVlbmNlID0gX19zcHJlYWRBcnJheShbXSwgb3ZlcmZsb3dLZXlTZXF1ZW5jZXMpLnBvcCgpO1xuICAgIHZhciBuZXdLZXlTZXF1ZW5jZXMgPSBfX3NwcmVhZEFycmF5KFtdLCBrZXlTZXF1ZW5jZXMpO1xuICAgIHJldHVybiBhZGRFbGVtZW50QXRJbmRleChuZXdLZXlTZXF1ZW5jZXMsIG92ZXJmbG93U2VxdWVuY2VMZW4gLSAxLCBvdmVyZmxvd1NlcXVlbmNlKTtcbn1cbi8qKlxuICogQ29uc3RydWN0cyB0aGUgZGF0YS1rdHAtdGFyZ2V0IGF0dHJpYnV0ZSBzZWxlY3RvciBmcm9tIGEgZnVsbCBrZXkgc2VxdWVuY2UuXG4gKlxuICogQHBhcmFtIGtleVNlcXVlbmNlcyAtIEZ1bGwgc3RyaW5nW10gZm9yIGEgS2V5dGlwLlxuICogQHJldHVybnMgU3RyaW5nIHNlbGVjdG9yIHRvIHVzZSB0byBxdWVyeSBmb3IgdGhlIGtleXRpcCB0YXJnZXQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBrdHBUYXJnZXRGcm9tU2VxdWVuY2VzKGtleVNlcXVlbmNlcykge1xuICAgIHJldHVybiAnWycgKyBEQVRBS1RQX1RBUkdFVCArICc9XCInICsgc2VxdWVuY2VzVG9JRChrZXlTZXF1ZW5jZXMpICsgJ1wiXSc7XG59XG4vKipcbiAqIENvbnN0cnVjdHMgdGhlIGRhdGEta3RwLWV4ZWN1dGUtdGFyZ2V0IGF0dHJpYnV0ZSBzZWxlY3RvciBmcm9tIGEga2V5dGlwIElELlxuICpcbiAqIEBwYXJhbSBrZXl0aXBJZCAtIElEIG9mIHRoZSBLZXl0aXAuXG4gKiBAcmV0dXJucyBTdHJpbmcgc2VsZWN0b3IgdG8gdXNlIHRvIHF1ZXJ5IGZvciB0aGUga2V5dGlwIGV4ZWN1dGUgdGFyZ2V0LlxuICovXG5leHBvcnQgZnVuY3Rpb24ga3RwVGFyZ2V0RnJvbUlkKGtleXRpcElkKSB7XG4gICAgcmV0dXJuICdbJyArIERBVEFLVFBfRVhFQ1VURV9UQVJHRVQgKyAnPVwiJyArIGtleXRpcElkICsgJ1wiXSc7XG59XG4vKipcbiAqIEdldHMgdGhlIGFyaWEtZGVzY3JpYmVkYnkgdmFsdWUgdG8gcHV0IG9uIHRoZSBjb21wb25lbnQgd2l0aCB0aGlzIGtleXRpcC5cbiAqXG4gKiBAcGFyYW0ga2V5U2VxdWVuY2VzIC0gS2V5U2VxdWVuY2VzIG9mIHRoZSBrZXl0aXAuXG4gKiBAcmV0dXJucyBUaGUgYXJpYS1kZXNjcmliZWRieSB2YWx1ZSB0byBzZXQgb24gdGhlIGNvbXBvbmVudCB3aXRoIHRoaXMga2V5dGlwLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0QXJpYURlc2NyaWJlZEJ5KGtleVNlcXVlbmNlcykge1xuICAgIHZhciBkZXNjcmliZWRieSA9ICcgJyArIEtUUF9MQVlFUl9JRDtcbiAgICBpZiAoIWtleVNlcXVlbmNlcy5sZW5ndGgpIHtcbiAgICAgICAgLy8gUmV0dXJuIGp1c3QgdGhlIGxheWVyIElEXG4gICAgICAgIHJldHVybiBkZXNjcmliZWRieTtcbiAgICB9XG4gICAgcmV0dXJuIGRlc2NyaWJlZGJ5ICsgJyAnICsgc2VxdWVuY2VzVG9JRChrZXlTZXF1ZW5jZXMpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9S2V5dGlwVXRpbHMuanMubWFwIiwiaW1wb3J0IHsgX19hc3NpZ24sIF9fc3ByZWFkQXJyYXkgfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHVzZUNvbnN0LCB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0LCB1c2VQcmV2aW91cyB9IGZyb20gJ0BmbHVlbnR1aS9yZWFjdC1ob29rcyc7XG5pbXBvcnQgeyBtZXJnZUFyaWFBdHRyaWJ1dGVWYWx1ZXMgfSBmcm9tICcuLi8uLi9VdGlsaXRpZXMnO1xuaW1wb3J0IHsgS2V5dGlwTWFuYWdlciwgbWVyZ2VPdmVyZmxvd3MsIHNlcXVlbmNlc1RvSUQsIGdldEFyaWFEZXNjcmliZWRCeSB9IGZyb20gJy4uLy4uL3V0aWxpdGllcy9rZXl0aXBzL2luZGV4Jztcbi8qKlxuICogSG9vayB0aGF0IGNyZWF0ZXMgYXR0cmlidXRlcyBmb3IgY29tcG9uZW50cyB3aGljaCBhcmUgZW5hYmxlZCB3aXRoIEtleXRpcC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVzZUtleXRpcERhdGEob3B0aW9ucykge1xuICAgIHZhciB1bmlxdWVJZCA9IFJlYWN0LnVzZVJlZigpO1xuICAgIHZhciBrZXl0aXBQcm9wcyA9IG9wdGlvbnMua2V5dGlwUHJvcHNcbiAgICAgICAgPyBfX2Fzc2lnbih7IGRpc2FibGVkOiBvcHRpb25zLmRpc2FibGVkIH0sIG9wdGlvbnMua2V5dGlwUHJvcHMpIDogdW5kZWZpbmVkO1xuICAgIHZhciBrZXl0aXBNYW5hZ2VyID0gdXNlQ29uc3QoS2V5dGlwTWFuYWdlci5nZXRJbnN0YW5jZSgpKTtcbiAgICB2YXIgcHJldk9wdGlvbnMgPSB1c2VQcmV2aW91cyhvcHRpb25zKTtcbiAgICAvLyB1c2VMYXlvdXRFZmZlY3QgdXNlZCB0byBzdHJpY3RseSBlbXVsYXRlIGRpZFVwZGF0ZS9kaWRNb3VudCBiZWhhdmlvclxuICAgIHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodW5pcXVlSWQuY3VycmVudCAmJlxuICAgICAgICAgICAga2V5dGlwUHJvcHMgJiZcbiAgICAgICAgICAgICgocHJldk9wdGlvbnMgPT09IG51bGwgfHwgcHJldk9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHByZXZPcHRpb25zLmtleXRpcFByb3BzKSAhPT0gb3B0aW9ucy5rZXl0aXBQcm9wcyB8fCAocHJldk9wdGlvbnMgPT09IG51bGwgfHwgcHJldk9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHByZXZPcHRpb25zLmRpc2FibGVkKSAhPT0gb3B0aW9ucy5kaXNhYmxlZCkpIHtcbiAgICAgICAgICAgIGtleXRpcE1hbmFnZXIudXBkYXRlKGtleXRpcFByb3BzLCB1bmlxdWVJZC5jdXJyZW50KTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgICAgICAvLyBSZWdpc3RlciBLZXl0aXAgaW4gS2V5dGlwTWFuYWdlclxuICAgICAgICBpZiAoa2V5dGlwUHJvcHMpIHtcbiAgICAgICAgICAgIHVuaXF1ZUlkLmN1cnJlbnQgPSBrZXl0aXBNYW5hZ2VyLnJlZ2lzdGVyKGtleXRpcFByb3BzKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgLy8gVW5yZWdpc3RlciBLZXl0aXAgaW4gS2V5dGlwTWFuYWdlclxuICAgICAgICAgICAga2V5dGlwUHJvcHMgJiYga2V5dGlwTWFuYWdlci51bnJlZ2lzdGVyKGtleXRpcFByb3BzLCB1bmlxdWVJZC5jdXJyZW50KTtcbiAgICAgICAgfTtcbiAgICAgICAgLy8gdGhpcyBpcyBtZWFudCB0byBydW4gb25seSBhdCBtb3VudCwgYW5kIHVwZGF0ZXMgYXJlIGhhbmRsZWQgc2VwYXJhdGVseVxuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaG9va3MvZXhoYXVzdGl2ZS1kZXBzXG4gICAgfSwgW10pO1xuICAgIHZhciBuYXRpdmVLZXl0aXBQcm9wcyA9IHtcbiAgICAgICAgYXJpYURlc2NyaWJlZEJ5OiB1bmRlZmluZWQsXG4gICAgICAgIGtleXRpcElkOiB1bmRlZmluZWQsXG4gICAgfTtcbiAgICBpZiAoa2V5dGlwUHJvcHMpIHtcbiAgICAgICAgbmF0aXZlS2V5dGlwUHJvcHMgPSBnZXRLZXl0aXBEYXRhKGtleXRpcE1hbmFnZXIsIGtleXRpcFByb3BzLCBvcHRpb25zLmFyaWFEZXNjcmliZWRCeSk7XG4gICAgfVxuICAgIHJldHVybiBuYXRpdmVLZXl0aXBQcm9wcztcbn1cbi8qKlxuICogR2V0cyB0aGUgYXJpYS0gYW5kIGRhdGEtIGF0dHJpYnV0ZXMgdG8gYXR0YWNoIHRvIHRoZSBjb21wb25lbnRcbiAqIEBwYXJhbSBrZXl0aXBQcm9wcyAtIG9wdGlvbnMgZm9yIEtleXRpcFxuICogQHBhcmFtIGRlc2NyaWJlZEJ5UHJlcGVuZCAtIGFyaWFEZXNjcmliZWRCeSB2YWx1ZSB0byBwcmVwZW5kXG4gKi9cbmZ1bmN0aW9uIGdldEtleXRpcERhdGEoa2V5dGlwTWFuYWdlciwga2V5dGlwUHJvcHMsIGRlc2NyaWJlZEJ5UHJlcGVuZCkge1xuICAgIC8vIEFkZCB0aGUgcGFyZW50IG92ZXJmbG93IHNlcXVlbmNlIGlmIG5lY2Vzc2FyeVxuICAgIHZhciBuZXdLZXl0aXBQcm9wcyA9IGtleXRpcE1hbmFnZXIuYWRkUGFyZW50T3ZlcmZsb3coa2V5dGlwUHJvcHMpO1xuICAgIC8vIENvbnN0cnVjdCBhcmlhLWRlc2NyaWJlZGJ5IGFuZCBkYXRhLWt0cC1pZCBhdHRyaWJ1dGVzXG4gICAgdmFyIGFyaWFEZXNjcmliZWRCeSA9IG1lcmdlQXJpYUF0dHJpYnV0ZVZhbHVlcyhkZXNjcmliZWRCeVByZXBlbmQsIGdldEFyaWFEZXNjcmliZWRCeShuZXdLZXl0aXBQcm9wcy5rZXlTZXF1ZW5jZXMpKTtcbiAgICB2YXIga2V5U2VxdWVuY2VzID0gX19zcHJlYWRBcnJheShbXSwgbmV3S2V5dGlwUHJvcHMua2V5U2VxdWVuY2VzKTtcbiAgICBpZiAobmV3S2V5dGlwUHJvcHMub3ZlcmZsb3dTZXRTZXF1ZW5jZSkge1xuICAgICAgICBrZXlTZXF1ZW5jZXMgPSBtZXJnZU92ZXJmbG93cyhrZXlTZXF1ZW5jZXMsIG5ld0tleXRpcFByb3BzLm92ZXJmbG93U2V0U2VxdWVuY2UpO1xuICAgIH1cbiAgICB2YXIga2V5dGlwSWQgPSBzZXF1ZW5jZXNUb0lEKGtleVNlcXVlbmNlcyk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgYXJpYURlc2NyaWJlZEJ5OiBhcmlhRGVzY3JpYmVkQnksXG4gICAgICAgIGtleXRpcElkOiBrZXl0aXBJZCxcbiAgICB9O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXNlS2V5dGlwRGF0YS5qcy5tYXAiLCJpbXBvcnQgeyBfX3Jlc3QgfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IERBVEFLVFBfVEFSR0VULCBEQVRBS1RQX0VYRUNVVEVfVEFSR0VUIH0gZnJvbSAnLi4vLi4vdXRpbGl0aWVzL2tleXRpcHMvaW5kZXgnO1xuaW1wb3J0IHsgdXNlS2V5dGlwRGF0YSB9IGZyb20gJy4vdXNlS2V5dGlwRGF0YSc7XG4vKipcbiAqIEEgc21hbGwgZWxlbWVudCB0byBoZWxwIHRoZSB0YXJnZXQgY29tcG9uZW50IGNvcnJlY3RseSByZWFkIG91dCBpdHMgYXJpYS1kZXNjcmliZWRieSBmb3IgaXRzIEtleXRpcFxuICoge0Bkb2NDYXRlZ29yeSBLZXl0aXBzfVxuICovXG5leHBvcnQgdmFyIEtleXRpcERhdGEgPSBmdW5jdGlvbiAocHJvcHMpIHtcbiAgICB2YXIgX2E7XG4gICAgdmFyIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW4sIGtleXRpcERhdGFQcm9wcyA9IF9fcmVzdChwcm9wcywgW1wiY2hpbGRyZW5cIl0pO1xuICAgIHZhciBfYiA9IHVzZUtleXRpcERhdGEoa2V5dGlwRGF0YVByb3BzKSwga2V5dGlwSWQgPSBfYi5rZXl0aXBJZCwgYXJpYURlc2NyaWJlZEJ5ID0gX2IuYXJpYURlc2NyaWJlZEJ5O1xuICAgIHJldHVybiBjaGlsZHJlbigoX2EgPSB7fSxcbiAgICAgICAgX2FbREFUQUtUUF9UQVJHRVRdID0ga2V5dGlwSWQsXG4gICAgICAgIF9hW0RBVEFLVFBfRVhFQ1VURV9UQVJHRVRdID0ga2V5dGlwSWQsXG4gICAgICAgIF9hWydhcmlhLWRlc2NyaWJlZGJ5J10gPSBhcmlhRGVzY3JpYmVkQnksXG4gICAgICAgIF9hKSk7XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9S2V5dGlwRGF0YS5qcy5tYXAiLCJpbXBvcnQgeyBfX2Fzc2lnbiwgX19leHRlbmRzIH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBhbmNob3JQcm9wZXJ0aWVzLCBnZXROYXRpdmVQcm9wcywgbWVtb2l6ZUZ1bmN0aW9uLCBnZXRJZCwgbWVyZ2VBcmlhQXR0cmlidXRlVmFsdWVzIH0gZnJvbSAnLi4vLi4vLi4vVXRpbGl0aWVzJztcbmltcG9ydCB7IENvbnRleHR1YWxNZW51SXRlbVdyYXBwZXIgfSBmcm9tICcuL0NvbnRleHR1YWxNZW51SXRlbVdyYXBwZXInO1xuaW1wb3J0IHsgS2V5dGlwRGF0YSB9IGZyb20gJy4uLy4uLy4uL0tleXRpcERhdGEnO1xuaW1wb3J0IHsgaXNJdGVtRGlzYWJsZWQsIGhhc1N1Ym1lbnUgfSBmcm9tICcuLi8uLi8uLi91dGlsaXRpZXMvY29udGV4dHVhbE1lbnUvaW5kZXgnO1xuaW1wb3J0IHsgQ29udGV4dHVhbE1lbnVJdGVtIH0gZnJvbSAnLi4vQ29udGV4dHVhbE1lbnVJdGVtJztcbnZhciBDb250ZXh0dWFsTWVudUFuY2hvciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoQ29udGV4dHVhbE1lbnVBbmNob3IsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gQ29udGV4dHVhbE1lbnVBbmNob3IoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlciAhPT0gbnVsbCAmJiBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5fYW5jaG9yID0gUmVhY3QuY3JlYXRlUmVmKCk7XG4gICAgICAgIF90aGlzLl9nZXRNZW1vaXplZE1lbnVCdXR0b25LZXl0aXBQcm9wcyA9IG1lbW9pemVGdW5jdGlvbihmdW5jdGlvbiAoa2V5dGlwUHJvcHMpIHtcbiAgICAgICAgICAgIHJldHVybiBfX2Fzc2lnbihfX2Fzc2lnbih7fSwga2V5dGlwUHJvcHMpLCB7IGhhc01lbnU6IHRydWUgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICBfdGhpcy5fZ2V0U3VibWVudVRhcmdldCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBfdGhpcy5fYW5jaG9yLmN1cnJlbnQgPyBfdGhpcy5fYW5jaG9yLmN1cnJlbnQgOiB1bmRlZmluZWQ7XG4gICAgICAgIH07XG4gICAgICAgIF90aGlzLl9vbkl0ZW1DbGljayA9IGZ1bmN0aW9uIChldikge1xuICAgICAgICAgICAgdmFyIF9hID0gX3RoaXMucHJvcHMsIGl0ZW0gPSBfYS5pdGVtLCBvbkl0ZW1DbGljayA9IF9hLm9uSXRlbUNsaWNrO1xuICAgICAgICAgICAgaWYgKG9uSXRlbUNsaWNrKSB7XG4gICAgICAgICAgICAgICAgb25JdGVtQ2xpY2soaXRlbSwgZXYpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBfdGhpcy5fcmVuZGVyQXJpYURlc2NyaXB0aW9uID0gZnVuY3Rpb24gKGFyaWFEZXNjcmlwdGlvbiwgY2xhc3NOYW1lKSB7XG4gICAgICAgICAgICAvLyBJZiBhcmlhRGVzY3JpcHRpb24gaXMgZ2l2ZW4sIGRlc2NyaXB0aW9uSWQgd2lsbCBiZSBhc3NpZ25lZCB0byBhcmlhRGVzY3JpcHRpb25TcGFuXG4gICAgICAgICAgICByZXR1cm4gYXJpYURlc2NyaXB0aW9uID8gKFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIHsgaWQ6IF90aGlzLl9hcmlhRGVzY3JpcHRpb25JZCwgY2xhc3NOYW1lOiBjbGFzc05hbWUgfSwgYXJpYURlc2NyaXB0aW9uKSkgOiBudWxsO1xuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIENvbnRleHR1YWxNZW51QW5jaG9yLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHZhciBfYSA9IHRoaXMucHJvcHMsIGl0ZW0gPSBfYS5pdGVtLCBjbGFzc05hbWVzID0gX2EuY2xhc3NOYW1lcywgaW5kZXggPSBfYS5pbmRleCwgZm9jdXNhYmxlRWxlbWVudEluZGV4ID0gX2EuZm9jdXNhYmxlRWxlbWVudEluZGV4LCB0b3RhbEl0ZW1Db3VudCA9IF9hLnRvdGFsSXRlbUNvdW50LCBoYXNDaGVja21hcmtzID0gX2EuaGFzQ2hlY2ttYXJrcywgaGFzSWNvbnMgPSBfYS5oYXNJY29ucywgX2IgPSBfYS5jb250ZXh0dWFsTWVudUl0ZW1BcywgQ2hpbGRyZW5SZW5kZXJlciA9IF9iID09PSB2b2lkIDAgPyBDb250ZXh0dWFsTWVudUl0ZW0gOiBfYiwgZXhwYW5kZWRNZW51SXRlbUtleSA9IF9hLmV4cGFuZGVkTWVudUl0ZW1LZXksIG9uSXRlbUNsaWNrID0gX2Eub25JdGVtQ2xpY2ssIG9wZW5TdWJNZW51ID0gX2Eub3BlblN1Yk1lbnUsIGRpc21pc3NTdWJNZW51ID0gX2EuZGlzbWlzc1N1Yk1lbnUsIGRpc21pc3NNZW51ID0gX2EuZGlzbWlzc01lbnU7XG4gICAgICAgIHZhciBhbmNob3JSZWwgPSBpdGVtLnJlbDtcbiAgICAgICAgaWYgKGl0ZW0udGFyZ2V0ICYmIGl0ZW0udGFyZ2V0LnRvTG93ZXJDYXNlKCkgPT09ICdfYmxhbmsnKSB7XG4gICAgICAgICAgICBhbmNob3JSZWwgPSBhbmNob3JSZWwgPyBhbmNob3JSZWwgOiAnbm9mb2xsb3cgbm9vcGVuZXIgbm9yZWZlcnJlcic7IC8vIFNhZmUgZGVmYXVsdCB0byBwcmV2ZW50IHRhYmphY2tpbmdcbiAgICAgICAgfVxuICAgICAgICB2YXIgaXRlbUhhc1N1Ym1lbnUgPSBoYXNTdWJtZW51KGl0ZW0pO1xuICAgICAgICB2YXIgbmF0aXZlUHJvcHMgPSBnZXROYXRpdmVQcm9wcyhpdGVtLCBhbmNob3JQcm9wZXJ0aWVzKTtcbiAgICAgICAgdmFyIGRpc2FibGVkID0gaXNJdGVtRGlzYWJsZWQoaXRlbSk7XG4gICAgICAgIHZhciBpdGVtUHJvcHMgPSBpdGVtLml0ZW1Qcm9wcywgYXJpYURlc2NyaXB0aW9uID0gaXRlbS5hcmlhRGVzY3JpcHRpb247XG4gICAgICAgIHZhciBrZXl0aXBQcm9wcyA9IGl0ZW0ua2V5dGlwUHJvcHM7XG4gICAgICAgIGlmIChrZXl0aXBQcm9wcyAmJiBpdGVtSGFzU3VibWVudSkge1xuICAgICAgICAgICAga2V5dGlwUHJvcHMgPSB0aGlzLl9nZXRNZW1vaXplZE1lbnVCdXR0b25LZXl0aXBQcm9wcyhrZXl0aXBQcm9wcyk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gQ2hlY2sgZm9yIGFyaWFEZXNjcmlwdGlvbiB0byBzZXQgdGhlIF9hcmlhRGVzY3JpcHRpb25JZCBhbmQgcmVuZGVyIGEgaGlkZGVuIHNwYW4gd2l0aFxuICAgICAgICAvLyB0aGUgZGVzY3JpcHRpb24gaW4gaXQgdG8gYmUgYWRkZWQgdG8gYXJpYURlc2NyaWJlZEJ5XG4gICAgICAgIGlmIChhcmlhRGVzY3JpcHRpb24pIHtcbiAgICAgICAgICAgIHRoaXMuX2FyaWFEZXNjcmlwdGlvbklkID0gZ2V0SWQoKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgYXJpYURlc2NyaWJlZEJ5SWRzID0gbWVyZ2VBcmlhQXR0cmlidXRlVmFsdWVzKGl0ZW0uYXJpYURlc2NyaWJlZEJ5LCBhcmlhRGVzY3JpcHRpb24gPyB0aGlzLl9hcmlhRGVzY3JpcHRpb25JZCA6IHVuZGVmaW5lZCwgbmF0aXZlUHJvcHNbJ2FyaWEtZGVzY3JpYmVkYnknXSk7XG4gICAgICAgIHZhciBhZGRpdGlvbmFsSXRlbVByb3BlcnRpZXMgPSB7XG4gICAgICAgICAgICAnYXJpYS1kZXNjcmliZWRieSc6IGFyaWFEZXNjcmliZWRCeUlkcyxcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIChSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIG51bGwsXG4gICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KEtleXRpcERhdGEsIHsga2V5dGlwUHJvcHM6IGl0ZW0ua2V5dGlwUHJvcHMsIGFyaWFEZXNjcmliZWRCeTogYXJpYURlc2NyaWJlZEJ5SWRzLCBkaXNhYmxlZDogZGlzYWJsZWQgfSwgZnVuY3Rpb24gKGtleXRpcEF0dHJpYnV0ZXMpIHsgcmV0dXJuIChSZWFjdC5jcmVhdGVFbGVtZW50KFwiYVwiLCBfX2Fzc2lnbih7fSwgYWRkaXRpb25hbEl0ZW1Qcm9wZXJ0aWVzLCBuYXRpdmVQcm9wcywga2V5dGlwQXR0cmlidXRlcywgeyByZWY6IF90aGlzLl9hbmNob3IsIGhyZWY6IGl0ZW0uaHJlZiwgdGFyZ2V0OiBpdGVtLnRhcmdldCwgcmVsOiBhbmNob3JSZWwsIGNsYXNzTmFtZTogY2xhc3NOYW1lcy5yb290LCByb2xlOiBcIm1lbnVpdGVtXCIsIFwiYXJpYS1oYXNwb3B1cFwiOiBpdGVtSGFzU3VibWVudSB8fCB1bmRlZmluZWQsIFwiYXJpYS1leHBhbmRlZFwiOiBpdGVtSGFzU3VibWVudSA/IGl0ZW0ua2V5ID09PSBleHBhbmRlZE1lbnVJdGVtS2V5IDogdW5kZWZpbmVkLCBcImFyaWEtcG9zaW5zZXRcIjogZm9jdXNhYmxlRWxlbWVudEluZGV4ICsgMSwgXCJhcmlhLXNldHNpemVcIjogdG90YWxJdGVtQ291bnQsIFwiYXJpYS1kaXNhYmxlZFwiOiBpc0l0ZW1EaXNhYmxlZChpdGVtKSwgXG4gICAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGRlcHJlY2F0aW9uL2RlcHJlY2F0aW9uXG4gICAgICAgICAgICAgICAgc3R5bGU6IGl0ZW0uc3R5bGUsIG9uQ2xpY2s6IF90aGlzLl9vbkl0ZW1DbGljaywgb25Nb3VzZUVudGVyOiBfdGhpcy5fb25JdGVtTW91c2VFbnRlciwgb25Nb3VzZUxlYXZlOiBfdGhpcy5fb25JdGVtTW91c2VMZWF2ZSwgb25Nb3VzZU1vdmU6IF90aGlzLl9vbkl0ZW1Nb3VzZU1vdmUsIG9uS2V5RG93bjogaXRlbUhhc1N1Ym1lbnUgPyBfdGhpcy5fb25JdGVtS2V5RG93biA6IHVuZGVmaW5lZCB9KSxcbiAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KENoaWxkcmVuUmVuZGVyZXIsIF9fYXNzaWduKHsgY29tcG9uZW50UmVmOiBpdGVtLmNvbXBvbmVudFJlZiwgaXRlbTogaXRlbSwgY2xhc3NOYW1lczogY2xhc3NOYW1lcywgaW5kZXg6IGluZGV4LCBvbkNoZWNrbWFya0NsaWNrOiBoYXNDaGVja21hcmtzICYmIG9uSXRlbUNsaWNrID8gb25JdGVtQ2xpY2sgOiB1bmRlZmluZWQsIGhhc0ljb25zOiBoYXNJY29ucywgb3BlblN1Yk1lbnU6IG9wZW5TdWJNZW51LCBkaXNtaXNzU3ViTWVudTogZGlzbWlzc1N1Yk1lbnUsIGRpc21pc3NNZW51OiBkaXNtaXNzTWVudSwgZ2V0U3VibWVudVRhcmdldDogX3RoaXMuX2dldFN1Ym1lbnVUYXJnZXQgfSwgaXRlbVByb3BzKSksXG4gICAgICAgICAgICAgICAgX3RoaXMuX3JlbmRlckFyaWFEZXNjcmlwdGlvbihhcmlhRGVzY3JpcHRpb24sIGNsYXNzTmFtZXMuc2NyZWVuUmVhZGVyVGV4dCkpKTsgfSkpKTtcbiAgICB9O1xuICAgIHJldHVybiBDb250ZXh0dWFsTWVudUFuY2hvcjtcbn0oQ29udGV4dHVhbE1lbnVJdGVtV3JhcHBlcikpO1xuZXhwb3J0IHsgQ29udGV4dHVhbE1lbnVBbmNob3IgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUNvbnRleHR1YWxNZW51QW5jaG9yLmpzLm1hcCIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGNsYXNzTmFtZXNGdW5jdGlvbiB9IGZyb20gJy4uLy4uL1V0aWxpdGllcyc7XG52YXIgZ2V0Q2xhc3NOYW1lcyA9IGNsYXNzTmFtZXNGdW5jdGlvbigpO1xuZXhwb3J0IHZhciBWZXJ0aWNhbERpdmlkZXJCYXNlID0gUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiAocHJvcHMsIHJlZikge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBkZXByZWNhdGlvbi9kZXByZWNhdGlvblxuICAgIHZhciBzdHlsZXMgPSBwcm9wcy5zdHlsZXMsIHRoZW1lID0gcHJvcHMudGhlbWUsIGRlcHJlY2F0ZWRHZXRDbGFzc05hbWVzID0gcHJvcHMuZ2V0Q2xhc3NOYW1lcywgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lO1xuICAgIHZhciBjbGFzc05hbWVzID0gZ2V0Q2xhc3NOYW1lcyhzdHlsZXMsIHsgdGhlbWU6IHRoZW1lLCBnZXRDbGFzc05hbWVzOiBkZXByZWNhdGVkR2V0Q2xhc3NOYW1lcywgY2xhc3NOYW1lOiBjbGFzc05hbWUgfSk7XG4gICAgcmV0dXJuIChSZWFjdC5jcmVhdGVFbGVtZW50KFwic3BhblwiLCB7IGNsYXNzTmFtZTogY2xhc3NOYW1lcy53cmFwcGVyLCByZWY6IHJlZiB9LFxuICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFwic3BhblwiLCB7IGNsYXNzTmFtZTogY2xhc3NOYW1lcy5kaXZpZGVyIH0pKSk7XG59KTtcblZlcnRpY2FsRGl2aWRlckJhc2UuZGlzcGxheU5hbWUgPSAnVmVydGljYWxEaXZpZGVyQmFzZSc7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1WZXJ0aWNhbERpdmlkZXIuYmFzZS5qcy5tYXAiLCJpbXBvcnQgeyBnZXRTdHlsZXMgfSBmcm9tICcuL1ZlcnRpY2FsRGl2aWRlci5zdHlsZXMnO1xuaW1wb3J0IHsgVmVydGljYWxEaXZpZGVyQmFzZSB9IGZyb20gJy4vVmVydGljYWxEaXZpZGVyLmJhc2UnO1xuaW1wb3J0IHsgc3R5bGVkIH0gZnJvbSAnLi4vLi4vVXRpbGl0aWVzJztcbmV4cG9ydCB2YXIgVmVydGljYWxEaXZpZGVyID0gc3R5bGVkKFZlcnRpY2FsRGl2aWRlckJhc2UsIGdldFN0eWxlcywgdW5kZWZpbmVkLCB7XG4gICAgc2NvcGU6ICdWZXJ0aWNhbERpdmlkZXInLFxufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1WZXJ0aWNhbERpdmlkZXIuanMubWFwIiwiZXhwb3J0IHZhciBnZXRTdHlsZXMgPSBmdW5jdGlvbiAocHJvcHMpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZGVwcmVjYXRpb24vZGVwcmVjYXRpb25cbiAgICB2YXIgdGhlbWUgPSBwcm9wcy50aGVtZSwgZ2V0Q2xhc3NOYW1lcyA9IHByb3BzLmdldENsYXNzTmFtZXMsIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZTtcbiAgICBpZiAoIXRoZW1lKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignVGhlbWUgaXMgdW5kZWZpbmVkIG9yIG51bGwuJyk7XG4gICAgfVxuICAgIGlmIChnZXRDbGFzc05hbWVzKSB7XG4gICAgICAgIHZhciBuYW1lcyA9IGdldENsYXNzTmFtZXModGhlbWUpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgd3JhcHBlcjogW25hbWVzLndyYXBwZXJdLFxuICAgICAgICAgICAgZGl2aWRlcjogW25hbWVzLmRpdmlkZXJdLFxuICAgICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICB3cmFwcGVyOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgZGlzcGxheTogJ2lubGluZS1mbGV4JyxcbiAgICAgICAgICAgICAgICBoZWlnaHQ6ICcxMDAlJyxcbiAgICAgICAgICAgICAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjbGFzc05hbWUsXG4gICAgICAgIF0sXG4gICAgICAgIGRpdmlkZXI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB3aWR0aDogMSxcbiAgICAgICAgICAgICAgICBoZWlnaHQ6ICcxMDAlJyxcbiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnBhbGV0dGUubmV1dHJhbFRlcnRpYXJ5QWx0LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICB9O1xufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVZlcnRpY2FsRGl2aWRlci5zdHlsZXMuanMubWFwIiwiaW1wb3J0IHsgX19hc3NpZ24sIF9fZXh0ZW5kcyB9IGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgYnV0dG9uUHJvcGVydGllcywgZ2V0TmF0aXZlUHJvcHMsIEtleUNvZGVzLCBtZXJnZUFyaWFBdHRyaWJ1dGVWYWx1ZXMsIG1lbW9pemVGdW5jdGlvbiwgQXN5bmMsIEV2ZW50R3JvdXAsIGdldElkLCB9IGZyb20gJy4uLy4uLy4uL1V0aWxpdGllcyc7XG5pbXBvcnQgeyBDb250ZXh0dWFsTWVudUl0ZW0gfSBmcm9tICcuLi9Db250ZXh0dWFsTWVudUl0ZW0nO1xuaW1wb3J0IHsgZ2V0U3BsaXRCdXR0b25WZXJ0aWNhbERpdmlkZXJDbGFzc05hbWVzIH0gZnJvbSAnLi4vQ29udGV4dHVhbE1lbnUuY2xhc3NOYW1lcyc7XG5pbXBvcnQgeyBLZXl0aXBEYXRhIH0gZnJvbSAnLi4vLi4vLi4vS2V5dGlwRGF0YSc7XG5pbXBvcnQgeyBpc0l0ZW1EaXNhYmxlZCwgaGFzU3VibWVudSwgZ2V0TWVudUl0ZW1BcmlhUm9sZSB9IGZyb20gJy4uLy4uLy4uL3V0aWxpdGllcy9jb250ZXh0dWFsTWVudS9pbmRleCc7XG5pbXBvcnQgeyBWZXJ0aWNhbERpdmlkZXIgfSBmcm9tICcuLi8uLi8uLi9EaXZpZGVyJztcbmltcG9ydCB7IENvbnRleHR1YWxNZW51SXRlbVdyYXBwZXIgfSBmcm9tICcuL0NvbnRleHR1YWxNZW51SXRlbVdyYXBwZXInO1xudmFyIFRvdWNoSWRsZURlbGF5ID0gNTAwOyAvKiBtcyAqL1xudmFyIENvbnRleHR1YWxNZW51U3BsaXRCdXR0b24gPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKENvbnRleHR1YWxNZW51U3BsaXRCdXR0b24sIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gQ29udGV4dHVhbE1lbnVTcGxpdEJ1dHRvbihwcm9wcykge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBwcm9wcykgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuX2dldE1lbW9pemVkTWVudUJ1dHRvbktleXRpcFByb3BzID0gbWVtb2l6ZUZ1bmN0aW9uKGZ1bmN0aW9uIChrZXl0aXBQcm9wcykge1xuICAgICAgICAgICAgcmV0dXJuIF9fYXNzaWduKF9fYXNzaWduKHt9LCBrZXl0aXBQcm9wcyksIHsgaGFzTWVudTogdHJ1ZSB9KTtcbiAgICAgICAgfSk7XG4gICAgICAgIF90aGlzLl9vbkl0ZW1LZXlEb3duID0gZnVuY3Rpb24gKGV2KSB7XG4gICAgICAgICAgICB2YXIgX2EgPSBfdGhpcy5wcm9wcywgaXRlbSA9IF9hLml0ZW0sIG9uSXRlbUtleURvd24gPSBfYS5vbkl0ZW1LZXlEb3duO1xuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGRlcHJlY2F0aW9uL2RlcHJlY2F0aW9uXG4gICAgICAgICAgICBpZiAoZXYud2hpY2ggPT09IEtleUNvZGVzLmVudGVyKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuX2V4ZWN1dGVJdGVtQ2xpY2soZXYpO1xuICAgICAgICAgICAgICAgIGV2LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgZXYuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChvbkl0ZW1LZXlEb3duKSB7XG4gICAgICAgICAgICAgICAgb25JdGVtS2V5RG93bihpdGVtLCBldik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIF90aGlzLl9nZXRTdWJtZW51VGFyZ2V0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIF90aGlzLl9zcGxpdEJ1dHRvbjtcbiAgICAgICAgfTtcbiAgICAgICAgX3RoaXMuX3JlbmRlckFyaWFEZXNjcmlwdGlvbiA9IGZ1bmN0aW9uIChhcmlhRGVzY3JpcHRpb24sIGNsYXNzTmFtZSkge1xuICAgICAgICAgICAgLy8gSWYgYXJpYURlc2NyaXB0aW9uIGlzIGdpdmVuLCBkZXNjcmlwdGlvbklkIHdpbGwgYmUgYXNzaWduZWQgdG8gYXJpYURlc2NyaXB0aW9uU3BhblxuICAgICAgICAgICAgcmV0dXJuIGFyaWFEZXNjcmlwdGlvbiA/IChSZWFjdC5jcmVhdGVFbGVtZW50KFwic3BhblwiLCB7IGlkOiBfdGhpcy5fYXJpYURlc2NyaXB0aW9uSWQsIGNsYXNzTmFtZTogY2xhc3NOYW1lIH0sIGFyaWFEZXNjcmlwdGlvbikpIDogbnVsbDtcbiAgICAgICAgfTtcbiAgICAgICAgX3RoaXMuX29uSXRlbU1vdXNlRW50ZXJQcmltYXJ5ID0gZnVuY3Rpb24gKGV2KSB7XG4gICAgICAgICAgICB2YXIgX2EgPSBfdGhpcy5wcm9wcywgaXRlbSA9IF9hLml0ZW0sIG9uSXRlbU1vdXNlRW50ZXIgPSBfYS5vbkl0ZW1Nb3VzZUVudGVyO1xuICAgICAgICAgICAgaWYgKG9uSXRlbU1vdXNlRW50ZXIpIHtcbiAgICAgICAgICAgICAgICBvbkl0ZW1Nb3VzZUVudGVyKF9fYXNzaWduKF9fYXNzaWduKHt9LCBpdGVtKSwgeyBzdWJNZW51UHJvcHM6IHVuZGVmaW5lZCwgaXRlbXM6IHVuZGVmaW5lZCB9KSwgZXYsIF90aGlzLl9zcGxpdEJ1dHRvbik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIF90aGlzLl9vbkl0ZW1Nb3VzZUVudGVySWNvbiA9IGZ1bmN0aW9uIChldikge1xuICAgICAgICAgICAgdmFyIF9hID0gX3RoaXMucHJvcHMsIGl0ZW0gPSBfYS5pdGVtLCBvbkl0ZW1Nb3VzZUVudGVyID0gX2Eub25JdGVtTW91c2VFbnRlcjtcbiAgICAgICAgICAgIGlmIChvbkl0ZW1Nb3VzZUVudGVyKSB7XG4gICAgICAgICAgICAgICAgb25JdGVtTW91c2VFbnRlcihpdGVtLCBldiwgX3RoaXMuX3NwbGl0QnV0dG9uKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgX3RoaXMuX29uSXRlbU1vdXNlTW92ZVByaW1hcnkgPSBmdW5jdGlvbiAoZXYpIHtcbiAgICAgICAgICAgIHZhciBfYSA9IF90aGlzLnByb3BzLCBpdGVtID0gX2EuaXRlbSwgb25JdGVtTW91c2VNb3ZlID0gX2Eub25JdGVtTW91c2VNb3ZlO1xuICAgICAgICAgICAgaWYgKG9uSXRlbU1vdXNlTW92ZSkge1xuICAgICAgICAgICAgICAgIG9uSXRlbU1vdXNlTW92ZShfX2Fzc2lnbihfX2Fzc2lnbih7fSwgaXRlbSksIHsgc3ViTWVudVByb3BzOiB1bmRlZmluZWQsIGl0ZW1zOiB1bmRlZmluZWQgfSksIGV2LCBfdGhpcy5fc3BsaXRCdXR0b24pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBfdGhpcy5fb25JdGVtTW91c2VNb3ZlSWNvbiA9IGZ1bmN0aW9uIChldikge1xuICAgICAgICAgICAgdmFyIF9hID0gX3RoaXMucHJvcHMsIGl0ZW0gPSBfYS5pdGVtLCBvbkl0ZW1Nb3VzZU1vdmUgPSBfYS5vbkl0ZW1Nb3VzZU1vdmU7XG4gICAgICAgICAgICBpZiAob25JdGVtTW91c2VNb3ZlKSB7XG4gICAgICAgICAgICAgICAgb25JdGVtTW91c2VNb3ZlKGl0ZW0sIGV2LCBfdGhpcy5fc3BsaXRCdXR0b24pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBfdGhpcy5fb25JY29uSXRlbUNsaWNrID0gZnVuY3Rpb24gKGV2KSB7XG4gICAgICAgICAgICB2YXIgX2EgPSBfdGhpcy5wcm9wcywgaXRlbSA9IF9hLml0ZW0sIG9uSXRlbUNsaWNrQmFzZSA9IF9hLm9uSXRlbUNsaWNrQmFzZTtcbiAgICAgICAgICAgIGlmIChvbkl0ZW1DbGlja0Jhc2UpIHtcbiAgICAgICAgICAgICAgICBvbkl0ZW1DbGlja0Jhc2UoaXRlbSwgZXYsIChfdGhpcy5fc3BsaXRCdXR0b24gPyBfdGhpcy5fc3BsaXRCdXR0b24gOiBldi5jdXJyZW50VGFyZ2V0KSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIF90aGlzLl9leGVjdXRlSXRlbUNsaWNrID0gZnVuY3Rpb24gKGV2KSB7XG4gICAgICAgICAgICB2YXIgX2EgPSBfdGhpcy5wcm9wcywgaXRlbSA9IF9hLml0ZW0sIGV4ZWN1dGVJdGVtQ2xpY2sgPSBfYS5leGVjdXRlSXRlbUNsaWNrLCBvbkl0ZW1DbGljayA9IF9hLm9uSXRlbUNsaWNrO1xuICAgICAgICAgICAgaWYgKGl0ZW0uZGlzYWJsZWQgfHwgaXRlbS5pc0Rpc2FibGVkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKF90aGlzLl9wcm9jZXNzaW5nVG91Y2ggJiYgb25JdGVtQ2xpY2spIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gb25JdGVtQ2xpY2soaXRlbSwgZXYpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGV4ZWN1dGVJdGVtQ2xpY2spIHtcbiAgICAgICAgICAgICAgICBleGVjdXRlSXRlbUNsaWNrKGl0ZW0sIGV2KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgX3RoaXMuX29uVG91Y2hTdGFydCA9IGZ1bmN0aW9uIChldikge1xuICAgICAgICAgICAgaWYgKF90aGlzLl9zcGxpdEJ1dHRvbiAmJiAhKCdvbnBvaW50ZXJkb3duJyBpbiBfdGhpcy5fc3BsaXRCdXR0b24pKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuX2hhbmRsZVRvdWNoQW5kUG9pbnRlckV2ZW50KGV2KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgX3RoaXMuX29uUG9pbnRlckRvd24gPSBmdW5jdGlvbiAoZXYpIHtcbiAgICAgICAgICAgIGlmIChldi5wb2ludGVyVHlwZSA9PT0gJ3RvdWNoJykge1xuICAgICAgICAgICAgICAgIF90aGlzLl9oYW5kbGVUb3VjaEFuZFBvaW50ZXJFdmVudChldik7XG4gICAgICAgICAgICAgICAgZXYucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICBldi5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgX3RoaXMuX2FzeW5jID0gbmV3IEFzeW5jKF90aGlzKTtcbiAgICAgICAgX3RoaXMuX2V2ZW50cyA9IG5ldyBFdmVudEdyb3VwKF90aGlzKTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBDb250ZXh0dWFsTWVudVNwbGl0QnV0dG9uLnByb3RvdHlwZS5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMuX3NwbGl0QnV0dG9uICYmICdvbnBvaW50ZXJkb3duJyBpbiB0aGlzLl9zcGxpdEJ1dHRvbikge1xuICAgICAgICAgICAgdGhpcy5fZXZlbnRzLm9uKHRoaXMuX3NwbGl0QnV0dG9uLCAncG9pbnRlcmRvd24nLCB0aGlzLl9vblBvaW50ZXJEb3duLCB0cnVlKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgQ29udGV4dHVhbE1lbnVTcGxpdEJ1dHRvbi5wcm90b3R5cGUuY29tcG9uZW50V2lsbFVubW91bnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuX2FzeW5jLmRpc3Bvc2UoKTtcbiAgICAgICAgdGhpcy5fZXZlbnRzLmRpc3Bvc2UoKTtcbiAgICB9O1xuICAgIENvbnRleHR1YWxNZW51U3BsaXRCdXR0b24ucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdmFyIF9hID0gdGhpcy5wcm9wcywgaXRlbSA9IF9hLml0ZW0sIGNsYXNzTmFtZXMgPSBfYS5jbGFzc05hbWVzLCBpbmRleCA9IF9hLmluZGV4LCBmb2N1c2FibGVFbGVtZW50SW5kZXggPSBfYS5mb2N1c2FibGVFbGVtZW50SW5kZXgsIHRvdGFsSXRlbUNvdW50ID0gX2EudG90YWxJdGVtQ291bnQsIGhhc0NoZWNrbWFya3MgPSBfYS5oYXNDaGVja21hcmtzLCBoYXNJY29ucyA9IF9hLmhhc0ljb25zLCBvbkl0ZW1Nb3VzZUxlYXZlID0gX2Eub25JdGVtTW91c2VMZWF2ZSwgZXhwYW5kZWRNZW51SXRlbUtleSA9IF9hLmV4cGFuZGVkTWVudUl0ZW1LZXk7XG4gICAgICAgIHZhciBpdGVtSGFzU3VibWVudSA9IGhhc1N1Ym1lbnUoaXRlbSk7XG4gICAgICAgIHZhciBrZXl0aXBQcm9wcyA9IGl0ZW0ua2V5dGlwUHJvcHM7XG4gICAgICAgIGlmIChrZXl0aXBQcm9wcykge1xuICAgICAgICAgICAga2V5dGlwUHJvcHMgPSB0aGlzLl9nZXRNZW1vaXplZE1lbnVCdXR0b25LZXl0aXBQcm9wcyhrZXl0aXBQcm9wcyk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gQ2hlY2sgZm9yIGFyaWFEZXNjcmlwdGlvbiB0byBzZXQgdGhlIF9hcmlhRGVzY3JpcHRpb25JZCBhbmQgcmVuZGVyIGEgaGlkZGVuIHNwYW4gd2l0aFxuICAgICAgICAvLyB0aGUgZGVzY3JpcHRpb24gaW4gaXQgdG8gYmUgYWRkZWQgdG8gYXJpYURlc2NyaWJlZEJ5XG4gICAgICAgIHZhciBhcmlhRGVzY3JpcHRpb24gPSBpdGVtLmFyaWFEZXNjcmlwdGlvbjtcbiAgICAgICAgaWYgKGFyaWFEZXNjcmlwdGlvbikge1xuICAgICAgICAgICAgdGhpcy5fYXJpYURlc2NyaXB0aW9uSWQgPSBnZXRJZCgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAoUmVhY3QuY3JlYXRlRWxlbWVudChLZXl0aXBEYXRhLCB7IGtleXRpcFByb3BzOiBrZXl0aXBQcm9wcywgZGlzYWJsZWQ6IGlzSXRlbURpc2FibGVkKGl0ZW0pIH0sIGZ1bmN0aW9uIChrZXl0aXBBdHRyaWJ1dGVzKSB7IHJldHVybiAoUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7IFwiZGF0YS1rdHAtdGFyZ2V0XCI6IGtleXRpcEF0dHJpYnV0ZXNbJ2RhdGEta3RwLXRhcmdldCddLCByZWY6IGZ1bmN0aW9uIChzcGxpdEJ1dHRvbikgeyByZXR1cm4gKF90aGlzLl9zcGxpdEJ1dHRvbiA9IHNwbGl0QnV0dG9uKTsgfSwgcm9sZTogZ2V0TWVudUl0ZW1BcmlhUm9sZShpdGVtKSwgXCJhcmlhLWxhYmVsXCI6IGl0ZW0uYXJpYUxhYmVsLCBjbGFzc05hbWU6IGNsYXNzTmFtZXMuc3BsaXRDb250YWluZXIsIFwiYXJpYS1kaXNhYmxlZFwiOiBpc0l0ZW1EaXNhYmxlZChpdGVtKSwgXCJhcmlhLWV4cGFuZGVkXCI6IGl0ZW1IYXNTdWJtZW51ID8gaXRlbS5rZXkgPT09IGV4cGFuZGVkTWVudUl0ZW1LZXkgOiB1bmRlZmluZWQsIFwiYXJpYS1oYXNwb3B1cFwiOiB0cnVlLCBcImFyaWEtZGVzY3JpYmVkYnlcIjogbWVyZ2VBcmlhQXR0cmlidXRlVmFsdWVzKGl0ZW0uYXJpYURlc2NyaWJlZEJ5LCBhcmlhRGVzY3JpcHRpb24gPyBfdGhpcy5fYXJpYURlc2NyaXB0aW9uSWQgOiB1bmRlZmluZWQsIGtleXRpcEF0dHJpYnV0ZXNbJ2FyaWEtZGVzY3JpYmVkYnknXSksIFwiYXJpYS1jaGVja2VkXCI6IGl0ZW0uaXNDaGVja2VkIHx8IGl0ZW0uY2hlY2tlZCwgXCJhcmlhLXBvc2luc2V0XCI6IGZvY3VzYWJsZUVsZW1lbnRJbmRleCArIDEsIFwiYXJpYS1zZXRzaXplXCI6IHRvdGFsSXRlbUNvdW50LCBvbk1vdXNlRW50ZXI6IF90aGlzLl9vbkl0ZW1Nb3VzZUVudGVyUHJpbWFyeSwgb25Nb3VzZUxlYXZlOiBvbkl0ZW1Nb3VzZUxlYXZlID8gb25JdGVtTW91c2VMZWF2ZS5iaW5kKF90aGlzLCBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgaXRlbSksIHsgc3ViTWVudVByb3BzOiBudWxsLCBpdGVtczogbnVsbCB9KSkgOiB1bmRlZmluZWQsIG9uTW91c2VNb3ZlOiBfdGhpcy5fb25JdGVtTW91c2VNb3ZlUHJpbWFyeSwgb25LZXlEb3duOiBfdGhpcy5fb25JdGVtS2V5RG93biwgb25DbGljazogX3RoaXMuX2V4ZWN1dGVJdGVtQ2xpY2ssIG9uVG91Y2hTdGFydDogX3RoaXMuX29uVG91Y2hTdGFydCwgdGFiSW5kZXg6IDAsIFwiZGF0YS1pcy1mb2N1c2FibGVcIjogdHJ1ZSwgXCJhcmlhLXJvbGVkZXNjcmlwdGlvblwiOiBpdGVtWydhcmlhLXJvbGVkZXNjcmlwdGlvbiddIH0sXG4gICAgICAgICAgICBfdGhpcy5fcmVuZGVyU3BsaXRQcmltYXJ5QnV0dG9uKGl0ZW0sIGNsYXNzTmFtZXMsIGluZGV4LCBoYXNDaGVja21hcmtzLCBoYXNJY29ucyksXG4gICAgICAgICAgICBfdGhpcy5fcmVuZGVyU3BsaXREaXZpZGVyKGl0ZW0pLFxuICAgICAgICAgICAgX3RoaXMuX3JlbmRlclNwbGl0SWNvbkJ1dHRvbihpdGVtLCBjbGFzc05hbWVzLCBpbmRleCwga2V5dGlwQXR0cmlidXRlcyksXG4gICAgICAgICAgICBfdGhpcy5fcmVuZGVyQXJpYURlc2NyaXB0aW9uKGFyaWFEZXNjcmlwdGlvbiwgY2xhc3NOYW1lcy5zY3JlZW5SZWFkZXJUZXh0KSkpOyB9KSk7XG4gICAgfTtcbiAgICBDb250ZXh0dWFsTWVudVNwbGl0QnV0dG9uLnByb3RvdHlwZS5fcmVuZGVyU3BsaXRQcmltYXJ5QnV0dG9uID0gZnVuY3Rpb24gKGl0ZW0sIFxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBkZXByZWNhdGlvbi9kZXByZWNhdGlvblxuICAgIGNsYXNzTmFtZXMsIGluZGV4LCBoYXNDaGVja21hcmtzLCBoYXNJY29ucykge1xuICAgICAgICB2YXIgX2EgPSB0aGlzLnByb3BzLCBfYiA9IF9hLmNvbnRleHR1YWxNZW51SXRlbUFzLCBDaGlsZHJlblJlbmRlcmVyID0gX2IgPT09IHZvaWQgMCA/IENvbnRleHR1YWxNZW51SXRlbSA6IF9iLCBvbkl0ZW1DbGljayA9IF9hLm9uSXRlbUNsaWNrO1xuICAgICAgICB2YXIgaXRlbVByb3BzID0ge1xuICAgICAgICAgICAga2V5OiBpdGVtLmtleSxcbiAgICAgICAgICAgIGRpc2FibGVkOiBpc0l0ZW1EaXNhYmxlZChpdGVtKSB8fCBpdGVtLnByaW1hcnlEaXNhYmxlZCxcbiAgICAgICAgICAgIC8qIGVzbGludC1kaXNhYmxlIGRlcHJlY2F0aW9uL2RlcHJlY2F0aW9uICovXG4gICAgICAgICAgICBuYW1lOiBpdGVtLm5hbWUsXG4gICAgICAgICAgICB0ZXh0OiBpdGVtLnRleHQgfHwgaXRlbS5uYW1lLFxuICAgICAgICAgICAgc2Vjb25kYXJ5VGV4dDogaXRlbS5zZWNvbmRhcnlUZXh0LFxuICAgICAgICAgICAgLyogZXNsaW50LWVuYWJsZSBkZXByZWNhdGlvbi9kZXByZWNhdGlvbiAqL1xuICAgICAgICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWVzLnNwbGl0UHJpbWFyeSxcbiAgICAgICAgICAgIGNhbkNoZWNrOiBpdGVtLmNhbkNoZWNrLFxuICAgICAgICAgICAgaXNDaGVja2VkOiBpdGVtLmlzQ2hlY2tlZCxcbiAgICAgICAgICAgIGNoZWNrZWQ6IGl0ZW0uY2hlY2tlZCxcbiAgICAgICAgICAgIGljb25Qcm9wczogaXRlbS5pY29uUHJvcHMsXG4gICAgICAgICAgICBvblJlbmRlckljb246IGl0ZW0ub25SZW5kZXJJY29uLFxuICAgICAgICAgICAgZGF0YTogaXRlbS5kYXRhLFxuICAgICAgICAgICAgJ2RhdGEtaXMtZm9jdXNhYmxlJzogZmFsc2UsXG4gICAgICAgIH07XG4gICAgICAgIHZhciBpdGVtQ29tcG9uZW50UHJvcHMgPSBpdGVtLml0ZW1Qcm9wcztcbiAgICAgICAgcmV0dXJuIChSZWFjdC5jcmVhdGVFbGVtZW50KFwiYnV0dG9uXCIsIF9fYXNzaWduKHt9LCBnZXROYXRpdmVQcm9wcyhpdGVtUHJvcHMsIGJ1dHRvblByb3BlcnRpZXMpKSxcbiAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ2hpbGRyZW5SZW5kZXJlciwgX19hc3NpZ24oeyBcImRhdGEtaXMtZm9jdXNhYmxlXCI6IGZhbHNlLCBpdGVtOiBpdGVtUHJvcHMsIGNsYXNzTmFtZXM6IGNsYXNzTmFtZXMsIGluZGV4OiBpbmRleCwgb25DaGVja21hcmtDbGljazogaGFzQ2hlY2ttYXJrcyAmJiBvbkl0ZW1DbGljayA/IG9uSXRlbUNsaWNrIDogdW5kZWZpbmVkLCBoYXNJY29uczogaGFzSWNvbnMgfSwgaXRlbUNvbXBvbmVudFByb3BzKSkpKTtcbiAgICB9O1xuICAgIENvbnRleHR1YWxNZW51U3BsaXRCdXR0b24ucHJvdG90eXBlLl9yZW5kZXJTcGxpdERpdmlkZXIgPSBmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgICB2YXIgZ2V0RGl2aWRlckNsYXNzTmFtZXMgPSBpdGVtLmdldFNwbGl0QnV0dG9uVmVydGljYWxEaXZpZGVyQ2xhc3NOYW1lcyB8fCBnZXRTcGxpdEJ1dHRvblZlcnRpY2FsRGl2aWRlckNsYXNzTmFtZXM7XG4gICAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFZlcnRpY2FsRGl2aWRlciwgeyBnZXRDbGFzc05hbWVzOiBnZXREaXZpZGVyQ2xhc3NOYW1lcyB9KTtcbiAgICB9O1xuICAgIENvbnRleHR1YWxNZW51U3BsaXRCdXR0b24ucHJvdG90eXBlLl9yZW5kZXJTcGxpdEljb25CdXR0b24gPSBmdW5jdGlvbiAoaXRlbSwgY2xhc3NOYW1lcywgLy8gZXNsaW50LWRpc2FibGUtbGluZSBkZXByZWNhdGlvbi9kZXByZWNhdGlvblxuICAgIGluZGV4LCBrZXl0aXBBdHRyaWJ1dGVzKSB7XG4gICAgICAgIHZhciBfYSA9IHRoaXMucHJvcHMsIF9iID0gX2EuY29udGV4dHVhbE1lbnVJdGVtQXMsIENoaWxkcmVuUmVuZGVyZXIgPSBfYiA9PT0gdm9pZCAwID8gQ29udGV4dHVhbE1lbnVJdGVtIDogX2IsIG9uSXRlbU1vdXNlTGVhdmUgPSBfYS5vbkl0ZW1Nb3VzZUxlYXZlLCBvbkl0ZW1Nb3VzZURvd24gPSBfYS5vbkl0ZW1Nb3VzZURvd24sIG9wZW5TdWJNZW51ID0gX2Eub3BlblN1Yk1lbnUsIGRpc21pc3NTdWJNZW51ID0gX2EuZGlzbWlzc1N1Yk1lbnUsIGRpc21pc3NNZW51ID0gX2EuZGlzbWlzc01lbnU7XG4gICAgICAgIHZhciBpdGVtUHJvcHMgPSB7XG4gICAgICAgICAgICBvbkNsaWNrOiB0aGlzLl9vbkljb25JdGVtQ2xpY2ssXG4gICAgICAgICAgICBkaXNhYmxlZDogaXNJdGVtRGlzYWJsZWQoaXRlbSksXG4gICAgICAgICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZXMuc3BsaXRNZW51LFxuICAgICAgICAgICAgc3ViTWVudVByb3BzOiBpdGVtLnN1Yk1lbnVQcm9wcyxcbiAgICAgICAgICAgIHN1Ym1lbnVJY29uUHJvcHM6IGl0ZW0uc3VibWVudUljb25Qcm9wcyxcbiAgICAgICAgICAgIHNwbGl0OiB0cnVlLFxuICAgICAgICAgICAga2V5OiBpdGVtLmtleSxcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIGJ1dHRvblByb3BzID0gX19hc3NpZ24oX19hc3NpZ24oe30sIGdldE5hdGl2ZVByb3BzKGl0ZW1Qcm9wcywgYnV0dG9uUHJvcGVydGllcykpLCB7XG4gICAgICAgICAgICBvbk1vdXNlRW50ZXI6IHRoaXMuX29uSXRlbU1vdXNlRW50ZXJJY29uLFxuICAgICAgICAgICAgb25Nb3VzZUxlYXZlOiBvbkl0ZW1Nb3VzZUxlYXZlID8gb25JdGVtTW91c2VMZWF2ZS5iaW5kKHRoaXMsIGl0ZW0pIDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgb25Nb3VzZURvd246IGZ1bmN0aW9uIChldikge1xuICAgICAgICAgICAgICAgIHJldHVybiBvbkl0ZW1Nb3VzZURvd24gPyBvbkl0ZW1Nb3VzZURvd24oaXRlbSwgZXYpIDogdW5kZWZpbmVkO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG9uTW91c2VNb3ZlOiB0aGlzLl9vbkl0ZW1Nb3VzZU1vdmVJY29uLFxuICAgICAgICAgICAgJ2RhdGEtaXMtZm9jdXNhYmxlJzogZmFsc2UsXG4gICAgICAgICAgICAnZGF0YS1rdHAtZXhlY3V0ZS10YXJnZXQnOiBrZXl0aXBBdHRyaWJ1dGVzWydkYXRhLWt0cC1leGVjdXRlLXRhcmdldCddLFxuICAgICAgICAgICAgJ2FyaWEtaGlkZGVuJzogdHJ1ZSxcbiAgICAgICAgfSk7XG4gICAgICAgIHZhciBpdGVtQ29tcG9uZW50UHJvcHMgPSBpdGVtLml0ZW1Qcm9wcztcbiAgICAgICAgcmV0dXJuIChSZWFjdC5jcmVhdGVFbGVtZW50KFwiYnV0dG9uXCIsIF9fYXNzaWduKHt9LCBidXR0b25Qcm9wcyksXG4gICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KENoaWxkcmVuUmVuZGVyZXIsIF9fYXNzaWduKHsgY29tcG9uZW50UmVmOiBpdGVtLmNvbXBvbmVudFJlZiwgaXRlbTogaXRlbVByb3BzLCBjbGFzc05hbWVzOiBjbGFzc05hbWVzLCBpbmRleDogaW5kZXgsIGhhc0ljb25zOiBmYWxzZSwgb3BlblN1Yk1lbnU6IG9wZW5TdWJNZW51LCBkaXNtaXNzU3ViTWVudTogZGlzbWlzc1N1Yk1lbnUsIGRpc21pc3NNZW51OiBkaXNtaXNzTWVudSwgZ2V0U3VibWVudVRhcmdldDogdGhpcy5fZ2V0U3VibWVudVRhcmdldCB9LCBpdGVtQ29tcG9uZW50UHJvcHMpKSkpO1xuICAgIH07XG4gICAgQ29udGV4dHVhbE1lbnVTcGxpdEJ1dHRvbi5wcm90b3R5cGUuX2hhbmRsZVRvdWNoQW5kUG9pbnRlckV2ZW50ID0gZnVuY3Rpb24gKGV2KSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHZhciBvblRhcCA9IHRoaXMucHJvcHMub25UYXA7XG4gICAgICAgIGlmIChvblRhcCkge1xuICAgICAgICAgICAgb25UYXAoZXYpO1xuICAgICAgICB9XG4gICAgICAgIC8vIElmIHdlIGFscmVhZHkgaGF2ZSBhbiBleGlzdGluZyB0aW1lb3V0IGZyb20gYSBwcmV2aW91cyB0b3VjaC9wb2ludGVyIGV2ZW50XG4gICAgICAgIC8vIGNhbmNlbCB0aGF0IHRpbWVvdXQgc28gd2UgY2FuIHNldCBhIG5ldyBvbmUuXG4gICAgICAgIGlmICh0aGlzLl9sYXN0VG91Y2hUaW1lb3V0SWQpIHtcbiAgICAgICAgICAgIHRoaXMuX2FzeW5jLmNsZWFyVGltZW91dCh0aGlzLl9sYXN0VG91Y2hUaW1lb3V0SWQpO1xuICAgICAgICAgICAgdGhpcy5fbGFzdFRvdWNoVGltZW91dElkID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3Byb2Nlc3NpbmdUb3VjaCA9IHRydWU7XG4gICAgICAgIHRoaXMuX2xhc3RUb3VjaFRpbWVvdXRJZCA9IHRoaXMuX2FzeW5jLnNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgX3RoaXMuX3Byb2Nlc3NpbmdUb3VjaCA9IGZhbHNlO1xuICAgICAgICAgICAgX3RoaXMuX2xhc3RUb3VjaFRpbWVvdXRJZCA9IHVuZGVmaW5lZDtcbiAgICAgICAgfSwgVG91Y2hJZGxlRGVsYXkpO1xuICAgIH07XG4gICAgcmV0dXJuIENvbnRleHR1YWxNZW51U3BsaXRCdXR0b247XG59KENvbnRleHR1YWxNZW51SXRlbVdyYXBwZXIpKTtcbmV4cG9ydCB7IENvbnRleHR1YWxNZW51U3BsaXRCdXR0b24gfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUNvbnRleHR1YWxNZW51U3BsaXRCdXR0b24uanMubWFwIiwiaW1wb3J0IHsgX19hc3NpZ24sIF9fZXh0ZW5kcyB9IGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgYnV0dG9uUHJvcGVydGllcywgZ2V0TmF0aXZlUHJvcHMsIG1lbW9pemVGdW5jdGlvbiwgZ2V0SWQsIG1lcmdlQXJpYUF0dHJpYnV0ZVZhbHVlcyB9IGZyb20gJy4uLy4uLy4uL1V0aWxpdGllcyc7XG5pbXBvcnQgeyBDb250ZXh0dWFsTWVudUl0ZW1XcmFwcGVyIH0gZnJvbSAnLi9Db250ZXh0dWFsTWVudUl0ZW1XcmFwcGVyJztcbmltcG9ydCB7IEtleXRpcERhdGEgfSBmcm9tICcuLi8uLi8uLi9LZXl0aXBEYXRhJztcbmltcG9ydCB7IGdldElzQ2hlY2tlZCwgaXNJdGVtRGlzYWJsZWQsIGhhc1N1Ym1lbnUsIGdldE1lbnVJdGVtQXJpYVJvbGUgfSBmcm9tICcuLi8uLi8uLi91dGlsaXRpZXMvY29udGV4dHVhbE1lbnUvaW5kZXgnO1xuaW1wb3J0IHsgQ29udGV4dHVhbE1lbnVJdGVtIH0gZnJvbSAnLi4vQ29udGV4dHVhbE1lbnVJdGVtJztcbnZhciBDb250ZXh0dWFsTWVudUJ1dHRvbiA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoQ29udGV4dHVhbE1lbnVCdXR0b24sIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gQ29udGV4dHVhbE1lbnVCdXR0b24oKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlciAhPT0gbnVsbCAmJiBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5fYnRuID0gUmVhY3QuY3JlYXRlUmVmKCk7XG4gICAgICAgIF90aGlzLl9nZXRNZW1vaXplZE1lbnVCdXR0b25LZXl0aXBQcm9wcyA9IG1lbW9pemVGdW5jdGlvbihmdW5jdGlvbiAoa2V5dGlwUHJvcHMpIHtcbiAgICAgICAgICAgIHJldHVybiBfX2Fzc2lnbihfX2Fzc2lnbih7fSwga2V5dGlwUHJvcHMpLCB7IGhhc01lbnU6IHRydWUgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICBfdGhpcy5fcmVuZGVyQXJpYURlc2NyaXB0aW9uID0gZnVuY3Rpb24gKGFyaWFEZXNjcmlwdGlvbiwgY2xhc3NOYW1lKSB7XG4gICAgICAgICAgICAvLyBJZiBhcmlhRGVzY3JpcHRpb24gaXMgZ2l2ZW4sIGRlc2NyaXB0aW9uSWQgd2lsbCBiZSBhc3NpZ25lZCB0byBhcmlhRGVzY3JpcHRpb25TcGFuXG4gICAgICAgICAgICByZXR1cm4gYXJpYURlc2NyaXB0aW9uID8gKFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIHsgaWQ6IF90aGlzLl9hcmlhRGVzY3JpcHRpb25JZCwgY2xhc3NOYW1lOiBjbGFzc05hbWUgfSwgYXJpYURlc2NyaXB0aW9uKSkgOiBudWxsO1xuICAgICAgICB9O1xuICAgICAgICBfdGhpcy5fZ2V0U3VibWVudVRhcmdldCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBfdGhpcy5fYnRuLmN1cnJlbnQgPyBfdGhpcy5fYnRuLmN1cnJlbnQgOiB1bmRlZmluZWQ7XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgQ29udGV4dHVhbE1lbnVCdXR0b24ucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdmFyIF9hID0gdGhpcy5wcm9wcywgaXRlbSA9IF9hLml0ZW0sIGNsYXNzTmFtZXMgPSBfYS5jbGFzc05hbWVzLCBpbmRleCA9IF9hLmluZGV4LCBmb2N1c2FibGVFbGVtZW50SW5kZXggPSBfYS5mb2N1c2FibGVFbGVtZW50SW5kZXgsIHRvdGFsSXRlbUNvdW50ID0gX2EudG90YWxJdGVtQ291bnQsIGhhc0NoZWNrbWFya3MgPSBfYS5oYXNDaGVja21hcmtzLCBoYXNJY29ucyA9IF9hLmhhc0ljb25zLCBfYiA9IF9hLmNvbnRleHR1YWxNZW51SXRlbUFzLCBDaGlsZHJlblJlbmRlcmVyID0gX2IgPT09IHZvaWQgMCA/IENvbnRleHR1YWxNZW51SXRlbSA6IF9iLCBleHBhbmRlZE1lbnVJdGVtS2V5ID0gX2EuZXhwYW5kZWRNZW51SXRlbUtleSwgb25JdGVtTW91c2VEb3duID0gX2Eub25JdGVtTW91c2VEb3duLCBvbkl0ZW1DbGljayA9IF9hLm9uSXRlbUNsaWNrLCBvcGVuU3ViTWVudSA9IF9hLm9wZW5TdWJNZW51LCBkaXNtaXNzU3ViTWVudSA9IF9hLmRpc21pc3NTdWJNZW51LCBkaXNtaXNzTWVudSA9IF9hLmRpc21pc3NNZW51O1xuICAgICAgICB2YXIgaXNDaGVja2VkID0gZ2V0SXNDaGVja2VkKGl0ZW0pO1xuICAgICAgICB2YXIgY2FuQ2hlY2sgPSBpc0NoZWNrZWQgIT09IG51bGw7XG4gICAgICAgIHZhciBkZWZhdWx0Um9sZSA9IGdldE1lbnVJdGVtQXJpYVJvbGUoaXRlbSk7XG4gICAgICAgIHZhciBpdGVtSGFzU3VibWVudSA9IGhhc1N1Ym1lbnUoaXRlbSk7XG4gICAgICAgIHZhciBpdGVtUHJvcHMgPSBpdGVtLml0ZW1Qcm9wcywgYXJpYUxhYmVsID0gaXRlbS5hcmlhTGFiZWwsIGFyaWFEZXNjcmlwdGlvbiA9IGl0ZW0uYXJpYURlc2NyaXB0aW9uO1xuICAgICAgICB2YXIgYnV0dG9uTmF0aXZlUHJvcGVydGllcyA9IGdldE5hdGl2ZVByb3BzKGl0ZW0sIGJ1dHRvblByb3BlcnRpZXMpO1xuICAgICAgICAvLyBEbyBub3QgYWRkIHRoZSBkaXNhYmxlZCBhdHRyaWJ1dGUgdG8gdGhlIGJ1dHRvbiBzbyB0aGF0IGl0IGlzIGZvY3VzYWJsZVxuICAgICAgICBkZWxldGUgYnV0dG9uTmF0aXZlUHJvcGVydGllcy5kaXNhYmxlZDtcbiAgICAgICAgdmFyIGl0ZW1Sb2xlID0gaXRlbS5yb2xlIHx8IGRlZmF1bHRSb2xlO1xuICAgICAgICAvLyBDaGVjayBmb3IgYXJpYURlc2NyaXB0aW9uIHRvIHNldCB0aGUgX2FyaWFEZXNjcmlwdGlvbklkIGFuZCByZW5kZXIgYSBoaWRkZW4gc3BhbiB3aXRoXG4gICAgICAgIC8vIHRoZSBkZXNjcmlwdGlvbiBpbiBpdCB0byBiZSBhZGRlZCB0byBhcmlhRGVzY3JpYmVkQnlcbiAgICAgICAgaWYgKGFyaWFEZXNjcmlwdGlvbikge1xuICAgICAgICAgICAgdGhpcy5fYXJpYURlc2NyaXB0aW9uSWQgPSBnZXRJZCgpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBhcmlhRGVzY3JpYmVkQnlJZHMgPSBtZXJnZUFyaWFBdHRyaWJ1dGVWYWx1ZXMoaXRlbS5hcmlhRGVzY3JpYmVkQnksIGFyaWFEZXNjcmlwdGlvbiA/IHRoaXMuX2FyaWFEZXNjcmlwdGlvbklkIDogdW5kZWZpbmVkLCBidXR0b25OYXRpdmVQcm9wZXJ0aWVzWydhcmlhLWRlc2NyaWJlZGJ5J10pO1xuICAgICAgICB2YXIgaXRlbUJ1dHRvblByb3BlcnRpZXMgPSB7XG4gICAgICAgICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZXMucm9vdCxcbiAgICAgICAgICAgIG9uQ2xpY2s6IHRoaXMuX29uSXRlbUNsaWNrLFxuICAgICAgICAgICAgb25LZXlEb3duOiBpdGVtSGFzU3VibWVudSA/IHRoaXMuX29uSXRlbUtleURvd24gOiB1bmRlZmluZWQsXG4gICAgICAgICAgICBvbk1vdXNlRW50ZXI6IHRoaXMuX29uSXRlbU1vdXNlRW50ZXIsXG4gICAgICAgICAgICBvbk1vdXNlTGVhdmU6IHRoaXMuX29uSXRlbU1vdXNlTGVhdmUsXG4gICAgICAgICAgICBvbk1vdXNlRG93bjogZnVuY3Rpb24gKGV2KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG9uSXRlbU1vdXNlRG93biA/IG9uSXRlbU1vdXNlRG93bihpdGVtLCBldikgOiB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgb25Nb3VzZU1vdmU6IHRoaXMuX29uSXRlbU1vdXNlTW92ZSxcbiAgICAgICAgICAgIGhyZWY6IGl0ZW0uaHJlZixcbiAgICAgICAgICAgIHRpdGxlOiBpdGVtLnRpdGxlLFxuICAgICAgICAgICAgJ2FyaWEtbGFiZWwnOiBhcmlhTGFiZWwsXG4gICAgICAgICAgICAnYXJpYS1kZXNjcmliZWRieSc6IGFyaWFEZXNjcmliZWRCeUlkcyxcbiAgICAgICAgICAgICdhcmlhLWhhc3BvcHVwJzogaXRlbUhhc1N1Ym1lbnUgfHwgdW5kZWZpbmVkLFxuICAgICAgICAgICAgJ2FyaWEtZXhwYW5kZWQnOiBpdGVtSGFzU3VibWVudSA/IGl0ZW0ua2V5ID09PSBleHBhbmRlZE1lbnVJdGVtS2V5IDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgJ2FyaWEtcG9zaW5zZXQnOiBmb2N1c2FibGVFbGVtZW50SW5kZXggKyAxLFxuICAgICAgICAgICAgJ2FyaWEtc2V0c2l6ZSc6IHRvdGFsSXRlbUNvdW50LFxuICAgICAgICAgICAgJ2FyaWEtZGlzYWJsZWQnOiBpc0l0ZW1EaXNhYmxlZChpdGVtKSxcbiAgICAgICAgICAgICdhcmlhLWNoZWNrZWQnOiAoaXRlbVJvbGUgPT09ICdtZW51aXRlbWNoZWNrYm94JyB8fCBpdGVtUm9sZSA9PT0gJ21lbnVpdGVtcmFkaW8nKSAmJiBjYW5DaGVjayA/ICEhaXNDaGVja2VkIDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgJ2FyaWEtc2VsZWN0ZWQnOiBpdGVtUm9sZSA9PT0gJ21lbnVpdGVtJyAmJiBjYW5DaGVjayA/ICEhaXNDaGVja2VkIDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgcm9sZTogaXRlbVJvbGUsXG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZGVwcmVjYXRpb24vZGVwcmVjYXRpb25cbiAgICAgICAgICAgIHN0eWxlOiBpdGVtLnN0eWxlLFxuICAgICAgICB9O1xuICAgICAgICB2YXIga2V5dGlwUHJvcHMgPSBpdGVtLmtleXRpcFByb3BzO1xuICAgICAgICBpZiAoa2V5dGlwUHJvcHMgJiYgaXRlbUhhc1N1Ym1lbnUpIHtcbiAgICAgICAgICAgIGtleXRpcFByb3BzID0gdGhpcy5fZ2V0TWVtb2l6ZWRNZW51QnV0dG9uS2V5dGlwUHJvcHMoa2V5dGlwUHJvcHMpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAoUmVhY3QuY3JlYXRlRWxlbWVudChLZXl0aXBEYXRhLCB7IGtleXRpcFByb3BzOiBrZXl0aXBQcm9wcywgYXJpYURlc2NyaWJlZEJ5OiBhcmlhRGVzY3JpYmVkQnlJZHMsIGRpc2FibGVkOiBpc0l0ZW1EaXNhYmxlZChpdGVtKSB9LCBmdW5jdGlvbiAoa2V5dGlwQXR0cmlidXRlcykgeyByZXR1cm4gKFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJidXR0b25cIiwgX19hc3NpZ24oeyByZWY6IF90aGlzLl9idG4gfSwgYnV0dG9uTmF0aXZlUHJvcGVydGllcywgaXRlbUJ1dHRvblByb3BlcnRpZXMsIGtleXRpcEF0dHJpYnV0ZXMpLFxuICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChDaGlsZHJlblJlbmRlcmVyLCBfX2Fzc2lnbih7IGNvbXBvbmVudFJlZjogaXRlbS5jb21wb25lbnRSZWYsIGl0ZW06IGl0ZW0sIGNsYXNzTmFtZXM6IGNsYXNzTmFtZXMsIGluZGV4OiBpbmRleCwgb25DaGVja21hcmtDbGljazogaGFzQ2hlY2ttYXJrcyAmJiBvbkl0ZW1DbGljayA/IG9uSXRlbUNsaWNrIDogdW5kZWZpbmVkLCBoYXNJY29uczogaGFzSWNvbnMsIG9wZW5TdWJNZW51OiBvcGVuU3ViTWVudSwgZGlzbWlzc1N1Yk1lbnU6IGRpc21pc3NTdWJNZW51LCBkaXNtaXNzTWVudTogZGlzbWlzc01lbnUsIGdldFN1Ym1lbnVUYXJnZXQ6IF90aGlzLl9nZXRTdWJtZW51VGFyZ2V0IH0sIGl0ZW1Qcm9wcykpLFxuICAgICAgICAgICAgX3RoaXMuX3JlbmRlckFyaWFEZXNjcmlwdGlvbihhcmlhRGVzY3JpcHRpb24sIGNsYXNzTmFtZXMuc2NyZWVuUmVhZGVyVGV4dCkpKTsgfSkpO1xuICAgIH07XG4gICAgcmV0dXJuIENvbnRleHR1YWxNZW51QnV0dG9uO1xufShDb250ZXh0dWFsTWVudUl0ZW1XcmFwcGVyKSk7XG5leHBvcnQgeyBDb250ZXh0dWFsTWVudUJ1dHRvbiB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Q29udGV4dHVhbE1lbnVCdXR0b24uanMubWFwIiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgZ2V0SWQgfSBmcm9tICdAZmx1ZW50dWkvdXRpbGl0aWVzJztcbi8qKlxuICogSG9vayB0byBnZW5lcmF0ZSBhIHVuaXF1ZSBJRCBpbiB0aGUgZ2xvYmFsIHNjb3BlIChzcGFubmluZyBhY3Jvc3MgZHVwbGljYXRlIGNvcGllcyBvZiB0aGUgc2FtZSBsaWJyYXJ5KS5cbiAqXG4gKiBAcGFyYW0gcHJlZml4IC0gT3B0aW9uYWwgcHJlZml4IGZvciB0aGUgSURcbiAqIEBwYXJhbSBwcm92aWRlZElkIC0gT3B0aW9uYWwgaWQgcHJvdmlkZWQgYnkgYSBwYXJlbnQgY29tcG9uZW50LiBEZWZhdWx0cyB0byB0aGUgcHJvdmlkZWQgdmFsdWUgaWYgcHJlc2VudCxcbiAqICB3aXRob3V0IGNvbmRpdGlvbmluZyB0aGUgaG9vayBjYWxsXG4gKiBAcmV0dXJucyBUaGUgSURcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVzZUlkKHByZWZpeCwgcHJvdmlkZWRJZCkge1xuICAgIC8vIGdldElkIHNob3VsZCBvbmx5IGJlIGNhbGxlZCBvbmNlIHNpbmNlIGl0IHVwZGF0ZXMgdGhlIGdsb2JhbCBjb25zdGFudCBmb3IgdGhlIG5leHQgSUQgdmFsdWUuXG4gICAgLy8gKFdoaWxlIGFuIGV4dHJhIHVwZGF0ZSBpc24ndCBsaWtlbHkgdG8gY2F1c2UgcHJvYmxlbXMgaW4gcHJhY3RpY2UsIGl0J3MgYmV0dGVyIHRvIGF2b2lkIGl0LilcbiAgICB2YXIgcmVmID0gUmVhY3QudXNlUmVmKHByb3ZpZGVkSWQpO1xuICAgIGlmICghcmVmLmN1cnJlbnQpIHtcbiAgICAgICAgcmVmLmN1cnJlbnQgPSBnZXRJZChwcmVmaXgpO1xuICAgIH1cbiAgICByZXR1cm4gcmVmLmN1cnJlbnQ7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD11c2VJZC5qcy5tYXAiLCJ2YXIgUkVBQ1RfTElGRUNZQ0xFX0VYQ0xVU0lPTlMgPSBbXG4gICAgJ3NldFN0YXRlJyxcbiAgICAncmVuZGVyJyxcbiAgICAnY29tcG9uZW50V2lsbE1vdW50JyxcbiAgICAnVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCcsXG4gICAgJ2NvbXBvbmVudERpZE1vdW50JyxcbiAgICAnY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcycsXG4gICAgJ1VOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJyxcbiAgICAnc2hvdWxkQ29tcG9uZW50VXBkYXRlJyxcbiAgICAnY29tcG9uZW50V2lsbFVwZGF0ZScsXG4gICAgJ2dldFNuYXBzaG90QmVmb3JlVXBkYXRlJyxcbiAgICAnVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUnLFxuICAgICdjb21wb25lbnREaWRVcGRhdGUnLFxuICAgICdjb21wb25lbnRXaWxsVW5tb3VudCcsXG5dO1xuLyoqXG4gKiBBbGxvd3MgeW91IHRvIGhvaXN0IG1ldGhvZHMsIGV4Y2VwdCB0aG9zZSBpbiBhbiBleGNsdXNpb24gc2V0IGZyb20gYSBzb3VyY2Ugb2JqZWN0IGludG8gYSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gKlxuICogQHB1YmxpY1xuICogQHBhcmFtIGRlc3RpbmF0aW9uIC0gVGhlIGluc3RhbmNlIG9mIHRoZSBvYmplY3QgdG8gaG9pc3QgdGhlIG1ldGhvZHMgb250by5cbiAqIEBwYXJhbSBzb3VyY2UgLSBUaGUgaW5zdGFuY2Ugb2YgdGhlIG9iamVjdCB3aGVyZSB0aGUgbWV0aG9kcyBhcmUgaG9pc3RlZCBmcm9tLlxuICogQHBhcmFtIGV4Y2x1c2lvbnMgLSAoT3B0aW9uYWwpIFdoYXQgbWV0aG9kcyB0byBleGNsdWRlIGZyb20gYmVpbmcgaG9pc3RlZC5cbiAqIEByZXR1cm5zIEFuIGFycmF5IG9mIG5hbWVzIG9mIG1ldGhvZHMgdGhhdCB3ZXJlIGhvaXN0ZWQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBob2lzdE1ldGhvZHMoXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuZGVzdGluYXRpb24sIFxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbnNvdXJjZSwgZXhjbHVzaW9ucykge1xuICAgIGlmIChleGNsdXNpb25zID09PSB2b2lkIDApIHsgZXhjbHVzaW9ucyA9IFJFQUNUX0xJRkVDWUNMRV9FWENMVVNJT05TOyB9XG4gICAgdmFyIGhvaXN0ZWQgPSBbXTtcbiAgICB2YXIgX2xvb3BfMSA9IGZ1bmN0aW9uIChtZXRob2ROYW1lKSB7XG4gICAgICAgIGlmICh0eXBlb2Ygc291cmNlW21ldGhvZE5hbWVdID09PSAnZnVuY3Rpb24nICYmXG4gICAgICAgICAgICBkZXN0aW5hdGlvblttZXRob2ROYW1lXSA9PT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgICAoIWV4Y2x1c2lvbnMgfHwgZXhjbHVzaW9ucy5pbmRleE9mKG1ldGhvZE5hbWUpID09PSAtMSkpIHtcbiAgICAgICAgICAgIGhvaXN0ZWQucHVzaChtZXRob2ROYW1lKTtcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgICAgICAgICBkZXN0aW5hdGlvblttZXRob2ROYW1lXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB2YXIgYXJncyA9IFtdO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIGFyZ3NbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgc291cmNlW21ldGhvZE5hbWVdLmFwcGx5KHNvdXJjZSwgYXJncyk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgfTtcbiAgICBmb3IgKHZhciBtZXRob2ROYW1lIGluIHNvdXJjZSkge1xuICAgICAgICBfbG9vcF8xKG1ldGhvZE5hbWUpO1xuICAgIH1cbiAgICByZXR1cm4gaG9pc3RlZDtcbn1cbi8qKlxuICogUHJvdmlkZXMgYSBtZXRob2QgZm9yIGNvbnZlbmllbmNlIHRvIHVuaG9pc3QgaG9pc3RlZCBtZXRob2RzLlxuICpcbiAqIEBwdWJsaWNcbiAqIEBwYXJhbSBzb3VyY2UgLSBUaGUgc291cmNlIG9iamVjdCB1cG9uIHdoaWNoIG1ldGhvZHMgd2VyZSBob2lzdGVkLlxuICogQHBhcmFtIG1ldGhvZE5hbWVzIC0gQW4gYXJyYXkgb2YgbWV0aG9kIG5hbWVzIHRvIHVuaG9pc3QuXG4gKi9cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG5leHBvcnQgZnVuY3Rpb24gdW5ob2lzdE1ldGhvZHMoc291cmNlLCBtZXRob2ROYW1lcykge1xuICAgIG1ldGhvZE5hbWVzLmZvckVhY2goZnVuY3Rpb24gKG1ldGhvZE5hbWUpIHsgcmV0dXJuIGRlbGV0ZSBzb3VyY2VbbWV0aG9kTmFtZV07IH0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aG9pc3QuanMubWFwIiwiaW1wb3J0IHsgX19leHRlbmRzIH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBob2lzdE1ldGhvZHMsIHVuaG9pc3RNZXRob2RzIH0gZnJvbSAnLi4vLi4vVXRpbGl0aWVzJztcbnZhciBCYXNlRGVjb3JhdG9yID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhCYXNlRGVjb3JhdG9yLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIEJhc2VEZWNvcmF0b3IocHJvcHMpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgcHJvcHMpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLl91cGRhdGVDb21wb3NlZENvbXBvbmVudFJlZiA9IF90aGlzLl91cGRhdGVDb21wb3NlZENvbXBvbmVudFJlZi5iaW5kKF90aGlzKTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBVcGRhdGVzIHRoZSByZWYgdG8gdGhlIGNvbXBvbmVudCBjb21wb3NlZCBieSB0aGUgZGVjb3JhdG9yLCB3aGljaCB3aWxsIGFsc28gdGFrZSBjYXJlIG9mIGhvaXN0aW5nXG4gICAgICogKGFuZCB1bmhvaXN0aW5nIGFzIGFwcHJvcHJpYXRlKSBtZXRob2RzIGZyb20gc2FpZCBjb21wb25lbnQuXG4gICAgICpcbiAgICAgKiBQYXNzIHRoaXMgbWV0aG9kIGFzIHRoZSBhcmd1bWVudCB0byB0aGUgJ3JlZicgcHJvcGVydHkgb2YgdGhlIGNvbXBvc2VkIGNvbXBvbmVudC5cbiAgICAgKi9cbiAgICBCYXNlRGVjb3JhdG9yLnByb3RvdHlwZS5fdXBkYXRlQ29tcG9zZWRDb21wb25lbnRSZWYgPSBmdW5jdGlvbiAoY29tcG9zZWRDb21wb25lbnRJbnN0YW5jZSkge1xuICAgICAgICB0aGlzLl9jb21wb3NlZENvbXBvbmVudEluc3RhbmNlID0gY29tcG9zZWRDb21wb25lbnRJbnN0YW5jZTtcbiAgICAgICAgaWYgKGNvbXBvc2VkQ29tcG9uZW50SW5zdGFuY2UpIHtcbiAgICAgICAgICAgIHRoaXMuX2hvaXN0ZWQgPSBob2lzdE1ldGhvZHModGhpcywgY29tcG9zZWRDb21wb25lbnRJbnN0YW5jZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodGhpcy5faG9pc3RlZCkge1xuICAgICAgICAgICAgdW5ob2lzdE1ldGhvZHModGhpcywgdGhpcy5faG9pc3RlZCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBCYXNlRGVjb3JhdG9yO1xufShSZWFjdC5Db21wb25lbnQpKTtcbmV4cG9ydCB7IEJhc2VEZWNvcmF0b3IgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUJhc2VEZWNvcmF0b3IuanMubWFwIiwiaW1wb3J0IHsgX19hc3NpZ24sIF9fZXh0ZW5kcyB9IGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgQmFzZURlY29yYXRvciB9IGZyb20gJy4vQmFzZURlY29yYXRvcic7XG5pbXBvcnQgeyBnZXRXaW5kb3csIGhvaXN0U3RhdGljcywgRXZlbnRHcm91cCB9IGZyb20gJy4uLy4uL1V0aWxpdGllcyc7XG5pbXBvcnQgeyBXaW5kb3dDb250ZXh0IH0gZnJvbSAnLi4vLi4vV2luZG93UHJvdmlkZXInO1xuZXhwb3J0IHZhciBSZXNwb25zaXZlTW9kZTtcbihmdW5jdGlvbiAoUmVzcG9uc2l2ZU1vZGUpIHtcbiAgICAvKiogV2lkdGggXFw8PSA0NzlweCAqL1xuICAgIFJlc3BvbnNpdmVNb2RlW1Jlc3BvbnNpdmVNb2RlW1wic21hbGxcIl0gPSAwXSA9IFwic21hbGxcIjtcbiAgICAvKiogV2lkdGggXFw+IDQ3OXB4IGFuZCBcXDw9IDYzOXB4ICovXG4gICAgUmVzcG9uc2l2ZU1vZGVbUmVzcG9uc2l2ZU1vZGVbXCJtZWRpdW1cIl0gPSAxXSA9IFwibWVkaXVtXCI7XG4gICAgLyoqIFdpZHRoIFxcPiA2MzlweCBhbmQgXFw8PSAxMDIzcHggKi9cbiAgICBSZXNwb25zaXZlTW9kZVtSZXNwb25zaXZlTW9kZVtcImxhcmdlXCJdID0gMl0gPSBcImxhcmdlXCI7XG4gICAgLyoqIFdpZHRoIFxcPiAxMDIzcHggYW5kIFxcPD0gMTM2NXB4ICovXG4gICAgUmVzcG9uc2l2ZU1vZGVbUmVzcG9uc2l2ZU1vZGVbXCJ4TGFyZ2VcIl0gPSAzXSA9IFwieExhcmdlXCI7XG4gICAgLyoqIFdpZHRoIFxcPiAxMzY1cHggYW5kIFxcPD0gMTkxOXB4ICovXG4gICAgUmVzcG9uc2l2ZU1vZGVbUmVzcG9uc2l2ZU1vZGVbXCJ4eExhcmdlXCJdID0gNF0gPSBcInh4TGFyZ2VcIjtcbiAgICAvKiogV2lkdGggXFw+IDE5MTlweCAqL1xuICAgIFJlc3BvbnNpdmVNb2RlW1Jlc3BvbnNpdmVNb2RlW1wieHh4TGFyZ2VcIl0gPSA1XSA9IFwieHh4TGFyZ2VcIjtcbiAgICBSZXNwb25zaXZlTW9kZVtSZXNwb25zaXZlTW9kZVtcInVua25vd25cIl0gPSA5OTldID0gXCJ1bmtub3duXCI7XG59KShSZXNwb25zaXZlTW9kZSB8fCAoUmVzcG9uc2l2ZU1vZGUgPSB7fSkpO1xudmFyIFJFU1BPTlNJVkVfTUFYX0NPTlNUUkFJTlQgPSBbNDc5LCA2MzksIDEwMjMsIDEzNjUsIDE5MTksIDk5OTk5OTk5XTtcbi8qKlxuICogVXNlciBzcGVjaWZpZWQgbW9kZSB0byBkZWZhdWx0IHRvLCB1c2VmdWwgZm9yIHNlcnZlciBzaWRlIHJlbmRlcmluZyBzY2VuYXJpb3MuXG4gKi9cbnZhciBfZGVmYXVsdE1vZGU7XG4vKipcbiAqIFRyYWNraW5nIHRoZSBsYXN0IG1vZGUgd2Ugc3VjY2Vzc2Z1bGx5IHJlbmRlcmVkLCB3aGljaCBhbGxvd3MgdXMgdG9cbiAqIHBhaW50IGluaXRpYWwgcmVuZGVycyB3aXRoIHRoZSBjb3JyZWN0IHNpemUuXG4gKi9cbnZhciBfbGFzdE1vZGU7XG4vKipcbiAqIEFsbG93cyBhIHNlcnZlciByZW5kZXJlZCBzY2VuYXJpbyB0byBwcm92aWRlIGEgKipkZWZhdWx0KiogcmVzcG9uc2l2ZSBtb2RlLlxuICogVGhpcyBXSUxMIE5PVCB0cmlnZ2VyIGFueSB1cGRhdGVzIHRvIGNvbXBvbmVudHMgdGhhdCBoYXZlIGFscmVhZHkgY29uc3VtZWQgdGhlIHJlc3BvbnNpdmUgbW9kZSFcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNldFJlc3BvbnNpdmVNb2RlKHJlc3BvbnNpdmVNb2RlKSB7XG4gICAgX2RlZmF1bHRNb2RlID0gcmVzcG9uc2l2ZU1vZGU7XG59XG4vKipcbiAqIEluaXRpYWxpemVzIHRoZSByZXNwb25zaXZlIG1vZGUgdG8gdGhlIGN1cnJlbnQgd2luZG93IHNpemUuIFRoaXMgY2FuIGJlIHVzZWQgdG8gYXZvaWRcbiAqIGEgcmUtcmVuZGVyIGR1cmluZyBmaXJzdCBjb21wb25lbnQgbW91bnQgc2luY2UgdGhlIHdpbmRvdyB3b3VsZCBvdGhlcndpc2Ugbm90IGJlIG1lYXN1cmVkXG4gKiB1bnRpbCBhZnRlciBtb3VudGluZy5cbiAqXG4gKiBUaGlzIFdJTEwgTk9UIHRyaWdnZXIgYW55IHVwZGF0ZXMgdG8gY29tcG9uZW50cyB0aGF0IGhhdmUgYWxyZWFkeSBjb25zdW1lZCB0aGUgcmVzcG9uc2l2ZSBtb2RlIVxuICovXG5leHBvcnQgZnVuY3Rpb24gaW5pdGlhbGl6ZVJlc3BvbnNpdmVNb2RlKGVsZW1lbnQpIHtcbiAgICB2YXIgY3VycmVudFdpbmRvdyA9IGdldFdpbmRvdyhlbGVtZW50KTtcbiAgICBpZiAoY3VycmVudFdpbmRvdykge1xuICAgICAgICBnZXRSZXNwb25zaXZlTW9kZShjdXJyZW50V2luZG93KTtcbiAgICB9XG59XG5leHBvcnQgZnVuY3Rpb24gZ2V0SW5pdGlhbFJlc3BvbnNpdmVNb2RlKCkge1xuICAgIHZhciBfYTtcbiAgICByZXR1cm4gKF9hID0gX2RlZmF1bHRNb2RlICE9PSBudWxsICYmIF9kZWZhdWx0TW9kZSAhPT0gdm9pZCAwID8gX2RlZmF1bHRNb2RlIDogX2xhc3RNb2RlKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBSZXNwb25zaXZlTW9kZS5sYXJnZTtcbn1cbi8qKlxuICogQGRlcHJlY2F0ZWQgRGVjb3JhdG9yIHVzYWdlIGlzIGRlcHJlY2F0ZWQuIEVpdGhlciBjYWxsIGBnZXRSZXNwb25zaXZlTW9kZWAgbWFudWFsbHksIG9yXG4gKiB1c2UgdGhlIGB1c2VSZXNwb25zaXZlTW9kZWAgaG9vayB3aXRoaW4gYSBmdW5jdGlvbiBjb21wb25lbnQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB3aXRoUmVzcG9uc2l2ZU1vZGUoQ29tcG9zZWRDb21wb25lbnQpIHtcbiAgICB2YXIgX2E7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGRlcHJlY2F0aW9uL2RlcHJlY2F0aW9uXG4gICAgdmFyIHJlc3VsdENsYXNzID0gKF9hID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgICAgICAgICAgX19leHRlbmRzKFdpdGhSZXNwb25zaXZlTW9kZSwgX3N1cGVyKTtcbiAgICAgICAgICAgIGZ1bmN0aW9uIFdpdGhSZXNwb25zaXZlTW9kZShwcm9wcykge1xuICAgICAgICAgICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIHByb3BzKSB8fCB0aGlzO1xuICAgICAgICAgICAgICAgIF90aGlzLl9vblJlc2l6ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJlc3BvbnNpdmVNb2RlID0gZ2V0UmVzcG9uc2l2ZU1vZGUoX3RoaXMuY29udGV4dC53aW5kb3cpO1xuICAgICAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2l2ZU1vZGUgIT09IF90aGlzLnN0YXRlLnJlc3BvbnNpdmVNb2RlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2l2ZU1vZGU6IHJlc3BvbnNpdmVNb2RlLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIF90aGlzLl9ldmVudHMgPSBuZXcgRXZlbnRHcm91cChfdGhpcyk7XG4gICAgICAgICAgICAgICAgX3RoaXMuX3VwZGF0ZUNvbXBvc2VkQ29tcG9uZW50UmVmID0gX3RoaXMuX3VwZGF0ZUNvbXBvc2VkQ29tcG9uZW50UmVmLmJpbmQoX3RoaXMpO1xuICAgICAgICAgICAgICAgIF90aGlzLnN0YXRlID0ge1xuICAgICAgICAgICAgICAgICAgICByZXNwb25zaXZlTW9kZTogZ2V0SW5pdGlhbFJlc3BvbnNpdmVNb2RlKCksXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBXaXRoUmVzcG9uc2l2ZU1vZGUucHJvdG90eXBlLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2V2ZW50cy5vbih0aGlzLmNvbnRleHQud2luZG93LCAncmVzaXplJywgdGhpcy5fb25SZXNpemUpO1xuICAgICAgICAgICAgICAgIHRoaXMuX29uUmVzaXplKCk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgV2l0aFJlc3BvbnNpdmVNb2RlLnByb3RvdHlwZS5jb21wb25lbnRXaWxsVW5tb3VudCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9ldmVudHMuZGlzcG9zZSgpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIFdpdGhSZXNwb25zaXZlTW9kZS5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHZhciByZXNwb25zaXZlTW9kZSA9IHRoaXMuc3RhdGUucmVzcG9uc2l2ZU1vZGU7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNpdmVNb2RlID09PSBSZXNwb25zaXZlTW9kZS51bmtub3duID8gbnVsbCA6IChSZWFjdC5jcmVhdGVFbGVtZW50KENvbXBvc2VkQ29tcG9uZW50LCBfX2Fzc2lnbih7IHJlZjogdGhpcy5fdXBkYXRlQ29tcG9zZWRDb21wb25lbnRSZWYsIHJlc3BvbnNpdmVNb2RlOiByZXNwb25zaXZlTW9kZSB9LCB0aGlzLnByb3BzKSkpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHJldHVybiBXaXRoUmVzcG9uc2l2ZU1vZGU7XG4gICAgICAgIH0oQmFzZURlY29yYXRvcikpLFxuICAgICAgICBfYS5jb250ZXh0VHlwZSA9IFdpbmRvd0NvbnRleHQsXG4gICAgICAgIF9hKTtcbiAgICByZXR1cm4gaG9pc3RTdGF0aWNzKENvbXBvc2VkQ29tcG9uZW50LCByZXN1bHRDbGFzcyk7XG59XG4vKipcbiAqIEhvb2sgdG8gZ2V0IHRoZSBjdXJyZW50IHJlc3BvbnNpdmUgbW9kZSAod2luZG93IHNpemUgY2F0ZWdvcnkpLlxuICogQHBhcmFtIGN1cnJlbnRXaW5kb3cgLSBVc2UgdGhpcyB3aW5kb3cgd2hlbiBkZXRlcm1pbmluZyB0aGUgcmVzcG9uc2l2ZSBtb2RlLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0UmVzcG9uc2l2ZU1vZGUoY3VycmVudFdpbmRvdykge1xuICAgIHZhciByZXNwb25zaXZlTW9kZSA9IFJlc3BvbnNpdmVNb2RlLnNtYWxsO1xuICAgIGlmIChjdXJyZW50V2luZG93KSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB3aGlsZSAoY3VycmVudFdpbmRvdy5pbm5lcldpZHRoID4gUkVTUE9OU0lWRV9NQVhfQ09OU1RSQUlOVFtyZXNwb25zaXZlTW9kZV0pIHtcbiAgICAgICAgICAgICAgICByZXNwb25zaXZlTW9kZSsrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICAvLyBSZXR1cm4gYSBiZXN0IGVmZm9ydCByZXN1bHQgaW4gY2FzZXMgd2hlcmUgd2UncmUgaW4gdGhlIGJyb3dzZXIgYnV0IGl0IHRocm93cyBvbiBnZXR0aW5nIGlubmVyV2lkdGguXG4gICAgICAgICAgICByZXNwb25zaXZlTW9kZSA9IGdldEluaXRpYWxSZXNwb25zaXZlTW9kZSgpO1xuICAgICAgICB9XG4gICAgICAgIC8vIFRyYWNraW5nIGxhc3QgbW9kZSBqdXN0IGdpdmVzIHVzIGEgYmV0dGVyIGRlZmF1bHQgaW4gZnV0dXJlIHJlbmRlcnMsXG4gICAgICAgIC8vIHdoaWNoIGF2b2lkcyBzdGFydGluZyB3aXRoIHRoZSB3cm9uZyB2YWx1ZSBpZiB3ZSd2ZSBtZWFzdXJlZCBvbmNlLlxuICAgICAgICBfbGFzdE1vZGUgPSByZXNwb25zaXZlTW9kZTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGlmIChfZGVmYXVsdE1vZGUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmVzcG9uc2l2ZU1vZGUgPSBfZGVmYXVsdE1vZGU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0NvbnRlbnQgd2FzIHJlbmRlcmVkIGluIGEgc2VydmVyIGVudmlyb25tZW50IHdpdGhvdXQgcHJvdmlkaW5nIGEgZGVmYXVsdCByZXNwb25zaXZlIG1vZGUuICcgK1xuICAgICAgICAgICAgICAgICdDYWxsIHNldFJlc3BvbnNpdmVNb2RlIHRvIGRlZmluZSB3aGF0IHRoZSByZXNwb25zaXZlIG1vZGUgaXMuJyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3BvbnNpdmVNb2RlO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9d2l0aFJlc3BvbnNpdmVNb2RlLmpzLm1hcCIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGdldFdpbmRvdyB9IGZyb20gJ0BmbHVlbnR1aS91dGlsaXRpZXMnO1xuaW1wb3J0IHsgdXNlT25FdmVudCB9IGZyb20gJ0BmbHVlbnR1aS9yZWFjdC1ob29rcyc7XG5pbXBvcnQgeyBnZXRSZXNwb25zaXZlTW9kZSwgZ2V0SW5pdGlhbFJlc3BvbnNpdmVNb2RlIH0gZnJvbSAnLi4vZGVjb3JhdG9ycy93aXRoUmVzcG9uc2l2ZU1vZGUnO1xuaW1wb3J0IHsgdXNlV2luZG93IH0gZnJvbSAnLi4vLi4vV2luZG93UHJvdmlkZXInO1xuLyoqXG4gKiBIb29rIHRvIGdldCB0aGUgY3VycmVudCByZXNwb25zaXZlIG1vZGUgKHdpbmRvdyBzaXplIGNhdGVnb3J5KS5cbiAqIEBwYXJhbSBlbGVtZW50UmVmIC0gVXNlIHRoaXMgZWxlbWVudCdzIHBhcmVudCB3aW5kb3cgd2hlbiBkZXRlcm1pbmluZyB0aGUgcmVzcG9uc2l2ZSBtb2RlLlxuICogQHBhcmFtIG92ZXJyaWRlUmVzcG9uc2l2ZU1vZGUgLSBPdmVycmlkZSB0aGUgcmVzcG9uc2l2ZSBtb2RlLiBJZiB0aGlzIHBhcmFtIGlzIHByZXNlbnQsIGl0J3MgYWx3YXlzIHJldHVybmVkLlxuICovXG5leHBvcnQgdmFyIHVzZVJlc3BvbnNpdmVNb2RlID0gZnVuY3Rpb24gKGVsZW1lbnRSZWYsIG92ZXJyaWRlUmVzcG9uc2l2ZU1vZGUpIHtcbiAgICB2YXIgX2EgPSBSZWFjdC51c2VTdGF0ZShnZXRJbml0aWFsUmVzcG9uc2l2ZU1vZGUoKSksIGxhc3RSZXNwb25zaXZlTW9kZSA9IF9hWzBdLCBzZXRMYXN0UmVzcG9uc2l2ZU1vZGUgPSBfYVsxXTtcbiAgICB2YXIgb25SZXNpemUgPSBSZWFjdC51c2VDYWxsYmFjayhmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBuZXdSZXNwb25zaXZlTW9kZSA9IGdldFJlc3BvbnNpdmVNb2RlKGdldFdpbmRvdyhlbGVtZW50UmVmLmN1cnJlbnQpKTtcbiAgICAgICAgLy8gU2V0dGluZyB0aGUgc2FtZSB2YWx1ZSBzaG91bGQgbm90IGNhdXNlIGEgcmUtcmVuZGVyLlxuICAgICAgICBpZiAobGFzdFJlc3BvbnNpdmVNb2RlICE9PSBuZXdSZXNwb25zaXZlTW9kZSkge1xuICAgICAgICAgICAgc2V0TGFzdFJlc3BvbnNpdmVNb2RlKG5ld1Jlc3BvbnNpdmVNb2RlKTtcbiAgICAgICAgfVxuICAgIH0sIFtlbGVtZW50UmVmLCBsYXN0UmVzcG9uc2l2ZU1vZGVdKTtcbiAgICB2YXIgd2luID0gdXNlV2luZG93KCk7XG4gICAgdXNlT25FdmVudCh3aW4sICdyZXNpemUnLCBvblJlc2l6ZSk7XG4gICAgLy8gQ2FsbCByZXNpemUgZnVuY3Rpb24gaW5pdGlhbGx5IG9uIG1vdW50LCBvciBpZiB0aGUgb3ZlcnJpZGUgY2hhbmdlcyBmcm9tIGRlZmluZWQgdG8gdW5kZWZpbmVkXG4gICAgLy8gKHRoZSBlZmZlY3Qgd2lsbCBydW4gb24gYWxsIG92ZXJyaWRlIGNoYW5nZXMsIGJ1dCBvblJlc2l6ZSB3aWxsIG9ubHkgYmUgY2FsbGVkIGlmIGl0IGNoYW5nZWQgdG8gdW5kZWZpbmVkKVxuICAgIFJlYWN0LnVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChvdmVycmlkZVJlc3BvbnNpdmVNb2RlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIG9uUmVzaXplKCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0LWhvb2tzL2V4aGF1c3RpdmUtZGVwcyAtLSBvbmx5IG1lYW50IHRvIHJ1biBvbiBtb3VudCBvciB3aGVuIG92ZXJyaWRlIGNoYW5nZXNcbiAgICB9LCBbb3ZlcnJpZGVSZXNwb25zaXZlTW9kZV0pO1xuICAgIHJldHVybiBvdmVycmlkZVJlc3BvbnNpdmVNb2RlICE9PSBudWxsICYmIG92ZXJyaWRlUmVzcG9uc2l2ZU1vZGUgIT09IHZvaWQgMCA/IG92ZXJyaWRlUmVzcG9uc2l2ZU1vZGUgOiBsYXN0UmVzcG9uc2l2ZU1vZGU7XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXNlUmVzcG9uc2l2ZU1vZGUuanMubWFwIiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuZXhwb3J0IHZhciBNZW51Q29udGV4dCA9IFJlYWN0LmNyZWF0ZUNvbnRleHQoe30pO1xuZXhwb3J0IHZhciB1c2VNZW51Q29udGV4dCA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gUmVhY3QudXNlQ29udGV4dChNZW51Q29udGV4dCk7XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9TWVudUNvbnRleHQuanMubWFwIiwiaW1wb3J0IHsgX19hc3NpZ24sIF9fcmVzdCwgX19zcHJlYWRBcnJheSB9IGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgQ29udGV4dHVhbE1lbnVJdGVtVHlwZSB9IGZyb20gJy4vQ29udGV4dHVhbE1lbnUudHlwZXMnO1xuaW1wb3J0IHsgRGlyZWN0aW9uYWxIaW50IH0gZnJvbSAnLi4vLi4vY29tbW9uL0RpcmVjdGlvbmFsSGludCc7XG5pbXBvcnQgeyBGb2N1c1pvbmUsIEZvY3VzWm9uZURpcmVjdGlvbiwgRm9jdXNab25lVGFiYmFibGVFbGVtZW50cyB9IGZyb20gJy4uLy4uL0ZvY3VzWm9uZSc7XG5pbXBvcnQgeyBkaXZQcm9wZXJ0aWVzLCBnZXROYXRpdmVQcm9wcywgc2hhbGxvd0NvbXBhcmUsIGFzc2lnbiwgY2xhc3NOYW1lc0Z1bmN0aW9uLCBjc3MsIGdldEZpcnN0Rm9jdXNhYmxlLCBnZXRMYXN0Rm9jdXNhYmxlLCBnZXRSVEwsIEtleUNvZGVzLCBzaG91bGRXcmFwRm9jdXMsIGlzSU9TLCBpc01hYywgbWVtb2l6ZUZ1bmN0aW9uLCBnZXRQcm9wc1dpdGhEZWZhdWx0cywgZ2V0RG9jdW1lbnQsIH0gZnJvbSAnLi4vLi4vVXRpbGl0aWVzJztcbmltcG9ydCB7IGhhc1N1Ym1lbnUsIGdldElzQ2hlY2tlZCwgaXNJdGVtRGlzYWJsZWQgfSBmcm9tICcuLi8uLi91dGlsaXRpZXMvY29udGV4dHVhbE1lbnUvaW5kZXgnO1xuaW1wb3J0IHsgQ2FsbG91dCB9IGZyb20gJy4uLy4uL0NhbGxvdXQnO1xuaW1wb3J0IHsgQ29udGV4dHVhbE1lbnVJdGVtIH0gZnJvbSAnLi9Db250ZXh0dWFsTWVudUl0ZW0nO1xuaW1wb3J0IHsgQ29udGV4dHVhbE1lbnVTcGxpdEJ1dHRvbiwgQ29udGV4dHVhbE1lbnVCdXR0b24sIENvbnRleHR1YWxNZW51QW5jaG9yLCB9IGZyb20gJy4vQ29udGV4dHVhbE1lbnVJdGVtV3JhcHBlci9pbmRleCc7XG5pbXBvcnQgeyBjb25jYXRTdHlsZVNldHNXaXRoUHJvcHMgfSBmcm9tICcuLi8uLi9TdHlsaW5nJztcbmltcG9ydCB7IGdldEl0ZW1TdHlsZXMgfSBmcm9tICcuL0NvbnRleHR1YWxNZW51LmNsYXNzTmFtZXMnO1xuaW1wb3J0IHsgdXNlVGFyZ2V0LCB1c2VQcmV2aW91cywgdXNlQXN5bmMsIHVzZVdhcm5pbmdzLCB1c2VJZCwgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCwgfSBmcm9tICdAZmx1ZW50dWkvcmVhY3QtaG9va3MnO1xuaW1wb3J0IHsgdXNlUmVzcG9uc2l2ZU1vZGUsIFJlc3BvbnNpdmVNb2RlIH0gZnJvbSAnLi4vLi4vUmVzcG9uc2l2ZU1vZGUnO1xuaW1wb3J0IHsgTWVudUNvbnRleHQgfSBmcm9tICcuLi8uLi91dGlsaXRpZXMvTWVudUNvbnRleHQvaW5kZXgnO1xudmFyIGdldENsYXNzTmFtZXMgPSBjbGFzc05hbWVzRnVuY3Rpb24oKTtcbnZhciBnZXRDb250ZXh0dWFsTWVudUl0ZW1DbGFzc05hbWVzID0gY2xhc3NOYW1lc0Z1bmN0aW9uKCk7XG4vLyBUaGUgZGVmYXVsdCBDb250ZXh0dWFsTWVudSBwcm9wZXJ0aWVzIGhhdmUgbm8gaXRlbXMgYW5kIGJlYWssIHRoZSBkZWZhdWx0IHN1Ym1lbnUgZGlyZWN0aW9uIGlzIHJpZ2h0IGFuZCB0b3AuXG52YXIgREVGQVVMVF9QUk9QUyA9IHtcbiAgICBpdGVtczogW10sXG4gICAgc2hvdWxkRm9jdXNPbk1vdW50OiB0cnVlLFxuICAgIGdhcFNwYWNlOiAwLFxuICAgIGRpcmVjdGlvbmFsSGludDogRGlyZWN0aW9uYWxIaW50LmJvdHRvbUF1dG9FZGdlLFxuICAgIGJlYWtXaWR0aDogMTYsXG59O1xuZXhwb3J0IGZ1bmN0aW9uIGdldFN1Ym1lbnVJdGVtcyhpdGVtLCBvcHRpb25zKSB7XG4gICAgdmFyIHRhcmdldCA9IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy50YXJnZXQ7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGRlcHJlY2F0aW9uL2RlcHJlY2F0aW9uXG4gICAgdmFyIGl0ZW1zID0gaXRlbS5zdWJNZW51UHJvcHMgPyBpdGVtLnN1Yk1lbnVQcm9wcy5pdGVtcyA6IGl0ZW0uaXRlbXM7XG4gICAgaWYgKGl0ZW1zKSB7XG4gICAgICAgIHZhciBvdmVycmlkZUl0ZW1zID0gW107XG4gICAgICAgIGZvciAodmFyIF9pID0gMCwgaXRlbXNfMSA9IGl0ZW1zOyBfaSA8IGl0ZW1zXzEubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICB2YXIgc3ViSXRlbSA9IGl0ZW1zXzFbX2ldO1xuICAgICAgICAgICAgaWYgKHN1Ykl0ZW0ucHJlZmVyTWVudVRhcmdldEFzRXZlbnRUYXJnZXQpIHtcbiAgICAgICAgICAgICAgICAvLyBGb3Igc3ViLWl0ZW1zIHdoaWNoIG5lZWQgYW4gb3ZlcnJpZGRlbiB0YXJnZXQsIGludGVyY2VwdCBgb25DbGlja2BcbiAgICAgICAgICAgICAgICB2YXIgb25DbGljayA9IHN1Ykl0ZW0ub25DbGljaywgY29udGV4dEl0ZW0gPSBfX3Jlc3Qoc3ViSXRlbSwgW1wib25DbGlja1wiXSk7XG4gICAgICAgICAgICAgICAgb3ZlcnJpZGVJdGVtcy5wdXNoKF9fYXNzaWduKF9fYXNzaWduKHt9LCBjb250ZXh0SXRlbSksIHsgb25DbGljazogZ2V0T25DbGlja1dpdGhPdmVycmlkZVRhcmdldChvbkNsaWNrLCB0YXJnZXQpIH0pKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIG92ZXJyaWRlSXRlbXMucHVzaChzdWJJdGVtKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb3ZlcnJpZGVJdGVtcztcbiAgICB9XG59XG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiBhIGxpc3Qgb2YgbWVudSBpdGVtcyBjYW4gY29udGFpbiBhIGNoZWNrYm94XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjYW5BbnlNZW51SXRlbXNDaGVjayhpdGVtcykge1xuICAgIHJldHVybiBpdGVtcy5zb21lKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICAgIGlmIChpdGVtLmNhbkNoZWNrKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICAvLyBJZiB0aGUgaXRlbSBpcyBhIHNlY3Rpb24sIGNoZWNrIGlmIGFueSBvZiB0aGUgaXRlbXMgaW4gdGhlIHNlY3Rpb24gY2FuIGNoZWNrLlxuICAgICAgICBpZiAoaXRlbS5zZWN0aW9uUHJvcHMgJiYgaXRlbS5zZWN0aW9uUHJvcHMuaXRlbXMuc29tZShmdW5jdGlvbiAoc3VibWVudUl0ZW0pIHsgcmV0dXJuIHN1Ym1lbnVJdGVtLmNhbkNoZWNrID09PSB0cnVlOyB9KSkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0pO1xufVxudmFyIE5hdmlnYXRpb25JZGxlRGVsYXkgPSAyNTA7IC8qIG1zICovXG52YXIgQ09NUE9ORU5UX05BTUUgPSAnQ29udGV4dHVhbE1lbnUnO1xudmFyIF9nZXRNZW51SXRlbVN0eWxlc0Z1bmN0aW9uID0gbWVtb2l6ZUZ1bmN0aW9uKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgc3R5bGVzID0gW107XG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgc3R5bGVzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgfVxuICAgIHJldHVybiBmdW5jdGlvbiAoc3R5bGVQcm9wcykge1xuICAgICAgICByZXR1cm4gY29uY2F0U3R5bGVTZXRzV2l0aFByb3BzLmFwcGx5KHZvaWQgMCwgX19zcHJlYWRBcnJheShbc3R5bGVQcm9wcywgZ2V0SXRlbVN0eWxlc10sIHN0eWxlcykpO1xuICAgIH07XG59KTtcbi8vI3JlZ2lvbiBDdXN0b20gaG9va3NcbmZ1bmN0aW9uIHVzZVZpc2liaWxpdHkocHJvcHMsIHRhcmdldFdpbmRvdykge1xuICAgIHZhciBfYSA9IHByb3BzLmhpZGRlbiwgaGlkZGVuID0gX2EgPT09IHZvaWQgMCA/IGZhbHNlIDogX2EsIG9uTWVudURpc21pc3NlZCA9IHByb3BzLm9uTWVudURpc21pc3NlZCwgb25NZW51T3BlbmVkID0gcHJvcHMub25NZW51T3BlbmVkO1xuICAgIHZhciBwcmV2aW91c0hpZGRlbiA9IHVzZVByZXZpb3VzKGhpZGRlbik7XG4gICAgdmFyIG9uTWVudU9wZW5lZFJlZiA9IFJlYWN0LnVzZVJlZihvbk1lbnVPcGVuZWQpO1xuICAgIHZhciBvbk1lbnVDbG9zZWRSZWYgPSBSZWFjdC51c2VSZWYob25NZW51RGlzbWlzc2VkKTtcbiAgICB2YXIgcHJvcHNSZWYgPSBSZWFjdC51c2VSZWYocHJvcHMpO1xuICAgIG9uTWVudU9wZW5lZFJlZi5jdXJyZW50ID0gb25NZW51T3BlbmVkO1xuICAgIG9uTWVudUNsb3NlZFJlZi5jdXJyZW50ID0gb25NZW51RGlzbWlzc2VkO1xuICAgIHByb3BzUmVmLmN1cnJlbnQgPSBwcm9wcztcbiAgICBSZWFjdC51c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX2EsIF9iO1xuICAgICAgICAvLyBEb24ndCBpc3N1ZSBkaXNtaXNzZWQgY2FsbGJhY2tzIG9uIGluaXRpYWwgbW91bnRcbiAgICAgICAgaWYgKGhpZGRlbiAmJiBwcmV2aW91c0hpZGRlbiA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIChfYSA9IG9uTWVudUNsb3NlZFJlZi5jdXJyZW50KSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuY2FsbChvbk1lbnVDbG9zZWRSZWYsIHByb3BzUmVmLmN1cnJlbnQpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKCFoaWRkZW4gJiYgcHJldmlvdXNIaWRkZW4gIT09IGZhbHNlKSB7XG4gICAgICAgICAgICAoX2IgPSBvbk1lbnVPcGVuZWRSZWYuY3VycmVudCkgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLmNhbGwob25NZW51T3BlbmVkUmVmLCBwcm9wc1JlZi5jdXJyZW50KTtcbiAgICAgICAgfVxuICAgIH0sIFtoaWRkZW4sIHByZXZpb3VzSGlkZGVuXSk7XG4gICAgLy8gSXNzdWUgb25EaXNtaXNzZWRDYWxsYmFjayBvbiB1bm1vdW50XG4gICAgUmVhY3QudXNlRWZmZWN0KGZ1bmN0aW9uICgpIHsgcmV0dXJuIGZ1bmN0aW9uICgpIHsgdmFyIF9hOyByZXR1cm4gKF9hID0gb25NZW51Q2xvc2VkUmVmLmN1cnJlbnQpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5jYWxsKG9uTWVudUNsb3NlZFJlZiwgcHJvcHNSZWYuY3VycmVudCk7IH07IH0sIFtdKTtcbn1cbmZ1bmN0aW9uIHVzZVN1Yk1lbnVTdGF0ZShfYSwgZGlzbWlzcykge1xuICAgIHZhciBoaWRkZW4gPSBfYS5oaWRkZW4sIGl0ZW1zID0gX2EuaXRlbXMsIHRoZW1lID0gX2EudGhlbWUsIGNsYXNzTmFtZSA9IF9hLmNsYXNzTmFtZSwgaWQgPSBfYS5pZCwgbWVudVRhcmdldCA9IF9hLnRhcmdldDtcbiAgICB2YXIgX2IgPSBSZWFjdC51c2VTdGF0ZSgpLCBleHBhbmRlZE1lbnVJdGVtS2V5ID0gX2JbMF0sIHNldEV4cGFuZGVkTWVudUl0ZW1LZXkgPSBfYlsxXTtcbiAgICB2YXIgX2MgPSBSZWFjdC51c2VTdGF0ZSgpLCBzdWJtZW51VGFyZ2V0ID0gX2NbMF0sIHNldFN1Ym1lbnVUYXJnZXQgPSBfY1sxXTtcbiAgICAvKiogVHJ1ZSBpZiB0aGUgbWVudSB3YXMgZXhwYW5kZWQgYnkgbW91c2UgY2xpY2sgT1IgaG92ZXIgKGFzIG9wcG9zZWQgdG8gYnkga2V5Ym9hcmQpICovXG4gICAgdmFyIF9kID0gUmVhY3QudXNlU3RhdGUoKSwgc2hvdWxkRm9jdXNPbkNvbnRhaW5lciA9IF9kWzBdLCBzZXRTaG91bGRGb2N1c09uQ29udGFpbmVyID0gX2RbMV07XG4gICAgdmFyIHN1Yk1lbnVJZCA9IHVzZUlkKENPTVBPTkVOVF9OQU1FLCBpZCk7XG4gICAgdmFyIGNsb3NlU3ViTWVudSA9IFJlYWN0LnVzZUNhbGxiYWNrKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgc2V0U2hvdWxkRm9jdXNPbkNvbnRhaW5lcih1bmRlZmluZWQpO1xuICAgICAgICBzZXRFeHBhbmRlZE1lbnVJdGVtS2V5KHVuZGVmaW5lZCk7XG4gICAgICAgIHNldFN1Ym1lbnVUYXJnZXQodW5kZWZpbmVkKTtcbiAgICB9LCBbXSk7XG4gICAgdmFyIG9wZW5TdWJNZW51ID0gUmVhY3QudXNlQ2FsbGJhY2soZnVuY3Rpb24gKF9hLCB0YXJnZXQsIGZvY3VzQ29udGFpbmVyKSB7XG4gICAgICAgIHZhciBzdWJtZW51SXRlbUtleSA9IF9hLmtleTtcbiAgICAgICAgaWYgKGV4cGFuZGVkTWVudUl0ZW1LZXkgPT09IHN1Ym1lbnVJdGVtS2V5KSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGFyZ2V0LmZvY3VzKCk7XG4gICAgICAgIHNldFNob3VsZEZvY3VzT25Db250YWluZXIoZm9jdXNDb250YWluZXIpO1xuICAgICAgICBzZXRFeHBhbmRlZE1lbnVJdGVtS2V5KHN1Ym1lbnVJdGVtS2V5KTtcbiAgICAgICAgc2V0U3VibWVudVRhcmdldCh0YXJnZXQpO1xuICAgIH0sIFtleHBhbmRlZE1lbnVJdGVtS2V5XSk7XG4gICAgUmVhY3QudXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKGhpZGRlbikge1xuICAgICAgICAgICAgY2xvc2VTdWJNZW51KCk7XG4gICAgICAgIH1cbiAgICB9LCBbaGlkZGVuLCBjbG9zZVN1Yk1lbnVdKTtcbiAgICB2YXIgb25TdWJNZW51RGlzbWlzcyA9IHVzZU9uU3VibWVudURpc21pc3MoZGlzbWlzcywgY2xvc2VTdWJNZW51KTtcbiAgICB2YXIgZ2V0U3VibWVudVByb3BzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgaXRlbSA9IGZpbmRJdGVtQnlLZXlGcm9tSXRlbXMoZXhwYW5kZWRNZW51SXRlbUtleSwgaXRlbXMpO1xuICAgICAgICB2YXIgc3VibWVudVByb3BzID0gbnVsbDtcbiAgICAgICAgaWYgKGl0ZW0pIHtcbiAgICAgICAgICAgIHN1Ym1lbnVQcm9wcyA9IHtcbiAgICAgICAgICAgICAgICBpdGVtczogZ2V0U3VibWVudUl0ZW1zKGl0ZW0sIHsgdGFyZ2V0OiBtZW51VGFyZ2V0IH0pLFxuICAgICAgICAgICAgICAgIHRhcmdldDogc3VibWVudVRhcmdldCxcbiAgICAgICAgICAgICAgICBvbkRpc21pc3M6IG9uU3ViTWVudURpc21pc3MsXG4gICAgICAgICAgICAgICAgaXNTdWJNZW51OiB0cnVlLFxuICAgICAgICAgICAgICAgIGlkOiBzdWJNZW51SWQsXG4gICAgICAgICAgICAgICAgc2hvdWxkRm9jdXNPbk1vdW50OiB0cnVlLFxuICAgICAgICAgICAgICAgIHNob3VsZEZvY3VzT25Db250YWluZXI6IHNob3VsZEZvY3VzT25Db250YWluZXIsXG4gICAgICAgICAgICAgICAgZGlyZWN0aW9uYWxIaW50OiBnZXRSVEwodGhlbWUpID8gRGlyZWN0aW9uYWxIaW50LmxlZnRUb3BFZGdlIDogRGlyZWN0aW9uYWxIaW50LnJpZ2h0VG9wRWRnZSxcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZSxcbiAgICAgICAgICAgICAgICBnYXBTcGFjZTogMCxcbiAgICAgICAgICAgICAgICBpc0JlYWtWaXNpYmxlOiBmYWxzZSxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBpZiAoaXRlbS5zdWJNZW51UHJvcHMpIHtcbiAgICAgICAgICAgICAgICBhc3NpZ24oc3VibWVudVByb3BzLCBpdGVtLnN1Yk1lbnVQcm9wcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoaXRlbS5wcmVmZXJNZW51VGFyZ2V0QXNFdmVudFRhcmdldCkge1xuICAgICAgICAgICAgICAgIHZhciBvbkl0ZW1DbGljayA9IGl0ZW0ub25JdGVtQ2xpY2s7XG4gICAgICAgICAgICAgICAgc3VibWVudVByb3BzLm9uSXRlbUNsaWNrID0gZ2V0T25DbGlja1dpdGhPdmVycmlkZVRhcmdldChvbkl0ZW1DbGljaywgbWVudVRhcmdldCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHN1Ym1lbnVQcm9wcztcbiAgICB9O1xuICAgIHJldHVybiBbZXhwYW5kZWRNZW51SXRlbUtleSwgb3BlblN1Yk1lbnUsIGdldFN1Ym1lbnVQcm9wcywgb25TdWJNZW51RGlzbWlzc107XG59XG5mdW5jdGlvbiB1c2VTaG91bGRVcGRhdGVGb2N1c09uTW91c2VNb3ZlKF9hKSB7XG4gICAgdmFyIGRlbGF5VXBkYXRlRm9jdXNPbkhvdmVyID0gX2EuZGVsYXlVcGRhdGVGb2N1c09uSG92ZXIsIGhpZGRlbiA9IF9hLmhpZGRlbjtcbiAgICB2YXIgc2hvdWxkVXBkYXRlRm9jdXNPbk1vdXNlRXZlbnQgPSBSZWFjdC51c2VSZWYoIWRlbGF5VXBkYXRlRm9jdXNPbkhvdmVyKTtcbiAgICB2YXIgZ290TW91c2VNb3ZlID0gUmVhY3QudXNlUmVmKGZhbHNlKTtcbiAgICBSZWFjdC51c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgICAgICBzaG91bGRVcGRhdGVGb2N1c09uTW91c2VFdmVudC5jdXJyZW50ID0gIWRlbGF5VXBkYXRlRm9jdXNPbkhvdmVyO1xuICAgICAgICBnb3RNb3VzZU1vdmUuY3VycmVudCA9IGhpZGRlbiA/IGZhbHNlIDogIWRlbGF5VXBkYXRlRm9jdXNPbkhvdmVyICYmIGdvdE1vdXNlTW92ZS5jdXJyZW50O1xuICAgIH0sIFtkZWxheVVwZGF0ZUZvY3VzT25Ib3ZlciwgaGlkZGVuXSk7XG4gICAgdmFyIG9uTWVudUZvY3VzQ2FwdHVyZSA9IFJlYWN0LnVzZUNhbGxiYWNrKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKGRlbGF5VXBkYXRlRm9jdXNPbkhvdmVyKSB7XG4gICAgICAgICAgICBzaG91bGRVcGRhdGVGb2N1c09uTW91c2VFdmVudC5jdXJyZW50ID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9LCBbZGVsYXlVcGRhdGVGb2N1c09uSG92ZXJdKTtcbiAgICByZXR1cm4gW3Nob3VsZFVwZGF0ZUZvY3VzT25Nb3VzZUV2ZW50LCBnb3RNb3VzZU1vdmUsIG9uTWVudUZvY3VzQ2FwdHVyZV07XG59XG5mdW5jdGlvbiB1c2VQcmV2aW91c0FjdGl2ZUVsZW1lbnQoX2EsIHRhcmdldFdpbmRvdykge1xuICAgIHZhciBoaWRkZW4gPSBfYS5oaWRkZW4sIG9uUmVzdG9yZUZvY3VzID0gX2Eub25SZXN0b3JlRm9jdXM7XG4gICAgdmFyIHByZXZpb3VzQWN0aXZlRWxlbWVudCA9IFJlYWN0LnVzZVJlZigpO1xuICAgIHZhciB0cnlGb2N1c1ByZXZpb3VzQWN0aXZlRWxlbWVudCA9IFJlYWN0LnVzZUNhbGxiYWNrKGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgICAgIHZhciBfYSwgX2I7XG4gICAgICAgIGlmIChvblJlc3RvcmVGb2N1cykge1xuICAgICAgICAgICAgb25SZXN0b3JlRm9jdXMob3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAob3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLmRvY3VtZW50Q29udGFpbnNGb2N1cykge1xuICAgICAgICAgICAgLy8gTWFrZSBzdXJlIHRoYXQgdGhlIGZvY3VzIG1ldGhvZCBhY3R1YWxseSBleGlzdHNcbiAgICAgICAgICAgIC8vIEluIHNvbWUgY2FzZXMgdGhlIG9iamVjdCBtaWdodCBleGlzdCBidXQgbm90IGJlIGEgcmVhbCBlbGVtZW50LlxuICAgICAgICAgICAgLy8gVGhpcyBpcyBwcmltYXJpbHkgZm9yIElFIDExIGFuZCBzaG91bGQgYmUgcmVtb3ZlZCBvbmNlIElFIDExIGlzIG5vIGxvbmdlciBpbiB1c2UuXG4gICAgICAgICAgICAoX2IgPSAoX2EgPSBwcmV2aW91c0FjdGl2ZUVsZW1lbnQuY3VycmVudCkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmZvY3VzKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IuY2FsbChfYSk7XG4gICAgICAgIH1cbiAgICB9LCBbb25SZXN0b3JlRm9jdXNdKTtcbiAgICB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICBpZiAoIWhpZGRlbikge1xuICAgICAgICAgICAgcHJldmlvdXNBY3RpdmVFbGVtZW50LmN1cnJlbnQgPSB0YXJnZXRXaW5kb3cgPT09IG51bGwgfHwgdGFyZ2V0V2luZG93ID09PSB2b2lkIDAgPyB2b2lkIDAgOiB0YXJnZXRXaW5kb3cuZG9jdW1lbnQuYWN0aXZlRWxlbWVudDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChwcmV2aW91c0FjdGl2ZUVsZW1lbnQuY3VycmVudCkge1xuICAgICAgICAgICAgdHJ5Rm9jdXNQcmV2aW91c0FjdGl2ZUVsZW1lbnQoe1xuICAgICAgICAgICAgICAgIG9yaWdpbmFsRWxlbWVudDogcHJldmlvdXNBY3RpdmVFbGVtZW50LmN1cnJlbnQsXG4gICAgICAgICAgICAgICAgY29udGFpbnNGb2N1czogdHJ1ZSxcbiAgICAgICAgICAgICAgICBkb2N1bWVudENvbnRhaW5zRm9jdXM6ICgoX2EgPSBnZXREb2N1bWVudCgpKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuaGFzRm9jdXMoKSkgfHwgZmFsc2UsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHByZXZpb3VzQWN0aXZlRWxlbWVudC5jdXJyZW50ID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgfSwgW2hpZGRlbiwgdGFyZ2V0V2luZG93ID09PSBudWxsIHx8IHRhcmdldFdpbmRvdyA9PT0gdm9pZCAwID8gdm9pZCAwIDogdGFyZ2V0V2luZG93LmRvY3VtZW50LmFjdGl2ZUVsZW1lbnQsIHRyeUZvY3VzUHJldmlvdXNBY3RpdmVFbGVtZW50XSk7XG4gICAgcmV0dXJuIFt0cnlGb2N1c1ByZXZpb3VzQWN0aXZlRWxlbWVudF07XG59XG5mdW5jdGlvbiB1c2VLZXlIYW5kbGVycyhfYSwgZGlzbWlzcywgaG9zdEVsZW1lbnQsIG9wZW5TdWJNZW51KSB7XG4gICAgdmFyIHRoZW1lID0gX2EudGhlbWUsIGlzU3ViTWVudSA9IF9hLmlzU3ViTWVudSwgX2IgPSBfYS5mb2N1c1pvbmVQcm9wcywgX2MgPSBfYiA9PT0gdm9pZCAwID8ge30gOiBfYiwgY2hlY2tGb3JOb1dyYXAgPSBfYy5jaGVja0Zvck5vV3JhcCwgX2QgPSBfYy5kaXJlY3Rpb24sIGZvY3VzWm9uZURpcmVjdGlvbiA9IF9kID09PSB2b2lkIDAgPyBGb2N1c1pvbmVEaXJlY3Rpb24udmVydGljYWwgOiBfZDtcbiAgICAvKiogVHJ1ZSBpZiB0aGUgbW9zdCByZWNlbnQga2V5ZG93biBldmVudCB3YXMgZm9yIGFsdCAob3B0aW9uKSBvciBtZXRhIChjb21tYW5kKS4gKi9cbiAgICB2YXIgbGFzdEtleURvd25XYXNBbHRPck1ldGEgPSBSZWFjdC51c2VSZWYoKTtcbiAgICAvKipcbiAgICAgKiBDYWxscyBgc2hvdWxkSGFuZGxlS2V5YCB0byBkZXRlcm1pbmUgd2hldGhlciB0aGUga2V5Ym9hcmQgZXZlbnQgc2hvdWxkIGJlIGhhbmRsZWQ7XG4gICAgICogaWYgc28sIHN0b3BzIGV2ZW50IHByb3BhZ2F0aW9uIGFuZCBkaXNtaXNzZXMgbWVudShzKS5cbiAgICAgKiBAcGFyYW0gZXYgLSBUaGUga2V5Ym9hcmQgZXZlbnQuXG4gICAgICogQHBhcmFtIHNob3VsZEhhbmRsZUtleSAtIFJldHVybnMgd2hldGhlciB3ZSBzaG91bGQgaGFuZGxlIHRoaXMga2V5Ym9hcmQgZXZlbnQuXG4gICAgICogQHBhcmFtIGRpc21pc3NBbGxNZW51cyAtIElmIHRydWUsIGRpc21pc3MgYWxsIG1lbnVzLiBPdGhlcndpc2UsIGRpc21pc3Mgb25seSB0aGUgY3VycmVudCBtZW51LlxuICAgICAqIE9ubHkgZG9lcyBhbnl0aGluZyBpZiBgc2hvdWxkSGFuZGxlS2V5YCByZXR1cm5zIHRydWUuXG4gICAgICogQHJldHVybnMgV2hldGhlciB0aGUgZXZlbnQgd2FzIGhhbmRsZWQuXG4gICAgICovXG4gICAgdmFyIGtleUhhbmRsZXIgPSBmdW5jdGlvbiAoZXYsIHNob3VsZEhhbmRsZUtleSwgZGlzbWlzc0FsbE1lbnVzKSB7XG4gICAgICAgIHZhciBoYW5kbGVkID0gZmFsc2U7XG4gICAgICAgIGlmIChzaG91bGRIYW5kbGVLZXkoZXYpKSB7XG4gICAgICAgICAgICBkaXNtaXNzKGV2LCBkaXNtaXNzQWxsTWVudXMpO1xuICAgICAgICAgICAgZXYucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIGV2LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgaGFuZGxlZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGhhbmRsZWQ7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgdGhlIHN1Ym1lbnUgc2hvdWxkIGJlIGNsb3NlZFxuICAgICAqL1xuICAgIHZhciBzaG91bGRDbG9zZVN1Yk1lbnUgPSBmdW5jdGlvbiAoZXYpIHtcbiAgICAgICAgdmFyIHN1Ym1lbnVDbG9zZUtleSA9IGdldFJUTCh0aGVtZSkgPyBLZXlDb2Rlcy5yaWdodCA6IEtleUNvZGVzLmxlZnQ7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBkZXByZWNhdGlvbi9kZXByZWNhdGlvblxuICAgICAgICBpZiAoZXYud2hpY2ggIT09IHN1Ym1lbnVDbG9zZUtleSB8fCAhaXNTdWJNZW51KSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICEhKGZvY3VzWm9uZURpcmVjdGlvbiA9PT0gRm9jdXNab25lRGlyZWN0aW9uLnZlcnRpY2FsIHx8XG4gICAgICAgICAgICAoY2hlY2tGb3JOb1dyYXAgJiYgIXNob3VsZFdyYXBGb2N1cyhldi50YXJnZXQsICdkYXRhLW5vLWhvcml6b250YWwtd3JhcCcpKSk7XG4gICAgfTtcbiAgICB2YXIgc2hvdWxkSGFuZGxlS2V5RG93biA9IGZ1bmN0aW9uIChldikge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZGVwcmVjYXRpb24vZGVwcmVjYXRpb25cbiAgICAgICAgZXYud2hpY2ggPT09IEtleUNvZGVzLmVzY2FwZSB8fFxuICAgICAgICAgICAgc2hvdWxkQ2xvc2VTdWJNZW51KGV2KSB8fFxuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGRlcHJlY2F0aW9uL2RlcHJlY2F0aW9uXG4gICAgICAgICAgICAoZXYud2hpY2ggPT09IEtleUNvZGVzLnVwICYmIChldi5hbHRLZXkgfHwgZXYubWV0YUtleSkpKTtcbiAgICB9O1xuICAgIHZhciBvbktleURvd24gPSBmdW5jdGlvbiAoZXYpIHtcbiAgICAgICAgLy8gVGFrZSBub3RlIGlmIHdlIGFyZSBwcm9jZXNzaW5nIGFuIGFsdCAob3B0aW9uKSBvciBtZXRhIChjb21tYW5kKSBrZXlkb3duLlxuICAgICAgICAvLyBTZWUgY29tbWVudCBpbiBzaG91bGRIYW5kbGVLZXlVcCBmb3IgcmVhc29uaW5nLlxuICAgICAgICBsYXN0S2V5RG93bldhc0FsdE9yTWV0YS5jdXJyZW50ID0gaXNBbHRPck1ldGEoZXYpO1xuICAgICAgICAvLyBPbiBNYWMsIHByZXNzaW5nIGVzY2FwZSBkaXNtaXNzZXMgYWxsIGxldmVscyBvZiBuYXRpdmUgY29udGV4dCBtZW51c1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZGVwcmVjYXRpb24vZGVwcmVjYXRpb25cbiAgICAgICAgdmFyIGRpc21pc3NBbGxNZW51cyA9IGV2LndoaWNoID09PSBLZXlDb2Rlcy5lc2NhcGUgJiYgKGlzTWFjKCkgfHwgaXNJT1MoKSk7XG4gICAgICAgIHJldHVybiBrZXlIYW5kbGVyKGV2LCBzaG91bGRIYW5kbGVLZXlEb3duLCBkaXNtaXNzQWxsTWVudXMpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogV2UgY2xvc2UgdGhlIG1lbnUgb24ga2V5IHVwIG9ubHkgaWYgQUxMIG9mIHRoZSBmb2xsb3dpbmcgYXJlIHRydWU6XG4gICAgICogLSBNb3N0IHJlY2VudCBrZXkgZG93biB3YXMgYWx0IG9yIG1ldGEgKGNvbW1hbmQpXG4gICAgICogLSBUaGUgYWx0L21ldGEga2V5IGRvd24gd2FzIE5PVCBmb2xsb3dlZCBieSBzb21lIG90aGVyIGtleSAoc3VjaCBhcyBkb3duL3VwIGFycm93IHRvXG4gICAgICogICBleHBhbmQvY29sbGFwc2UgdGhlIG1lbnUpXG4gICAgICogLSBXZSdyZSBub3Qgb24gYSBNYWMgKG9yIGlPUylcbiAgICAgKlxuICAgICAqIFRoaXMgaXMgYmVjYXVzZSBvbiBXaW5kb3dzLCBwcmVzc2luZyBhbHQgbW92ZXMgZm9jdXMgdG8gdGhlIGFwcGxpY2F0aW9uIG1lbnUgYmFyIG9yIHNpbWlsYXIsXG4gICAgICogY2xvc2luZyBhbnkgb3BlbiBjb250ZXh0IG1lbnVzLiBUaGVyZSBpcyBub3QgYSBzaW1pbGFyIGJlaGF2aW9yIG9uIE1hY3MuXG4gICAgICovXG4gICAgdmFyIHNob3VsZEhhbmRsZUtleVVwID0gZnVuY3Rpb24gKGV2KSB7XG4gICAgICAgIHZhciBrZXlQcmVzc0lzQWx0T3JNZXRhQWxvbmUgPSBsYXN0S2V5RG93bldhc0FsdE9yTWV0YS5jdXJyZW50ICYmIGlzQWx0T3JNZXRhKGV2KTtcbiAgICAgICAgbGFzdEtleURvd25XYXNBbHRPck1ldGEuY3VycmVudCA9IGZhbHNlO1xuICAgICAgICByZXR1cm4gISFrZXlQcmVzc0lzQWx0T3JNZXRhQWxvbmUgJiYgIShpc0lPUygpIHx8IGlzTWFjKCkpO1xuICAgIH07XG4gICAgdmFyIG9uS2V5VXAgPSBmdW5jdGlvbiAoZXYpIHtcbiAgICAgICAgcmV0dXJuIGtleUhhbmRsZXIoZXYsIHNob3VsZEhhbmRsZUtleVVwLCB0cnVlIC8qIGRpc21pc3NBbGxNZW51cyAqLyk7XG4gICAgfTtcbiAgICB2YXIgb25NZW51S2V5RG93biA9IGZ1bmN0aW9uIChldikge1xuICAgICAgICAvLyBNYXJrIGFzIGhhbmRsZWQgaWYgb25LZXlEb3duIHJldHVybnMgdHJ1ZSAoZm9yIGhhbmRsaW5nIGNvbGxhcHNlIGNhc2VzKVxuICAgICAgICAvLyBvciBpZiB3ZSBhcmUgYXR0ZW1wdGluZyB0byBleHBhbmQgYSBzdWJtZW51XG4gICAgICAgIHZhciBoYW5kbGVkID0gb25LZXlEb3duKGV2KTtcbiAgICAgICAgaWYgKGhhbmRsZWQgfHwgIWhvc3RFbGVtZW50LmN1cnJlbnQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICAvLyBJZiB3ZSBoYXZlIGEgbW9kaWZpZXIga2V5IGJlaW5nIHByZXNzZWQsIHdlIGRvIG5vdCB3YW50IHRvIG1vdmUgZm9jdXMuXG4gICAgICAgIC8vIE90aGVyd2lzZSwgaGFuZGxlIHVwIGFuZCBkb3duIGtleXMuXG4gICAgICAgIHZhciBoYXNNb2RpZmllciA9ICEhKGV2LmFsdEtleSB8fCBldi5tZXRhS2V5KTtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGRlcHJlY2F0aW9uL2RlcHJlY2F0aW9uXG4gICAgICAgIHZhciBpc1VwID0gZXYud2hpY2ggPT09IEtleUNvZGVzLnVwO1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZGVwcmVjYXRpb24vZGVwcmVjYXRpb25cbiAgICAgICAgdmFyIGlzRG93biA9IGV2LndoaWNoID09PSBLZXlDb2Rlcy5kb3duO1xuICAgICAgICBpZiAoIWhhc01vZGlmaWVyICYmIChpc1VwIHx8IGlzRG93bikpIHtcbiAgICAgICAgICAgIHZhciBlbGVtZW50VG9Gb2N1cyA9IGlzVXBcbiAgICAgICAgICAgICAgICA/IGdldExhc3RGb2N1c2FibGUoaG9zdEVsZW1lbnQuY3VycmVudCwgaG9zdEVsZW1lbnQuY3VycmVudC5sYXN0Q2hpbGQsIHRydWUpXG4gICAgICAgICAgICAgICAgOiBnZXRGaXJzdEZvY3VzYWJsZShob3N0RWxlbWVudC5jdXJyZW50LCBob3N0RWxlbWVudC5jdXJyZW50LmZpcnN0Q2hpbGQsIHRydWUpO1xuICAgICAgICAgICAgaWYgKGVsZW1lbnRUb0ZvY3VzKSB7XG4gICAgICAgICAgICAgICAgZWxlbWVudFRvRm9jdXMuZm9jdXMoKTtcbiAgICAgICAgICAgICAgICBldi5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgIGV2LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICB2YXIgb25JdGVtS2V5RG93biA9IGZ1bmN0aW9uIChpdGVtLCBldikge1xuICAgICAgICB2YXIgb3BlbktleSA9IGdldFJUTCh0aGVtZSkgPyBLZXlDb2Rlcy5sZWZ0IDogS2V5Q29kZXMucmlnaHQ7XG4gICAgICAgIGlmICghaXRlbS5kaXNhYmxlZCAmJlxuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGRlcHJlY2F0aW9uL2RlcHJlY2F0aW9uXG4gICAgICAgICAgICAoZXYud2hpY2ggPT09IG9wZW5LZXkgfHwgZXYud2hpY2ggPT09IEtleUNvZGVzLmVudGVyIHx8IChldi53aGljaCA9PT0gS2V5Q29kZXMuZG93biAmJiAoZXYuYWx0S2V5IHx8IGV2Lm1ldGFLZXkpKSkpIHtcbiAgICAgICAgICAgIG9wZW5TdWJNZW51KGl0ZW0sIGV2LmN1cnJlbnRUYXJnZXQpO1xuICAgICAgICAgICAgZXYucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIFtvbktleURvd24sIG9uS2V5VXAsIG9uTWVudUtleURvd24sIG9uSXRlbUtleURvd25dO1xufVxuZnVuY3Rpb24gdXNlU2Nyb2xsSGFuZGxlcihhc3luY1RyYWNrZXIpIHtcbiAgICB2YXIgaXNTY3JvbGxJZGxlID0gUmVhY3QudXNlUmVmKHRydWUpO1xuICAgIHZhciBzY3JvbGxJZGxlVGltZW91dElkID0gUmVhY3QudXNlUmVmKCk7XG4gICAgLyoqXG4gICAgICogU2Nyb2xsIGhhbmRsZXIgZm9yIHRoZSBjYWxsb3V0IHRvIG1ha2Ugc3VyZSB0aGUgbW91c2UgZXZlbnRzXG4gICAgICogZm9yIHVwZGF0aW5nIGZvY3VzIGFyZSBub3QgaW50ZXJhY3RpbmcgZHVyaW5nIHNjcm9sbFxuICAgICAqL1xuICAgIHZhciBvblNjcm9sbCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKCFpc1Njcm9sbElkbGUuY3VycmVudCAmJiBzY3JvbGxJZGxlVGltZW91dElkLmN1cnJlbnQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgYXN5bmNUcmFja2VyLmNsZWFyVGltZW91dChzY3JvbGxJZGxlVGltZW91dElkLmN1cnJlbnQpO1xuICAgICAgICAgICAgc2Nyb2xsSWRsZVRpbWVvdXRJZC5jdXJyZW50ID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaXNTY3JvbGxJZGxlLmN1cnJlbnQgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBzY3JvbGxJZGxlVGltZW91dElkLmN1cnJlbnQgPSBhc3luY1RyYWNrZXIuc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpc1Njcm9sbElkbGUuY3VycmVudCA9IHRydWU7XG4gICAgICAgIH0sIE5hdmlnYXRpb25JZGxlRGVsYXkpO1xuICAgIH07XG4gICAgcmV0dXJuIFtvblNjcm9sbCwgaXNTY3JvbGxJZGxlXTtcbn1cbmZ1bmN0aW9uIHVzZU9uU3VibWVudURpc21pc3MoZGlzbWlzcywgY2xvc2VTdWJNZW51KSB7XG4gICAgdmFyIGlzTW91bnRlZFJlZiA9IFJlYWN0LnVzZVJlZihmYWxzZSk7XG4gICAgUmVhY3QudXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaXNNb3VudGVkUmVmLmN1cnJlbnQgPSB0cnVlO1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaXNNb3VudGVkUmVmLmN1cnJlbnQgPSBmYWxzZTtcbiAgICAgICAgfTtcbiAgICB9LCBbXSk7XG4gICAgLyoqXG4gICAgICogVGhpcyBmdW5jdGlvbiBpcyBjYWxsZWQgQVNZTkNIUk9OT1VTTFksIGFuZCBzbyB0aGVyZSBpcyBhIGNoYW5jZSBpdCBpcyBjYWxsZWRcbiAgICAgKiBhZnRlciB0aGUgY29tcG9uZW50IGlzIHVubW91bnRlZC4gVGhlIGlzTW91bnRlZFJlZiBpcyBhZGRlZCB0byBwcmV2ZW50XG4gICAgICogZnJvbSBjYWxsaW5nIHNldFN0YXRlKCkgYWZ0ZXIgdW5tb3VudC4gRG8gTk9UIGNvcHkgdGhpcyBwYXR0ZXJuIGluIHN5bmNocm9ub3VzXG4gICAgICogY29kZS5cbiAgICAgKi9cbiAgICB2YXIgb25TdWJNZW51RGlzbWlzcyA9IGZ1bmN0aW9uIChldiwgZGlzbWlzc0FsbCkge1xuICAgICAgICBpZiAoZGlzbWlzc0FsbCkge1xuICAgICAgICAgICAgZGlzbWlzcyhldiwgZGlzbWlzc0FsbCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoaXNNb3VudGVkUmVmLmN1cnJlbnQpIHtcbiAgICAgICAgICAgIGNsb3NlU3ViTWVudSgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gb25TdWJNZW51RGlzbWlzcztcbn1cbmZ1bmN0aW9uIHVzZVN1Ym1lbnVFbnRlclRpbWVyKF9hLCBhc3luY1RyYWNrZXIpIHtcbiAgICB2YXIgX2IgPSBfYS5zdWJNZW51SG92ZXJEZWxheSwgc3ViTWVudUhvdmVyRGVsYXkgPSBfYiA9PT0gdm9pZCAwID8gTmF2aWdhdGlvbklkbGVEZWxheSA6IF9iO1xuICAgIHZhciBlbnRlclRpbWVyUmVmID0gUmVhY3QudXNlUmVmKHVuZGVmaW5lZCk7XG4gICAgdmFyIGNhbmNlbFN1Yk1lbnVUaW1lciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKGVudGVyVGltZXJSZWYuY3VycmVudCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBhc3luY1RyYWNrZXIuY2xlYXJUaW1lb3V0KGVudGVyVGltZXJSZWYuY3VycmVudCk7XG4gICAgICAgICAgICBlbnRlclRpbWVyUmVmLmN1cnJlbnQgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHZhciBzdGFydFN1Ym1lbnVUaW1lciA9IGZ1bmN0aW9uIChvblRpbWVyRXhwaXJlZCkge1xuICAgICAgICBlbnRlclRpbWVyUmVmLmN1cnJlbnQgPSBhc3luY1RyYWNrZXIuc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBvblRpbWVyRXhwaXJlZCgpO1xuICAgICAgICAgICAgY2FuY2VsU3ViTWVudVRpbWVyKCk7XG4gICAgICAgIH0sIHN1Yk1lbnVIb3ZlckRlbGF5KTtcbiAgICB9O1xuICAgIHJldHVybiBbY2FuY2VsU3ViTWVudVRpbWVyLCBzdGFydFN1Ym1lbnVUaW1lciwgZW50ZXJUaW1lclJlZl07XG59XG5mdW5jdGlvbiB1c2VNb3VzZUhhbmRsZXJzKHByb3BzLCBpc1Njcm9sbElkbGUsIHN1Yk1lbnVFbnRyeVRpbWVyLCB0YXJnZXRXaW5kb3csIHNob3VsZFVwZGF0ZUZvY3VzT25Nb3VzZUV2ZW50LCBnb3RNb3VzZU1vdmUsIGV4cGFuZGVkTWVudUl0ZW1LZXksIGhvc3RFbGVtZW50LCBzdGFydFN1Ym1lbnVUaW1lciwgY2FuY2VsU3ViTWVudVRpbWVyLCBvcGVuU3ViTWVudSwgb25TdWJNZW51RGlzbWlzcywgZGlzbWlzcykge1xuICAgIHZhciBtZW51VGFyZ2V0ID0gcHJvcHMudGFyZ2V0O1xuICAgIHZhciBvbkl0ZW1Nb3VzZUVudGVyQmFzZSA9IGZ1bmN0aW9uIChpdGVtLCBldiwgdGFyZ2V0KSB7XG4gICAgICAgIGlmIChzaG91bGRVcGRhdGVGb2N1c09uTW91c2VFdmVudC5jdXJyZW50KSB7XG4gICAgICAgICAgICBnb3RNb3VzZU1vdmUuY3VycmVudCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNob3VsZElnbm9yZU1vdXNlRXZlbnQoKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHVwZGF0ZUZvY3VzT25Nb3VzZUV2ZW50KGl0ZW0sIGV2LCB0YXJnZXQpO1xuICAgIH07XG4gICAgdmFyIG9uSXRlbU1vdXNlTW92ZUJhc2UgPSBmdW5jdGlvbiAoaXRlbSwgZXYsIHRhcmdldCkge1xuICAgICAgICB2YXIgdGFyZ2V0RWxlbWVudCA9IGV2LmN1cnJlbnRUYXJnZXQ7XG4gICAgICAgIC8vIEFsd2F5cyBkbyB0aGlzIGNoZWNrIHRvIG1ha2Ugc3VyZSB3ZSByZWNvcmQgYSBtb3VzZU1vdmUgaWYgbmVlZGVkIChldmVuIGlmIHdlIGFyZSB0aW1lZCBvdXQpXG4gICAgICAgIGlmIChzaG91bGRVcGRhdGVGb2N1c09uTW91c2VFdmVudC5jdXJyZW50KSB7XG4gICAgICAgICAgICBnb3RNb3VzZU1vdmUuY3VycmVudCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFpc1Njcm9sbElkbGUuY3VycmVudCB8fFxuICAgICAgICAgICAgc3ViTWVudUVudHJ5VGltZXIuY3VycmVudCAhPT0gdW5kZWZpbmVkIHx8XG4gICAgICAgICAgICB0YXJnZXRFbGVtZW50ID09PSAodGFyZ2V0V2luZG93ID09PSBudWxsIHx8IHRhcmdldFdpbmRvdyA9PT0gdm9pZCAwID8gdm9pZCAwIDogdGFyZ2V0V2luZG93LmRvY3VtZW50LmFjdGl2ZUVsZW1lbnQpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdXBkYXRlRm9jdXNPbk1vdXNlRXZlbnQoaXRlbSwgZXYsIHRhcmdldCk7XG4gICAgfTtcbiAgICB2YXIgc2hvdWxkSWdub3JlTW91c2VFdmVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuICFpc1Njcm9sbElkbGUuY3VycmVudCB8fCAhZ290TW91c2VNb3ZlLmN1cnJlbnQ7XG4gICAgfTtcbiAgICB2YXIgb25Nb3VzZUl0ZW1MZWF2ZSA9IGZ1bmN0aW9uIChpdGVtLCBldikge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIGlmIChzaG91bGRJZ25vcmVNb3VzZUV2ZW50KCkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjYW5jZWxTdWJNZW51VGltZXIoKTtcbiAgICAgICAgaWYgKGV4cGFuZGVkTWVudUl0ZW1LZXkgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBJRTExIGZvY3VzKCkgbWV0aG9kIGZvcmNlcyBwYXJlbnRzIHRvIHNjcm9sbCB0byB0b3Agb2YgZWxlbWVudC5cbiAgICAgICAgICogRWRnZSBhbmQgSUUgZXhwb3NlIGEgc2V0QWN0aXZlKCkgZnVuY3Rpb24gZm9yIGZvY3VzYWJsZSBkaXZzIHRoYXRcbiAgICAgICAgICogc2V0cyB0aGUgcGFnZSBmb2N1cyBidXQgZG9lcyBub3Qgc2Nyb2xsIHRoZSBwYXJlbnQgZWxlbWVudC5cbiAgICAgICAgICovXG4gICAgICAgIGlmIChob3N0RWxlbWVudC5jdXJyZW50LnNldEFjdGl2ZSkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBob3N0RWxlbWVudC5jdXJyZW50LnNldEFjdGl2ZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAvKiBuby1vcCAqL1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgKF9hID0gaG9zdEVsZW1lbnQuY3VycmVudCkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmZvY3VzKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEhhbmRsZXMgdXBkYXRpbmcgZm9jdXMgd2hlbiBtb3VzZUVudGVyIG9yIG1vdXNlTW92ZSBmaXJlLlxuICAgICAqIEFzIHBhcnQgb2YgdXBkYXRpbmcgZm9jdXMsIFRoaXMgZnVuY3Rpb24gd2lsbCBhbHNvIHVwZGF0ZVxuICAgICAqIHRoZSBleHBhbmQvY29sbGFwc2Ugc3RhdGUgYWNjb3JkaW5nbHkuXG4gICAgICovXG4gICAgdmFyIHVwZGF0ZUZvY3VzT25Nb3VzZUV2ZW50ID0gZnVuY3Rpb24gKGl0ZW0sIGV2LCB0YXJnZXQpIHtcbiAgICAgICAgdmFyIHRhcmdldEVsZW1lbnQgPSB0YXJnZXQgPyB0YXJnZXQgOiBldi5jdXJyZW50VGFyZ2V0O1xuICAgICAgICBpZiAoaXRlbS5rZXkgPT09IGV4cGFuZGVkTWVudUl0ZW1LZXkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjYW5jZWxTdWJNZW51VGltZXIoKTtcbiAgICAgICAgLy8gSWYgdGhlIG1lbnUgaXMgbm90IGV4cGFuZGVkIHdlIGNhbiB1cGRhdGUgZm9jdXMgd2l0aG91dCBhbnkgZGVsYXlcbiAgICAgICAgaWYgKGV4cGFuZGVkTWVudUl0ZW1LZXkgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGFyZ2V0RWxlbWVudC5mb2N1cygpO1xuICAgICAgICB9XG4gICAgICAgIC8vIERlbGF5IHVwZGF0aW5nIGV4cGFuZGluZy9kaXNtaXNzaW5nIHRoZSBzdWJtZW51XG4gICAgICAgIC8vIGFuZCBvbmx5IHNldCBmb2N1cyBpZiB3ZSBoYXZlIG5vdCBhbHJlYWR5IGRvbmUgc29cbiAgICAgICAgaWYgKGhhc1N1Ym1lbnUoaXRlbSkpIHtcbiAgICAgICAgICAgIGV2LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgc3RhcnRTdWJtZW51VGltZXIoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHRhcmdldEVsZW1lbnQuZm9jdXMoKTtcbiAgICAgICAgICAgICAgICBvcGVuU3ViTWVudShpdGVtLCB0YXJnZXRFbGVtZW50LCB0cnVlKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgc3RhcnRTdWJtZW51VGltZXIoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIG9uU3ViTWVudURpc21pc3MoZXYpO1xuICAgICAgICAgICAgICAgIHRhcmdldEVsZW1lbnQuZm9jdXMoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfTtcbiAgICB2YXIgb25JdGVtQ2xpY2sgPSBmdW5jdGlvbiAoaXRlbSwgZXYpIHtcbiAgICAgICAgb25JdGVtQ2xpY2tCYXNlKGl0ZW0sIGV2LCBldi5jdXJyZW50VGFyZ2V0KTtcbiAgICB9O1xuICAgIHZhciBvbkl0ZW1DbGlja0Jhc2UgPSBmdW5jdGlvbiAoaXRlbSwgZXYsIHRhcmdldCkge1xuICAgICAgICB2YXIgaXRlbXMgPSBnZXRTdWJtZW51SXRlbXMoaXRlbSwgeyB0YXJnZXQ6IG1lbnVUYXJnZXQgfSk7XG4gICAgICAgIC8vIENhbmNlbCBhbiBhc3luYyBtZW51IGl0ZW0gaG92ZXIgdGltZW91dCBhY3Rpb24gZnJvbSBiZWluZyB0YWtlbiBhbmQgaW5zdGVhZFxuICAgICAgICAvLyBqdXN0IHRyaWdnZXIgdGhlIGNsaWNrIGV2ZW50IGluc3RlYWQuXG4gICAgICAgIGNhbmNlbFN1Yk1lbnVUaW1lcigpO1xuICAgICAgICBpZiAoIWhhc1N1Ym1lbnUoaXRlbSkgJiYgKCFpdGVtcyB8fCAhaXRlbXMubGVuZ3RoKSkge1xuICAgICAgICAgICAgLy8gVGhpcyBpcyBhbiBpdGVtIHdpdGhvdXQgYSBtZW51LiBDbGljayBpdC5cbiAgICAgICAgICAgIGV4ZWN1dGVJdGVtQ2xpY2soaXRlbSwgZXYpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaWYgKGl0ZW0ua2V5ICE9PSBleHBhbmRlZE1lbnVJdGVtS2V5KSB7XG4gICAgICAgICAgICAgICAgLy8gVGhpcyBoYXMgYSBjb2xsYXBzZWQgc3ViIG1lbnUuIEV4cGFuZCBpdC5cbiAgICAgICAgICAgICAgICAvLyBmb2N1cyBvbiB0aGUgY29udGFpbmVyIGJ5IGRlZmF1bHQgd2hlbiB0aGUgbWVudSBpcyBvcGVuZWQgd2l0aCBhIGNsaWNrIGV2ZW50XG4gICAgICAgICAgICAgICAgLy8gdGhpcyBkaWZmZXJlbnRpYXRlcyBmcm9tIGEga2V5Ym9hcmQgaW50ZXJhY3Rpb24gdHJpZ2dlcmluZyB0aGUgY2xpY2sgZXZlbnRcbiAgICAgICAgICAgICAgICB2YXIgc2hvdWxkRm9jdXNPbkNvbnRhaW5lciA9IHR5cGVvZiBwcm9wcy5zaG91bGRGb2N1c09uQ29udGFpbmVyID09PSAnYm9vbGVhbidcbiAgICAgICAgICAgICAgICAgICAgPyBwcm9wcy5zaG91bGRGb2N1c09uQ29udGFpbmVyXG4gICAgICAgICAgICAgICAgICAgIDogZXYubmF0aXZlRXZlbnQucG9pbnRlclR5cGUgPT09ICdtb3VzZSc7XG4gICAgICAgICAgICAgICAgb3BlblN1Yk1lbnUoaXRlbSwgdGFyZ2V0LCBzaG91bGRGb2N1c09uQ29udGFpbmVyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBldi5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgZXYucHJldmVudERlZmF1bHQoKTtcbiAgICB9O1xuICAgIHZhciBvbkFuY2hvckNsaWNrID0gZnVuY3Rpb24gKGl0ZW0sIGV2KSB7XG4gICAgICAgIGV4ZWN1dGVJdGVtQ2xpY2soaXRlbSwgZXYpO1xuICAgICAgICBldi5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICB9O1xuICAgIHZhciBleGVjdXRlSXRlbUNsaWNrID0gZnVuY3Rpb24gKGl0ZW0sIGV2KSB7XG4gICAgICAgIGlmIChpdGVtLmRpc2FibGVkIHx8IGl0ZW0uaXNEaXNhYmxlZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpdGVtLnByZWZlck1lbnVUYXJnZXRBc0V2ZW50VGFyZ2V0KSB7XG4gICAgICAgICAgICBvdmVycmlkZVRhcmdldChldiwgbWVudVRhcmdldCk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHNob3VsZERpc21pc3MgPSBmYWxzZTtcbiAgICAgICAgaWYgKGl0ZW0ub25DbGljaykge1xuICAgICAgICAgICAgc2hvdWxkRGlzbWlzcyA9ICEhaXRlbS5vbkNsaWNrKGV2LCBpdGVtKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChwcm9wcy5vbkl0ZW1DbGljaykge1xuICAgICAgICAgICAgc2hvdWxkRGlzbWlzcyA9ICEhcHJvcHMub25JdGVtQ2xpY2soZXYsIGl0ZW0pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzaG91bGREaXNtaXNzIHx8ICFldi5kZWZhdWx0UHJldmVudGVkKSB7XG4gICAgICAgICAgICBkaXNtaXNzKGV2LCB0cnVlKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIFtcbiAgICAgICAgb25JdGVtTW91c2VFbnRlckJhc2UsXG4gICAgICAgIG9uSXRlbU1vdXNlTW92ZUJhc2UsXG4gICAgICAgIG9uTW91c2VJdGVtTGVhdmUsXG4gICAgICAgIG9uSXRlbUNsaWNrLFxuICAgICAgICBvbkFuY2hvckNsaWNrLFxuICAgICAgICBleGVjdXRlSXRlbUNsaWNrLFxuICAgICAgICBvbkl0ZW1DbGlja0Jhc2UsXG4gICAgXTtcbn1cbi8vI2VuZHJlZ2lvblxuZXhwb3J0IHZhciBDb250ZXh0dWFsTWVudUJhc2UgPSBSZWFjdC5tZW1vKFJlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gKHByb3BzV2l0aG91dERlZmF1bHRzLCBmb3J3YXJkZWRSZWYpIHtcbiAgICB2YXIgX2E7XG4gICAgdmFyIF9iID0gZ2V0UHJvcHNXaXRoRGVmYXVsdHMoREVGQVVMVF9QUk9QUywgcHJvcHNXaXRob3V0RGVmYXVsdHMpLCByZWYgPSBfYi5yZWYsIHByb3BzID0gX19yZXN0KF9iLCBbXCJyZWZcIl0pO1xuICAgIHZhciBob3N0RWxlbWVudCA9IFJlYWN0LnVzZVJlZihudWxsKTtcbiAgICB2YXIgYXN5bmNUcmFja2VyID0gdXNlQXN5bmMoKTtcbiAgICB2YXIgbWVudUlkID0gdXNlSWQoQ09NUE9ORU5UX05BTUUsIHByb3BzLmlkKTtcbiAgICB1c2VXYXJuaW5ncyh7XG4gICAgICAgIG5hbWU6IENPTVBPTkVOVF9OQU1FLFxuICAgICAgICBwcm9wczogcHJvcHMsXG4gICAgICAgIGRlcHJlY2F0aW9uczoge1xuICAgICAgICAgICAgZ2V0TWVudUNsYXNzTmFtZXM6ICdzdHlsZXMnLFxuICAgICAgICB9LFxuICAgIH0pO1xuICAgIHZhciBkaXNtaXNzID0gZnVuY3Rpb24gKGV2LCBkaXNtaXNzQWxsKSB7IHZhciBfYTsgcmV0dXJuIChfYSA9IHByb3BzLm9uRGlzbWlzcykgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmNhbGwocHJvcHMsIGV2LCBkaXNtaXNzQWxsKTsgfTtcbiAgICB2YXIgX2MgPSB1c2VUYXJnZXQocHJvcHMudGFyZ2V0LCBob3N0RWxlbWVudCksIHRhcmdldFJlZiA9IF9jWzBdLCB0YXJnZXRXaW5kb3cgPSBfY1sxXTtcbiAgICB2YXIgdHJ5Rm9jdXNQcmV2aW91c0FjdGl2ZUVsZW1lbnQgPSB1c2VQcmV2aW91c0FjdGl2ZUVsZW1lbnQocHJvcHMsIHRhcmdldFdpbmRvdylbMF07XG4gICAgdmFyIF9kID0gdXNlU3ViTWVudVN0YXRlKHByb3BzLCBkaXNtaXNzKSwgZXhwYW5kZWRNZW51SXRlbUtleSA9IF9kWzBdLCBvcGVuU3ViTWVudSA9IF9kWzFdLCBnZXRTdWJtZW51UHJvcHMgPSBfZFsyXSwgb25TdWJNZW51RGlzbWlzcyA9IF9kWzNdO1xuICAgIHZhciBfZSA9IHVzZVNob3VsZFVwZGF0ZUZvY3VzT25Nb3VzZU1vdmUocHJvcHMpLCBzaG91bGRVcGRhdGVGb2N1c09uTW91c2VFdmVudCA9IF9lWzBdLCBnb3RNb3VzZU1vdmUgPSBfZVsxXSwgb25NZW51Rm9jdXNDYXB0dXJlID0gX2VbMl07XG4gICAgdmFyIF9mID0gdXNlU2Nyb2xsSGFuZGxlcihhc3luY1RyYWNrZXIpLCBvblNjcm9sbCA9IF9mWzBdLCBpc1Njcm9sbElkbGUgPSBfZlsxXTtcbiAgICB2YXIgX2cgPSB1c2VTdWJtZW51RW50ZXJUaW1lcihwcm9wcywgYXN5bmNUcmFja2VyKSwgY2FuY2VsU3ViTWVudVRpbWVyID0gX2dbMF0sIHN0YXJ0U3VibWVudVRpbWVyID0gX2dbMV0sIHN1Yk1lbnVFbnRyeVRpbWVyID0gX2dbMl07XG4gICAgdmFyIHJlc3BvbnNpdmVNb2RlID0gdXNlUmVzcG9uc2l2ZU1vZGUoaG9zdEVsZW1lbnQsIHByb3BzLnJlc3BvbnNpdmVNb2RlKTtcbiAgICB1c2VWaXNpYmlsaXR5KHByb3BzLCB0YXJnZXRXaW5kb3cpO1xuICAgIHZhciBfaCA9IHVzZUtleUhhbmRsZXJzKHByb3BzLCBkaXNtaXNzLCBob3N0RWxlbWVudCwgb3BlblN1Yk1lbnUpLCBvbktleURvd24gPSBfaFswXSwgb25LZXlVcCA9IF9oWzFdLCBvbk1lbnVLZXlEb3duID0gX2hbMl0sIG9uSXRlbUtleURvd24gPSBfaFszXTtcbiAgICB2YXIgX2ogPSB1c2VNb3VzZUhhbmRsZXJzKHByb3BzLCBpc1Njcm9sbElkbGUsIHN1Yk1lbnVFbnRyeVRpbWVyLCB0YXJnZXRXaW5kb3csIHNob3VsZFVwZGF0ZUZvY3VzT25Nb3VzZUV2ZW50LCBnb3RNb3VzZU1vdmUsIGV4cGFuZGVkTWVudUl0ZW1LZXksIGhvc3RFbGVtZW50LCBzdGFydFN1Ym1lbnVUaW1lciwgY2FuY2VsU3ViTWVudVRpbWVyLCBvcGVuU3ViTWVudSwgb25TdWJNZW51RGlzbWlzcywgZGlzbWlzcyksIG9uSXRlbU1vdXNlRW50ZXJCYXNlID0gX2pbMF0sIG9uSXRlbU1vdXNlTW92ZUJhc2UgPSBfalsxXSwgb25Nb3VzZUl0ZW1MZWF2ZSA9IF9qWzJdLCBvbkl0ZW1DbGljayA9IF9qWzNdLCBvbkFuY2hvckNsaWNrID0gX2pbNF0sIGV4ZWN1dGVJdGVtQ2xpY2sgPSBfals1XSwgb25JdGVtQ2xpY2tCYXNlID0gX2pbNl07XG4gICAgLy8jcmVnaW9uIFJlbmRlciBoZWxwZXJzXG4gICAgdmFyIG9uRGVmYXVsdFJlbmRlck1lbnVMaXN0ID0gZnVuY3Rpb24gKG1lbnVMaXN0UHJvcHMsIFxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBkZXByZWNhdGlvbi9kZXByZWNhdGlvblxuICAgIG1lbnVDbGFzc05hbWVzLCBkZWZhdWx0UmVuZGVyKSB7XG4gICAgICAgIHZhciBpbmRleENvcnJlY3Rpb24gPSAwO1xuICAgICAgICB2YXIgaXRlbXMgPSBtZW51TGlzdFByb3BzLml0ZW1zLCB0b3RhbEl0ZW1Db3VudCA9IG1lbnVMaXN0UHJvcHMudG90YWxJdGVtQ291bnQsIGhhc0NoZWNrbWFya3MgPSBtZW51TGlzdFByb3BzLmhhc0NoZWNrbWFya3MsIGhhc0ljb25zID0gbWVudUxpc3RQcm9wcy5oYXNJY29ucztcbiAgICAgICAgcmV0dXJuIChSZWFjdC5jcmVhdGVFbGVtZW50KFwidWxcIiwgeyBjbGFzc05hbWU6IG1lbnVDbGFzc05hbWVzLmxpc3QsIG9uS2V5RG93bjogb25LZXlEb3duLCBvbktleVVwOiBvbktleVVwLCByb2xlOiAncHJlc2VudGF0aW9uJyB9LCBpdGVtcy5tYXAoZnVuY3Rpb24gKGl0ZW0sIGluZGV4KSB7XG4gICAgICAgICAgICB2YXIgbWVudUl0ZW0gPSByZW5kZXJNZW51SXRlbShpdGVtLCBpbmRleCwgaW5kZXhDb3JyZWN0aW9uLCB0b3RhbEl0ZW1Db3VudCwgaGFzQ2hlY2ttYXJrcywgaGFzSWNvbnMsIG1lbnVDbGFzc05hbWVzKTtcbiAgICAgICAgICAgIGlmIChpdGVtLml0ZW1UeXBlICE9PSBDb250ZXh0dWFsTWVudUl0ZW1UeXBlLkRpdmlkZXIgJiYgaXRlbS5pdGVtVHlwZSAhPT0gQ29udGV4dHVhbE1lbnVJdGVtVHlwZS5IZWFkZXIpIHtcbiAgICAgICAgICAgICAgICB2YXIgaW5kZXhJbmNyZWFzZSA9IGl0ZW0uY3VzdG9tT25SZW5kZXJMaXN0TGVuZ3RoID8gaXRlbS5jdXN0b21PblJlbmRlckxpc3RMZW5ndGggOiAxO1xuICAgICAgICAgICAgICAgIGluZGV4Q29ycmVjdGlvbiArPSBpbmRleEluY3JlYXNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG1lbnVJdGVtO1xuICAgICAgICB9KSkpO1xuICAgIH07XG4gICAgdmFyIHJlbmRlckZvY3VzWm9uZSA9IGZ1bmN0aW9uIChjaGlsZHJlbiwgYWRqdXN0ZWRGb2N1c1pvbmVQcm9wcykge1xuICAgICAgICB2YXIgX2EgPSBwcm9wcy5mb2N1c1pvbmVBcywgQ2hpbGRyZW5SZW5kZXJlciA9IF9hID09PSB2b2lkIDAgPyBGb2N1c1pvbmUgOiBfYTtcbiAgICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ2hpbGRyZW5SZW5kZXJlciwgX19hc3NpZ24oe30sIGFkanVzdGVkRm9jdXNab25lUHJvcHMpLCBjaGlsZHJlbik7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiAhISFJTVBPUlRBTlQhISEgQXZvaWQgbXV0YXRpbmcgYGl0ZW06IElDb250ZXh0dWFsTWVudUl0ZW1gIGFyZ3VtZW50LiBJdCB3aWxsXG4gICAgICogY2F1c2UgdGhlIG1lbnUgaXRlbXMgdG8gYWx3YXlzIHJlLXJlbmRlciBiZWNhdXNlIHRoZSBjb21wb25lbnQgdXBkYXRlIGlzIGJhc2VkIG9uIHNoYWxsb3cgY29tcGFyaXNvbi5cbiAgICAgKi9cbiAgICB2YXIgcmVuZGVyTWVudUl0ZW0gPSBmdW5jdGlvbiAoaXRlbSwgaW5kZXgsIGZvY3VzYWJsZUVsZW1lbnRJbmRleCwgdG90YWxJdGVtQ291bnQsIGhhc0NoZWNrbWFya3MsIGhhc0ljb25zLCBcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZGVwcmVjYXRpb24vZGVwcmVjYXRpb25cbiAgICBtZW51Q2xhc3NOYW1lcykge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIHZhciByZW5kZXJlZEl0ZW1zID0gW107XG4gICAgICAgIHZhciBpY29uUHJvcHMgPSBpdGVtLmljb25Qcm9wcyB8fCB7IGljb25OYW1lOiAnTm9uZScgfTtcbiAgICAgICAgdmFyIGdldEl0ZW1DbGFzc05hbWVzID0gaXRlbS5nZXRJdGVtQ2xhc3NOYW1lcywgLy8gZXNsaW50LWRpc2FibGUtbGluZSBkZXByZWNhdGlvbi9kZXByZWNhdGlvblxuICAgICAgICBpdGVtUHJvcHMgPSBpdGVtLml0ZW1Qcm9wcztcbiAgICAgICAgdmFyIHN0eWxlcyA9IGl0ZW1Qcm9wcyA/IGl0ZW1Qcm9wcy5zdHlsZXMgOiB1bmRlZmluZWQ7XG4gICAgICAgIC8vIFdlIG9ubHkgc2VuZCBhIGRpdmlkZXJDbGFzc05hbWUgd2hlbiB0aGUgaXRlbSB0byBiZSByZW5kZXJlZCBpcyBhIGRpdmlkZXIuXG4gICAgICAgIC8vIEZvciBhbGwgb3RoZXIgY2FzZXMsIHRoZSBkZWZhdWx0IGRpdmlkZXIgc3R5bGUgaXMgdXNlZC5cbiAgICAgICAgdmFyIGRpdmlkZXJDbGFzc05hbWUgPSBpdGVtLml0ZW1UeXBlID09PSBDb250ZXh0dWFsTWVudUl0ZW1UeXBlLkRpdmlkZXIgPyBpdGVtLmNsYXNzTmFtZSA6IHVuZGVmaW5lZDtcbiAgICAgICAgdmFyIHN1Yk1lbnVJY29uQ2xhc3NOYW1lID0gaXRlbS5zdWJtZW51SWNvblByb3BzID8gaXRlbS5zdWJtZW51SWNvblByb3BzLmNsYXNzTmFtZSA6ICcnO1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZGVwcmVjYXRpb24vZGVwcmVjYXRpb25cbiAgICAgICAgdmFyIGl0ZW1DbGFzc05hbWVzO1xuICAgICAgICAvLyBJQ29udGV4dHVhbE1lbnVJdGVtI2dldEl0ZW1DbGFzc05hbWVzIGZvciBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eVxuICAgICAgICAvLyBvdGhlcndpc2UgdXNlcyBtZXJnZVN0eWxlcyBmb3IgY2xhc3MgbmFtZXMuXG4gICAgICAgIGlmIChnZXRJdGVtQ2xhc3NOYW1lcykge1xuICAgICAgICAgICAgaXRlbUNsYXNzTmFtZXMgPSBnZXRJdGVtQ2xhc3NOYW1lcyhwcm9wcy50aGVtZSwgaXNJdGVtRGlzYWJsZWQoaXRlbSksIGV4cGFuZGVkTWVudUl0ZW1LZXkgPT09IGl0ZW0ua2V5LCAhIWdldElzQ2hlY2tlZChpdGVtKSwgISFpdGVtLmhyZWYsIGljb25Qcm9wcy5pY29uTmFtZSAhPT0gJ05vbmUnLCBpdGVtLmNsYXNzTmFtZSwgZGl2aWRlckNsYXNzTmFtZSwgaWNvblByb3BzLmNsYXNzTmFtZSwgc3ViTWVudUljb25DbGFzc05hbWUsIGl0ZW0ucHJpbWFyeURpc2FibGVkKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHZhciBpdGVtU3R5bGVQcm9wcyA9IHtcbiAgICAgICAgICAgICAgICB0aGVtZTogcHJvcHMudGhlbWUsXG4gICAgICAgICAgICAgICAgZGlzYWJsZWQ6IGlzSXRlbURpc2FibGVkKGl0ZW0pLFxuICAgICAgICAgICAgICAgIGV4cGFuZGVkOiBleHBhbmRlZE1lbnVJdGVtS2V5ID09PSBpdGVtLmtleSxcbiAgICAgICAgICAgICAgICBjaGVja2VkOiAhIWdldElzQ2hlY2tlZChpdGVtKSxcbiAgICAgICAgICAgICAgICBpc0FuY2hvckxpbms6ICEhaXRlbS5ocmVmLFxuICAgICAgICAgICAgICAgIGtub3duSWNvbjogaWNvblByb3BzLmljb25OYW1lICE9PSAnTm9uZScsXG4gICAgICAgICAgICAgICAgaXRlbUNsYXNzTmFtZTogaXRlbS5jbGFzc05hbWUsXG4gICAgICAgICAgICAgICAgZGl2aWRlckNsYXNzTmFtZTogZGl2aWRlckNsYXNzTmFtZSxcbiAgICAgICAgICAgICAgICBpY29uQ2xhc3NOYW1lOiBpY29uUHJvcHMuY2xhc3NOYW1lLFxuICAgICAgICAgICAgICAgIHN1Yk1lbnVDbGFzc05hbWU6IHN1Yk1lbnVJY29uQ2xhc3NOYW1lLFxuICAgICAgICAgICAgICAgIHByaW1hcnlEaXNhYmxlZDogaXRlbS5wcmltYXJ5RGlzYWJsZWQsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgLy8gV2UgbmVlZCB0byBnZW5lcmF0ZSBkZWZhdWx0IHN0eWxlcyB0aGVuIG92ZXJyaWRlIGlmIHN0eWxlcyBhcmUgcHJvdmlkZWRcbiAgICAgICAgICAgIC8vIHNpbmNlIHRoZSBDb250ZXh0dWFsTWVudSBjdXJyZW50bHkgaGFuZGxlcyBpdGVtIGNsYXNzTmFtZXMuXG4gICAgICAgICAgICBpdGVtQ2xhc3NOYW1lcyA9IGdldENvbnRleHR1YWxNZW51SXRlbUNsYXNzTmFtZXMoX2dldE1lbnVJdGVtU3R5bGVzRnVuY3Rpb24oKF9hID0gbWVudUNsYXNzTmFtZXMuc3ViQ29tcG9uZW50U3R5bGVzKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EubWVudUl0ZW0sIHN0eWxlcyksIGl0ZW1TdHlsZVByb3BzKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZGVwcmVjYXRpb24vZGVwcmVjYXRpb25cbiAgICAgICAgaWYgKGl0ZW0udGV4dCA9PT0gJy0nIHx8IGl0ZW0ubmFtZSA9PT0gJy0nKSB7XG4gICAgICAgICAgICBpdGVtLml0ZW1UeXBlID0gQ29udGV4dHVhbE1lbnVJdGVtVHlwZS5EaXZpZGVyO1xuICAgICAgICB9XG4gICAgICAgIHN3aXRjaCAoaXRlbS5pdGVtVHlwZSkge1xuICAgICAgICAgICAgY2FzZSBDb250ZXh0dWFsTWVudUl0ZW1UeXBlLkRpdmlkZXI6XG4gICAgICAgICAgICAgICAgcmVuZGVyZWRJdGVtcy5wdXNoKHJlbmRlclNlcGFyYXRvcihpbmRleCwgaXRlbUNsYXNzTmFtZXMpKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgQ29udGV4dHVhbE1lbnVJdGVtVHlwZS5IZWFkZXI6XG4gICAgICAgICAgICAgICAgcmVuZGVyZWRJdGVtcy5wdXNoKHJlbmRlclNlcGFyYXRvcihpbmRleCwgaXRlbUNsYXNzTmFtZXMpKTtcbiAgICAgICAgICAgICAgICB2YXIgaGVhZGVySXRlbSA9IHJlbmRlckhlYWRlck1lbnVJdGVtKGl0ZW0sIGl0ZW1DbGFzc05hbWVzLCBtZW51Q2xhc3NOYW1lcywgaW5kZXgsIGhhc0NoZWNrbWFya3MsIGhhc0ljb25zKTtcbiAgICAgICAgICAgICAgICByZW5kZXJlZEl0ZW1zLnB1c2gocmVuZGVyTGlzdEl0ZW0oaGVhZGVySXRlbSwgaXRlbS5rZXkgfHwgaW5kZXgsIGl0ZW1DbGFzc05hbWVzLCBpdGVtLnRpdGxlKSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIENvbnRleHR1YWxNZW51SXRlbVR5cGUuU2VjdGlvbjpcbiAgICAgICAgICAgICAgICByZW5kZXJlZEl0ZW1zLnB1c2gocmVuZGVyU2VjdGlvbkl0ZW0oaXRlbSwgaXRlbUNsYXNzTmFtZXMsIG1lbnVDbGFzc05hbWVzLCBpbmRleCwgaGFzQ2hlY2ttYXJrcywgaGFzSWNvbnMpKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgdmFyIGRlZmF1bHRSZW5kZXJOb3JtYWxJdGVtID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVuZGVyTm9ybWFsSXRlbShpdGVtLCBpdGVtQ2xhc3NOYW1lcywgaW5kZXgsIGZvY3VzYWJsZUVsZW1lbnRJbmRleCwgdG90YWxJdGVtQ291bnQsIGhhc0NoZWNrbWFya3MsIGhhc0ljb25zKTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIHZhciBtZW51SXRlbSA9IHByb3BzLm9uUmVuZGVyQ29udGV4dHVhbE1lbnVJdGVtXG4gICAgICAgICAgICAgICAgICAgID8gcHJvcHMub25SZW5kZXJDb250ZXh0dWFsTWVudUl0ZW0oaXRlbSwgZGVmYXVsdFJlbmRlck5vcm1hbEl0ZW0pXG4gICAgICAgICAgICAgICAgICAgIDogZGVmYXVsdFJlbmRlck5vcm1hbEl0ZW0oKTtcbiAgICAgICAgICAgICAgICByZW5kZXJlZEl0ZW1zLnB1c2gocmVuZGVyTGlzdEl0ZW0obWVudUl0ZW0sIGl0ZW0ua2V5IHx8IGluZGV4LCBpdGVtQ2xhc3NOYW1lcywgaXRlbS50aXRsZSkpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIC8vIFNpbmNlIG11bHRpcGxlIG5vZGVzICpjb3VsZCogYmUgcmVuZGVyZWQsIHdyYXAgdGhlbSBhbGwgaW4gYSBmcmFnbWVudCB3aXRoIHRoaXMgaXRlbSdzIGtleS5cbiAgICAgICAgLy8gVGhpcyBlbnN1cmVzIHRoZSByZWNvbmNpbGVyIGhhbmRsZXMgbXVsdGktaXRlbSBvdXRwdXQgcGVyLW5vZGUgY29ycmVjdGx5IGFuZCBkb2VzIG5vdCByZS1tb3VudCBjb250ZW50LlxuICAgICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChSZWFjdC5GcmFnbWVudCwgeyBrZXk6IGl0ZW0ua2V5IH0sIHJlbmRlcmVkSXRlbXMpO1xuICAgIH07XG4gICAgdmFyIGRlZmF1bHRNZW51SXRlbVJlbmRlcmVyID0gZnVuY3Rpb24gKGl0ZW0sIFxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBkZXByZWNhdGlvbi9kZXByZWNhdGlvblxuICAgIG1lbnVDbGFzc05hbWVzKSB7XG4gICAgICAgIHZhciBpbmRleCA9IGl0ZW0uaW5kZXgsIGZvY3VzYWJsZUVsZW1lbnRJbmRleCA9IGl0ZW0uZm9jdXNhYmxlRWxlbWVudEluZGV4LCB0b3RhbEl0ZW1Db3VudCA9IGl0ZW0udG90YWxJdGVtQ291bnQsIGhhc0NoZWNrbWFya3MgPSBpdGVtLmhhc0NoZWNrbWFya3MsIGhhc0ljb25zID0gaXRlbS5oYXNJY29ucztcbiAgICAgICAgcmV0dXJuIHJlbmRlck1lbnVJdGVtKGl0ZW0sIGluZGV4LCBmb2N1c2FibGVFbGVtZW50SW5kZXgsIHRvdGFsSXRlbUNvdW50LCBoYXNDaGVja21hcmtzLCBoYXNJY29ucywgbWVudUNsYXNzTmFtZXMpO1xuICAgIH07XG4gICAgdmFyIHJlbmRlclNlY3Rpb25JdGVtID0gZnVuY3Rpb24gKHNlY3Rpb25JdGVtLCBcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZGVwcmVjYXRpb24vZGVwcmVjYXRpb25cbiAgICBpdGVtQ2xhc3NOYW1lcywgXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGRlcHJlY2F0aW9uL2RlcHJlY2F0aW9uXG4gICAgbWVudUNsYXNzTmFtZXMsIGluZGV4LCBoYXNDaGVja21hcmtzLCBoYXNJY29ucykge1xuICAgICAgICB2YXIgc2VjdGlvblByb3BzID0gc2VjdGlvbkl0ZW0uc2VjdGlvblByb3BzO1xuICAgICAgICBpZiAoIXNlY3Rpb25Qcm9wcykge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHZhciBoZWFkZXJJdGVtO1xuICAgICAgICB2YXIgZ3JvdXBQcm9wcztcbiAgICAgICAgaWYgKHNlY3Rpb25Qcm9wcy50aXRsZSkge1xuICAgICAgICAgICAgdmFyIGhlYWRlckNvbnRleHR1YWxNZW51SXRlbSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIHZhciBhcmlhTGFiZWxsZWRieSA9ICcnO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBzZWN0aW9uUHJvcHMudGl0bGUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgLy8gU2luY2UgdGl0bGUgaXMgYSB1c2VyLWZhY2luZyBzdHJpbmcsIGl0IG5lZWRzIHRvIGJlIHN0cmlwcGVkXG4gICAgICAgICAgICAgICAgLy8gb2Ygd2hpdGVzcGFjZSBpbiBvcmRlciB0byBidWlsZCBhIHZhbGlkIGVsZW1lbnQgSURcbiAgICAgICAgICAgICAgICB2YXIgaWRfMSA9IG1lbnVJZCArIHNlY3Rpb25Qcm9wcy50aXRsZS5yZXBsYWNlKC9cXHMvZywgJycpO1xuICAgICAgICAgICAgICAgIGhlYWRlckNvbnRleHR1YWxNZW51SXRlbSA9IHtcbiAgICAgICAgICAgICAgICAgICAga2V5OiBcInNlY3Rpb24tXCIgKyBzZWN0aW9uUHJvcHMudGl0bGUgKyBcIi10aXRsZVwiLFxuICAgICAgICAgICAgICAgICAgICBpdGVtVHlwZTogQ29udGV4dHVhbE1lbnVJdGVtVHlwZS5IZWFkZXIsXG4gICAgICAgICAgICAgICAgICAgIHRleHQ6IHNlY3Rpb25Qcm9wcy50aXRsZSxcbiAgICAgICAgICAgICAgICAgICAgaWQ6IGlkXzEsXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBhcmlhTGFiZWxsZWRieSA9IGlkXzE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB2YXIgaWRfMiA9IHNlY3Rpb25Qcm9wcy50aXRsZS5pZCB8fCBtZW51SWQgKyBzZWN0aW9uUHJvcHMudGl0bGUua2V5LnJlcGxhY2UoL1xccy9nLCAnJyk7XG4gICAgICAgICAgICAgICAgaGVhZGVyQ29udGV4dHVhbE1lbnVJdGVtID0gX19hc3NpZ24oX19hc3NpZ24oe30sIHNlY3Rpb25Qcm9wcy50aXRsZSksIHsgaWQ6IGlkXzIgfSk7XG4gICAgICAgICAgICAgICAgYXJpYUxhYmVsbGVkYnkgPSBpZF8yO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGhlYWRlckNvbnRleHR1YWxNZW51SXRlbSkge1xuICAgICAgICAgICAgICAgIGdyb3VwUHJvcHMgPSB7XG4gICAgICAgICAgICAgICAgICAgIHJvbGU6ICdncm91cCcsXG4gICAgICAgICAgICAgICAgICAgICdhcmlhLWxhYmVsbGVkYnknOiBhcmlhTGFiZWxsZWRieSxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIGhlYWRlckl0ZW0gPSByZW5kZXJIZWFkZXJNZW51SXRlbShoZWFkZXJDb250ZXh0dWFsTWVudUl0ZW0sIGl0ZW1DbGFzc05hbWVzLCBtZW51Q2xhc3NOYW1lcywgaW5kZXgsIGhhc0NoZWNrbWFya3MsIGhhc0ljb25zKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoc2VjdGlvblByb3BzLml0ZW1zICYmIHNlY3Rpb25Qcm9wcy5pdGVtcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICByZXR1cm4gKFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJsaVwiLCB7IHJvbGU6IFwicHJlc2VudGF0aW9uXCIsIGtleTogc2VjdGlvblByb3BzLmtleSB8fCBzZWN0aW9uSXRlbS5rZXkgfHwgXCJzZWN0aW9uLVwiICsgaW5kZXggfSxcbiAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIF9fYXNzaWduKHt9LCBncm91cFByb3BzKSxcbiAgICAgICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcInVsXCIsIHsgY2xhc3NOYW1lOiBtZW51Q2xhc3NOYW1lcy5saXN0LCByb2xlOiBcInByZXNlbnRhdGlvblwiIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWN0aW9uUHJvcHMudG9wRGl2aWRlciAmJiByZW5kZXJTZXBhcmF0b3IoaW5kZXgsIGl0ZW1DbGFzc05hbWVzLCB0cnVlLCB0cnVlKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGhlYWRlckl0ZW0gJiYgcmVuZGVyTGlzdEl0ZW0oaGVhZGVySXRlbSwgc2VjdGlvbkl0ZW0ua2V5IHx8IGluZGV4LCBpdGVtQ2xhc3NOYW1lcywgc2VjdGlvbkl0ZW0udGl0bGUpLFxuICAgICAgICAgICAgICAgICAgICAgICAgc2VjdGlvblByb3BzLml0ZW1zLm1hcChmdW5jdGlvbiAoY29udGV4dHVhbE1lbnVJdGVtLCBpdGVtc0luZGV4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlbmRlck1lbnVJdGVtKGNvbnRleHR1YWxNZW51SXRlbSwgaXRlbXNJbmRleCwgaXRlbXNJbmRleCwgc2VjdGlvblByb3BzLml0ZW1zLmxlbmd0aCwgaGFzQ2hlY2ttYXJrcywgaGFzSWNvbnMsIG1lbnVDbGFzc05hbWVzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgc2VjdGlvblByb3BzLmJvdHRvbURpdmlkZXIgJiYgcmVuZGVyU2VwYXJhdG9yKGluZGV4LCBpdGVtQ2xhc3NOYW1lcywgZmFsc2UsIHRydWUpKSkpKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgdmFyIHJlbmRlckxpc3RJdGVtID0gZnVuY3Rpb24gKGNvbnRlbnQsIGtleSwgY2xhc3NOYW1lcywgLy8gZXNsaW50LWRpc2FibGUtbGluZSBkZXByZWNhdGlvbi9kZXByZWNhdGlvblxuICAgIHRpdGxlKSB7XG4gICAgICAgIHJldHVybiAoUmVhY3QuY3JlYXRlRWxlbWVudChcImxpXCIsIHsgcm9sZTogXCJwcmVzZW50YXRpb25cIiwgdGl0bGU6IHRpdGxlLCBrZXk6IGtleSwgY2xhc3NOYW1lOiBjbGFzc05hbWVzLml0ZW0gfSwgY29udGVudCkpO1xuICAgIH07XG4gICAgdmFyIHJlbmRlclNlcGFyYXRvciA9IGZ1bmN0aW9uIChpbmRleCwgY2xhc3NOYW1lcywgLy8gZXNsaW50LWRpc2FibGUtbGluZSBkZXByZWNhdGlvbi9kZXByZWNhdGlvblxuICAgIHRvcCwgZnJvbVNlY3Rpb24pIHtcbiAgICAgICAgaWYgKGZyb21TZWN0aW9uIHx8IGluZGV4ID4gMCkge1xuICAgICAgICAgICAgcmV0dXJuIChSZWFjdC5jcmVhdGVFbGVtZW50KFwibGlcIiwgeyByb2xlOiBcInNlcGFyYXRvclwiLCBrZXk6ICdzZXBhcmF0b3ItJyArIGluZGV4ICsgKHRvcCA9PT0gdW5kZWZpbmVkID8gJycgOiB0b3AgPyAnLXRvcCcgOiAnLWJvdHRvbScpLCBjbGFzc05hbWU6IGNsYXNzTmFtZXMuZGl2aWRlciwgXCJhcmlhLWhpZGRlblwiOiBcInRydWVcIiB9KSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfTtcbiAgICB2YXIgcmVuZGVyTm9ybWFsSXRlbSA9IGZ1bmN0aW9uIChpdGVtLCBjbGFzc05hbWVzLCAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGRlcHJlY2F0aW9uL2RlcHJlY2F0aW9uXG4gICAgaW5kZXgsIGZvY3VzYWJsZUVsZW1lbnRJbmRleCwgdG90YWxJdGVtQ291bnQsIGhhc0NoZWNrbWFya3MsIGhhc0ljb25zKSB7XG4gICAgICAgIGlmIChpdGVtLm9uUmVuZGVyKSB7XG4gICAgICAgICAgICByZXR1cm4gaXRlbS5vblJlbmRlcihfX2Fzc2lnbih7ICdhcmlhLXBvc2luc2V0JzogZm9jdXNhYmxlRWxlbWVudEluZGV4ICsgMSwgJ2FyaWEtc2V0c2l6ZSc6IHRvdGFsSXRlbUNvdW50IH0sIGl0ZW0pLCBkaXNtaXNzKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgY29udGV4dHVhbE1lbnVJdGVtQXMgPSBwcm9wcy5jb250ZXh0dWFsTWVudUl0ZW1BcztcbiAgICAgICAgdmFyIGNvbW1vblByb3BzID0ge1xuICAgICAgICAgICAgaXRlbTogaXRlbSxcbiAgICAgICAgICAgIGNsYXNzTmFtZXM6IGNsYXNzTmFtZXMsXG4gICAgICAgICAgICBpbmRleDogaW5kZXgsXG4gICAgICAgICAgICBmb2N1c2FibGVFbGVtZW50SW5kZXg6IGZvY3VzYWJsZUVsZW1lbnRJbmRleCxcbiAgICAgICAgICAgIHRvdGFsSXRlbUNvdW50OiB0b3RhbEl0ZW1Db3VudCxcbiAgICAgICAgICAgIGhhc0NoZWNrbWFya3M6IGhhc0NoZWNrbWFya3MsXG4gICAgICAgICAgICBoYXNJY29uczogaGFzSWNvbnMsXG4gICAgICAgICAgICBjb250ZXh0dWFsTWVudUl0ZW1BczogY29udGV4dHVhbE1lbnVJdGVtQXMsXG4gICAgICAgICAgICBvbkl0ZW1Nb3VzZUVudGVyOiBvbkl0ZW1Nb3VzZUVudGVyQmFzZSxcbiAgICAgICAgICAgIG9uSXRlbU1vdXNlTGVhdmU6IG9uTW91c2VJdGVtTGVhdmUsXG4gICAgICAgICAgICBvbkl0ZW1Nb3VzZU1vdmU6IG9uSXRlbU1vdXNlTW92ZUJhc2UsXG4gICAgICAgICAgICBvbkl0ZW1Nb3VzZURvd246IG9uSXRlbU1vdXNlRG93bixcbiAgICAgICAgICAgIGV4ZWN1dGVJdGVtQ2xpY2s6IGV4ZWN1dGVJdGVtQ2xpY2ssXG4gICAgICAgICAgICBvbkl0ZW1LZXlEb3duOiBvbkl0ZW1LZXlEb3duLFxuICAgICAgICAgICAgZXhwYW5kZWRNZW51SXRlbUtleTogZXhwYW5kZWRNZW51SXRlbUtleSxcbiAgICAgICAgICAgIG9wZW5TdWJNZW51OiBvcGVuU3ViTWVudSxcbiAgICAgICAgICAgIGRpc21pc3NTdWJNZW51OiBvblN1Yk1lbnVEaXNtaXNzLFxuICAgICAgICAgICAgZGlzbWlzc01lbnU6IGRpc21pc3MsXG4gICAgICAgIH07XG4gICAgICAgIGlmIChpdGVtLmhyZWYpIHtcbiAgICAgICAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KENvbnRleHR1YWxNZW51QW5jaG9yLCBfX2Fzc2lnbih7fSwgY29tbW9uUHJvcHMsIHsgb25JdGVtQ2xpY2s6IG9uQW5jaG9yQ2xpY2sgfSkpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpdGVtLnNwbGl0ICYmIGhhc1N1Ym1lbnUoaXRlbSkpIHtcbiAgICAgICAgICAgIHJldHVybiAoUmVhY3QuY3JlYXRlRWxlbWVudChDb250ZXh0dWFsTWVudVNwbGl0QnV0dG9uLCBfX2Fzc2lnbih7fSwgY29tbW9uUHJvcHMsIHsgb25JdGVtQ2xpY2s6IG9uSXRlbUNsaWNrLCBvbkl0ZW1DbGlja0Jhc2U6IG9uSXRlbUNsaWNrQmFzZSwgb25UYXA6IGNhbmNlbFN1Yk1lbnVUaW1lciB9KSkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KENvbnRleHR1YWxNZW51QnV0dG9uLCBfX2Fzc2lnbih7fSwgY29tbW9uUHJvcHMsIHsgb25JdGVtQ2xpY2s6IG9uSXRlbUNsaWNrLCBvbkl0ZW1DbGlja0Jhc2U6IG9uSXRlbUNsaWNrQmFzZSB9KSk7XG4gICAgfTtcbiAgICB2YXIgcmVuZGVySGVhZGVyTWVudUl0ZW0gPSBmdW5jdGlvbiAoaXRlbSwgXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGRlcHJlY2F0aW9uL2RlcHJlY2F0aW9uXG4gICAgaXRlbUNsYXNzTmFtZXMsIFxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBkZXByZWNhdGlvbi9kZXByZWNhdGlvblxuICAgIG1lbnVDbGFzc05hbWVzLCBpbmRleCwgaGFzQ2hlY2ttYXJrcywgaGFzSWNvbnMpIHtcbiAgICAgICAgdmFyIF9hID0gcHJvcHMuY29udGV4dHVhbE1lbnVJdGVtQXMsIENoaWxkcmVuUmVuZGVyZXIgPSBfYSA9PT0gdm9pZCAwID8gQ29udGV4dHVhbE1lbnVJdGVtIDogX2E7XG4gICAgICAgIHZhciBpdGVtUHJvcHMgPSBpdGVtLml0ZW1Qcm9wcywgaWQgPSBpdGVtLmlkO1xuICAgICAgICB2YXIgZGl2SHRtbFByb3BlcnRpZXMgPSBpdGVtUHJvcHMgJiYgZ2V0TmF0aXZlUHJvcHMoaXRlbVByb3BzLCBkaXZQcm9wZXJ0aWVzKTtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGRlcHJlY2F0aW9uL2RlcHJlY2F0aW9uXG4gICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgX19hc3NpZ24oeyBpZDogaWQsIGNsYXNzTmFtZTogbWVudUNsYXNzTmFtZXMuaGVhZGVyIH0sIGRpdkh0bWxQcm9wZXJ0aWVzLCB7IHN0eWxlOiBpdGVtLnN0eWxlIH0pLFxuICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChDaGlsZHJlblJlbmRlcmVyLCBfX2Fzc2lnbih7IGl0ZW06IGl0ZW0sIGNsYXNzTmFtZXM6IGl0ZW1DbGFzc05hbWVzLCBpbmRleDogaW5kZXgsIG9uQ2hlY2ttYXJrQ2xpY2s6IGhhc0NoZWNrbWFya3MgPyBvbkl0ZW1DbGljayA6IHVuZGVmaW5lZCwgaGFzSWNvbnM6IGhhc0ljb25zIH0sIGl0ZW1Qcm9wcykpKSk7XG4gICAgfTtcbiAgICAvLyNlbmRyZWdpb25cbiAgICAvLyNyZWdpb24gTWFpbiByZW5kZXJcbiAgICB2YXIgaXNCZWFrVmlzaWJsZSA9IHByb3BzLmlzQmVha1Zpc2libGU7XG4gICAgdmFyIGl0ZW1zID0gcHJvcHMuaXRlbXMsIGxhYmVsRWxlbWVudElkID0gcHJvcHMubGFiZWxFbGVtZW50SWQsIGlkID0gcHJvcHMuaWQsIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSwgYmVha1dpZHRoID0gcHJvcHMuYmVha1dpZHRoLCBkaXJlY3Rpb25hbEhpbnQgPSBwcm9wcy5kaXJlY3Rpb25hbEhpbnQsIGRpcmVjdGlvbmFsSGludEZvclJUTCA9IHByb3BzLmRpcmVjdGlvbmFsSGludEZvclJUTCwgYWxpZ25UYXJnZXRFZGdlID0gcHJvcHMuYWxpZ25UYXJnZXRFZGdlLCBnYXBTcGFjZSA9IHByb3BzLmdhcFNwYWNlLCBjb3ZlclRhcmdldCA9IHByb3BzLmNvdmVyVGFyZ2V0LCBhcmlhTGFiZWwgPSBwcm9wcy5hcmlhTGFiZWwsIGRvTm90TGF5ZXIgPSBwcm9wcy5kb05vdExheWVyLCB0YXJnZXQgPSBwcm9wcy50YXJnZXQsIGJvdW5kcyA9IHByb3BzLmJvdW5kcywgdXNlVGFyZ2V0V2lkdGggPSBwcm9wcy51c2VUYXJnZXRXaWR0aCwgdXNlVGFyZ2V0QXNNaW5XaWR0aCA9IHByb3BzLnVzZVRhcmdldEFzTWluV2lkdGgsIGRpcmVjdGlvbmFsSGludEZpeGVkID0gcHJvcHMuZGlyZWN0aW9uYWxIaW50Rml4ZWQsIHNob3VsZEZvY3VzT25Nb3VudCA9IHByb3BzLnNob3VsZEZvY3VzT25Nb3VudCwgc2hvdWxkRm9jdXNPbkNvbnRhaW5lciA9IHByb3BzLnNob3VsZEZvY3VzT25Db250YWluZXIsIHRpdGxlID0gcHJvcHMudGl0bGUsIHN0eWxlcyA9IHByb3BzLnN0eWxlcywgdGhlbWUgPSBwcm9wcy50aGVtZSwgY2FsbG91dFByb3BzID0gcHJvcHMuY2FsbG91dFByb3BzLCBfayA9IHByb3BzLm9uUmVuZGVyU3ViTWVudSwgb25SZW5kZXJTdWJNZW51ID0gX2sgPT09IHZvaWQgMCA/IG9uRGVmYXVsdFJlbmRlclN1Yk1lbnUgOiBfaywgX2wgPSBwcm9wcy5vblJlbmRlck1lbnVMaXN0LCBvblJlbmRlck1lbnVMaXN0ID0gX2wgPT09IHZvaWQgMCA/IGZ1bmN0aW9uIChtZW51TGlzdFByb3BzLCBkZWZhdWx0UmVuZGVyKSB7IHJldHVybiBvbkRlZmF1bHRSZW5kZXJNZW51TGlzdChtZW51TGlzdFByb3BzLCBjbGFzc05hbWVzLCBkZWZhdWx0UmVuZGVyKTsgfSA6IF9sLCBmb2N1c1pvbmVQcm9wcyA9IHByb3BzLmZvY3VzWm9uZVByb3BzLCBcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZGVwcmVjYXRpb24vZGVwcmVjYXRpb25cbiAgICBnZXRNZW51Q2xhc3NOYW1lcyA9IHByb3BzLmdldE1lbnVDbGFzc05hbWVzO1xuICAgIHZhciBjbGFzc05hbWVzID0gZ2V0TWVudUNsYXNzTmFtZXNcbiAgICAgICAgPyBnZXRNZW51Q2xhc3NOYW1lcyh0aGVtZSwgY2xhc3NOYW1lKVxuICAgICAgICA6IGdldENsYXNzTmFtZXMoc3R5bGVzLCB7XG4gICAgICAgICAgICB0aGVtZTogdGhlbWUsXG4gICAgICAgICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZSxcbiAgICAgICAgfSk7XG4gICAgdmFyIGhhc0ljb25zID0gaXRlbXNIYXZlSWNvbnMoaXRlbXMpO1xuICAgIGZ1bmN0aW9uIGl0ZW1zSGF2ZUljb25zKGNvbnRleHR1YWxNZW51SXRlbXMpIHtcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBjb250ZXh0dWFsTWVudUl0ZW1zXzEgPSBjb250ZXh0dWFsTWVudUl0ZW1zOyBfaSA8IGNvbnRleHR1YWxNZW51SXRlbXNfMS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIHZhciBpdGVtID0gY29udGV4dHVhbE1lbnVJdGVtc18xW19pXTtcbiAgICAgICAgICAgIGlmIChpdGVtLmljb25Qcm9wcykge1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGl0ZW0uaXRlbVR5cGUgPT09IENvbnRleHR1YWxNZW51SXRlbVR5cGUuU2VjdGlvbiAmJlxuICAgICAgICAgICAgICAgIGl0ZW0uc2VjdGlvblByb3BzICYmXG4gICAgICAgICAgICAgICAgaXRlbXNIYXZlSWNvbnMoaXRlbS5zZWN0aW9uUHJvcHMuaXRlbXMpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICB2YXIgYWRqdXN0ZWRGb2N1c1pvbmVQcm9wcyA9IF9fYXNzaWduKF9fYXNzaWduKHsgZGlyZWN0aW9uOiBGb2N1c1pvbmVEaXJlY3Rpb24udmVydGljYWwsIGhhbmRsZVRhYktleTogRm9jdXNab25lVGFiYmFibGVFbGVtZW50cy5hbGwsIGlzQ2lyY3VsYXJOYXZpZ2F0aW9uOiB0cnVlIH0sIGZvY3VzWm9uZVByb3BzKSwgeyBjbGFzc05hbWU6IGNzcyhjbGFzc05hbWVzLnJvb3QsIChfYSA9IHByb3BzLmZvY3VzWm9uZVByb3BzKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuY2xhc3NOYW1lKSB9KTtcbiAgICB2YXIgaGFzQ2hlY2ttYXJrcyA9IGNhbkFueU1lbnVJdGVtc0NoZWNrKGl0ZW1zKTtcbiAgICB2YXIgc3VibWVudVByb3BzID0gZXhwYW5kZWRNZW51SXRlbUtleSAmJiBwcm9wcy5oaWRkZW4gIT09IHRydWUgPyBnZXRTdWJtZW51UHJvcHMoKSA6IG51bGw7XG4gICAgaXNCZWFrVmlzaWJsZSA9IGlzQmVha1Zpc2libGUgPT09IHVuZGVmaW5lZCA/IHJlc3BvbnNpdmVNb2RlIDw9IFJlc3BvbnNpdmVNb2RlLm1lZGl1bSA6IGlzQmVha1Zpc2libGU7XG4gICAgLyoqXG4gICAgICogV2hlbiB1c2VUYXJnZXRXaWR0aCBpcyB0cnVlLCBnZXQgdGhlIHdpZHRoIG9mIHRoZSB0YXJnZXQgZWxlbWVudCBhbmQgYXBwbHkgaXQgZm9yIHRoZSBjb250ZXh0IG1lbnUgY29udGFpbmVyXG4gICAgICovXG4gICAgdmFyIGNvbnRleHRNZW51U3R5bGU7XG4gICAgdmFyIHRhcmdldEFzSHRtbEVsZW1lbnQgPSB0YXJnZXRSZWYuY3VycmVudDtcbiAgICBpZiAoKHVzZVRhcmdldFdpZHRoIHx8IHVzZVRhcmdldEFzTWluV2lkdGgpICYmIHRhcmdldEFzSHRtbEVsZW1lbnQgJiYgdGFyZ2V0QXNIdG1sRWxlbWVudC5vZmZzZXRXaWR0aCkge1xuICAgICAgICB2YXIgdGFyZ2V0Qm91bmRpbmdSZWN0ID0gdGFyZ2V0QXNIdG1sRWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgICAgdmFyIHRhcmdldFdpZHRoID0gdGFyZ2V0Qm91bmRpbmdSZWN0LndpZHRoIC0gMjsgLyogQWNjb3VudHMgZm9yIDFweCBib3JkZXIgKi9cbiAgICAgICAgaWYgKHVzZVRhcmdldFdpZHRoKSB7XG4gICAgICAgICAgICBjb250ZXh0TWVudVN0eWxlID0ge1xuICAgICAgICAgICAgICAgIHdpZHRoOiB0YXJnZXRXaWR0aCxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodXNlVGFyZ2V0QXNNaW5XaWR0aCkge1xuICAgICAgICAgICAgY29udGV4dE1lbnVTdHlsZSA9IHtcbiAgICAgICAgICAgICAgICBtaW5XaWR0aDogdGFyZ2V0V2lkdGgsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgfVxuICAgIC8vIFRoZSBtZW51IHNob3VsZCBvbmx5IHJldHVybiBpZiBpdGVtcyB3ZXJlIHByb3ZpZGVkLCBpZiBubyBpdGVtcyB3ZXJlIHByb3ZpZGVkIHRoZW4gaXQgc2hvdWxkIG5vdCBhcHBlYXIuXG4gICAgaWYgKGl0ZW1zICYmIGl0ZW1zLmxlbmd0aCA+IDApIHtcbiAgICAgICAgdmFyIHRvdGFsSXRlbUNvdW50XzEgPSAwO1xuICAgICAgICBmb3IgKHZhciBfaSA9IDAsIGl0ZW1zXzIgPSBpdGVtczsgX2kgPCBpdGVtc18yLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgdmFyIGl0ZW0gPSBpdGVtc18yW19pXTtcbiAgICAgICAgICAgIGlmIChpdGVtLml0ZW1UeXBlICE9PSBDb250ZXh0dWFsTWVudUl0ZW1UeXBlLkRpdmlkZXIgJiYgaXRlbS5pdGVtVHlwZSAhPT0gQ29udGV4dHVhbE1lbnVJdGVtVHlwZS5IZWFkZXIpIHtcbiAgICAgICAgICAgICAgICB2YXIgaXRlbUNvdW50ID0gaXRlbS5jdXN0b21PblJlbmRlckxpc3RMZW5ndGggPyBpdGVtLmN1c3RvbU9uUmVuZGVyTGlzdExlbmd0aCA6IDE7XG4gICAgICAgICAgICAgICAgdG90YWxJdGVtQ291bnRfMSArPSBpdGVtQ291bnQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGNhbGxvdXRTdHlsZXNfMSA9IGNsYXNzTmFtZXMuc3ViQ29tcG9uZW50U3R5bGVzXG4gICAgICAgICAgICA/IGNsYXNzTmFtZXMuc3ViQ29tcG9uZW50U3R5bGVzLmNhbGxvdXRcbiAgICAgICAgICAgIDogdW5kZWZpbmVkO1xuICAgICAgICByZXR1cm4gKFJlYWN0LmNyZWF0ZUVsZW1lbnQoTWVudUNvbnRleHQuQ29uc3VtZXIsIG51bGwsIGZ1bmN0aW9uIChtZW51Q29udGV4dCkgeyByZXR1cm4gKFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ2FsbG91dCwgX19hc3NpZ24oeyBzdHlsZXM6IGNhbGxvdXRTdHlsZXNfMSwgb25SZXN0b3JlRm9jdXM6IHRyeUZvY3VzUHJldmlvdXNBY3RpdmVFbGVtZW50IH0sIGNhbGxvdXRQcm9wcywgeyB0YXJnZXQ6IHRhcmdldCB8fCBtZW51Q29udGV4dC50YXJnZXQsIGlzQmVha1Zpc2libGU6IGlzQmVha1Zpc2libGUsIGJlYWtXaWR0aDogYmVha1dpZHRoLCBkaXJlY3Rpb25hbEhpbnQ6IGRpcmVjdGlvbmFsSGludCwgZGlyZWN0aW9uYWxIaW50Rm9yUlRMOiBkaXJlY3Rpb25hbEhpbnRGb3JSVEwsIGdhcFNwYWNlOiBnYXBTcGFjZSwgY292ZXJUYXJnZXQ6IGNvdmVyVGFyZ2V0LCBkb05vdExheWVyOiBkb05vdExheWVyLCBjbGFzc05hbWU6IGNzcygnbXMtQ29udGV4dHVhbE1lbnUtQ2FsbG91dCcsIGNhbGxvdXRQcm9wcyAmJiBjYWxsb3V0UHJvcHMuY2xhc3NOYW1lKSwgc2V0SW5pdGlhbEZvY3VzOiBzaG91bGRGb2N1c09uTW91bnQsIG9uRGlzbWlzczogcHJvcHMub25EaXNtaXNzIHx8IG1lbnVDb250ZXh0Lm9uRGlzbWlzcywgb25TY3JvbGw6IG9uU2Nyb2xsLCBib3VuZHM6IGJvdW5kcywgZGlyZWN0aW9uYWxIaW50Rml4ZWQ6IGRpcmVjdGlvbmFsSGludEZpeGVkLCBhbGlnblRhcmdldEVkZ2U6IGFsaWduVGFyZ2V0RWRnZSwgaGlkZGVuOiBwcm9wcy5oaWRkZW4gfHwgbWVudUNvbnRleHQuaGlkZGVuLCByZWY6IGZvcndhcmRlZFJlZiB9KSxcbiAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgeyBzdHlsZTogY29udGV4dE1lbnVTdHlsZSwgcmVmOiBob3N0RWxlbWVudCwgaWQ6IGlkLCBjbGFzc05hbWU6IGNsYXNzTmFtZXMuY29udGFpbmVyLCB0YWJJbmRleDogc2hvdWxkRm9jdXNPbkNvbnRhaW5lciA/IDAgOiAtMSwgb25LZXlEb3duOiBvbk1lbnVLZXlEb3duLCBvbktleVVwOiBvbktleVVwLCBvbkZvY3VzQ2FwdHVyZTogb25NZW51Rm9jdXNDYXB0dXJlLCBcImFyaWEtbGFiZWxcIjogYXJpYUxhYmVsLCBcImFyaWEtbGFiZWxsZWRieVwiOiBsYWJlbEVsZW1lbnRJZCwgcm9sZTogJ21lbnUnIH0sXG4gICAgICAgICAgICAgICAgdGl0bGUgJiYgUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7IGNsYXNzTmFtZTogY2xhc3NOYW1lcy50aXRsZSB9LFxuICAgICAgICAgICAgICAgICAgICBcIiBcIixcbiAgICAgICAgICAgICAgICAgICAgdGl0bGUsXG4gICAgICAgICAgICAgICAgICAgIFwiIFwiKSxcbiAgICAgICAgICAgICAgICBpdGVtcyAmJiBpdGVtcy5sZW5ndGhcbiAgICAgICAgICAgICAgICAgICAgPyByZW5kZXJGb2N1c1pvbmUob25SZW5kZXJNZW51TGlzdCh7XG4gICAgICAgICAgICAgICAgICAgICAgICBhcmlhTGFiZWw6IGFyaWFMYWJlbCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW1zOiBpdGVtcyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsSXRlbUNvdW50OiB0b3RhbEl0ZW1Db3VudF8xLFxuICAgICAgICAgICAgICAgICAgICAgICAgaGFzQ2hlY2ttYXJrczogaGFzQ2hlY2ttYXJrcyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGhhc0ljb25zOiBoYXNJY29ucyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHRNZW51SXRlbVJlbmRlcmVyOiBmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBkZWZhdWx0TWVudUl0ZW1SZW5kZXJlcihpdGVtLCBjbGFzc05hbWVzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBsYWJlbEVsZW1lbnRJZDogbGFiZWxFbGVtZW50SWQsXG4gICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIChtZW51TGlzdFByb3BzLCBkZWZhdWx0UmVuZGVyKSB7IHJldHVybiBvbkRlZmF1bHRSZW5kZXJNZW51TGlzdChtZW51TGlzdFByb3BzLCBjbGFzc05hbWVzLCBkZWZhdWx0UmVuZGVyKTsgfSksIGFkanVzdGVkRm9jdXNab25lUHJvcHMpXG4gICAgICAgICAgICAgICAgICAgIDogbnVsbCxcbiAgICAgICAgICAgICAgICBzdWJtZW51UHJvcHMgJiYgb25SZW5kZXJTdWJNZW51KHN1Ym1lbnVQcm9wcywgb25EZWZhdWx0UmVuZGVyU3ViTWVudSkpKSk7IH0pKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICAvLyNlbmRyZWdpb25cbn0pLCBmdW5jdGlvbiAocHJldlByb3BzLCBuZXdQcm9wcykge1xuICAgIGlmICghbmV3UHJvcHMuc2hvdWxkVXBkYXRlV2hlbkhpZGRlbiAmJiBwcmV2UHJvcHMuaGlkZGVuICYmIG5ld1Byb3BzLmhpZGRlbikge1xuICAgICAgICAvLyBEbyBub3QgdXBkYXRlIHdoZW4gaGlkZGVuLlxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIHNoYWxsb3dDb21wYXJlKHByZXZQcm9wcywgbmV3UHJvcHMpO1xufSk7XG5Db250ZXh0dWFsTWVudUJhc2UuZGlzcGxheU5hbWUgPSAnQ29udGV4dHVhbE1lbnVCYXNlJztcbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIHRoZSBrZXkgZm9yIHRoZSBldmVudCBpcyBhbHQgKE1hYyBvcHRpb24pIG9yIG1ldGEgKE1hYyBjb21tYW5kKS5cbiAqL1xuZnVuY3Rpb24gaXNBbHRPck1ldGEoZXYpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZGVwcmVjYXRpb24vZGVwcmVjYXRpb25cbiAgICByZXR1cm4gZXYud2hpY2ggPT09IEtleUNvZGVzLmFsdCB8fCBldi5rZXkgPT09ICdNZXRhJztcbn1cbmZ1bmN0aW9uIG9uSXRlbU1vdXNlRG93bihpdGVtLCBldikge1xuICAgIHZhciBfYTtcbiAgICAoX2EgPSBpdGVtLm9uTW91c2VEb3duKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuY2FsbChpdGVtLCBpdGVtLCBldik7XG59XG5mdW5jdGlvbiBvbkRlZmF1bHRSZW5kZXJTdWJNZW51KHN1Yk1lbnVQcm9wcywgZGVmYXVsdFJlbmRlcikge1xuICAgIHRocm93IEVycm9yKCdDb250ZXh0dWFsTWVudUJhc2U6IG9uUmVuZGVyU3ViTWVudSBjYWxsYmFjayBpcyBudWxsIG9yIHVuZGVmaW5lZC4gJyArXG4gICAgICAgICdQbGVhc2UgZW5zdXJlIHRvIHNldCBgb25SZW5kZXJTdWJNZW51YCBwcm9wZXJ0eSBlaXRoZXIgbWFudWFsbHkgb3Igd2l0aCBgc3R5bGVkYCBoZWxwZXIuJyk7XG59XG4vKipcbiAqIFJldHVybnMgdGhlIGl0ZW0gdGhhdCBtYXRjaGVzIGEgZ2l2ZW4ga2V5IGlmIGFueS5cbiAqIEBwYXJhbSBrZXkgLSBUaGUga2V5IG9mIHRoZSBpdGVtIHRvIG1hdGNoXG4gKiBAcGFyYW0gaXRlbXMgLSBUaGUgaXRlbXMgdG8gbG9vayBmb3IgdGhlIGtleVxuICovXG5mdW5jdGlvbiBmaW5kSXRlbUJ5S2V5RnJvbUl0ZW1zKGtleSwgaXRlbXMpIHtcbiAgICBmb3IgKHZhciBfaSA9IDAsIGl0ZW1zXzMgPSBpdGVtczsgX2kgPCBpdGVtc18zLmxlbmd0aDsgX2krKykge1xuICAgICAgICB2YXIgaXRlbSA9IGl0ZW1zXzNbX2ldO1xuICAgICAgICBpZiAoaXRlbS5pdGVtVHlwZSA9PT0gQ29udGV4dHVhbE1lbnVJdGVtVHlwZS5TZWN0aW9uICYmIGl0ZW0uc2VjdGlvblByb3BzKSB7XG4gICAgICAgICAgICB2YXIgbWF0Y2ggPSBmaW5kSXRlbUJ5S2V5RnJvbUl0ZW1zKGtleSwgaXRlbS5zZWN0aW9uUHJvcHMuaXRlbXMpO1xuICAgICAgICAgICAgaWYgKG1hdGNoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG1hdGNoO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGl0ZW0ua2V5ICYmIGl0ZW0ua2V5ID09PSBrZXkpIHtcbiAgICAgICAgICAgIHJldHVybiBpdGVtO1xuICAgICAgICB9XG4gICAgfVxufVxuZnVuY3Rpb24gZ2V0T25DbGlja1dpdGhPdmVycmlkZVRhcmdldChvbkNsaWNrLCB0YXJnZXQpIHtcbiAgICByZXR1cm4gb25DbGlja1xuICAgICAgICA/IGZ1bmN0aW9uIChldiwgaXRlbSkge1xuICAgICAgICAgICAgb3ZlcnJpZGVUYXJnZXQoZXYsIHRhcmdldCk7XG4gICAgICAgICAgICByZXR1cm4gb25DbGljayhldiwgaXRlbSk7XG4gICAgICAgIH1cbiAgICAgICAgOiBvbkNsaWNrO1xufVxuZnVuY3Rpb24gb3ZlcnJpZGVUYXJnZXQoZXYsIHRhcmdldCkge1xuICAgIGlmIChldiAmJiB0YXJnZXQpIHtcbiAgICAgICAgZXYucGVyc2lzdCgpO1xuICAgICAgICBpZiAodGFyZ2V0IGluc3RhbmNlb2YgRXZlbnQpIHtcbiAgICAgICAgICAgIGV2LnRhcmdldCA9IHRhcmdldC50YXJnZXQ7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodGFyZ2V0IGluc3RhbmNlb2YgRWxlbWVudCkge1xuICAgICAgICAgICAgZXYudGFyZ2V0ID0gdGFyZ2V0O1xuICAgICAgICB9XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Q29udGV4dHVhbE1lbnUuYmFzZS5qcy5tYXAiLCJpbXBvcnQgeyBnZXRHbG9iYWxDbGFzc05hbWVzLCBGb250V2VpZ2h0cyB9IGZyb20gJy4uLy4uL1N0eWxpbmcnO1xuaW1wb3J0IHsgQ09OVEVYVFVBTF9NRU5VX0lURU1fSEVJR0hUIH0gZnJvbSAnLi9Db250ZXh0dWFsTWVudS5jbnN0eWxlcyc7XG52YXIgR2xvYmFsQ2xhc3NOYW1lcyA9IHtcbiAgICByb290OiAnbXMtQ29udGV4dHVhbE1lbnUnLFxuICAgIGNvbnRhaW5lcjogJ21zLUNvbnRleHR1YWxNZW51LWNvbnRhaW5lcicsXG4gICAgbGlzdDogJ21zLUNvbnRleHR1YWxNZW51LWxpc3QnLFxuICAgIGhlYWRlcjogJ21zLUNvbnRleHR1YWxNZW51LWhlYWRlcicsXG4gICAgdGl0bGU6ICdtcy1Db250ZXh0dWFsTWVudS10aXRsZScsXG4gICAgaXNvcGVuOiAnaXMtb3BlbicsXG59O1xuZXhwb3J0IHZhciBnZXRTdHlsZXMgPSBmdW5jdGlvbiAocHJvcHMpIHtcbiAgICB2YXIgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLCB0aGVtZSA9IHByb3BzLnRoZW1lO1xuICAgIHZhciBjbGFzc05hbWVzID0gZ2V0R2xvYmFsQ2xhc3NOYW1lcyhHbG9iYWxDbGFzc05hbWVzLCB0aGVtZSk7XG4gICAgdmFyIGZvbnRzID0gdGhlbWUuZm9udHMsIHNlbWFudGljQ29sb3JzID0gdGhlbWUuc2VtYW50aWNDb2xvcnMsIGVmZmVjdHMgPSB0aGVtZS5lZmZlY3RzO1xuICAgIHJldHVybiB7XG4gICAgICAgIHJvb3Q6IFtcbiAgICAgICAgICAgIHRoZW1lLmZvbnRzLm1lZGl1bSxcbiAgICAgICAgICAgIGNsYXNzTmFtZXMucm9vdCxcbiAgICAgICAgICAgIGNsYXNzTmFtZXMuaXNvcGVuLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogc2VtYW50aWNDb2xvcnMubWVudUJhY2tncm91bmQsXG4gICAgICAgICAgICAgICAgbWluV2lkdGg6ICcxODBweCcsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgY2xhc3NOYW1lLFxuICAgICAgICBdLFxuICAgICAgICBjb250YWluZXI6IFtcbiAgICAgICAgICAgIGNsYXNzTmFtZXMuY29udGFpbmVyLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHNlbGVjdG9yczoge1xuICAgICAgICAgICAgICAgICAgICAnOmZvY3VzJzogeyBvdXRsaW5lOiAwIH0sXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIGxpc3Q6IFtcbiAgICAgICAgICAgIGNsYXNzTmFtZXMubGlzdCxcbiAgICAgICAgICAgIGNsYXNzTmFtZXMuaXNvcGVuLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGxpc3RTdHlsZVR5cGU6ICdub25lJyxcbiAgICAgICAgICAgICAgICBtYXJnaW46ICcwJyxcbiAgICAgICAgICAgICAgICBwYWRkaW5nOiAnMCcsXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBoZWFkZXI6IFtcbiAgICAgICAgICAgIGNsYXNzTmFtZXMuaGVhZGVyLFxuICAgICAgICAgICAgZm9udHMuc21hbGwsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgZm9udFdlaWdodDogRm9udFdlaWdodHMuc2VtaWJvbGQsXG4gICAgICAgICAgICAgICAgY29sb3I6IHNlbWFudGljQ29sb3JzLm1lbnVIZWFkZXIsXG4gICAgICAgICAgICAgICAgYmFja2dyb3VuZDogJ25vbmUnLFxuICAgICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogJ3RyYW5zcGFyZW50JyxcbiAgICAgICAgICAgICAgICBib3JkZXI6ICdub25lJyxcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IENPTlRFWFRVQUxfTUVOVV9JVEVNX0hFSUdIVCxcbiAgICAgICAgICAgICAgICBsaW5lSGVpZ2h0OiBDT05URVhUVUFMX01FTlVfSVRFTV9IRUlHSFQsXG4gICAgICAgICAgICAgICAgY3Vyc29yOiAnZGVmYXVsdCcsXG4gICAgICAgICAgICAgICAgcGFkZGluZzogJzBweCA2cHgnLFxuICAgICAgICAgICAgICAgIHVzZXJTZWxlY3Q6ICdub25lJyxcbiAgICAgICAgICAgICAgICB0ZXh0QWxpZ246ICdsZWZ0JyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIHRpdGxlOiBbXG4gICAgICAgICAgICBjbGFzc05hbWVzLnRpdGxlLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGZvbnRTaXplOiBmb250cy5tZWRpdW1QbHVzLmZvbnRTaXplLFxuICAgICAgICAgICAgICAgIHBhZGRpbmdSaWdodDogJzE0cHgnLFxuICAgICAgICAgICAgICAgIHBhZGRpbmdMZWZ0OiAnMTRweCcsXG4gICAgICAgICAgICAgICAgcGFkZGluZ0JvdHRvbTogJzVweCcsXG4gICAgICAgICAgICAgICAgcGFkZGluZ1RvcDogJzVweCcsXG4gICAgICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiBzZW1hbnRpY0NvbG9ycy5tZW51SXRlbUJhY2tncm91bmRQcmVzc2VkLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgc3ViQ29tcG9uZW50U3R5bGVzOiB7XG4gICAgICAgICAgICBjYWxsb3V0OiB7XG4gICAgICAgICAgICAgICAgcm9vdDoge1xuICAgICAgICAgICAgICAgICAgICBib3hTaGFkb3c6IGVmZmVjdHMuZWxldmF0aW9uOCxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG1lbnVJdGVtOiB7fSxcbiAgICAgICAgfSxcbiAgICB9O1xufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUNvbnRleHR1YWxNZW51LnN0eWxlcy5qcy5tYXAiLCJpbXBvcnQgeyBfX2Fzc2lnbiB9IGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgc3R5bGVkLCBjb21wb3NlUmVuZGVyRnVuY3Rpb24gfSBmcm9tICcuLi8uLi9VdGlsaXRpZXMnO1xuaW1wb3J0IHsgQ29udGV4dHVhbE1lbnVCYXNlIH0gZnJvbSAnLi9Db250ZXh0dWFsTWVudS5iYXNlJztcbmltcG9ydCB7IGdldFN0eWxlcyB9IGZyb20gJy4vQ29udGV4dHVhbE1lbnUuc3R5bGVzJztcbmZ1bmN0aW9uIG9uUmVuZGVyU3ViTWVudShzdWJNZW51UHJvcHMpIHtcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChMb2NhbENvbnRleHR1YWxNZW51LCBfX2Fzc2lnbih7fSwgc3ViTWVudVByb3BzKSk7XG59XG4vLyBUaGlzIGlzIHRvIHByZXZlbnQgY3ljbGljIGltcG9ydCB3aXRoIENvbnRleHR1YWxNZW51LmJhc2UudHN4LlxudmFyIExvY2FsQ29udGV4dHVhbE1lbnUgPSBzdHlsZWQoQ29udGV4dHVhbE1lbnVCYXNlLCBnZXRTdHlsZXMsIGZ1bmN0aW9uIChwcm9wcykgeyByZXR1cm4gKHtcbiAgICBvblJlbmRlclN1Yk1lbnU6IHByb3BzLm9uUmVuZGVyU3ViTWVudVxuICAgICAgICA/IGNvbXBvc2VSZW5kZXJGdW5jdGlvbihwcm9wcy5vblJlbmRlclN1Yk1lbnUsIG9uUmVuZGVyU3ViTWVudSlcbiAgICAgICAgOiBvblJlbmRlclN1Yk1lbnUsXG59KTsgfSwgeyBzY29wZTogJ0NvbnRleHR1YWxNZW51JyB9KTtcbi8qKlxuICogQ29udGV4dHVhbE1lbnUgZGVzY3JpcHRpb25cbiAqL1xuZXhwb3J0IHZhciBDb250ZXh0dWFsTWVudSA9IExvY2FsQ29udGV4dHVhbE1lbnU7XG5Db250ZXh0dWFsTWVudS5kaXNwbGF5TmFtZSA9ICdDb250ZXh0dWFsTWVudSc7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1Db250ZXh0dWFsTWVudS5qcy5tYXAiLCJpbXBvcnQgeyBtZW1vaXplRnVuY3Rpb24gfSBmcm9tICcuLi8uLi9VdGlsaXRpZXMnO1xuaW1wb3J0IHsgZ2V0R2xvYmFsQ2xhc3NOYW1lcywgbWVyZ2VTdHlsZVNldHMgfSBmcm9tICcuLi8uLi9TdHlsaW5nJztcbmV4cG9ydCB2YXIgQnV0dG9uR2xvYmFsQ2xhc3NOYW1lcyA9IHtcbiAgICBtc0J1dHRvbjogJ21zLUJ1dHRvbicsXG4gICAgbXNCdXR0b25IYXNNZW51OiAnbXMtQnV0dG9uLS1oYXNNZW51JyxcbiAgICBtc0J1dHRvbkljb246ICdtcy1CdXR0b24taWNvbicsXG4gICAgbXNCdXR0b25NZW51SWNvbjogJ21zLUJ1dHRvbi1tZW51SWNvbicsXG4gICAgbXNCdXR0b25MYWJlbDogJ21zLUJ1dHRvbi1sYWJlbCcsXG4gICAgbXNCdXR0b25EZXNjcmlwdGlvbjogJ21zLUJ1dHRvbi1kZXNjcmlwdGlvbicsXG4gICAgbXNCdXR0b25TY3JlZW5SZWFkZXJUZXh0OiAnbXMtQnV0dG9uLXNjcmVlblJlYWRlclRleHQnLFxuICAgIG1zQnV0dG9uRmxleENvbnRhaW5lcjogJ21zLUJ1dHRvbi1mbGV4Q29udGFpbmVyJyxcbiAgICBtc0J1dHRvblRleHRDb250YWluZXI6ICdtcy1CdXR0b24tdGV4dENvbnRhaW5lcicsXG59O1xuZXhwb3J0IHZhciBnZXRCYXNlQnV0dG9uQ2xhc3NOYW1lcyA9IG1lbW9pemVGdW5jdGlvbihmdW5jdGlvbiAodGhlbWUsIHN0eWxlcywgY2xhc3NOYW1lLCB2YXJpYW50Q2xhc3NOYW1lLCBpY29uQ2xhc3NOYW1lLCBtZW51SWNvbkNsYXNzTmFtZSwgZGlzYWJsZWQsIGhhc01lbnUsIGNoZWNrZWQsIGV4cGFuZGVkLCBpc1NwbGl0KSB7XG4gICAgdmFyIF9hLCBfYjtcbiAgICB2YXIgY2xhc3NOYW1lcyA9IGdldEdsb2JhbENsYXNzTmFtZXMoQnV0dG9uR2xvYmFsQ2xhc3NOYW1lcywgdGhlbWUgfHwge30pO1xuICAgIHZhciBpc0V4cGFuZGVkID0gZXhwYW5kZWQgJiYgIWlzU3BsaXQ7XG4gICAgcmV0dXJuIG1lcmdlU3R5bGVTZXRzKHtcbiAgICAgICAgcm9vdDogW1xuICAgICAgICAgICAgY2xhc3NOYW1lcy5tc0J1dHRvbixcbiAgICAgICAgICAgIHN0eWxlcy5yb290LFxuICAgICAgICAgICAgdmFyaWFudENsYXNzTmFtZSxcbiAgICAgICAgICAgIGNoZWNrZWQgJiYgWydpcy1jaGVja2VkJywgc3R5bGVzLnJvb3RDaGVja2VkXSxcbiAgICAgICAgICAgIGlzRXhwYW5kZWQgJiYgW1xuICAgICAgICAgICAgICAgICdpcy1leHBhbmRlZCcsXG4gICAgICAgICAgICAgICAgc3R5bGVzLnJvb3RFeHBhbmRlZCxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHNlbGVjdG9yczogKF9hID0ge30sXG4gICAgICAgICAgICAgICAgICAgICAgICBfYVtcIjpob3ZlciAuXCIgKyBjbGFzc05hbWVzLm1zQnV0dG9uSWNvbl0gPSBzdHlsZXMuaWNvbkV4cGFuZGVkSG92ZXJlZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIG1lbnVJY29uIGZhbGxzIGJhY2sgdG8gcm9vdEV4cGFuZGVkSG92ZXJlZCB0byBzdXBwb3J0IG9yaWdpbmFsIGJlaGF2aW9yXG4gICAgICAgICAgICAgICAgICAgICAgICBfYVtcIjpob3ZlciAuXCIgKyBjbGFzc05hbWVzLm1zQnV0dG9uTWVudUljb25dID0gc3R5bGVzLm1lbnVJY29uRXhwYW5kZWRIb3ZlcmVkIHx8IHN0eWxlcy5yb290RXhwYW5kZWRIb3ZlcmVkLFxuICAgICAgICAgICAgICAgICAgICAgICAgX2FbJzpob3ZlciddID0gc3R5bGVzLnJvb3RFeHBhbmRlZEhvdmVyZWQsXG4gICAgICAgICAgICAgICAgICAgICAgICBfYSksXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBoYXNNZW51ICYmIFtCdXR0b25HbG9iYWxDbGFzc05hbWVzLm1zQnV0dG9uSGFzTWVudSwgc3R5bGVzLnJvb3RIYXNNZW51XSxcbiAgICAgICAgICAgIGRpc2FibGVkICYmIFsnaXMtZGlzYWJsZWQnLCBzdHlsZXMucm9vdERpc2FibGVkXSxcbiAgICAgICAgICAgICFkaXNhYmxlZCAmJlxuICAgICAgICAgICAgICAgICFpc0V4cGFuZGVkICYmXG4gICAgICAgICAgICAgICAgIWNoZWNrZWQgJiYge1xuICAgICAgICAgICAgICAgIHNlbGVjdG9yczogKF9iID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgJzpob3Zlcic6IHN0eWxlcy5yb290SG92ZXJlZFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBfYltcIjpob3ZlciAuXCIgKyBjbGFzc05hbWVzLm1zQnV0dG9uTGFiZWxdID0gc3R5bGVzLmxhYmVsSG92ZXJlZCxcbiAgICAgICAgICAgICAgICAgICAgX2JbXCI6aG92ZXIgLlwiICsgY2xhc3NOYW1lcy5tc0J1dHRvbkljb25dID0gc3R5bGVzLmljb25Ib3ZlcmVkLFxuICAgICAgICAgICAgICAgICAgICBfYltcIjpob3ZlciAuXCIgKyBjbGFzc05hbWVzLm1zQnV0dG9uRGVzY3JpcHRpb25dID0gc3R5bGVzLmRlc2NyaXB0aW9uSG92ZXJlZCxcbiAgICAgICAgICAgICAgICAgICAgX2JbXCI6aG92ZXIgLlwiICsgY2xhc3NOYW1lcy5tc0J1dHRvbk1lbnVJY29uXSA9IHN0eWxlcy5tZW51SWNvbkhvdmVyZWQsXG4gICAgICAgICAgICAgICAgICAgIF9iWyc6Zm9jdXMnXSA9IHN0eWxlcy5yb290Rm9jdXNlZCxcbiAgICAgICAgICAgICAgICAgICAgX2JbJzphY3RpdmUnXSA9IHN0eWxlcy5yb290UHJlc3NlZCxcbiAgICAgICAgICAgICAgICAgICAgX2JbXCI6YWN0aXZlIC5cIiArIGNsYXNzTmFtZXMubXNCdXR0b25JY29uXSA9IHN0eWxlcy5pY29uUHJlc3NlZCxcbiAgICAgICAgICAgICAgICAgICAgX2JbXCI6YWN0aXZlIC5cIiArIGNsYXNzTmFtZXMubXNCdXR0b25EZXNjcmlwdGlvbl0gPSBzdHlsZXMuZGVzY3JpcHRpb25QcmVzc2VkLFxuICAgICAgICAgICAgICAgICAgICBfYltcIjphY3RpdmUgLlwiICsgY2xhc3NOYW1lcy5tc0J1dHRvbk1lbnVJY29uXSA9IHN0eWxlcy5tZW51SWNvblByZXNzZWQsXG4gICAgICAgICAgICAgICAgICAgIF9iKSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBkaXNhYmxlZCAmJiBjaGVja2VkICYmIFtzdHlsZXMucm9vdENoZWNrZWREaXNhYmxlZF0sXG4gICAgICAgICAgICAhZGlzYWJsZWQgJiZcbiAgICAgICAgICAgICAgICBjaGVja2VkICYmIHtcbiAgICAgICAgICAgICAgICBzZWxlY3RvcnM6IHtcbiAgICAgICAgICAgICAgICAgICAgJzpob3Zlcic6IHN0eWxlcy5yb290Q2hlY2tlZEhvdmVyZWQsXG4gICAgICAgICAgICAgICAgICAgICc6YWN0aXZlJzogc3R5bGVzLnJvb3RDaGVja2VkUHJlc3NlZCxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNsYXNzTmFtZSxcbiAgICAgICAgXSxcbiAgICAgICAgZmxleENvbnRhaW5lcjogW2NsYXNzTmFtZXMubXNCdXR0b25GbGV4Q29udGFpbmVyLCBzdHlsZXMuZmxleENvbnRhaW5lcl0sXG4gICAgICAgIHRleHRDb250YWluZXI6IFtjbGFzc05hbWVzLm1zQnV0dG9uVGV4dENvbnRhaW5lciwgc3R5bGVzLnRleHRDb250YWluZXJdLFxuICAgICAgICBpY29uOiBbXG4gICAgICAgICAgICBjbGFzc05hbWVzLm1zQnV0dG9uSWNvbixcbiAgICAgICAgICAgIGljb25DbGFzc05hbWUsXG4gICAgICAgICAgICBzdHlsZXMuaWNvbixcbiAgICAgICAgICAgIGlzRXhwYW5kZWQgJiYgc3R5bGVzLmljb25FeHBhbmRlZCxcbiAgICAgICAgICAgIGNoZWNrZWQgJiYgc3R5bGVzLmljb25DaGVja2VkLFxuICAgICAgICAgICAgZGlzYWJsZWQgJiYgc3R5bGVzLmljb25EaXNhYmxlZCxcbiAgICAgICAgXSxcbiAgICAgICAgbGFiZWw6IFtjbGFzc05hbWVzLm1zQnV0dG9uTGFiZWwsIHN0eWxlcy5sYWJlbCwgY2hlY2tlZCAmJiBzdHlsZXMubGFiZWxDaGVja2VkLCBkaXNhYmxlZCAmJiBzdHlsZXMubGFiZWxEaXNhYmxlZF0sXG4gICAgICAgIG1lbnVJY29uOiBbXG4gICAgICAgICAgICBjbGFzc05hbWVzLm1zQnV0dG9uTWVudUljb24sXG4gICAgICAgICAgICBtZW51SWNvbkNsYXNzTmFtZSxcbiAgICAgICAgICAgIHN0eWxlcy5tZW51SWNvbixcbiAgICAgICAgICAgIGNoZWNrZWQgJiYgc3R5bGVzLm1lbnVJY29uQ2hlY2tlZCxcbiAgICAgICAgICAgIGRpc2FibGVkICYmICFpc1NwbGl0ICYmIHN0eWxlcy5tZW51SWNvbkRpc2FibGVkLFxuICAgICAgICAgICAgIWRpc2FibGVkICYmXG4gICAgICAgICAgICAgICAgIWlzRXhwYW5kZWQgJiZcbiAgICAgICAgICAgICAgICAhY2hlY2tlZCAmJiB7XG4gICAgICAgICAgICAgICAgc2VsZWN0b3JzOiB7XG4gICAgICAgICAgICAgICAgICAgICc6aG92ZXInOiBzdHlsZXMubWVudUljb25Ib3ZlcmVkLFxuICAgICAgICAgICAgICAgICAgICAnOmFjdGl2ZSc6IHN0eWxlcy5tZW51SWNvblByZXNzZWQsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBpc0V4cGFuZGVkICYmIFsnaXMtZXhwYW5kZWQnLCBzdHlsZXMubWVudUljb25FeHBhbmRlZF0sXG4gICAgICAgIF0sXG4gICAgICAgIGRlc2NyaXB0aW9uOiBbXG4gICAgICAgICAgICBjbGFzc05hbWVzLm1zQnV0dG9uRGVzY3JpcHRpb24sXG4gICAgICAgICAgICBzdHlsZXMuZGVzY3JpcHRpb24sXG4gICAgICAgICAgICBjaGVja2VkICYmIHN0eWxlcy5kZXNjcmlwdGlvbkNoZWNrZWQsXG4gICAgICAgICAgICBkaXNhYmxlZCAmJiBzdHlsZXMuZGVzY3JpcHRpb25EaXNhYmxlZCxcbiAgICAgICAgXSxcbiAgICAgICAgc2NyZWVuUmVhZGVyVGV4dDogW2NsYXNzTmFtZXMubXNCdXR0b25TY3JlZW5SZWFkZXJUZXh0LCBzdHlsZXMuc2NyZWVuUmVhZGVyVGV4dF0sXG4gICAgfSk7XG59KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUJhc2VCdXR0b24uY2xhc3NOYW1lcy5qcy5tYXAiLCJpbXBvcnQgeyBtZW1vaXplRnVuY3Rpb24gfSBmcm9tICcuLi8uLi8uLi9VdGlsaXRpZXMnO1xuaW1wb3J0IHsgbWVyZ2VTdHlsZXMgfSBmcm9tICcuLi8uLi8uLi9TdHlsaW5nJztcbmV4cG9ydCB2YXIgZ2V0U3BsaXRCdXR0b25DbGFzc05hbWVzID0gbWVtb2l6ZUZ1bmN0aW9uKGZ1bmN0aW9uIChzdHlsZXMsIGRpc2FibGVkLCBleHBhbmRlZCwgY2hlY2tlZCwgcHJpbWFyeURpc2FibGVkKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgcm9vdDogbWVyZ2VTdHlsZXMoc3R5bGVzLnNwbGl0QnV0dG9uTWVudUJ1dHRvbiwgZXhwYW5kZWQgJiYgW3N0eWxlcy5zcGxpdEJ1dHRvbk1lbnVCdXR0b25FeHBhbmRlZF0sIGRpc2FibGVkICYmIFtzdHlsZXMuc3BsaXRCdXR0b25NZW51QnV0dG9uRGlzYWJsZWRdLCBjaGVja2VkICYmICFkaXNhYmxlZCAmJiBbc3R5bGVzLnNwbGl0QnV0dG9uTWVudUJ1dHRvbkNoZWNrZWRdLCBwcmltYXJ5RGlzYWJsZWQgJiZcbiAgICAgICAgICAgICFkaXNhYmxlZCAmJiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgc2VsZWN0b3JzOiB7XG4gICAgICAgICAgICAgICAgICAgICc6Zm9jdXMnOiBzdHlsZXMuc3BsaXRCdXR0b25NZW51Rm9jdXNlZCxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSksXG4gICAgICAgIHNwbGl0QnV0dG9uQ29udGFpbmVyOiBtZXJnZVN0eWxlcyhzdHlsZXMuc3BsaXRCdXR0b25Db250YWluZXIsICFkaXNhYmxlZCAmJlxuICAgICAgICAgICAgY2hlY2tlZCAmJiBbXG4gICAgICAgICAgICBzdHlsZXMuc3BsaXRCdXR0b25Db250YWluZXJDaGVja2VkLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHNlbGVjdG9yczoge1xuICAgICAgICAgICAgICAgICAgICAnOmhvdmVyJzogc3R5bGVzLnNwbGl0QnV0dG9uQ29udGFpbmVyQ2hlY2tlZEhvdmVyZWQsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sICFkaXNhYmxlZCAmJlxuICAgICAgICAgICAgIWNoZWNrZWQgJiYgW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHNlbGVjdG9yczoge1xuICAgICAgICAgICAgICAgICAgICAnOmhvdmVyJzogc3R5bGVzLnNwbGl0QnV0dG9uQ29udGFpbmVySG92ZXJlZCxcbiAgICAgICAgICAgICAgICAgICAgJzpmb2N1cyc6IHN0eWxlcy5zcGxpdEJ1dHRvbkNvbnRhaW5lckZvY3VzZWQsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sIGRpc2FibGVkICYmIHN0eWxlcy5zcGxpdEJ1dHRvbkNvbnRhaW5lckRpc2FibGVkKSxcbiAgICAgICAgaWNvbjogbWVyZ2VTdHlsZXMoc3R5bGVzLnNwbGl0QnV0dG9uTWVudUljb24sIGRpc2FibGVkICYmIHN0eWxlcy5zcGxpdEJ1dHRvbk1lbnVJY29uRGlzYWJsZWQsICFkaXNhYmxlZCAmJiBwcmltYXJ5RGlzYWJsZWQgJiYgc3R5bGVzLnNwbGl0QnV0dG9uTWVudUljb24pLFxuICAgICAgICBmbGV4Q29udGFpbmVyOiBtZXJnZVN0eWxlcyhzdHlsZXMuc3BsaXRCdXR0b25GbGV4Q29udGFpbmVyKSxcbiAgICAgICAgZGl2aWRlcjogbWVyZ2VTdHlsZXMoc3R5bGVzLnNwbGl0QnV0dG9uRGl2aWRlciwgKHByaW1hcnlEaXNhYmxlZCB8fCBkaXNhYmxlZCkgJiYgc3R5bGVzLnNwbGl0QnV0dG9uRGl2aWRlckRpc2FibGVkKSxcbiAgICB9O1xufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1TcGxpdEJ1dHRvbi5jbGFzc05hbWVzLmpzLm1hcCIsImltcG9ydCB7IF9fYXNzaWduIH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBjcmVhdGVNZW1vaXplciB9IGZyb20gJy4uL21lbW9pemUnO1xuZnVuY3Rpb24gY3JlYXRlQ29tcG9zZWRDb21wb25lbnQob3V0ZXIpIHtcbiAgICB2YXIgT3V0ZXIgPSBvdXRlcjtcbiAgICB2YXIgb3V0ZXJNZW1vaXplciA9IGNyZWF0ZU1lbW9pemVyKGZ1bmN0aW9uIChpbm5lcikge1xuICAgICAgICBpZiAob3V0ZXIgPT09IGlubmVyKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0F0dGVtcHRlZCB0byBjb21wb3NlIGEgY29tcG9uZW50IHdpdGggaXRzZWxmLicpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBJbm5lciA9IGlubmVyO1xuICAgICAgICB2YXIgaW5uZXJNZW1vaXplciA9IGNyZWF0ZU1lbW9pemVyKGZ1bmN0aW9uIChkZWZhdWx0UmVuZGVyKSB7XG4gICAgICAgICAgICB2YXIgSW5uZXJXaXRoRGVmYXVsdFJlbmRlciA9IGZ1bmN0aW9uIChpbm5lclByb3BzKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoSW5uZXIsIF9fYXNzaWduKHt9LCBpbm5lclByb3BzLCB7IGRlZmF1bHRSZW5kZXI6IGRlZmF1bHRSZW5kZXIgfSkpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHJldHVybiBJbm5lcldpdGhEZWZhdWx0UmVuZGVyO1xuICAgICAgICB9KTtcbiAgICAgICAgdmFyIE91dGVyV2l0aERlZmF1bHRSZW5kZXIgPSBmdW5jdGlvbiAob3V0ZXJQcm9wcykge1xuICAgICAgICAgICAgdmFyIGRlZmF1bHRSZW5kZXIgPSBvdXRlclByb3BzLmRlZmF1bHRSZW5kZXI7XG4gICAgICAgICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChPdXRlciwgX19hc3NpZ24oe30sIG91dGVyUHJvcHMsIHsgZGVmYXVsdFJlbmRlcjogZGVmYXVsdFJlbmRlciA/IGlubmVyTWVtb2l6ZXIoZGVmYXVsdFJlbmRlcikgOiBJbm5lciB9KSk7XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBPdXRlcldpdGhEZWZhdWx0UmVuZGVyO1xuICAgIH0pO1xuICAgIHJldHVybiBvdXRlck1lbW9pemVyO1xufVxudmFyIGNvbXBvbmVudEFzTWVtb2l6ZXIgPSBjcmVhdGVNZW1vaXplcihjcmVhdGVDb21wb3NlZENvbXBvbmVudCk7XG4vKipcbiAqIENvbXBvc2VzIHR3byBjb21wb25lbnRzIHdoaWNoIGNvbmZvcm0gdG8gdGhlIGBJQ29tcG9uZW50QXNgIHNwZWNpZmljYXRpb247IHRoYXQgaXMsIHR3b1xuICogY29tcG9uZW50cyB3aGljaCBhY2NlcHQgYSBgZGVmYXVsdFJlbmRlcmAgcHJvcCwgd2hpY2ggaXMgYSAnZGVmYXVsdCcgaW1wbGVtZW50YXRpb24gb2ZcbiAqIGEgY29tcG9uZW50IHdoaWNoIGFjY2VwdHMgdGhlIHNhbWUgb3ZlcmFsbCBwcm9wcy5cbiAqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjb21wb3NlQ29tcG9uZW50QXMob3V0ZXIsIGlubmVyKSB7XG4gICAgcmV0dXJuIGNvbXBvbmVudEFzTWVtb2l6ZXIob3V0ZXIpKGlubmVyKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbXBvc2VDb21wb25lbnRBcy5qcy5tYXAiLCJpbXBvcnQgeyBfX2Fzc2lnbiwgX19leHRlbmRzLCBfX3Jlc3QgfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGFuY2hvclByb3BlcnRpZXMsIGFzc2lnbiwgYnV0dG9uUHJvcGVydGllcywgY3JlYXRlTWVyZ2VkUmVmLCBjc3MsIGdldElkLCBnZXROYXRpdmVQcm9wcywgaW5pdGlhbGl6ZUNvbXBvbmVudFJlZiwgbWVtb2l6ZUZ1bmN0aW9uLCBtZXJnZUFyaWFBdHRyaWJ1dGVWYWx1ZXMsIG51bGxSZW5kZXIsIHBvcnRhbENvbnRhaW5zRWxlbWVudCwgc2V0Rm9jdXNWaXNpYmlsaXR5LCB3YXJuQ29uZGl0aW9uYWxseVJlcXVpcmVkUHJvcHMsIHdhcm5EZXByZWNhdGlvbnMsIEFzeW5jLCBFdmVudEdyb3VwLCBGb2N1c1JlY3RzLCBLZXlDb2RlcywgfSBmcm9tICcuLi8uLi9VdGlsaXRpZXMnO1xuaW1wb3J0IHsgSWNvbiwgRm9udEljb24sIEltYWdlSWNvbiB9IGZyb20gJy4uLy4uL0ljb24nO1xuaW1wb3J0IHsgRGlyZWN0aW9uYWxIaW50IH0gZnJvbSAnLi4vLi4vY29tbW9uL0RpcmVjdGlvbmFsSGludCc7XG5pbXBvcnQgeyBDb250ZXh0dWFsTWVudSB9IGZyb20gJy4uLy4uL0NvbnRleHR1YWxNZW51JztcbmltcG9ydCB7IGdldEJhc2VCdXR0b25DbGFzc05hbWVzIH0gZnJvbSAnLi9CYXNlQnV0dG9uLmNsYXNzTmFtZXMnO1xuaW1wb3J0IHsgZ2V0U3BsaXRCdXR0b25DbGFzc05hbWVzIGFzIGdldEJhc2VTcGxpdEJ1dHRvbkNsYXNzTmFtZXMgfSBmcm9tICcuL1NwbGl0QnV0dG9uL1NwbGl0QnV0dG9uLmNsYXNzTmFtZXMnO1xuaW1wb3J0IHsgS2V5dGlwRGF0YSB9IGZyb20gJy4uLy4uL0tleXRpcERhdGEnO1xuaW1wb3J0IHsgY29tcG9zZUNvbXBvbmVudEFzIH0gZnJvbSAnLi4vLi4vVXRpbGl0aWVzJztcbnZhciBUb3VjaElkbGVEZWxheSA9IDUwMDsgLyogbXMgKi9cbnZhciBDT01QT05FTlRfTkFNRSA9ICdCYXNlQnV0dG9uJztcbi8qKlxuICoge0Bkb2NDYXRlZ29yeSBCdXR0b259XG4gKi9cbnZhciBCYXNlQnV0dG9uID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhCYXNlQnV0dG9uLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIEJhc2VCdXR0b24ocHJvcHMpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgcHJvcHMpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLl9idXR0b25FbGVtZW50ID0gUmVhY3QuY3JlYXRlUmVmKCk7XG4gICAgICAgIF90aGlzLl9zcGxpdEJ1dHRvbkNvbnRhaW5lciA9IFJlYWN0LmNyZWF0ZVJlZigpO1xuICAgICAgICBfdGhpcy5fbWVyZ2VkUmVmID0gY3JlYXRlTWVyZ2VkUmVmKCk7XG4gICAgICAgIF90aGlzLl9yZW5kZXJlZFZpc2libGVNZW51ID0gZmFsc2U7XG4gICAgICAgIF90aGlzLl9nZXRNZW1vaXplZE1lbnVCdXR0b25LZXl0aXBQcm9wcyA9IG1lbW9pemVGdW5jdGlvbihmdW5jdGlvbiAoa2V5dGlwUHJvcHMpIHtcbiAgICAgICAgICAgIHJldHVybiBfX2Fzc2lnbihfX2Fzc2lnbih7fSwga2V5dGlwUHJvcHMpLCB7IGhhc01lbnU6IHRydWUgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICBfdGhpcy5fb25SZW5kZXJJY29uID0gZnVuY3Rpb24gKGJ1dHRvblByb3BzLCBkZWZhdWx0UmVuZGVyKSB7XG4gICAgICAgICAgICB2YXIgaWNvblByb3BzID0gX3RoaXMucHJvcHMuaWNvblByb3BzO1xuICAgICAgICAgICAgaWYgKGljb25Qcm9wcyAmJiAoaWNvblByb3BzLmljb25OYW1lICE9PSB1bmRlZmluZWQgfHwgaWNvblByb3BzLmltYWdlUHJvcHMpKSB7XG4gICAgICAgICAgICAgICAgdmFyIGNsYXNzTmFtZSA9IGljb25Qcm9wcy5jbGFzc05hbWUsIGltYWdlUHJvcHMgPSBpY29uUHJvcHMuaW1hZ2VQcm9wcywgcmVzdCA9IF9fcmVzdChpY29uUHJvcHMsIFtcImNsYXNzTmFtZVwiLCBcImltYWdlUHJvcHNcIl0pO1xuICAgICAgICAgICAgICAgIC8vIElmIHRoZSBzdHlsZXMgcHJvcCBpcyBzcGVjaWZpZWQgYXMgcGFydCBvZiBpY29uUHJvcHMsIGZhbGwgYmFjayB0byByZWd1bGFyIEljb24gYXMgRm9udEljb24gYW5kIEltYWdlSWNvblxuICAgICAgICAgICAgICAgIC8vIGRvIG5vdCBoYXZlIHRoaXMgcHJvcC5cbiAgICAgICAgICAgICAgICBpZiAoaWNvblByb3BzLnN0eWxlcykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChJY29uLCBfX2Fzc2lnbih7IGNsYXNzTmFtZTogY3NzKF90aGlzLl9jbGFzc05hbWVzLmljb24sIGNsYXNzTmFtZSksIGltYWdlUHJvcHM6IGltYWdlUHJvcHMgfSwgcmVzdCkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoaWNvblByb3BzLmljb25OYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KEZvbnRJY29uLCBfX2Fzc2lnbih7IGNsYXNzTmFtZTogY3NzKF90aGlzLl9jbGFzc05hbWVzLmljb24sIGNsYXNzTmFtZSkgfSwgcmVzdCkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoaW1hZ2VQcm9wcykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChJbWFnZUljb24sIF9fYXNzaWduKHsgY2xhc3NOYW1lOiBjc3MoX3RoaXMuX2NsYXNzTmFtZXMuaWNvbiwgY2xhc3NOYW1lKSwgaW1hZ2VQcm9wczogaW1hZ2VQcm9wcyB9LCByZXN0KSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH07XG4gICAgICAgIF90aGlzLl9vblJlbmRlclRleHRDb250ZW50cyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBfYSA9IF90aGlzLnByb3BzLCB0ZXh0ID0gX2EudGV4dCwgY2hpbGRyZW4gPSBfYS5jaGlsZHJlbiwgXG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZGVwcmVjYXRpb24vZGVwcmVjYXRpb25cbiAgICAgICAgICAgIF9iID0gX2Euc2Vjb25kYXJ5VGV4dCwgXG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZGVwcmVjYXRpb24vZGVwcmVjYXRpb25cbiAgICAgICAgICAgIHNlY29uZGFyeVRleHQgPSBfYiA9PT0gdm9pZCAwID8gX3RoaXMucHJvcHMuZGVzY3JpcHRpb24gOiBfYiwgX2MgPSBfYS5vblJlbmRlclRleHQsIG9uUmVuZGVyVGV4dCA9IF9jID09PSB2b2lkIDAgPyBfdGhpcy5fb25SZW5kZXJUZXh0IDogX2MsIF9kID0gX2Eub25SZW5kZXJEZXNjcmlwdGlvbiwgb25SZW5kZXJEZXNjcmlwdGlvbiA9IF9kID09PSB2b2lkIDAgPyBfdGhpcy5fb25SZW5kZXJEZXNjcmlwdGlvbiA6IF9kO1xuICAgICAgICAgICAgaWYgKHRleHQgfHwgdHlwZW9mIGNoaWxkcmVuID09PSAnc3RyaW5nJyB8fCBzZWNvbmRhcnlUZXh0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIChSZWFjdC5jcmVhdGVFbGVtZW50KFwic3BhblwiLCB7IGNsYXNzTmFtZTogX3RoaXMuX2NsYXNzTmFtZXMudGV4dENvbnRhaW5lciB9LFxuICAgICAgICAgICAgICAgICAgICBvblJlbmRlclRleHQoX3RoaXMucHJvcHMsIF90aGlzLl9vblJlbmRlclRleHQpLFxuICAgICAgICAgICAgICAgICAgICBvblJlbmRlckRlc2NyaXB0aW9uKF90aGlzLnByb3BzLCBfdGhpcy5fb25SZW5kZXJEZXNjcmlwdGlvbikpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBbb25SZW5kZXJUZXh0KF90aGlzLnByb3BzLCBfdGhpcy5fb25SZW5kZXJUZXh0KSwgb25SZW5kZXJEZXNjcmlwdGlvbihfdGhpcy5wcm9wcywgX3RoaXMuX29uUmVuZGVyRGVzY3JpcHRpb24pXTtcbiAgICAgICAgfTtcbiAgICAgICAgX3RoaXMuX29uUmVuZGVyVGV4dCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciB0ZXh0ID0gX3RoaXMucHJvcHMudGV4dDtcbiAgICAgICAgICAgIHZhciBjaGlsZHJlbiA9IF90aGlzLnByb3BzLmNoaWxkcmVuO1xuICAgICAgICAgICAgLy8gRm9yIGJhY2t3YXJkcyBjb21wYXQsIHdlIHNob3VsZCBjb250aW51ZSB0byB0YWtlIGluIHRoZSB0ZXh0IGNvbnRlbnQgZnJvbSBjaGlsZHJlbi5cbiAgICAgICAgICAgIGlmICh0ZXh0ID09PSB1bmRlZmluZWQgJiYgdHlwZW9mIGNoaWxkcmVuID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgIHRleHQgPSBjaGlsZHJlbjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChfdGhpcy5faGFzVGV4dCgpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIChSZWFjdC5jcmVhdGVFbGVtZW50KFwic3BhblwiLCB7IGtleTogX3RoaXMuX2xhYmVsSWQsIGNsYXNzTmFtZTogX3RoaXMuX2NsYXNzTmFtZXMubGFiZWwsIGlkOiBfdGhpcy5fbGFiZWxJZCB9LCB0ZXh0KSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfTtcbiAgICAgICAgX3RoaXMuX29uUmVuZGVyQ2hpbGRyZW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgY2hpbGRyZW4gPSBfdGhpcy5wcm9wcy5jaGlsZHJlbjtcbiAgICAgICAgICAgIC8vIElmIGNoaWxkcmVuIGlzIGp1c3QgYSBzdHJpbmcsIGVpdGhlciBpdCBvciB0aGUgdGV4dCB3aWxsIGJlIHJlbmRlcmVkIHZpYSBvblJlbmRlckxhYmVsXG4gICAgICAgICAgICAvLyBJZiBjaGlsZHJlbiBpcyBhbm90aGVyIGNvbXBvbmVudCwgaXQgd2lsbCBiZSByZW5kZXJlZCBhZnRlciB0ZXh0XG4gICAgICAgICAgICBpZiAodHlwZW9mIGNoaWxkcmVuID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGNoaWxkcmVuO1xuICAgICAgICB9O1xuICAgICAgICBfdGhpcy5fb25SZW5kZXJEZXNjcmlwdGlvbiA9IGZ1bmN0aW9uIChwcm9wcykge1xuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGRlcHJlY2F0aW9uL2RlcHJlY2F0aW9uXG4gICAgICAgICAgICB2YXIgX2EgPSBwcm9wcy5zZWNvbmRhcnlUZXh0LCBzZWNvbmRhcnlUZXh0ID0gX2EgPT09IHZvaWQgMCA/IF90aGlzLnByb3BzLmRlc2NyaXB0aW9uIDogX2E7XG4gICAgICAgICAgICAvLyBtcy1CdXR0b24tZGVzY3JpcHRpb24gaXMgb25seSBzaG93biB3aGVuIHRoZSBidXR0b24gdHlwZSBpcyBjb21wb3VuZC5cbiAgICAgICAgICAgIC8vIEluIG90aGVyIGNhc2VzIGl0IHdpbGwgbm90IGJlIGRpc3BsYXllZC5cbiAgICAgICAgICAgIHJldHVybiBzZWNvbmRhcnlUZXh0ID8gKFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIHsga2V5OiBfdGhpcy5fZGVzY3JpcHRpb25JZCwgY2xhc3NOYW1lOiBfdGhpcy5fY2xhc3NOYW1lcy5kZXNjcmlwdGlvbiwgaWQ6IF90aGlzLl9kZXNjcmlwdGlvbklkIH0sIHNlY29uZGFyeVRleHQpKSA6IG51bGw7XG4gICAgICAgIH07XG4gICAgICAgIF90aGlzLl9vblJlbmRlckFyaWFEZXNjcmlwdGlvbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBhcmlhRGVzY3JpcHRpb24gPSBfdGhpcy5wcm9wcy5hcmlhRGVzY3JpcHRpb247XG4gICAgICAgICAgICAvLyBJZiBhcmlhRGVzY3JpcHRpb24gaXMgZ2l2ZW4sIGRlc2NyaXB0aW9uSWQgd2lsbCBiZSBhc3NpZ25lZCB0byBhcmlhRGVzY3JpcHRpb25TcGFuLFxuICAgICAgICAgICAgLy8gb3RoZXJ3aXNlIGl0IHdpbGwgYmUgYXNzaWduZWQgdG8gZGVzY3JpcHRpb25TcGFuLlxuICAgICAgICAgICAgcmV0dXJuIGFyaWFEZXNjcmlwdGlvbiA/IChSZWFjdC5jcmVhdGVFbGVtZW50KFwic3BhblwiLCB7IGNsYXNzTmFtZTogX3RoaXMuX2NsYXNzTmFtZXMuc2NyZWVuUmVhZGVyVGV4dCwgaWQ6IF90aGlzLl9hcmlhRGVzY3JpcHRpb25JZCB9LCBhcmlhRGVzY3JpcHRpb24pKSA6IG51bGw7XG4gICAgICAgIH07XG4gICAgICAgIF90aGlzLl9vblJlbmRlck1lbnVJY29uID0gZnVuY3Rpb24gKHByb3BzKSB7XG4gICAgICAgICAgICB2YXIgbWVudUljb25Qcm9wcyA9IF90aGlzLnByb3BzLm1lbnVJY29uUHJvcHM7XG4gICAgICAgICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChGb250SWNvbiwgX19hc3NpZ24oeyBpY29uTmFtZTogXCJDaGV2cm9uRG93blwiIH0sIG1lbnVJY29uUHJvcHMsIHsgY2xhc3NOYW1lOiBfdGhpcy5fY2xhc3NOYW1lcy5tZW51SWNvbiB9KSk7XG4gICAgICAgIH07XG4gICAgICAgIF90aGlzLl9vblJlbmRlck1lbnUgPSBmdW5jdGlvbiAobWVudVByb3BzKSB7XG4gICAgICAgICAgICB2YXIgTWVudVR5cGUgPSBfdGhpcy5wcm9wcy5tZW51QXMgPyBjb21wb3NlQ29tcG9uZW50QXMoX3RoaXMucHJvcHMubWVudUFzLCBDb250ZXh0dWFsTWVudSkgOiBDb250ZXh0dWFsTWVudTtcbiAgICAgICAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KE1lbnVUeXBlLCBfX2Fzc2lnbih7fSwgbWVudVByb3BzKSk7XG4gICAgICAgIH07XG4gICAgICAgIF90aGlzLl9vbkRpc21pc3NNZW51ID0gZnVuY3Rpb24gKGV2KSB7XG4gICAgICAgICAgICB2YXIgbWVudVByb3BzID0gX3RoaXMucHJvcHMubWVudVByb3BzO1xuICAgICAgICAgICAgaWYgKG1lbnVQcm9wcyAmJiBtZW51UHJvcHMub25EaXNtaXNzKSB7XG4gICAgICAgICAgICAgICAgbWVudVByb3BzLm9uRGlzbWlzcyhldik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIWV2IHx8ICFldi5kZWZhdWx0UHJldmVudGVkKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuX2Rpc21pc3NNZW51KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIF90aGlzLl9kaXNtaXNzTWVudSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIF90aGlzLl9tZW51U2hvdWxkRm9jdXNPbk1vdW50ID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgX3RoaXMuX21lbnVTaG91bGRGb2N1c09uQ29udGFpbmVyID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgX3RoaXMuc2V0U3RhdGUoeyBtZW51SGlkZGVuOiB0cnVlIH0pO1xuICAgICAgICB9O1xuICAgICAgICBfdGhpcy5fb3Blbk1lbnUgPSBmdW5jdGlvbiAoc2hvdWxkRm9jdXNPbkNvbnRhaW5lciwgc2hvdWxkRm9jdXNPbk1vdW50KSB7XG4gICAgICAgICAgICBpZiAoc2hvdWxkRm9jdXNPbk1vdW50ID09PSB2b2lkIDApIHsgc2hvdWxkRm9jdXNPbk1vdW50ID0gdHJ1ZTsgfVxuICAgICAgICAgICAgaWYgKF90aGlzLnByb3BzLm1lbnVQcm9wcykge1xuICAgICAgICAgICAgICAgIF90aGlzLl9tZW51U2hvdWxkRm9jdXNPbkNvbnRhaW5lciA9IHNob3VsZEZvY3VzT25Db250YWluZXI7XG4gICAgICAgICAgICAgICAgX3RoaXMuX21lbnVTaG91bGRGb2N1c09uTW91bnQgPSBzaG91bGRGb2N1c09uTW91bnQ7XG4gICAgICAgICAgICAgICAgX3RoaXMuX3JlbmRlcmVkVmlzaWJsZU1lbnUgPSB0cnVlO1xuICAgICAgICAgICAgICAgIF90aGlzLnNldFN0YXRlKHsgbWVudUhpZGRlbjogZmFsc2UgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIF90aGlzLl9vblRvZ2dsZU1lbnUgPSBmdW5jdGlvbiAoc2hvdWxkRm9jdXNPbkNvbnRhaW5lcikge1xuICAgICAgICAgICAgdmFyIHNob3VsZEZvY3VzT25Nb3VudCA9IHRydWU7XG4gICAgICAgICAgICBpZiAoX3RoaXMucHJvcHMubWVudVByb3BzICYmIF90aGlzLnByb3BzLm1lbnVQcm9wcy5zaG91bGRGb2N1c09uTW91bnQgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgc2hvdWxkRm9jdXNPbk1vdW50ID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBfdGhpcy5zdGF0ZS5tZW51SGlkZGVuID8gX3RoaXMuX29wZW5NZW51KHNob3VsZEZvY3VzT25Db250YWluZXIsIHNob3VsZEZvY3VzT25Nb3VudCkgOiBfdGhpcy5fZGlzbWlzc01lbnUoKTtcbiAgICAgICAgfTtcbiAgICAgICAgX3RoaXMuX29uU3BsaXRDb250YWluZXJGb2N1c0NhcHR1cmUgPSBmdW5jdGlvbiAoZXYpIHtcbiAgICAgICAgICAgIHZhciBjb250YWluZXIgPSBfdGhpcy5fc3BsaXRCdXR0b25Db250YWluZXIuY3VycmVudDtcbiAgICAgICAgICAgIC8vIElmIHRoZSB0YXJnZXQgaXMgY29taW5nIGZyb20gdGhlIHBvcnRhbCB3ZSBkbyBub3QgbmVlZCB0byBzZXQgZm9jdXMgb24gdGhlIGNvbnRhaW5lci5cbiAgICAgICAgICAgIGlmICghY29udGFpbmVyIHx8IChldi50YXJnZXQgJiYgcG9ydGFsQ29udGFpbnNFbGVtZW50KGV2LnRhcmdldCwgY29udGFpbmVyKSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBXZSBzaG91bGQgbmV2ZXIgYmUgYWJsZSB0byBmb2N1cyB0aGUgaW5kaXZpZHVhbCBidXR0b25zIGluIGEgc3BsaXQgYnV0dG9uLiBGb2N1c1xuICAgICAgICAgICAgLy8gc2hvdWxkIGFsd2F5cyByZW1haW4gb24gdGhlIGNvbnRhaW5lci5cbiAgICAgICAgICAgIGNvbnRhaW5lci5mb2N1cygpO1xuICAgICAgICB9O1xuICAgICAgICBfdGhpcy5fb25TcGxpdEJ1dHRvblByaW1hcnlDbGljayA9IGZ1bmN0aW9uIChldikge1xuICAgICAgICAgICAgaWYgKCFfdGhpcy5zdGF0ZS5tZW51SGlkZGVuKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuX2Rpc21pc3NNZW51KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIV90aGlzLl9wcm9jZXNzaW5nVG91Y2ggJiYgX3RoaXMucHJvcHMub25DbGljaykge1xuICAgICAgICAgICAgICAgIF90aGlzLnByb3BzLm9uQ2xpY2soZXYpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoX3RoaXMuX3Byb2Nlc3NpbmdUb3VjaCkge1xuICAgICAgICAgICAgICAgIF90aGlzLl9vbk1lbnVDbGljayhldik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIF90aGlzLl9vbktleURvd24gPSBmdW5jdGlvbiAoZXYpIHtcbiAgICAgICAgICAgIC8vIGV4cGxpY2l0eSBjYW5jZWxsaW5nIGV2ZW50IHNvIGNsaWNrIHdvbid0IGZpcmUgYWZ0ZXIgdGhpc1xuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGRlcHJlY2F0aW9uL2RlcHJlY2F0aW9uXG4gICAgICAgICAgICBpZiAoX3RoaXMucHJvcHMuZGlzYWJsZWQgJiYgKGV2LndoaWNoID09PSBLZXlDb2Rlcy5lbnRlciB8fCBldi53aGljaCA9PT0gS2V5Q29kZXMuc3BhY2UpKSB7XG4gICAgICAgICAgICAgICAgZXYucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICBldi5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKCFfdGhpcy5wcm9wcy5kaXNhYmxlZCkge1xuICAgICAgICAgICAgICAgIGlmIChfdGhpcy5wcm9wcy5tZW51UHJvcHMpIHtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuX29uTWVudUtleURvd24oZXYpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChfdGhpcy5wcm9wcy5vbktleURvd24gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy5wcm9wcy5vbktleURvd24oZXYpOyAvLyBub3QgY2FuY2VsbGluZyBldmVudCBiZWNhdXNlIGl0J3Mgbm90IGRpc2FibGVkXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBfdGhpcy5fb25LZXlVcCA9IGZ1bmN0aW9uIChldikge1xuICAgICAgICAgICAgaWYgKCFfdGhpcy5wcm9wcy5kaXNhYmxlZCAmJiBfdGhpcy5wcm9wcy5vbktleVVwICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5wcm9wcy5vbktleVVwKGV2KTsgLy8gbm90IGNhbmNlbGxpbmcgZXZlbnQgYmVjYXVzZSBpdCdzIG5vdCBkaXNhYmxlZFxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBfdGhpcy5fb25LZXlQcmVzcyA9IGZ1bmN0aW9uIChldikge1xuICAgICAgICAgICAgaWYgKCFfdGhpcy5wcm9wcy5kaXNhYmxlZCAmJiBfdGhpcy5wcm9wcy5vbktleVByZXNzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5wcm9wcy5vbktleVByZXNzKGV2KTsgLy8gbm90IGNhbmNlbGxpbmcgZXZlbnQgYmVjYXVzZSBpdCdzIG5vdCBkaXNhYmxlZFxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBfdGhpcy5fb25Nb3VzZVVwID0gZnVuY3Rpb24gKGV2KSB7XG4gICAgICAgICAgICBpZiAoIV90aGlzLnByb3BzLmRpc2FibGVkICYmIF90aGlzLnByb3BzLm9uTW91c2VVcCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMucHJvcHMub25Nb3VzZVVwKGV2KTsgLy8gbm90IGNhbmNlbGxpbmcgZXZlbnQgYmVjYXVzZSBpdCdzIG5vdCBkaXNhYmxlZFxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBfdGhpcy5fb25Nb3VzZURvd24gPSBmdW5jdGlvbiAoZXYpIHtcbiAgICAgICAgICAgIGlmICghX3RoaXMucHJvcHMuZGlzYWJsZWQgJiYgX3RoaXMucHJvcHMub25Nb3VzZURvd24gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIF90aGlzLnByb3BzLm9uTW91c2VEb3duKGV2KTsgLy8gbm90IGNhbmNlbGxpbmcgZXZlbnQgYmVjYXVzZSBpdCdzIG5vdCBkaXNhYmxlZFxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBfdGhpcy5fb25DbGljayA9IGZ1bmN0aW9uIChldikge1xuICAgICAgICAgICAgaWYgKCFfdGhpcy5wcm9wcy5kaXNhYmxlZCkge1xuICAgICAgICAgICAgICAgIGlmIChfdGhpcy5wcm9wcy5tZW51UHJvcHMpIHtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuX29uTWVudUNsaWNrKGV2KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoX3RoaXMucHJvcHMub25DbGljayAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLnByb3BzLm9uQ2xpY2soZXYpOyAvLyBub3QgY2FuY2VsbGluZyBldmVudCBiZWNhdXNlIGl0J3Mgbm90IGRpc2FibGVkXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBfdGhpcy5fb25TcGxpdEJ1dHRvbkNvbnRhaW5lcktleURvd24gPSBmdW5jdGlvbiAoZXYpIHtcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBkZXByZWNhdGlvbi9kZXByZWNhdGlvblxuICAgICAgICAgICAgaWYgKGV2LndoaWNoID09PSBLZXlDb2Rlcy5lbnRlciB8fCBldi53aGljaCA9PT0gS2V5Q29kZXMuc3BhY2UpIHtcbiAgICAgICAgICAgICAgICBpZiAoX3RoaXMuX2J1dHRvbkVsZW1lbnQuY3VycmVudCkge1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy5fYnV0dG9uRWxlbWVudC5jdXJyZW50LmNsaWNrKCk7XG4gICAgICAgICAgICAgICAgICAgIGV2LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgICAgIGV2LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIF90aGlzLl9vbk1lbnVLZXlEb3duKGV2KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgX3RoaXMuX29uTWVudUtleURvd24gPSBmdW5jdGlvbiAoZXYpIHtcbiAgICAgICAgICAgIGlmIChfdGhpcy5wcm9wcy5kaXNhYmxlZCkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChfdGhpcy5wcm9wcy5vbktleURvd24pIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5wcm9wcy5vbktleURvd24oZXYpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGRlcHJlY2F0aW9uL2RlcHJlY2F0aW9uXG4gICAgICAgICAgICB2YXIgaXNVcCA9IGV2LndoaWNoID09PSBLZXlDb2Rlcy51cDtcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBkZXByZWNhdGlvbi9kZXByZWNhdGlvblxuICAgICAgICAgICAgdmFyIGlzRG93biA9IGV2LndoaWNoID09PSBLZXlDb2Rlcy5kb3duO1xuICAgICAgICAgICAgaWYgKCFldi5kZWZhdWx0UHJldmVudGVkICYmIF90aGlzLl9pc1ZhbGlkTWVudU9wZW5LZXkoZXYpKSB7XG4gICAgICAgICAgICAgICAgdmFyIG9uTWVudUNsaWNrID0gX3RoaXMucHJvcHMub25NZW51Q2xpY2s7XG4gICAgICAgICAgICAgICAgaWYgKG9uTWVudUNsaWNrKSB7XG4gICAgICAgICAgICAgICAgICAgIG9uTWVudUNsaWNrKGV2LCBfdGhpcy5wcm9wcyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIF90aGlzLl9vblRvZ2dsZU1lbnUoZmFsc2UpO1xuICAgICAgICAgICAgICAgIGV2LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgZXYuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZGVwcmVjYXRpb24vZGVwcmVjYXRpb25cbiAgICAgICAgICAgIGlmIChldi53aGljaCA9PT0gS2V5Q29kZXMuZW50ZXIgfHwgZXYud2hpY2ggPT09IEtleUNvZGVzLnNwYWNlKSB7XG4gICAgICAgICAgICAgICAgLy8gV2UgbWFudWFsbHkgc2V0IHRoZSBmb2N1cyB2aXNpYmlsaXR5IHRvIHRydWUgaWYgb3BlbmluZyB2aWEgRW50ZXIgb3IgU3BhY2UgdG8gYWNjb3VudCBmb3IgdGhlIHNjZW5hcmlvIHdoZXJlXG4gICAgICAgICAgICAgICAgLy8gYSB1c2VyIGNsaWNrcyBvbiB0aGUgYnV0dG9uLCBjbG9zZXMgdGhlIG1lbnUgYW5kIHRoZW4gb3BlbnMgaXQgdmlhIGtleWJvYXJkLiBJbiB0aGlzIHNjZW5hcmlvIG91ciBkZWZhdWx0IGxvZ2ljXG4gICAgICAgICAgICAgICAgLy8gZm9yIHNldHRpbmcgZm9jdXMgdmlzaWJpbGl0eSBpcyBub3QgdHJpZ2dlcmVkIHNpbmNlIHRoZXJlIGlzIG5vIGtleWJvYXJkIG5hdmlnYXRpb24gcHJlc2VudCBiZWZvcmVoYW5kLlxuICAgICAgICAgICAgICAgIHNldEZvY3VzVmlzaWJpbGl0eSh0cnVlLCBldi50YXJnZXQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCEoZXYuYWx0S2V5IHx8IGV2Lm1ldGFLZXkpICYmIChpc1VwIHx8IGlzRG93bikpIHtcbiAgICAgICAgICAgICAgICAvLyBTdXBwb3NlIGEgbWVudSwgd2l0aCBzaG91bGRGb2N1c09uTW91bnQ6IGZhbHNlLCBpcyBvcGVuLCBhbmQgdXNlciB3YW50cyB0byBrZXlib2FyZCB0byB0aGUgbWVudSBpdGVtc1xuICAgICAgICAgICAgICAgIC8vIFdlIG5lZWQgdG8gcmUtcmVuZGVyIHRoZSBtZW51IHdpdGggc2hvdWxkRm9jdXNPbk1vdW50IGFzIHRydWUuXG4gICAgICAgICAgICAgICAgaWYgKCFfdGhpcy5zdGF0ZS5tZW51SGlkZGVuICYmIF90aGlzLnByb3BzLm1lbnVQcm9wcykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgY3VycmVudFNob3VsZEZvY3VzT25Nb3VudCA9IF90aGlzLl9tZW51U2hvdWxkRm9jdXNPbk1vdW50ICE9PSB1bmRlZmluZWRcbiAgICAgICAgICAgICAgICAgICAgICAgID8gX3RoaXMuX21lbnVTaG91bGRGb2N1c09uTW91bnRcbiAgICAgICAgICAgICAgICAgICAgICAgIDogX3RoaXMucHJvcHMubWVudVByb3BzLnNob3VsZEZvY3VzT25Nb3VudDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFjdXJyZW50U2hvdWxkRm9jdXNPbk1vdW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBldi5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZXYuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5fbWVudVNob3VsZEZvY3VzT25Nb3VudCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5mb3JjZVVwZGF0ZSgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBfdGhpcy5fb25Ub3VjaFN0YXJ0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKF90aGlzLl9pc1NwbGl0QnV0dG9uICYmXG4gICAgICAgICAgICAgICAgX3RoaXMuX3NwbGl0QnV0dG9uQ29udGFpbmVyLmN1cnJlbnQgJiZcbiAgICAgICAgICAgICAgICAhKCdvbnBvaW50ZXJkb3duJyBpbiBfdGhpcy5fc3BsaXRCdXR0b25Db250YWluZXIuY3VycmVudCkpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5faGFuZGxlVG91Y2hBbmRQb2ludGVyRXZlbnQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgX3RoaXMuX29uTWVudUNsaWNrID0gZnVuY3Rpb24gKGV2KSB7XG4gICAgICAgICAgICB2YXIgX2EgPSBfdGhpcy5wcm9wcywgb25NZW51Q2xpY2sgPSBfYS5vbk1lbnVDbGljaywgbWVudVByb3BzID0gX2EubWVudVByb3BzO1xuICAgICAgICAgICAgaWYgKG9uTWVudUNsaWNrKSB7XG4gICAgICAgICAgICAgICAgb25NZW51Q2xpY2soZXYsIF90aGlzLnByb3BzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIGZvY3VzIG9uIHRoZSBjb250YWluZXIgYnkgZGVmYXVsdCB3aGVuIHRoZSBtZW51IGlzIG9wZW5lZCB3aXRoIGEgY2xpY2sgZXZlbnRcbiAgICAgICAgICAgIC8vIHRoaXMgZGlmZmVyZW50aWF0ZXMgZnJvbSBhIGtleWJvYXJkIGludGVyYWN0aW9uIHRyaWdnZXJpbmcgdGhlIGNsaWNrIGV2ZW50XG4gICAgICAgICAgICB2YXIgc2hvdWxkRm9jdXNPbkNvbnRhaW5lciA9IHR5cGVvZiAobWVudVByb3BzID09PSBudWxsIHx8IG1lbnVQcm9wcyA9PT0gdm9pZCAwID8gdm9pZCAwIDogbWVudVByb3BzLnNob3VsZEZvY3VzT25Db250YWluZXIpID09PSAnYm9vbGVhbidcbiAgICAgICAgICAgICAgICA/IG1lbnVQcm9wcy5zaG91bGRGb2N1c09uQ29udGFpbmVyXG4gICAgICAgICAgICAgICAgOiBldi5uYXRpdmVFdmVudC5wb2ludGVyVHlwZSA9PT0gJ21vdXNlJztcbiAgICAgICAgICAgIGlmICghZXYuZGVmYXVsdFByZXZlbnRlZCkge1xuICAgICAgICAgICAgICAgIF90aGlzLl9vblRvZ2dsZU1lbnUoc2hvdWxkRm9jdXNPbkNvbnRhaW5lcik7XG4gICAgICAgICAgICAgICAgZXYucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICBldi5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgaW5pdGlhbGl6ZUNvbXBvbmVudFJlZihfdGhpcyk7XG4gICAgICAgIF90aGlzLl9hc3luYyA9IG5ldyBBc3luYyhfdGhpcyk7XG4gICAgICAgIF90aGlzLl9ldmVudHMgPSBuZXcgRXZlbnRHcm91cChfdGhpcyk7XG4gICAgICAgIHdhcm5Db25kaXRpb25hbGx5UmVxdWlyZWRQcm9wcyhDT01QT05FTlRfTkFNRSwgcHJvcHMsIFsnbWVudVByb3BzJywgJ29uQ2xpY2snXSwgJ3NwbGl0JywgX3RoaXMucHJvcHMuc3BsaXQpO1xuICAgICAgICB3YXJuRGVwcmVjYXRpb25zKENPTVBPTkVOVF9OQU1FLCBwcm9wcywge1xuICAgICAgICAgICAgcm9vdFByb3BzOiB1bmRlZmluZWQsXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogJ3NlY29uZGFyeVRleHQnLFxuICAgICAgICAgICAgdG9nZ2xlZDogJ2NoZWNrZWQnLFxuICAgICAgICB9KTtcbiAgICAgICAgX3RoaXMuX2xhYmVsSWQgPSBnZXRJZCgpO1xuICAgICAgICBfdGhpcy5fZGVzY3JpcHRpb25JZCA9IGdldElkKCk7XG4gICAgICAgIF90aGlzLl9hcmlhRGVzY3JpcHRpb25JZCA9IGdldElkKCk7XG4gICAgICAgIF90aGlzLnN0YXRlID0ge1xuICAgICAgICAgICAgbWVudUhpZGRlbjogdHJ1ZSxcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQmFzZUJ1dHRvbi5wcm90b3R5cGUsIFwiX2lzU3BsaXRCdXR0b25cIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiAhIXRoaXMucHJvcHMubWVudVByb3BzICYmICEhdGhpcy5wcm9wcy5vbkNsaWNrICYmIHRoaXMucHJvcHMuc3BsaXQgPT09IHRydWU7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBCYXNlQnV0dG9uLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgdmFyIF9iID0gdGhpcy5wcm9wcywgYXJpYURlc2NyaXB0aW9uID0gX2IuYXJpYURlc2NyaXB0aW9uLCBhcmlhTGFiZWwgPSBfYi5hcmlhTGFiZWwsIGFyaWFIaWRkZW4gPSBfYi5hcmlhSGlkZGVuLCBjbGFzc05hbWUgPSBfYi5jbGFzc05hbWUsIGRpc2FibGVkID0gX2IuZGlzYWJsZWQsIGFsbG93RGlzYWJsZWRGb2N1cyA9IF9iLmFsbG93RGlzYWJsZWRGb2N1cywgcHJpbWFyeURpc2FibGVkID0gX2IucHJpbWFyeURpc2FibGVkLCBcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGRlcHJlY2F0aW9uL2RlcHJlY2F0aW9uXG4gICAgICAgIF9jID0gX2Iuc2Vjb25kYXJ5VGV4dCwgXG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBkZXByZWNhdGlvbi9kZXByZWNhdGlvblxuICAgICAgICBzZWNvbmRhcnlUZXh0ID0gX2MgPT09IHZvaWQgMCA/IHRoaXMucHJvcHMuZGVzY3JpcHRpb24gOiBfYywgaHJlZiA9IF9iLmhyZWYsIGljb25Qcm9wcyA9IF9iLmljb25Qcm9wcywgbWVudUljb25Qcm9wcyA9IF9iLm1lbnVJY29uUHJvcHMsIHN0eWxlcyA9IF9iLnN0eWxlcywgY2hlY2tlZCA9IF9iLmNoZWNrZWQsIHZhcmlhbnRDbGFzc05hbWUgPSBfYi52YXJpYW50Q2xhc3NOYW1lLCB0aGVtZSA9IF9iLnRoZW1lLCB0b2dnbGUgPSBfYi50b2dnbGUsIGdldENsYXNzTmFtZXMgPSBfYi5nZXRDbGFzc05hbWVzLCByb2xlID0gX2Iucm9sZTtcbiAgICAgICAgdmFyIG1lbnVIaWRkZW4gPSB0aGlzLnN0YXRlLm1lbnVIaWRkZW47XG4gICAgICAgIC8vIEJ1dHRvbiBpcyBkaXNhYmxlZCBpZiB0aGUgd2hvbGUgYnV0dG9uIChpbiBjYXNlIG9mIHNwbGl0QnV0dG9uIGlzIGRpc2FibGVkKSBvciBpZiB0aGUgcHJpbWFyeSBhY3Rpb24gaXMgZGlzYWJsZWRcbiAgICAgICAgdmFyIGlzUHJpbWFyeUJ1dHRvbkRpc2FibGVkID0gZGlzYWJsZWQgfHwgcHJpbWFyeURpc2FibGVkO1xuICAgICAgICB0aGlzLl9jbGFzc05hbWVzID0gZ2V0Q2xhc3NOYW1lc1xuICAgICAgICAgICAgPyBnZXRDbGFzc05hbWVzKHRoZW1lLCBjbGFzc05hbWUsIHZhcmlhbnRDbGFzc05hbWUsIGljb25Qcm9wcyAmJiBpY29uUHJvcHMuY2xhc3NOYW1lLCBtZW51SWNvblByb3BzICYmIG1lbnVJY29uUHJvcHMuY2xhc3NOYW1lLCBpc1ByaW1hcnlCdXR0b25EaXNhYmxlZCwgY2hlY2tlZCwgIW1lbnVIaWRkZW4sICEhdGhpcy5wcm9wcy5tZW51UHJvcHMsIHRoaXMucHJvcHMuc3BsaXQsICEhYWxsb3dEaXNhYmxlZEZvY3VzKVxuICAgICAgICAgICAgOiBnZXRCYXNlQnV0dG9uQ2xhc3NOYW1lcyh0aGVtZSwgc3R5bGVzLCBjbGFzc05hbWUsIHZhcmlhbnRDbGFzc05hbWUsIGljb25Qcm9wcyAmJiBpY29uUHJvcHMuY2xhc3NOYW1lLCBtZW51SWNvblByb3BzICYmIG1lbnVJY29uUHJvcHMuY2xhc3NOYW1lLCBpc1ByaW1hcnlCdXR0b25EaXNhYmxlZCwgISF0aGlzLnByb3BzLm1lbnVQcm9wcywgY2hlY2tlZCwgIW1lbnVIaWRkZW4sIHRoaXMucHJvcHMuc3BsaXQpO1xuICAgICAgICB2YXIgX2QgPSB0aGlzLCBfYXJpYURlc2NyaXB0aW9uSWQgPSBfZC5fYXJpYURlc2NyaXB0aW9uSWQsIF9sYWJlbElkID0gX2QuX2xhYmVsSWQsIF9kZXNjcmlwdGlvbklkID0gX2QuX2Rlc2NyaXB0aW9uSWQ7XG4gICAgICAgIC8vIEFuY2hvciB0YWcgY2Fubm90IGJlIGRpc2FibGVkIGhlbmNlIGluIGRpc2FibGVkIHN0YXRlIHJlbmRlcmluZ1xuICAgICAgICAvLyBhbmNob3IgYnV0dG9uIGFzIG5vcm1hbCBidXR0b25cbiAgICAgICAgdmFyIHJlbmRlckFzQW5jaG9yID0gIWlzUHJpbWFyeUJ1dHRvbkRpc2FibGVkICYmICEhaHJlZjtcbiAgICAgICAgdmFyIHRhZyA9IHJlbmRlckFzQW5jaG9yID8gJ2EnIDogJ2J1dHRvbic7XG4gICAgICAgIHZhciBuYXRpdmVQcm9wcyA9IGdldE5hdGl2ZVByb3BzKFxuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZGVwcmVjYXRpb24vZGVwcmVjYXRpb25cbiAgICAgICAgYXNzaWduKHJlbmRlckFzQW5jaG9yID8ge30gOiB7IHR5cGU6ICdidXR0b24nIH0sIHRoaXMucHJvcHMucm9vdFByb3BzLCB0aGlzLnByb3BzKSwgcmVuZGVyQXNBbmNob3IgPyBhbmNob3JQcm9wZXJ0aWVzIDogYnV0dG9uUHJvcGVydGllcywgW1xuICAgICAgICAgICAgJ2Rpc2FibGVkJywgLy8gbGV0IGRpc2FibGVkIGJ1dHRvbnMgYmUgZm9jdXNlZCBhbmQgc3R5bGVkIGFzIGRpc2FibGVkLlxuICAgICAgICBdKTtcbiAgICAgICAgLy8gQ2hlY2sgZm9yIGFyaWFMYWJlbCBwYXNzZWQgaW4gdmlhIEJ1dHRvbiBwcm9wcywgYW5kIGZhbGwgYmFjayB0byBhcmlhLWxhYmVsIHBhc3NlZCBpbiB2aWEgbmF0aXZlIHByb3BzXG4gICAgICAgIHZhciByZXNvbHZlZEFyaWFMYWJlbCA9IGFyaWFMYWJlbCB8fCBuYXRpdmVQcm9wc1snYXJpYS1sYWJlbCddO1xuICAgICAgICAvLyBDaGVjayBmb3IgYXJpYURlc2NyaXB0aW9uLCBzZWNvbmRhcnlUZXh0IG9yIGFyaWEtZGVzY3JpYmVkYnkgaW4gdGhlIG5hdGl2ZSBwcm9wcyB0byBkZXRlcm1pbmUgc291cmNlIG9mXG4gICAgICAgIC8vIGFyaWEtZGVzY3JpYmVkYnkuIE90aGVyd2lzZSBkZWZhdWx0IHRvIHVuZGVmaW5lZCBzbyBwcm9wZXJ0eSBkb2VzIG5vdCBhcHBlYXIgaW4gb3V0cHV0LlxuICAgICAgICB2YXIgYXJpYURlc2NyaWJlZEJ5ID0gdW5kZWZpbmVkO1xuICAgICAgICBpZiAoYXJpYURlc2NyaXB0aW9uKSB7XG4gICAgICAgICAgICBhcmlhRGVzY3JpYmVkQnkgPSBfYXJpYURlc2NyaXB0aW9uSWQ7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoc2Vjb25kYXJ5VGV4dCAmJiB0aGlzLnByb3BzLm9uUmVuZGVyRGVzY3JpcHRpb24gIT09IG51bGxSZW5kZXIpIHtcbiAgICAgICAgICAgIC8vIGZvciBidXR0b25zIGxpa2UgQ29tcG91bmRCdXR0b24gd2l0aCBhIHZhbGlkIG9uUmVuZGVyRGVzY3JpcHRpb24sIHdlIG5lZWQgdG8gc2V0IGFuIGFyaWFEZXNjcmliZWRCeVxuICAgICAgICAgICAgLy8gZm9yIGJ1dHRvbnMgdGhhdCBkbyBub3QgcmVuZGVyIGFueXRoaW5nICh2aWEgbnVsbFJlbmRlciksIHdlIHNob3VsZCBub3Qgc2V0IGFuIGFyaWFEZXNjcmliZWRCeVxuICAgICAgICAgICAgYXJpYURlc2NyaWJlZEJ5ID0gX2Rlc2NyaXB0aW9uSWQ7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAobmF0aXZlUHJvcHNbJ2FyaWEtZGVzY3JpYmVkYnknXSkge1xuICAgICAgICAgICAgYXJpYURlc2NyaWJlZEJ5ID0gbmF0aXZlUHJvcHNbJ2FyaWEtZGVzY3JpYmVkYnknXTtcbiAgICAgICAgfVxuICAgICAgICAvLyBJZiBhbiBleHBsaWNpdCBhcmlhLWxhYmVsbGVkYnkgaXMgZ2l2ZW4sIHVzZSB0aGF0IGFuZCB3ZSdyZSBkb25lLlxuICAgICAgICAvLyBJZiBhbnkga2luZCBvZiBkZXNjcmlwdGlvbiBpcyBnaXZlbiAod2hpY2ggd2lsbCBlbmQgdXAgYXMgYW4gYXJpYS1kZXNjcmliZWRieSBhdHRyaWJ1dGUpXG4gICAgICAgIC8vIGFuZCBubyBhcmlhTGFiZWwgaXMgc3BlY2lmaWVkLCBzZXQgdGhlIGxhYmVsbGVkYnkgZWxlbWVudC5cbiAgICAgICAgLy8gT3RoZXJ3aXNlLCB0aGUgYnV0dG9uIGlzIGxhYmVsZWQgaW1wbGljaXRseSBieSB0aGUgZGVzY2VuZGVudCB0ZXh0IG9uIHRoZSBidXR0b24gKGlmIGl0IGV4aXN0cykuXG4gICAgICAgIHZhciBhcmlhTGFiZWxsZWRCeSA9IHVuZGVmaW5lZDtcbiAgICAgICAgaWYgKG5hdGl2ZVByb3BzWydhcmlhLWxhYmVsbGVkYnknXSkge1xuICAgICAgICAgICAgYXJpYUxhYmVsbGVkQnkgPSBuYXRpdmVQcm9wc1snYXJpYS1sYWJlbGxlZGJ5J107XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoYXJpYURlc2NyaWJlZEJ5ICYmICFyZXNvbHZlZEFyaWFMYWJlbCkge1xuICAgICAgICAgICAgYXJpYUxhYmVsbGVkQnkgPSB0aGlzLl9oYXNUZXh0KCkgPyBfbGFiZWxJZCA6IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICB2YXIgZGF0YUlzRm9jdXNhYmxlID0gdGhpcy5wcm9wc1snZGF0YS1pcy1mb2N1c2FibGUnXSA9PT0gZmFsc2UgfHwgKGRpc2FibGVkICYmICFhbGxvd0Rpc2FibGVkRm9jdXMpIHx8IHRoaXMuX2lzU3BsaXRCdXR0b25cbiAgICAgICAgICAgID8gZmFsc2VcbiAgICAgICAgICAgIDogdHJ1ZTtcbiAgICAgICAgdmFyIGlzQ2hlY2tib3hUeXBlUm9sZSA9IHJvbGUgPT09ICdtZW51aXRlbWNoZWNrYm94JyB8fCByb2xlID09PSAnY2hlY2tib3gnO1xuICAgICAgICAvLyBpZiBpc0NoZWNrYm94VHlwZVJvbGUsIGFsd2F5cyByZXR1cm4gYSBjaGVja2VkIHZhbHVlLlxuICAgICAgICAvLyBPdGhlcndpc2Ugb25seSByZXR1cm4gY2hlY2tlZCB2YWx1ZSBpZiB0b2dnbGUgaXMgc2V0IHRvIHRydWUuXG4gICAgICAgIC8vIFRoaXMgaXMgYmVjYXVzZSByb2xlPVwiY2hlY2tib3hcIiBhbHdheXMgbmVlZHMgdG8gaGF2ZSBhbiBhcmlhLWNoZWNrZWQgdmFsdWVcbiAgICAgICAgLy8gYnV0IG91ciBjaGVja2VkIHByb3Agb25seSBzZXRzIGFyaWEtcHJlc3NlZCBpZiB3ZSBtYXJrIHRoZSBidXR0b24gYXMgYSB0b2dnbGU9XCJ0cnVlXCJcbiAgICAgICAgdmFyIGNoZWNrZWRPclByZXNzZWRWYWx1ZSA9IGlzQ2hlY2tib3hUeXBlUm9sZSA/ICEhY2hlY2tlZCA6IHRvZ2dsZSA9PT0gdHJ1ZSA/ICEhY2hlY2tlZCA6IHVuZGVmaW5lZDtcbiAgICAgICAgdmFyIGJ1dHRvblByb3BzID0gYXNzaWduKG5hdGl2ZVByb3BzLCAoX2EgPSB7XG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lOiB0aGlzLl9jbGFzc05hbWVzLnJvb3QsXG4gICAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGRlcHJlY2F0aW9uL2RlcHJlY2F0aW9uXG4gICAgICAgICAgICAgICAgcmVmOiB0aGlzLl9tZXJnZWRSZWYodGhpcy5wcm9wcy5lbGVtZW50UmVmLCB0aGlzLl9idXR0b25FbGVtZW50KSxcbiAgICAgICAgICAgICAgICBkaXNhYmxlZDogaXNQcmltYXJ5QnV0dG9uRGlzYWJsZWQgJiYgIWFsbG93RGlzYWJsZWRGb2N1cyxcbiAgICAgICAgICAgICAgICBvbktleURvd246IHRoaXMuX29uS2V5RG93bixcbiAgICAgICAgICAgICAgICBvbktleVByZXNzOiB0aGlzLl9vbktleVByZXNzLFxuICAgICAgICAgICAgICAgIG9uS2V5VXA6IHRoaXMuX29uS2V5VXAsXG4gICAgICAgICAgICAgICAgb25Nb3VzZURvd246IHRoaXMuX29uTW91c2VEb3duLFxuICAgICAgICAgICAgICAgIG9uTW91c2VVcDogdGhpcy5fb25Nb3VzZVVwLFxuICAgICAgICAgICAgICAgIG9uQ2xpY2s6IHRoaXMuX29uQ2xpY2ssXG4gICAgICAgICAgICAgICAgJ2FyaWEtbGFiZWwnOiByZXNvbHZlZEFyaWFMYWJlbCxcbiAgICAgICAgICAgICAgICAnYXJpYS1sYWJlbGxlZGJ5JzogYXJpYUxhYmVsbGVkQnksXG4gICAgICAgICAgICAgICAgJ2FyaWEtZGVzY3JpYmVkYnknOiBhcmlhRGVzY3JpYmVkQnksXG4gICAgICAgICAgICAgICAgJ2FyaWEtZGlzYWJsZWQnOiBpc1ByaW1hcnlCdXR0b25EaXNhYmxlZCxcbiAgICAgICAgICAgICAgICAnZGF0YS1pcy1mb2N1c2FibGUnOiBkYXRhSXNGb2N1c2FibGVcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAvLyBhcmlhLXByZXNzZWQgYXR0cmlidXRlIHNob3VsZCBvbmx5IGJlIHByZXNlbnQgZm9yIHRvZ2dsZSBidXR0b25zXG4gICAgICAgICAgICAvLyBhcmlhLWNoZWNrZWQgYXR0cmlidXRlIHNob3VsZCBvbmx5IGJlIHByZXNlbnQgZm9yIHRvZ2dsZSBidXR0b25zIHdpdGggY2hlY2tib3ggdHlwZSByb2xlXG4gICAgICAgICAgICBfYVtpc0NoZWNrYm94VHlwZVJvbGUgPyAnYXJpYS1jaGVja2VkJyA6ICdhcmlhLXByZXNzZWQnXSA9IGNoZWNrZWRPclByZXNzZWRWYWx1ZSxcbiAgICAgICAgICAgIF9hKSk7XG4gICAgICAgIGlmIChhcmlhSGlkZGVuKSB7XG4gICAgICAgICAgICBidXR0b25Qcm9wc1snYXJpYS1oaWRkZW4nXSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX2lzU3BsaXRCdXR0b24pIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9vblJlbmRlclNwbGl0QnV0dG9uQ29udGVudCh0YWcsIGJ1dHRvblByb3BzKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0aGlzLnByb3BzLm1lbnVQcm9wcykge1xuICAgICAgICAgICAgdmFyIF9lID0gdGhpcy5wcm9wcy5tZW51UHJvcHMuaWQsIGlkID0gX2UgPT09IHZvaWQgMCA/IHRoaXMuX2xhYmVsSWQgKyBcIi1tZW51XCIgOiBfZTtcbiAgICAgICAgICAgIGFzc2lnbihidXR0b25Qcm9wcywge1xuICAgICAgICAgICAgICAgICdhcmlhLWV4cGFuZGVkJzogIW1lbnVIaWRkZW4sXG4gICAgICAgICAgICAgICAgJ2FyaWEtY29udHJvbHMnOiAhbWVudUhpZGRlbiA/IGlkIDogbnVsbCxcbiAgICAgICAgICAgICAgICAnYXJpYS1oYXNwb3B1cCc6IHRydWUsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5fb25SZW5kZXJDb250ZW50KHRhZywgYnV0dG9uUHJvcHMpO1xuICAgIH07XG4gICAgQmFzZUJ1dHRvbi5wcm90b3R5cGUuY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8vIEZvciBzcGxpdCBidXR0b25zLCB0b3VjaGluZyBhbnl3aGVyZSBpbiB0aGUgYnV0dG9uIHNob3VsZCBkcm9wIHRoZSBkcm9wZG93biwgd2hpY2ggc2hvdWxkIGNvbnRhaW4gdGhlXG4gICAgICAgIC8vIHByaW1hcnkgYWN0aW9uLiBUaGlzIGdpdmVzIG1vcmUgaGl0IHRhcmdldCBzcGFjZSBmb3IgdG91Y2ggZW52aXJvbm1lbnRzLiBXZSdyZSBzZXR0aW5nIHRoZSBvbnBvaW50ZXJkb3duIGhlcmUsXG4gICAgICAgIC8vIGJlY2F1c2UgUmVhY3QgZG9lcyBub3Qgc3VwcG9ydCBQb2ludGVyIGV2ZW50cyB5ZXQuXG4gICAgICAgIGlmICh0aGlzLl9pc1NwbGl0QnV0dG9uICYmIHRoaXMuX3NwbGl0QnV0dG9uQ29udGFpbmVyLmN1cnJlbnQpIHtcbiAgICAgICAgICAgIGlmICgnb25wb2ludGVyZG93bicgaW4gdGhpcy5fc3BsaXRCdXR0b25Db250YWluZXIuY3VycmVudCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2V2ZW50cy5vbih0aGlzLl9zcGxpdEJ1dHRvbkNvbnRhaW5lci5jdXJyZW50LCAncG9pbnRlcmRvd24nLCB0aGlzLl9vblBvaW50ZXJEb3duLCB0cnVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICgnb25wb2ludGVydXAnIGluIHRoaXMuX3NwbGl0QnV0dG9uQ29udGFpbmVyLmN1cnJlbnQgJiYgdGhpcy5wcm9wcy5vblBvaW50ZXJVcCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2V2ZW50cy5vbih0aGlzLl9zcGxpdEJ1dHRvbkNvbnRhaW5lci5jdXJyZW50LCAncG9pbnRlcnVwJywgdGhpcy5wcm9wcy5vblBvaW50ZXJVcCwgdHJ1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEJhc2VCdXR0b24ucHJvdG90eXBlLmNvbXBvbmVudERpZFVwZGF0ZSA9IGZ1bmN0aW9uIChwcmV2UHJvcHMsIHByZXZTdGF0ZSkge1xuICAgICAgICAvLyBJZiBCdXR0b24ncyBtZW51IHdhcyBjbG9zZWQsIHJ1biBvbkFmdGVyTWVudURpc21pc3MuXG4gICAgICAgIGlmICh0aGlzLnByb3BzLm9uQWZ0ZXJNZW51RGlzbWlzcyAmJiAhcHJldlN0YXRlLm1lbnVIaWRkZW4gJiYgdGhpcy5zdGF0ZS5tZW51SGlkZGVuKSB7XG4gICAgICAgICAgICB0aGlzLnByb3BzLm9uQWZ0ZXJNZW51RGlzbWlzcygpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBCYXNlQnV0dG9uLnByb3RvdHlwZS5jb21wb25lbnRXaWxsVW5tb3VudCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5fYXN5bmMuZGlzcG9zZSgpO1xuICAgICAgICB0aGlzLl9ldmVudHMuZGlzcG9zZSgpO1xuICAgIH07XG4gICAgQmFzZUJ1dHRvbi5wcm90b3R5cGUuZm9jdXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLl9pc1NwbGl0QnV0dG9uICYmIHRoaXMuX3NwbGl0QnV0dG9uQ29udGFpbmVyLmN1cnJlbnQpIHtcbiAgICAgICAgICAgIHNldEZvY3VzVmlzaWJpbGl0eSh0cnVlKTtcbiAgICAgICAgICAgIHRoaXMuX3NwbGl0QnV0dG9uQ29udGFpbmVyLmN1cnJlbnQuZm9jdXMoKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0aGlzLl9idXR0b25FbGVtZW50LmN1cnJlbnQpIHtcbiAgICAgICAgICAgIHNldEZvY3VzVmlzaWJpbGl0eSh0cnVlKTtcbiAgICAgICAgICAgIHRoaXMuX2J1dHRvbkVsZW1lbnQuY3VycmVudC5mb2N1cygpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBCYXNlQnV0dG9uLnByb3RvdHlwZS5kaXNtaXNzTWVudSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5fZGlzbWlzc01lbnUoKTtcbiAgICB9O1xuICAgIEJhc2VCdXR0b24ucHJvdG90eXBlLm9wZW5NZW51ID0gZnVuY3Rpb24gKHNob3VsZEZvY3VzT25Db250YWluZXIsIHNob3VsZEZvY3VzT25Nb3VudCkge1xuICAgICAgICB0aGlzLl9vcGVuTWVudShzaG91bGRGb2N1c09uQ29udGFpbmVyLCBzaG91bGRGb2N1c09uTW91bnQpO1xuICAgIH07XG4gICAgQmFzZUJ1dHRvbi5wcm90b3R5cGUuX29uUmVuZGVyQ29udGVudCA9IGZ1bmN0aW9uICh0YWcsIGJ1dHRvblByb3BzKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHZhciBwcm9wcyA9IHRoaXMucHJvcHM7XG4gICAgICAgIHZhciBUYWcgPSB0YWc7XG4gICAgICAgIHZhciBtZW51SWNvblByb3BzID0gcHJvcHMubWVudUljb25Qcm9wcywgbWVudVByb3BzID0gcHJvcHMubWVudVByb3BzLCBfYSA9IHByb3BzLm9uUmVuZGVySWNvbiwgb25SZW5kZXJJY29uID0gX2EgPT09IHZvaWQgMCA/IHRoaXMuX29uUmVuZGVySWNvbiA6IF9hLCBfYiA9IHByb3BzLm9uUmVuZGVyQXJpYURlc2NyaXB0aW9uLCBvblJlbmRlckFyaWFEZXNjcmlwdGlvbiA9IF9iID09PSB2b2lkIDAgPyB0aGlzLl9vblJlbmRlckFyaWFEZXNjcmlwdGlvbiA6IF9iLCBfYyA9IHByb3BzLm9uUmVuZGVyQ2hpbGRyZW4sIG9uUmVuZGVyQ2hpbGRyZW4gPSBfYyA9PT0gdm9pZCAwID8gdGhpcy5fb25SZW5kZXJDaGlsZHJlbiA6IF9jLCBcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGRlcHJlY2F0aW9uL2RlcHJlY2F0aW9uXG4gICAgICAgIF9kID0gcHJvcHMub25SZW5kZXJNZW51LCBcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGRlcHJlY2F0aW9uL2RlcHJlY2F0aW9uXG4gICAgICAgIG9uUmVuZGVyTWVudSA9IF9kID09PSB2b2lkIDAgPyB0aGlzLl9vblJlbmRlck1lbnUgOiBfZCwgX2UgPSBwcm9wcy5vblJlbmRlck1lbnVJY29uLCBvblJlbmRlck1lbnVJY29uID0gX2UgPT09IHZvaWQgMCA/IHRoaXMuX29uUmVuZGVyTWVudUljb24gOiBfZSwgZGlzYWJsZWQgPSBwcm9wcy5kaXNhYmxlZDtcbiAgICAgICAgdmFyIGtleXRpcFByb3BzID0gcHJvcHMua2V5dGlwUHJvcHM7XG4gICAgICAgIGlmIChrZXl0aXBQcm9wcyAmJiBtZW51UHJvcHMpIHtcbiAgICAgICAgICAgIGtleXRpcFByb3BzID0gdGhpcy5fZ2V0TWVtb2l6ZWRNZW51QnV0dG9uS2V5dGlwUHJvcHMoa2V5dGlwUHJvcHMpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBCdXR0b24gPSBmdW5jdGlvbiAoa2V5dGlwQXR0cmlidXRlcykgeyByZXR1cm4gKFJlYWN0LmNyZWF0ZUVsZW1lbnQoVGFnLCBfX2Fzc2lnbih7fSwgYnV0dG9uUHJvcHMsIGtleXRpcEF0dHJpYnV0ZXMpLFxuICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcInNwYW5cIiwgeyBjbGFzc05hbWU6IF90aGlzLl9jbGFzc05hbWVzLmZsZXhDb250YWluZXIsIFwiZGF0YS1hdXRvbWF0aW9uaWRcIjogXCJzcGxpdGJ1dHRvbnByaW1hcnlcIiB9LFxuICAgICAgICAgICAgICAgIG9uUmVuZGVySWNvbihwcm9wcywgX3RoaXMuX29uUmVuZGVySWNvbiksXG4gICAgICAgICAgICAgICAgX3RoaXMuX29uUmVuZGVyVGV4dENvbnRlbnRzKCksXG4gICAgICAgICAgICAgICAgb25SZW5kZXJBcmlhRGVzY3JpcHRpb24ocHJvcHMsIF90aGlzLl9vblJlbmRlckFyaWFEZXNjcmlwdGlvbiksXG4gICAgICAgICAgICAgICAgb25SZW5kZXJDaGlsZHJlbihwcm9wcywgX3RoaXMuX29uUmVuZGVyQ2hpbGRyZW4pLFxuICAgICAgICAgICAgICAgICFfdGhpcy5faXNTcGxpdEJ1dHRvbiAmJlxuICAgICAgICAgICAgICAgICAgICAobWVudVByb3BzIHx8IG1lbnVJY29uUHJvcHMgfHwgX3RoaXMucHJvcHMub25SZW5kZXJNZW51SWNvbikgJiZcbiAgICAgICAgICAgICAgICAgICAgb25SZW5kZXJNZW51SWNvbihfdGhpcy5wcm9wcywgX3RoaXMuX29uUmVuZGVyTWVudUljb24pLFxuICAgICAgICAgICAgICAgIG1lbnVQcm9wcyAmJlxuICAgICAgICAgICAgICAgICAgICAhbWVudVByb3BzLmRvTm90TGF5ZXIgJiZcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuX3Nob3VsZFJlbmRlck1lbnUoKSAmJlxuICAgICAgICAgICAgICAgICAgICBvblJlbmRlck1lbnUoX3RoaXMuX2dldE1lbnVQcm9wcyhtZW51UHJvcHMpLCBfdGhpcy5fb25SZW5kZXJNZW51KSkpKTsgfTtcbiAgICAgICAgdmFyIENvbnRlbnQgPSBrZXl0aXBQcm9wcyA/IChcbiAgICAgICAgLy8gSWYgd2UncmUgbWFraW5nIGEgc3BsaXQgYnV0dG9uLCB3ZSB3b24ndCBwdXQgdGhlIGtleXRpcCBoZXJlXG4gICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoS2V5dGlwRGF0YSwgeyBrZXl0aXBQcm9wczogIXRoaXMuX2lzU3BsaXRCdXR0b24gPyBrZXl0aXBQcm9wcyA6IHVuZGVmaW5lZCwgYXJpYURlc2NyaWJlZEJ5OiBidXR0b25Qcm9wc1snYXJpYS1kZXNjcmliZWRieSddLCBkaXNhYmxlZDogZGlzYWJsZWQgfSwgZnVuY3Rpb24gKGtleXRpcEF0dHJpYnV0ZXMpIHsgcmV0dXJuIEJ1dHRvbihrZXl0aXBBdHRyaWJ1dGVzKTsgfSkpIDogKEJ1dHRvbigpKTtcbiAgICAgICAgaWYgKG1lbnVQcm9wcyAmJiBtZW51UHJvcHMuZG9Ob3RMYXllcikge1xuICAgICAgICAgICAgcmV0dXJuIChSZWFjdC5jcmVhdGVFbGVtZW50KFJlYWN0LkZyYWdtZW50LCBudWxsLFxuICAgICAgICAgICAgICAgIENvbnRlbnQsXG4gICAgICAgICAgICAgICAgdGhpcy5fc2hvdWxkUmVuZGVyTWVudSgpICYmIG9uUmVuZGVyTWVudSh0aGlzLl9nZXRNZW51UHJvcHMobWVudVByb3BzKSwgdGhpcy5fb25SZW5kZXJNZW51KSkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAoUmVhY3QuY3JlYXRlRWxlbWVudChSZWFjdC5GcmFnbWVudCwgbnVsbCxcbiAgICAgICAgICAgIENvbnRlbnQsXG4gICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KEZvY3VzUmVjdHMsIG51bGwpKSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBNZXRob2QgdG8gaGVscCBkZXRlcm1pbmUgaWYgdGhlIG1lbnUncyBjb21wb25lbnQgdHJlZSBzaG91bGRcbiAgICAgKiBiZSByZW5kZXJlZC4gSXQgdGFrZXMgaW50byBhY2NvdW50IHdoZXRoZXIgdGhlIG1lbnUgaXMgZXhwYW5kZWQsXG4gICAgICogd2hldGhlciBpdCBpcyBhIHBlcnNpc3RlZCBtZW51IGFuZCB3aGV0aGVyIGl0IGhhcyBiZWVuIHNob3duIHRvIHRoZSB1c2VyLlxuICAgICAqL1xuICAgIEJhc2VCdXR0b24ucHJvdG90eXBlLl9zaG91bGRSZW5kZXJNZW51ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgbWVudUhpZGRlbiA9IHRoaXMuc3RhdGUubWVudUhpZGRlbjtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGRlcHJlY2F0aW9uL2RlcHJlY2F0aW9uXG4gICAgICAgIHZhciBfYSA9IHRoaXMucHJvcHMsIHBlcnNpc3RNZW51ID0gX2EucGVyc2lzdE1lbnUsIHJlbmRlclBlcnNpc3RlZE1lbnVIaWRkZW5Pbk1vdW50ID0gX2EucmVuZGVyUGVyc2lzdGVkTWVudUhpZGRlbk9uTW91bnQ7XG4gICAgICAgIGlmICghbWVudUhpZGRlbikge1xuICAgICAgICAgICAgLy8gQWx3YXlzIHNob3VsZCByZW5kZXIgYSBtZW51IHdoZW4gaXQgaXMgZXhwYW5kZWRcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHBlcnNpc3RNZW51ICYmICh0aGlzLl9yZW5kZXJlZFZpc2libGVNZW51IHx8IHJlbmRlclBlcnNpc3RlZE1lbnVIaWRkZW5Pbk1vdW50KSkge1xuICAgICAgICAgICAgLy8gX3JlbmRlcmVkVmlzaWJsZU1lbnUgZW5zdXJlcyB0aGF0IHRoZSBmaXJzdCByZW5kZXJpbmcgb2ZcbiAgICAgICAgICAgIC8vIHRoZSBtZW51IGhhcHBlbnMgb24tc2NyZWVuLCBhcyBlZGdlJ3Mgc2Nyb2xsYmFyIGNhbGN1bGF0aW9ucyBhcmUgb2ZmIGlmIGRvbmUgd2hpbGUgaGlkZGVuLlxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH07XG4gICAgQmFzZUJ1dHRvbi5wcm90b3R5cGUuX2hhc1RleHQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8vIF9vblJlbmRlclRleHRDb250ZW50cyBhbmQgX29uUmVuZGVyVGV4dCBkbyBub3QgcGVyZm9ybSB0aGUgc2FtZSBjaGVja3MuIEJlbG93IGlzIHBhcml0eSB3aXRoIHdoYXQgX29uUmVuZGVyVGV4dFxuICAgICAgICAvLyB1c2VkIHRvIGhhdmUgYmVmb3JlIHRoZSByZWZhY3RvciB0aGF0IGludHJvZHVjZWQgdGhpcyBmdW5jdGlvbi4gX29uUmVuZGVyVGV4dENvbnRlbnRzIGRvZXMgbm90IHJlcXVpcmUgcHJvcHMuXG4gICAgICAgIC8vIHRleHQgdG8gYmUgdW5kZWZpbmVkIGluIG9yZGVyIGZvciBwcm9wcy5jaGlsZHJlbiB0byBiZSB1c2VkIGFzIGEgZmFsbGJhY2suXG4gICAgICAgIC8vIFB1cmVseSBhIGNvZGUgbWFpbnRhaW5hYmlsaXR5L3JldXNlIGlzc3VlLCBidXQgbG9nZ2VkIGFzIElzc3VlICM0OTc5LlxuICAgICAgICByZXR1cm4gdGhpcy5wcm9wcy50ZXh0ICE9PSBudWxsICYmICh0aGlzLnByb3BzLnRleHQgIT09IHVuZGVmaW5lZCB8fCB0eXBlb2YgdGhpcy5wcm9wcy5jaGlsZHJlbiA9PT0gJ3N0cmluZycpO1xuICAgIH07XG4gICAgQmFzZUJ1dHRvbi5wcm90b3R5cGUuX2dldE1lbnVQcm9wcyA9IGZ1bmN0aW9uIChtZW51UHJvcHMpIHtcbiAgICAgICAgdmFyIHBlcnNpc3RNZW51ID0gdGhpcy5wcm9wcy5wZXJzaXN0TWVudTtcbiAgICAgICAgdmFyIG1lbnVIaWRkZW4gPSB0aGlzLnN0YXRlLm1lbnVIaWRkZW47XG4gICAgICAgIC8vIHRoZSBhY2Nlc3NpYmxlIG1lbnUgbGFiZWwgKGFjY2Vzc2libGUgbmFtZSkgaGFzIGEgcmVsYXRpb25zaGlwIHRvIHRoZSBidXR0b24uXG4gICAgICAgIC8vIElmIHRoZSBtZW51IHByb3BzIGRvIG5vdCBzcGVjaWZ5IGFuIGV4cGxpY2l0IHZhbHVlIGZvciBhcmlhLWxhYmVsIG9yIGFyaWEtbGFiZWxsZWRCeSxcbiAgICAgICAgLy8gQU5EIHRoZSBidXR0b24gaGFzIHRleHQsIHdlJ2xsIHNldCB0aGUgbWVudSBhcmlhLWxhYmVsbGVkQnkgdG8gdGhlIHRleHQgZWxlbWVudCBpZC5cbiAgICAgICAgaWYgKCFtZW51UHJvcHMuYXJpYUxhYmVsICYmICFtZW51UHJvcHMubGFiZWxFbGVtZW50SWQgJiYgdGhpcy5faGFzVGV4dCgpKSB7XG4gICAgICAgICAgICBtZW51UHJvcHMgPSBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgbWVudVByb3BzKSwgeyBsYWJlbEVsZW1lbnRJZDogdGhpcy5fbGFiZWxJZCB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gX19hc3NpZ24oX19hc3NpZ24oeyBpZDogdGhpcy5fbGFiZWxJZCArICctbWVudScsIGRpcmVjdGlvbmFsSGludDogRGlyZWN0aW9uYWxIaW50LmJvdHRvbUxlZnRFZGdlIH0sIG1lbnVQcm9wcyksIHsgc2hvdWxkRm9jdXNPbkNvbnRhaW5lcjogdGhpcy5fbWVudVNob3VsZEZvY3VzT25Db250YWluZXIsIHNob3VsZEZvY3VzT25Nb3VudDogdGhpcy5fbWVudVNob3VsZEZvY3VzT25Nb3VudCwgaGlkZGVuOiBwZXJzaXN0TWVudSA/IG1lbnVIaWRkZW4gOiB1bmRlZmluZWQsIGNsYXNzTmFtZTogY3NzKCdtcy1CYXNlQnV0dG9uLW1lbnVob3N0JywgbWVudVByb3BzLmNsYXNzTmFtZSksIHRhcmdldDogdGhpcy5faXNTcGxpdEJ1dHRvbiA/IHRoaXMuX3NwbGl0QnV0dG9uQ29udGFpbmVyLmN1cnJlbnQgOiB0aGlzLl9idXR0b25FbGVtZW50LmN1cnJlbnQsIG9uRGlzbWlzczogdGhpcy5fb25EaXNtaXNzTWVudSB9KTtcbiAgICB9O1xuICAgIEJhc2VCdXR0b24ucHJvdG90eXBlLl9vblJlbmRlclNwbGl0QnV0dG9uQ29udGVudCA9IGZ1bmN0aW9uICh0YWcsIGJ1dHRvblByb3BzKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHZhciBfYSA9IHRoaXMucHJvcHMsIF9iID0gX2Euc3R5bGVzLCBzdHlsZXMgPSBfYiA9PT0gdm9pZCAwID8ge30gOiBfYiwgZGlzYWJsZWQgPSBfYS5kaXNhYmxlZCwgYWxsb3dEaXNhYmxlZEZvY3VzID0gX2EuYWxsb3dEaXNhYmxlZEZvY3VzLCBjaGVja2VkID0gX2EuY2hlY2tlZCwgZ2V0U3BsaXRCdXR0b25DbGFzc05hbWVzID0gX2EuZ2V0U3BsaXRCdXR0b25DbGFzc05hbWVzLCBwcmltYXJ5RGlzYWJsZWQgPSBfYS5wcmltYXJ5RGlzYWJsZWQsIG1lbnVQcm9wcyA9IF9hLm1lbnVQcm9wcywgdG9nZ2xlID0gX2EudG9nZ2xlLCByb2xlID0gX2Eucm9sZSwgcHJpbWFyeUFjdGlvbkJ1dHRvblByb3BzID0gX2EucHJpbWFyeUFjdGlvbkJ1dHRvblByb3BzO1xuICAgICAgICB2YXIga2V5dGlwUHJvcHMgPSB0aGlzLnByb3BzLmtleXRpcFByb3BzO1xuICAgICAgICB2YXIgbWVudUhpZGRlbiA9IHRoaXMuc3RhdGUubWVudUhpZGRlbjtcbiAgICAgICAgdmFyIGNsYXNzTmFtZXMgPSBnZXRTcGxpdEJ1dHRvbkNsYXNzTmFtZXNcbiAgICAgICAgICAgID8gZ2V0U3BsaXRCdXR0b25DbGFzc05hbWVzKCEhZGlzYWJsZWQsICFtZW51SGlkZGVuLCAhIWNoZWNrZWQsICEhYWxsb3dEaXNhYmxlZEZvY3VzKVxuICAgICAgICAgICAgOiBzdHlsZXMgJiYgZ2V0QmFzZVNwbGl0QnV0dG9uQ2xhc3NOYW1lcyhzdHlsZXMsICEhZGlzYWJsZWQsICFtZW51SGlkZGVuLCAhIWNoZWNrZWQsICEhcHJpbWFyeURpc2FibGVkKTtcbiAgICAgICAgYXNzaWduKGJ1dHRvblByb3BzLCB7XG4gICAgICAgICAgICBvbkNsaWNrOiB1bmRlZmluZWQsXG4gICAgICAgICAgICBvblBvaW50ZXJEb3duOiB1bmRlZmluZWQsXG4gICAgICAgICAgICBvblBvaW50ZXJVcDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgdGFiSW5kZXg6IC0xLFxuICAgICAgICAgICAgJ2RhdGEtaXMtZm9jdXNhYmxlJzogZmFsc2UsXG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoa2V5dGlwUHJvcHMgJiYgbWVudVByb3BzKSB7XG4gICAgICAgICAgICBrZXl0aXBQcm9wcyA9IHRoaXMuX2dldE1lbW9pemVkTWVudUJ1dHRvbktleXRpcFByb3BzKGtleXRpcFByb3BzKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgY29udGFpbmVyUHJvcHMgPSBnZXROYXRpdmVQcm9wcyhidXR0b25Qcm9wcywgW10sIFsnZGlzYWJsZWQnXSk7XG4gICAgICAgIC8vIEFkZCBhZGRpdGlvbmFsIHByb3BzIHRvIGFwcGx5IG9uIHByaW1hcnkgYWN0aW9uIGJ1dHRvblxuICAgICAgICBpZiAocHJpbWFyeUFjdGlvbkJ1dHRvblByb3BzKSB7XG4gICAgICAgICAgICBhc3NpZ24oYnV0dG9uUHJvcHMsIHByaW1hcnlBY3Rpb25CdXR0b25Qcm9wcyk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIFNwbGl0QnV0dG9uID0gZnVuY3Rpb24gKGtleXRpcEF0dHJpYnV0ZXMpIHsgcmV0dXJuIChSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIF9fYXNzaWduKHt9LCBjb250YWluZXJQcm9wcywgeyBcImRhdGEta3RwLXRhcmdldFwiOiBrZXl0aXBBdHRyaWJ1dGVzID8ga2V5dGlwQXR0cmlidXRlc1snZGF0YS1rdHAtdGFyZ2V0J10gOiB1bmRlZmluZWQsIHJvbGU6IHJvbGUgPyByb2xlIDogJ2J1dHRvbicsIFwiYXJpYS1kaXNhYmxlZFwiOiBkaXNhYmxlZCwgXCJhcmlhLWhhc3BvcHVwXCI6IHRydWUsIFwiYXJpYS1leHBhbmRlZFwiOiAhbWVudUhpZGRlbiwgXCJhcmlhLXByZXNzZWRcIjogdG9nZ2xlID8gISFjaGVja2VkIDogdW5kZWZpbmVkLCBcImFyaWEtZGVzY3JpYmVkYnlcIjogbWVyZ2VBcmlhQXR0cmlidXRlVmFsdWVzKGJ1dHRvblByb3BzWydhcmlhLWRlc2NyaWJlZGJ5J10sIGtleXRpcEF0dHJpYnV0ZXMgPyBrZXl0aXBBdHRyaWJ1dGVzWydhcmlhLWRlc2NyaWJlZGJ5J10gOiB1bmRlZmluZWQpLCBjbGFzc05hbWU6IGNsYXNzTmFtZXMgJiYgY2xhc3NOYW1lcy5zcGxpdEJ1dHRvbkNvbnRhaW5lciwgb25LZXlEb3duOiBfdGhpcy5fb25TcGxpdEJ1dHRvbkNvbnRhaW5lcktleURvd24sIG9uVG91Y2hTdGFydDogX3RoaXMuX29uVG91Y2hTdGFydCwgcmVmOiBfdGhpcy5fc3BsaXRCdXR0b25Db250YWluZXIsIFwiZGF0YS1pcy1mb2N1c2FibGVcIjogdHJ1ZSwgb25DbGljazogIWRpc2FibGVkICYmICFwcmltYXJ5RGlzYWJsZWQgPyBfdGhpcy5fb25TcGxpdEJ1dHRvblByaW1hcnlDbGljayA6IHVuZGVmaW5lZCwgdGFiSW5kZXg6ICghZGlzYWJsZWQgJiYgIXByaW1hcnlEaXNhYmxlZCkgfHwgYWxsb3dEaXNhYmxlZEZvY3VzID8gMCA6IHVuZGVmaW5lZCwgXCJhcmlhLXJvbGVkZXNjcmlwdGlvblwiOiBidXR0b25Qcm9wc1snYXJpYS1yb2xlZGVzY3JpcHRpb24nXSwgb25Gb2N1c0NhcHR1cmU6IF90aGlzLl9vblNwbGl0Q29udGFpbmVyRm9jdXNDYXB0dXJlIH0pLFxuICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcInNwYW5cIiwgeyBzdHlsZTogeyBkaXNwbGF5OiAnZmxleCcgfSB9LFxuICAgICAgICAgICAgICAgIF90aGlzLl9vblJlbmRlckNvbnRlbnQodGFnLCBidXR0b25Qcm9wcyksXG4gICAgICAgICAgICAgICAgX3RoaXMuX29uUmVuZGVyU3BsaXRCdXR0b25NZW51QnV0dG9uKGNsYXNzTmFtZXMsIGtleXRpcEF0dHJpYnV0ZXMpLFxuICAgICAgICAgICAgICAgIF90aGlzLl9vblJlbmRlclNwbGl0QnV0dG9uRGl2aWRlcihjbGFzc05hbWVzKSkpKTsgfTtcbiAgICAgICAgcmV0dXJuIGtleXRpcFByb3BzID8gKFJlYWN0LmNyZWF0ZUVsZW1lbnQoS2V5dGlwRGF0YSwgeyBrZXl0aXBQcm9wczoga2V5dGlwUHJvcHMsIGRpc2FibGVkOiBkaXNhYmxlZCB9LCBmdW5jdGlvbiAoa2V5dGlwQXR0cmlidXRlcykgeyByZXR1cm4gU3BsaXRCdXR0b24oa2V5dGlwQXR0cmlidXRlcyk7IH0pKSA6IChTcGxpdEJ1dHRvbigpKTtcbiAgICB9O1xuICAgIEJhc2VCdXR0b24ucHJvdG90eXBlLl9vblJlbmRlclNwbGl0QnV0dG9uRGl2aWRlciA9IGZ1bmN0aW9uIChjbGFzc05hbWVzKSB7XG4gICAgICAgIGlmIChjbGFzc05hbWVzICYmIGNsYXNzTmFtZXMuZGl2aWRlcikge1xuICAgICAgICAgICAgdmFyIG9uQ2xpY2sgPSBmdW5jdGlvbiAoZXYpIHtcbiAgICAgICAgICAgICAgICBldi5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcInNwYW5cIiwgeyBjbGFzc05hbWU6IGNsYXNzTmFtZXMuZGl2aWRlciwgXCJhcmlhLWhpZGRlblwiOiB0cnVlLCBvbkNsaWNrOiBvbkNsaWNrIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH07XG4gICAgQmFzZUJ1dHRvbi5wcm90b3R5cGUuX29uUmVuZGVyU3BsaXRCdXR0b25NZW51QnV0dG9uID0gZnVuY3Rpb24gKGNsYXNzTmFtZXMsIGtleXRpcEF0dHJpYnV0ZXMpIHtcbiAgICAgICAgdmFyIF9hID0gdGhpcy5wcm9wcywgYWxsb3dEaXNhYmxlZEZvY3VzID0gX2EuYWxsb3dEaXNhYmxlZEZvY3VzLCBjaGVja2VkID0gX2EuY2hlY2tlZCwgZGlzYWJsZWQgPSBfYS5kaXNhYmxlZCwgc3BsaXRCdXR0b25NZW51UHJvcHMgPSBfYS5zcGxpdEJ1dHRvbk1lbnVQcm9wcywgc3BsaXRCdXR0b25BcmlhTGFiZWwgPSBfYS5zcGxpdEJ1dHRvbkFyaWFMYWJlbCwgcHJpbWFyeURpc2FibGVkID0gX2EucHJpbWFyeURpc2FibGVkO1xuICAgICAgICB2YXIgbWVudUhpZGRlbiA9IHRoaXMuc3RhdGUubWVudUhpZGRlbjtcbiAgICAgICAgdmFyIG1lbnVJY29uUHJvcHMgPSB0aGlzLnByb3BzLm1lbnVJY29uUHJvcHM7XG4gICAgICAgIGlmIChtZW51SWNvblByb3BzID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIG1lbnVJY29uUHJvcHMgPSB7XG4gICAgICAgICAgICAgICAgaWNvbk5hbWU6ICdDaGV2cm9uRG93bicsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIHZhciBzcGxpdEJ1dHRvblByb3BzID0gX19hc3NpZ24oX19hc3NpZ24oe30sIHNwbGl0QnV0dG9uTWVudVByb3BzKSwgeyBzdHlsZXM6IGNsYXNzTmFtZXMsIGNoZWNrZWQ6IGNoZWNrZWQsIGRpc2FibGVkOiBkaXNhYmxlZCwgYWxsb3dEaXNhYmxlZEZvY3VzOiBhbGxvd0Rpc2FibGVkRm9jdXMsIG9uQ2xpY2s6IHRoaXMuX29uTWVudUNsaWNrLCBtZW51UHJvcHM6IHVuZGVmaW5lZCwgaWNvblByb3BzOiBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgbWVudUljb25Qcm9wcyksIHsgY2xhc3NOYW1lOiB0aGlzLl9jbGFzc05hbWVzLm1lbnVJY29uIH0pLCBhcmlhTGFiZWw6IHNwbGl0QnV0dG9uQXJpYUxhYmVsLCAnYXJpYS1oYXNwb3B1cCc6IHRydWUsICdhcmlhLWV4cGFuZGVkJzogIW1lbnVIaWRkZW4sICdkYXRhLWlzLWZvY3VzYWJsZSc6IGZhbHNlIH0pO1xuICAgICAgICAvLyBBZGQgZGF0YS1rdHAtZXhlY3V0ZS10YXJnZXQgdG8gdGhlIHNwbGl0IGJ1dHRvbiBpZiB0aGUga2V5dGlwIGlzIGRlZmluZWRcbiAgICAgICAgcmV0dXJuIChSZWFjdC5jcmVhdGVFbGVtZW50KEJhc2VCdXR0b24sIF9fYXNzaWduKHt9LCBzcGxpdEJ1dHRvblByb3BzLCB7IFwiZGF0YS1rdHAtZXhlY3V0ZS10YXJnZXRcIjoga2V5dGlwQXR0cmlidXRlcyA/IGtleXRpcEF0dHJpYnV0ZXNbJ2RhdGEta3RwLWV4ZWN1dGUtdGFyZ2V0J10gOiBrZXl0aXBBdHRyaWJ1dGVzLCBvbk1vdXNlRG93bjogdGhpcy5fb25Nb3VzZURvd24sIHRhYkluZGV4OiBwcmltYXJ5RGlzYWJsZWQgJiYgIWFsbG93RGlzYWJsZWRGb2N1cyA/IDAgOiAtMSB9KSkpO1xuICAgIH07XG4gICAgQmFzZUJ1dHRvbi5wcm90b3R5cGUuX29uUG9pbnRlckRvd24gPSBmdW5jdGlvbiAoZXYpIHtcbiAgICAgICAgdmFyIG9uUG9pbnRlckRvd24gPSB0aGlzLnByb3BzLm9uUG9pbnRlckRvd247XG4gICAgICAgIGlmIChvblBvaW50ZXJEb3duKSB7XG4gICAgICAgICAgICBvblBvaW50ZXJEb3duKGV2KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZXYucG9pbnRlclR5cGUgPT09ICd0b3VjaCcpIHtcbiAgICAgICAgICAgIHRoaXMuX2hhbmRsZVRvdWNoQW5kUG9pbnRlckV2ZW50KCk7XG4gICAgICAgICAgICBldi5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgZXYuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEJhc2VCdXR0b24ucHJvdG90eXBlLl9oYW5kbGVUb3VjaEFuZFBvaW50ZXJFdmVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgLy8gSWYgd2UgYWxyZWFkeSBoYXZlIGFuIGV4aXN0aW5nIHRpbWVvdXQgZnJvbSBhIHByZXZpb3VzIHRvdWNoIGFuZCBwb2ludGVyIGV2ZW50XG4gICAgICAgIC8vIGNhbmNlbCB0aGF0IHRpbWVvdXQgc28gd2UgY2FuIHNldCBhIG5ldyBvbmUuXG4gICAgICAgIGlmICh0aGlzLl9sYXN0VG91Y2hUaW1lb3V0SWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy5fYXN5bmMuY2xlYXJUaW1lb3V0KHRoaXMuX2xhc3RUb3VjaFRpbWVvdXRJZCk7XG4gICAgICAgICAgICB0aGlzLl9sYXN0VG91Y2hUaW1lb3V0SWQgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fcHJvY2Vzc2luZ1RvdWNoID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5fbGFzdFRvdWNoVGltZW91dElkID0gdGhpcy5fYXN5bmMuc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBfdGhpcy5fcHJvY2Vzc2luZ1RvdWNoID0gZmFsc2U7XG4gICAgICAgICAgICBfdGhpcy5fbGFzdFRvdWNoVGltZW91dElkID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgLy8gVG91Y2ggYW5kIHBvaW50ZXIgZXZlbnRzIGRvbid0IGZvY3VzIHRoZSBidXR0b24gbmF0dXJhbGx5LFxuICAgICAgICAgICAgLy8gc28gYWRkaW5nIGFuIGltcGVyYXRpdmUgZm9jdXMgY2FsbCB0byBndWFyYW50ZWUgdGhpcyBiZWhhdmlvci5cbiAgICAgICAgICAgIF90aGlzLmZvY3VzKCk7XG4gICAgICAgIH0sIFRvdWNoSWRsZURlbGF5KTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgaWYgdGhlIHVzZXIgaGl0cyBhIHZhbGlkIGtleWJvYXJkIGtleSB0byBvcGVuIHRoZSBtZW51XG4gICAgICogQHBhcmFtIGV2IC0gdGhlIGtleWJvYXJkIGV2ZW50XG4gICAgICogQHJldHVybnMgVHJ1ZSBpZiB1c2VyIGNsaWNrcyBvbiBjdXN0b20gdHJpZ2dlciBrZXkgaWYgZW5hYmxlZCBvciBhbHQgKyBkb3duIGFycm93IGlmIG5vdC4gRmFsc2Ugb3RoZXJ3aXNlLlxuICAgICAqL1xuICAgIEJhc2VCdXR0b24ucHJvdG90eXBlLl9pc1ZhbGlkTWVudU9wZW5LZXkgPSBmdW5jdGlvbiAoZXYpIHtcbiAgICAgICAgaWYgKHRoaXMucHJvcHMubWVudVRyaWdnZXJLZXlDb2RlKSB7XG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZGVwcmVjYXRpb24vZGVwcmVjYXRpb25cbiAgICAgICAgICAgIHJldHVybiBldi53aGljaCA9PT0gdGhpcy5wcm9wcy5tZW51VHJpZ2dlcktleUNvZGU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodGhpcy5wcm9wcy5tZW51UHJvcHMpIHtcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBkZXByZWNhdGlvbi9kZXByZWNhdGlvblxuICAgICAgICAgICAgcmV0dXJuIGV2LndoaWNoID09PSBLZXlDb2Rlcy5kb3duICYmIChldi5hbHRLZXkgfHwgZXYubWV0YUtleSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gTm90ZTogV2hlbiBlbnRlciBpcyBwcmVzc2VkLCB3ZSB3aWxsIGxldCB0aGUgZXZlbnQgY29udGludWUgdG8gcHJvcGFnYXRlXG4gICAgICAgIC8vIHRvIHRyaWdnZXIgdGhlIG9uQ2xpY2sgZXZlbnQgb24gdGhlIGJ1dHRvblxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfTtcbiAgICBCYXNlQnV0dG9uLmRlZmF1bHRQcm9wcyA9IHtcbiAgICAgICAgYmFzZUNsYXNzTmFtZTogJ21zLUJ1dHRvbicsXG4gICAgICAgIHN0eWxlczoge30sXG4gICAgICAgIHNwbGl0OiBmYWxzZSxcbiAgICB9O1xuICAgIHJldHVybiBCYXNlQnV0dG9uO1xufShSZWFjdC5Db21wb25lbnQpKTtcbmV4cG9ydCB7IEJhc2VCdXR0b24gfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUJhc2VCdXR0b24uanMubWFwIiwiaW1wb3J0IHsgbWVtb2l6ZUZ1bmN0aW9uIH0gZnJvbSAnLi4vLi4vVXRpbGl0aWVzJztcbmltcG9ydCB7IEhpZ2hDb250cmFzdFNlbGVjdG9yLCBnZXRGb2N1c1N0eWxlLCBoaWRkZW5Db250ZW50U3R5bGUgfSBmcm9tICcuLi8uLi9TdHlsaW5nJztcbnZhciBub091dGxpbmUgPSB7XG4gICAgb3V0bGluZTogMCxcbn07XG52YXIgaWNvblN0eWxlID0gZnVuY3Rpb24gKGZvbnRTaXplKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgZm9udFNpemU6IGZvbnRTaXplLFxuICAgICAgICBtYXJnaW46ICcwIDRweCcsXG4gICAgICAgIGhlaWdodDogJzE2cHgnLFxuICAgICAgICBsaW5lSGVpZ2h0OiAnMTZweCcsXG4gICAgICAgIHRleHRBbGlnbjogJ2NlbnRlcicsXG4gICAgICAgIGZsZXhTaHJpbms6IDAsXG4gICAgfTtcbn07XG4vKipcbiAqIEdldHMgdGhlIGJhc2UgYnV0dG9uIHN0eWxlcy4gTm90ZTogYmVjYXVzZSBpdCBpcyBhIGJhc2UgY2xhc3MgdG8gYmUgdXNlZCB3aXRoIHRoZSBgbWVyZ2VSdWxlc2BcbiAqIGhlbHBlciwgaXQgc2hvdWxkIGhhdmUgdmFsdWVzIGZvciBhbGwgY2xhc3MgbmFtZXMgaW4gdGhlIGludGVyZmFjZS4gVGhpcyBsZXQgYG1lcmdlUnVsZXNgIG9wdGltaXplXG4gKiBtaXhpbmcgY2xhc3MgbmFtZXMgdG9nZXRoZXIuXG4gKi9cbmV4cG9ydCB2YXIgZ2V0U3R5bGVzID0gbWVtb2l6ZUZ1bmN0aW9uKGZ1bmN0aW9uICh0aGVtZSkge1xuICAgIHZhciBfYSwgX2I7XG4gICAgdmFyIHNlbWFudGljQ29sb3JzID0gdGhlbWUuc2VtYW50aWNDb2xvcnMsIGVmZmVjdHMgPSB0aGVtZS5lZmZlY3RzLCBmb250cyA9IHRoZW1lLmZvbnRzO1xuICAgIHZhciBib3JkZXIgPSBzZW1hbnRpY0NvbG9ycy5idXR0b25Cb3JkZXI7XG4gICAgdmFyIGRpc2FibGVkQmFja2dyb3VuZCA9IHNlbWFudGljQ29sb3JzLmRpc2FibGVkQmFja2dyb3VuZDtcbiAgICB2YXIgZGlzYWJsZWRUZXh0ID0gc2VtYW50aWNDb2xvcnMuZGlzYWJsZWRUZXh0O1xuICAgIHZhciBidXR0b25IaWdoQ29udHJhc3RGb2N1cyA9IHtcbiAgICAgICAgbGVmdDogLTIsXG4gICAgICAgIHRvcDogLTIsXG4gICAgICAgIGJvdHRvbTogLTIsXG4gICAgICAgIHJpZ2h0OiAtMixcbiAgICAgICAgb3V0bGluZUNvbG9yOiAnQnV0dG9uVGV4dCcsXG4gICAgfTtcbiAgICByZXR1cm4ge1xuICAgICAgICByb290OiBbXG4gICAgICAgICAgICBnZXRGb2N1c1N0eWxlKHRoZW1lLCB7IGluc2V0OiAxLCBoaWdoQ29udHJhc3RTdHlsZTogYnV0dG9uSGlnaENvbnRyYXN0Rm9jdXMsIGJvcmRlckNvbG9yOiAndHJhbnNwYXJlbnQnIH0pLFxuICAgICAgICAgICAgdGhlbWUuZm9udHMubWVkaXVtLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGJveFNpemluZzogJ2JvcmRlci1ib3gnLFxuICAgICAgICAgICAgICAgIGJvcmRlcjogJzFweCBzb2xpZCAnICsgYm9yZGVyLFxuICAgICAgICAgICAgICAgIHVzZXJTZWxlY3Q6ICdub25lJyxcbiAgICAgICAgICAgICAgICBkaXNwbGF5OiAnaW5saW5lLWJsb2NrJyxcbiAgICAgICAgICAgICAgICB0ZXh0RGVjb3JhdGlvbjogJ25vbmUnLFxuICAgICAgICAgICAgICAgIHRleHRBbGlnbjogJ2NlbnRlcicsXG4gICAgICAgICAgICAgICAgY3Vyc29yOiAncG9pbnRlcicsXG4gICAgICAgICAgICAgICAgcGFkZGluZzogJzAgMTZweCcsXG4gICAgICAgICAgICAgICAgYm9yZGVyUmFkaXVzOiBlZmZlY3RzLnJvdW5kZWRDb3JuZXIyLFxuICAgICAgICAgICAgICAgIHNlbGVjdG9yczoge1xuICAgICAgICAgICAgICAgICAgICAvLyBJRTExIHdvcmthcm91bmQgZm9yIHByZXZlbnRpbmcgc2hpZnQgb2YgY2hpbGQgZWxlbWVudHMgb2YgYSBidXR0b24gd2hlbiBhY3RpdmUuXG4gICAgICAgICAgICAgICAgICAgICc6YWN0aXZlID4gKic6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgbGVmdDogMCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvcDogMCxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgcm9vdERpc2FibGVkOiBbXG4gICAgICAgICAgICBnZXRGb2N1c1N0eWxlKHRoZW1lLCB7IGluc2V0OiAxLCBoaWdoQ29udHJhc3RTdHlsZTogYnV0dG9uSGlnaENvbnRyYXN0Rm9jdXMsIGJvcmRlckNvbG9yOiAndHJhbnNwYXJlbnQnIH0pLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogZGlzYWJsZWRCYWNrZ3JvdW5kLFxuICAgICAgICAgICAgICAgIGJvcmRlckNvbG9yOiBkaXNhYmxlZEJhY2tncm91bmQsXG4gICAgICAgICAgICAgICAgY29sb3I6IGRpc2FibGVkVGV4dCxcbiAgICAgICAgICAgICAgICBjdXJzb3I6ICdkZWZhdWx0JyxcbiAgICAgICAgICAgICAgICBzZWxlY3RvcnM6IHtcbiAgICAgICAgICAgICAgICAgICAgJzpob3Zlcic6IG5vT3V0bGluZSxcbiAgICAgICAgICAgICAgICAgICAgJzpmb2N1cyc6IG5vT3V0bGluZSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgaWNvbkRpc2FibGVkOiB7XG4gICAgICAgICAgICBjb2xvcjogZGlzYWJsZWRUZXh0LFxuICAgICAgICAgICAgc2VsZWN0b3JzOiAoX2EgPSB7fSxcbiAgICAgICAgICAgICAgICBfYVtIaWdoQ29udHJhc3RTZWxlY3Rvcl0gPSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbG9yOiAnR3JheVRleHQnLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgX2EpLFxuICAgICAgICB9LFxuICAgICAgICBtZW51SWNvbkRpc2FibGVkOiB7XG4gICAgICAgICAgICBjb2xvcjogZGlzYWJsZWRUZXh0LFxuICAgICAgICAgICAgc2VsZWN0b3JzOiAoX2IgPSB7fSxcbiAgICAgICAgICAgICAgICBfYltIaWdoQ29udHJhc3RTZWxlY3Rvcl0gPSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbG9yOiAnR3JheVRleHQnLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgX2IpLFxuICAgICAgICB9LFxuICAgICAgICBmbGV4Q29udGFpbmVyOiB7XG4gICAgICAgICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICAgICAgICBoZWlnaHQ6ICcxMDAlJyxcbiAgICAgICAgICAgIGZsZXhXcmFwOiAnbm93cmFwJyxcbiAgICAgICAgICAgIGp1c3RpZnlDb250ZW50OiAnY2VudGVyJyxcbiAgICAgICAgICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgICAgICB9LFxuICAgICAgICBkZXNjcmlwdGlvbjoge1xuICAgICAgICAgICAgZGlzcGxheTogJ2Jsb2NrJyxcbiAgICAgICAgfSxcbiAgICAgICAgdGV4dENvbnRhaW5lcjoge1xuICAgICAgICAgICAgZmxleEdyb3c6IDEsXG4gICAgICAgICAgICBkaXNwbGF5OiAnYmxvY2snLFxuICAgICAgICB9LFxuICAgICAgICBpY29uOiBpY29uU3R5bGUoZm9udHMubWVkaXVtUGx1cy5mb250U2l6ZSksXG4gICAgICAgIG1lbnVJY29uOiBpY29uU3R5bGUoZm9udHMuc21hbGwuZm9udFNpemUpLFxuICAgICAgICBsYWJlbDoge1xuICAgICAgICAgICAgbWFyZ2luOiAnMCA0cHgnLFxuICAgICAgICAgICAgbGluZUhlaWdodDogJzEwMCUnLFxuICAgICAgICAgICAgZGlzcGxheTogJ2Jsb2NrJyxcbiAgICAgICAgfSxcbiAgICAgICAgc2NyZWVuUmVhZGVyVGV4dDogaGlkZGVuQ29udGVudFN0eWxlLFxuICAgIH07XG59KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUJhc2VCdXR0b24uc3R5bGVzLmpzLm1hcCIsImltcG9ydCB7IF9fYXNzaWduIH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBIaWdoQ29udHJhc3RTZWxlY3RvciwgY29uY2F0U3R5bGVTZXRzLCBnZXRGb2N1c1N0eWxlLCBnZXRIaWdoQ29udHJhc3ROb0FkanVzdFN0eWxlIH0gZnJvbSAnLi4vLi4vLi4vU3R5bGluZyc7XG5pbXBvcnQgeyBtZW1vaXplRnVuY3Rpb24gfSBmcm9tICcuLi8uLi8uLi9VdGlsaXRpZXMnO1xuZXhwb3J0IHZhciBnZXRTdHlsZXMgPSBtZW1vaXplRnVuY3Rpb24oZnVuY3Rpb24gKHRoZW1lLCBjdXN0b21TdHlsZXMpIHtcbiAgICB2YXIgX2EsIF9iLCBfYywgX2QsIF9lLCBfZiwgX2csIF9oLCBfaiwgX2ssIF9sLCBfbSwgX287XG4gICAgdmFyIGVmZmVjdHMgPSB0aGVtZS5lZmZlY3RzLCBwYWxldHRlID0gdGhlbWUucGFsZXR0ZSwgc2VtYW50aWNDb2xvcnMgPSB0aGVtZS5zZW1hbnRpY0NvbG9ycztcbiAgICB2YXIgYnV0dG9uSGlnaENvbnRyYXN0Rm9jdXMgPSB7XG4gICAgICAgIGxlZnQ6IC0yLFxuICAgICAgICB0b3A6IC0yLFxuICAgICAgICBib3R0b206IC0yLFxuICAgICAgICByaWdodDogLTIsXG4gICAgICAgIGJvcmRlcjogJ25vbmUnLFxuICAgIH07XG4gICAgdmFyIHNwbGl0QnV0dG9uRGl2aWRlckJhc2VTdHlsZXMgPSB7XG4gICAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgICB3aWR0aDogMSxcbiAgICAgICAgcmlnaHQ6IDMxLFxuICAgICAgICB0b3A6IDgsXG4gICAgICAgIGJvdHRvbTogOCxcbiAgICB9O1xuICAgIHZhciBzcGxpdEJ1dHRvblN0eWxlcyA9IHtcbiAgICAgICAgc3BsaXRCdXR0b25Db250YWluZXI6IFtcbiAgICAgICAgICAgIGdldEZvY3VzU3R5bGUodGhlbWUsIHsgaGlnaENvbnRyYXN0U3R5bGU6IGJ1dHRvbkhpZ2hDb250cmFzdEZvY3VzLCBpbnNldDogMiB9KSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBkaXNwbGF5OiAnaW5saW5lLWZsZXgnLFxuICAgICAgICAgICAgICAgIHNlbGVjdG9yczoge1xuICAgICAgICAgICAgICAgICAgICAnLm1zLUJ1dHRvbi0tZGVmYXVsdCc6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJvcmRlclRvcFJpZ2h0UmFkaXVzOiAnMCcsXG4gICAgICAgICAgICAgICAgICAgICAgICBib3JkZXJCb3R0b21SaWdodFJhZGl1czogJzAnLFxuICAgICAgICAgICAgICAgICAgICAgICAgYm9yZGVyUmlnaHQ6ICdub25lJyxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgJy5tcy1CdXR0b24tLXByaW1hcnknOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBib3JkZXJUb3BSaWdodFJhZGl1czogJzAnLFxuICAgICAgICAgICAgICAgICAgICAgICAgYm9yZGVyQm90dG9tUmlnaHRSYWRpdXM6ICcwJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGJvcmRlcjogJ25vbmUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0b3JzOiAoX2EgPSB7fSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYVtIaWdoQ29udHJhc3RTZWxlY3Rvcl0gPSBfX2Fzc2lnbih7IGNvbG9yOiAnV2luZG93VGV4dCcsIGJhY2tncm91bmRDb2xvcjogJ1dpbmRvdycsIGJvcmRlcjogJzFweCBzb2xpZCBXaW5kb3dUZXh0JywgYm9yZGVyUmlnaHRXaWR0aDogJzAnIH0sIGdldEhpZ2hDb250cmFzdE5vQWRqdXN0U3R5bGUoKSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX2EpLFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAnLm1zLUJ1dHRvbi0tcHJpbWFyeSArIC5tcy1CdXR0b24nOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBib3JkZXI6ICdub25lJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdG9yczogKF9iID0ge30sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX2JbSGlnaENvbnRyYXN0U2VsZWN0b3JdID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBib3JkZXI6ICcxcHggc29saWQgV2luZG93VGV4dCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJvcmRlckxlZnRXaWR0aDogJzAnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX2IpLFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBzcGxpdEJ1dHRvbkNvbnRhaW5lckhvdmVyZWQ6IHtcbiAgICAgICAgICAgIHNlbGVjdG9yczoge1xuICAgICAgICAgICAgICAgICcubXMtQnV0dG9uLS1wcmltYXJ5Jzoge1xuICAgICAgICAgICAgICAgICAgICBzZWxlY3RvcnM6IChfYyA9IHt9LFxuICAgICAgICAgICAgICAgICAgICAgICAgX2NbSGlnaENvbnRyYXN0U2VsZWN0b3JdID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiAnV2luZG93JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6ICdIaWdobGlnaHQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIF9jKSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICcubXMtQnV0dG9uLmlzLWRpc2FibGVkJzoge1xuICAgICAgICAgICAgICAgICAgICBjb2xvcjogc2VtYW50aWNDb2xvcnMuYnV0dG9uVGV4dERpc2FibGVkLFxuICAgICAgICAgICAgICAgICAgICBzZWxlY3RvcnM6IChfZCA9IHt9LFxuICAgICAgICAgICAgICAgICAgICAgICAgX2RbSGlnaENvbnRyYXN0U2VsZWN0b3JdID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiAnR3JheVRleHQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJvcmRlckNvbG9yOiAnR3JheVRleHQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogJ1dpbmRvdycsXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgX2QpLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgICBzcGxpdEJ1dHRvbkNvbnRhaW5lckNoZWNrZWQ6IHtcbiAgICAgICAgICAgIHNlbGVjdG9yczoge1xuICAgICAgICAgICAgICAgICcubXMtQnV0dG9uLS1wcmltYXJ5Jzoge1xuICAgICAgICAgICAgICAgICAgICBzZWxlY3RvcnM6IChfZSA9IHt9LFxuICAgICAgICAgICAgICAgICAgICAgICAgX2VbSGlnaENvbnRyYXN0U2VsZWN0b3JdID0gX19hc3NpZ24oeyBjb2xvcjogJ1dpbmRvdycsIGJhY2tncm91bmRDb2xvcjogJ1dpbmRvd1RleHQnIH0sIGdldEhpZ2hDb250cmFzdE5vQWRqdXN0U3R5bGUoKSksXG4gICAgICAgICAgICAgICAgICAgICAgICBfZSksXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICAgIHNwbGl0QnV0dG9uQ29udGFpbmVyQ2hlY2tlZEhvdmVyZWQ6IHtcbiAgICAgICAgICAgIHNlbGVjdG9yczoge1xuICAgICAgICAgICAgICAgICcubXMtQnV0dG9uLS1wcmltYXJ5Jzoge1xuICAgICAgICAgICAgICAgICAgICBzZWxlY3RvcnM6IChfZiA9IHt9LFxuICAgICAgICAgICAgICAgICAgICAgICAgX2ZbSGlnaENvbnRyYXN0U2VsZWN0b3JdID0gX19hc3NpZ24oeyBjb2xvcjogJ1dpbmRvdycsIGJhY2tncm91bmRDb2xvcjogJ1dpbmRvd1RleHQnIH0sIGdldEhpZ2hDb250cmFzdE5vQWRqdXN0U3R5bGUoKSksXG4gICAgICAgICAgICAgICAgICAgICAgICBfZiksXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICAgIHNwbGl0QnV0dG9uQ29udGFpbmVyRm9jdXNlZDoge1xuICAgICAgICAgICAgb3V0bGluZTogJ25vbmUhaW1wb3J0YW50JyxcbiAgICAgICAgfSxcbiAgICAgICAgc3BsaXRCdXR0b25NZW51QnV0dG9uOiAoX2cgPSB7XG4gICAgICAgICAgICAgICAgcGFkZGluZzogNixcbiAgICAgICAgICAgICAgICBoZWlnaHQ6ICdhdXRvJyxcbiAgICAgICAgICAgICAgICBib3hTaXppbmc6ICdib3JkZXItYm94JyxcbiAgICAgICAgICAgICAgICBib3JkZXJSYWRpdXM6IDAsXG4gICAgICAgICAgICAgICAgYm9yZGVyVG9wUmlnaHRSYWRpdXM6IGVmZmVjdHMucm91bmRlZENvcm5lcjIsXG4gICAgICAgICAgICAgICAgYm9yZGVyQm90dG9tUmlnaHRSYWRpdXM6IGVmZmVjdHMucm91bmRlZENvcm5lcjIsXG4gICAgICAgICAgICAgICAgYm9yZGVyOiBcIjFweCBzb2xpZCBcIiArIHBhbGV0dGUubmV1dHJhbFNlY29uZGFyeUFsdCxcbiAgICAgICAgICAgICAgICBib3JkZXJMZWZ0OiAnbm9uZScsXG4gICAgICAgICAgICAgICAgb3V0bGluZTogJ3RyYW5zcGFyZW50JyxcbiAgICAgICAgICAgICAgICB1c2VyU2VsZWN0OiAnbm9uZScsXG4gICAgICAgICAgICAgICAgZGlzcGxheTogJ2lubGluZS1ibG9jaycsXG4gICAgICAgICAgICAgICAgdGV4dERlY29yYXRpb246ICdub25lJyxcbiAgICAgICAgICAgICAgICB0ZXh0QWxpZ246ICdjZW50ZXInLFxuICAgICAgICAgICAgICAgIGN1cnNvcjogJ3BvaW50ZXInLFxuICAgICAgICAgICAgICAgIHZlcnRpY2FsQWxpZ246ICd0b3AnLFxuICAgICAgICAgICAgICAgIHdpZHRoOiAzMixcbiAgICAgICAgICAgICAgICBtYXJnaW5MZWZ0OiAtMSxcbiAgICAgICAgICAgICAgICBtYXJnaW5Ub3A6IDAsXG4gICAgICAgICAgICAgICAgbWFyZ2luUmlnaHQ6IDAsXG4gICAgICAgICAgICAgICAgbWFyZ2luQm90dG9tOiAwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgX2dbSGlnaENvbnRyYXN0U2VsZWN0b3JdID0ge1xuICAgICAgICAgICAgICAgICcubXMtQnV0dG9uLW1lbnVJY29uJzoge1xuICAgICAgICAgICAgICAgICAgICBjb2xvcjogJ1dpbmRvd1RleHQnLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgX2cpLFxuICAgICAgICBzcGxpdEJ1dHRvbkRpdmlkZXI6IF9fYXNzaWduKF9fYXNzaWduKHt9LCBzcGxpdEJ1dHRvbkRpdmlkZXJCYXNlU3R5bGVzKSwgeyBzZWxlY3RvcnM6IChfaCA9IHt9LFxuICAgICAgICAgICAgICAgIF9oW0hpZ2hDb250cmFzdFNlbGVjdG9yXSA9IHtcbiAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiAnV2luZG93VGV4dCcsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBfaCkgfSksXG4gICAgICAgIHNwbGl0QnV0dG9uRGl2aWRlckRpc2FibGVkOiBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgc3BsaXRCdXR0b25EaXZpZGVyQmFzZVN0eWxlcyksIHsgc2VsZWN0b3JzOiAoX2ogPSB7fSxcbiAgICAgICAgICAgICAgICBfaltIaWdoQ29udHJhc3RTZWxlY3Rvcl0gPSB7XG4gICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogJ0dyYXlUZXh0JyxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIF9qKSB9KSxcbiAgICAgICAgc3BsaXRCdXR0b25NZW51QnV0dG9uRGlzYWJsZWQ6IHtcbiAgICAgICAgICAgIHBvaW50ZXJFdmVudHM6ICdub25lJyxcbiAgICAgICAgICAgIGJvcmRlcjogJ25vbmUnLFxuICAgICAgICAgICAgc2VsZWN0b3JzOiAoX2sgPSB7XG4gICAgICAgICAgICAgICAgICAgICc6aG92ZXInOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJzb3I6ICdkZWZhdWx0JyxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgJy5tcy1CdXR0b24tLXByaW1hcnknOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3RvcnM6IChfbCA9IHt9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9sW0hpZ2hDb250cmFzdFNlbGVjdG9yXSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6ICdHcmF5VGV4dCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJvcmRlckNvbG9yOiAnR3JheVRleHQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6ICdXaW5kb3cnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX2wpLFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAnLm1zLUJ1dHRvbi1tZW51SWNvbic6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdG9yczogKF9tID0ge30sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX21bSGlnaENvbnRyYXN0U2VsZWN0b3JdID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogJ0dyYXlUZXh0JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9tKSxcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgX2tbSGlnaENvbnRyYXN0U2VsZWN0b3JdID0ge1xuICAgICAgICAgICAgICAgICAgICBjb2xvcjogJ0dyYXlUZXh0JyxcbiAgICAgICAgICAgICAgICAgICAgYm9yZGVyOiAnMXB4IHNvbGlkIEdyYXlUZXh0JyxcbiAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiAnV2luZG93JyxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIF9rKSxcbiAgICAgICAgfSxcbiAgICAgICAgc3BsaXRCdXR0b25GbGV4Q29udGFpbmVyOiB7XG4gICAgICAgICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICAgICAgICBoZWlnaHQ6ICcxMDAlJyxcbiAgICAgICAgICAgIGZsZXhXcmFwOiAnbm93cmFwJyxcbiAgICAgICAgICAgIGp1c3RpZnlDb250ZW50OiAnY2VudGVyJyxcbiAgICAgICAgICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgICAgICB9LFxuICAgICAgICBzcGxpdEJ1dHRvbkNvbnRhaW5lckRpc2FibGVkOiB7XG4gICAgICAgICAgICBvdXRsaW5lOiAnbm9uZScsXG4gICAgICAgICAgICBib3JkZXI6ICdub25lJyxcbiAgICAgICAgICAgIHNlbGVjdG9yczogKF9vID0ge30sXG4gICAgICAgICAgICAgICAgX29bSGlnaENvbnRyYXN0U2VsZWN0b3JdID0gX19hc3NpZ24oeyBjb2xvcjogJ0dyYXlUZXh0JywgYm9yZGVyQ29sb3I6ICdHcmF5VGV4dCcsIGJhY2tncm91bmRDb2xvcjogJ1dpbmRvdycgfSwgZ2V0SGlnaENvbnRyYXN0Tm9BZGp1c3RTdHlsZSgpKSxcbiAgICAgICAgICAgICAgICBfbyksXG4gICAgICAgIH0sXG4gICAgICAgIHNwbGl0QnV0dG9uTWVudUZvY3VzZWQ6IF9fYXNzaWduKHt9LCBnZXRGb2N1c1N0eWxlKHRoZW1lLCB7IGhpZ2hDb250cmFzdFN0eWxlOiBidXR0b25IaWdoQ29udHJhc3RGb2N1cywgaW5zZXQ6IDIgfSkpLFxuICAgIH07XG4gICAgcmV0dXJuIGNvbmNhdFN0eWxlU2V0cyhzcGxpdEJ1dHRvblN0eWxlcywgY3VzdG9tU3R5bGVzKTtcbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9U3BsaXRCdXR0b24uc3R5bGVzLmpzLm1hcCIsImltcG9ydCB7IGNvbmNhdFN0eWxlU2V0cywgRm9udFdlaWdodHMgfSBmcm9tICcuLi8uLi8uLi9TdHlsaW5nJztcbmltcG9ydCB7IG1lbW9pemVGdW5jdGlvbiB9IGZyb20gJy4uLy4uLy4uL1V0aWxpdGllcyc7XG5pbXBvcnQgeyBnZXRTdHlsZXMgYXMgZ2V0QmFzZUJ1dHRvblN0eWxlcyB9IGZyb20gJy4uL0Jhc2VCdXR0b24uc3R5bGVzJztcbmltcG9ydCB7IGdldFN0eWxlcyBhcyBnZXRTcGxpdEJ1dHRvblN0eWxlcyB9IGZyb20gJy4uL1NwbGl0QnV0dG9uL1NwbGl0QnV0dG9uLnN0eWxlcyc7XG5pbXBvcnQgeyBwcmltYXJ5U3R5bGVzLCBzdGFuZGFyZFN0eWxlcyB9IGZyb20gJy4uL0J1dHRvblRoZW1lcyc7XG52YXIgREVGQVVMVF9CVVRUT05fSEVJR0hUID0gJzMycHgnO1xudmFyIERFRkFVTFRfQlVUVE9OX01JTl9XSURUSCA9ICc4MHB4JztcbmV4cG9ydCB2YXIgZ2V0U3R5bGVzID0gbWVtb2l6ZUZ1bmN0aW9uKGZ1bmN0aW9uICh0aGVtZSwgY3VzdG9tU3R5bGVzLCBwcmltYXJ5KSB7XG4gICAgdmFyIGJhc2VCdXR0b25TdHlsZXMgPSBnZXRCYXNlQnV0dG9uU3R5bGVzKHRoZW1lKTtcbiAgICB2YXIgc3BsaXRCdXR0b25TdHlsZXMgPSBnZXRTcGxpdEJ1dHRvblN0eWxlcyh0aGVtZSk7XG4gICAgdmFyIGRlZmF1bHRCdXR0b25TdHlsZXMgPSB7XG4gICAgICAgIHJvb3Q6IHtcbiAgICAgICAgICAgIG1pbldpZHRoOiBERUZBVUxUX0JVVFRPTl9NSU5fV0lEVEgsXG4gICAgICAgICAgICBoZWlnaHQ6IERFRkFVTFRfQlVUVE9OX0hFSUdIVCxcbiAgICAgICAgfSxcbiAgICAgICAgbGFiZWw6IHtcbiAgICAgICAgICAgIGZvbnRXZWlnaHQ6IEZvbnRXZWlnaHRzLnNlbWlib2xkLFxuICAgICAgICB9LFxuICAgIH07XG4gICAgcmV0dXJuIGNvbmNhdFN0eWxlU2V0cyhiYXNlQnV0dG9uU3R5bGVzLCBkZWZhdWx0QnV0dG9uU3R5bGVzLCBwcmltYXJ5ID8gcHJpbWFyeVN0eWxlcyh0aGVtZSkgOiBzdGFuZGFyZFN0eWxlcyh0aGVtZSksIHNwbGl0QnV0dG9uU3R5bGVzLCBjdXN0b21TdHlsZXMpO1xufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1EZWZhdWx0QnV0dG9uLnN0eWxlcy5qcy5tYXAiLCJpbXBvcnQgeyBfX2Fzc2lnbiB9IGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgSGlnaENvbnRyYXN0U2VsZWN0b3IsIGdldEhpZ2hDb250cmFzdE5vQWRqdXN0U3R5bGUgfSBmcm9tICcuLi8uLi9TdHlsaW5nJztcbmltcG9ydCB7IElzRm9jdXNWaXNpYmxlQ2xhc3NOYW1lIH0gZnJvbSAnLi4vLi4vVXRpbGl0aWVzJztcbnZhciBzcGxpdEJ1dHRvbkRpdmlkZXJCYXNlU3R5bGVzID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB7XG4gICAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgICB3aWR0aDogMSxcbiAgICAgICAgcmlnaHQ6IDMxLFxuICAgICAgICB0b3A6IDgsXG4gICAgICAgIGJvdHRvbTogOCxcbiAgICB9O1xufTtcbmV4cG9ydCBmdW5jdGlvbiBzdGFuZGFyZFN0eWxlcyh0aGVtZSkge1xuICAgIHZhciBfYSwgX2IsIF9jLCBfZCwgX2U7XG4gICAgdmFyIHMgPSB0aGVtZS5zZW1hbnRpY0NvbG9ycywgcCA9IHRoZW1lLnBhbGV0dGU7XG4gICAgdmFyIGJ1dHRvbkJhY2tncm91bmQgPSBzLmJ1dHRvbkJhY2tncm91bmQ7XG4gICAgdmFyIGJ1dHRvbkJhY2tncm91bmRQcmVzc2VkID0gcy5idXR0b25CYWNrZ3JvdW5kUHJlc3NlZDtcbiAgICB2YXIgYnV0dG9uQmFja2dyb3VuZEhvdmVyZWQgPSBzLmJ1dHRvbkJhY2tncm91bmRIb3ZlcmVkO1xuICAgIHZhciBidXR0b25CYWNrZ3JvdW5kRGlzYWJsZWQgPSBzLmJ1dHRvbkJhY2tncm91bmREaXNhYmxlZDtcbiAgICB2YXIgYnV0dG9uVGV4dCA9IHMuYnV0dG9uVGV4dDtcbiAgICB2YXIgYnV0dG9uVGV4dEhvdmVyZWQgPSBzLmJ1dHRvblRleHRIb3ZlcmVkO1xuICAgIHZhciBidXR0b25UZXh0RGlzYWJsZWQgPSBzLmJ1dHRvblRleHREaXNhYmxlZDtcbiAgICB2YXIgYnV0dG9uVGV4dENoZWNrZWQgPSBzLmJ1dHRvblRleHRDaGVja2VkO1xuICAgIHZhciBidXR0b25UZXh0Q2hlY2tlZEhvdmVyZWQgPSBzLmJ1dHRvblRleHRDaGVja2VkSG92ZXJlZDtcbiAgICByZXR1cm4ge1xuICAgICAgICByb290OiB7XG4gICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IGJ1dHRvbkJhY2tncm91bmQsXG4gICAgICAgICAgICBjb2xvcjogYnV0dG9uVGV4dCxcbiAgICAgICAgfSxcbiAgICAgICAgcm9vdEhvdmVyZWQ6IHtcbiAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogYnV0dG9uQmFja2dyb3VuZEhvdmVyZWQsXG4gICAgICAgICAgICBjb2xvcjogYnV0dG9uVGV4dEhvdmVyZWQsXG4gICAgICAgICAgICBzZWxlY3RvcnM6IChfYSA9IHt9LFxuICAgICAgICAgICAgICAgIF9hW0hpZ2hDb250cmFzdFNlbGVjdG9yXSA9IHtcbiAgICAgICAgICAgICAgICAgICAgYm9yZGVyQ29sb3I6ICdIaWdobGlnaHQnLFxuICAgICAgICAgICAgICAgICAgICBjb2xvcjogJ0hpZ2hsaWdodCcsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBfYSksXG4gICAgICAgIH0sXG4gICAgICAgIHJvb3RQcmVzc2VkOiB7XG4gICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IGJ1dHRvbkJhY2tncm91bmRQcmVzc2VkLFxuICAgICAgICAgICAgY29sb3I6IGJ1dHRvblRleHRDaGVja2VkLFxuICAgICAgICB9LFxuICAgICAgICByb290RXhwYW5kZWQ6IHtcbiAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogYnV0dG9uQmFja2dyb3VuZFByZXNzZWQsXG4gICAgICAgICAgICBjb2xvcjogYnV0dG9uVGV4dENoZWNrZWQsXG4gICAgICAgIH0sXG4gICAgICAgIHJvb3RDaGVja2VkOiB7XG4gICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IGJ1dHRvbkJhY2tncm91bmRQcmVzc2VkLFxuICAgICAgICAgICAgY29sb3I6IGJ1dHRvblRleHRDaGVja2VkLFxuICAgICAgICB9LFxuICAgICAgICByb290Q2hlY2tlZEhvdmVyZWQ6IHtcbiAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogYnV0dG9uQmFja2dyb3VuZFByZXNzZWQsXG4gICAgICAgICAgICBjb2xvcjogYnV0dG9uVGV4dENoZWNrZWRIb3ZlcmVkLFxuICAgICAgICB9LFxuICAgICAgICByb290RGlzYWJsZWQ6IHtcbiAgICAgICAgICAgIGNvbG9yOiBidXR0b25UZXh0RGlzYWJsZWQsXG4gICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IGJ1dHRvbkJhY2tncm91bmREaXNhYmxlZCxcbiAgICAgICAgICAgIHNlbGVjdG9yczogKF9iID0ge30sXG4gICAgICAgICAgICAgICAgX2JbSGlnaENvbnRyYXN0U2VsZWN0b3JdID0ge1xuICAgICAgICAgICAgICAgICAgICBjb2xvcjogJ0dyYXlUZXh0JyxcbiAgICAgICAgICAgICAgICAgICAgYm9yZGVyQ29sb3I6ICdHcmF5VGV4dCcsXG4gICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogJ1dpbmRvdycsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBfYiksXG4gICAgICAgIH0sXG4gICAgICAgIC8vIFNwbGl0IGJ1dHRvbiBzdHlsZXNcbiAgICAgICAgc3BsaXRCdXR0b25Db250YWluZXI6IHtcbiAgICAgICAgICAgIHNlbGVjdG9yczogKF9jID0ge30sXG4gICAgICAgICAgICAgICAgX2NbSGlnaENvbnRyYXN0U2VsZWN0b3JdID0ge1xuICAgICAgICAgICAgICAgICAgICBib3JkZXI6ICdub25lJyxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIF9jKSxcbiAgICAgICAgfSxcbiAgICAgICAgc3BsaXRCdXR0b25NZW51QnV0dG9uOiB7XG4gICAgICAgICAgICBjb2xvcjogcC53aGl0ZSxcbiAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogJ3RyYW5zcGFyZW50JyxcbiAgICAgICAgICAgIHNlbGVjdG9yczoge1xuICAgICAgICAgICAgICAgICc6aG92ZXInOiB7XG4gICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogcC5uZXV0cmFsTGlnaHQsXG4gICAgICAgICAgICAgICAgICAgIHNlbGVjdG9yczogKF9kID0ge30sXG4gICAgICAgICAgICAgICAgICAgICAgICBfZFtIaWdoQ29udHJhc3RTZWxlY3Rvcl0gPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6ICdIaWdobGlnaHQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIF9kKSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgICAgc3BsaXRCdXR0b25NZW51QnV0dG9uRGlzYWJsZWQ6IHtcbiAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogcy5idXR0b25CYWNrZ3JvdW5kRGlzYWJsZWQsXG4gICAgICAgICAgICBzZWxlY3RvcnM6IHtcbiAgICAgICAgICAgICAgICAnOmhvdmVyJzoge1xuICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IHMuYnV0dG9uQmFja2dyb3VuZERpc2FibGVkLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgICBzcGxpdEJ1dHRvbkRpdmlkZXI6IF9fYXNzaWduKF9fYXNzaWduKHt9LCBzcGxpdEJ1dHRvbkRpdmlkZXJCYXNlU3R5bGVzKCkpLCB7IGJhY2tncm91bmRDb2xvcjogcC5uZXV0cmFsVGVydGlhcnlBbHQsIHNlbGVjdG9yczogKF9lID0ge30sXG4gICAgICAgICAgICAgICAgX2VbSGlnaENvbnRyYXN0U2VsZWN0b3JdID0ge1xuICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6ICdXaW5kb3dUZXh0JyxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIF9lKSB9KSxcbiAgICAgICAgc3BsaXRCdXR0b25EaXZpZGVyRGlzYWJsZWQ6IHtcbiAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUucGFsZXR0ZS5uZXV0cmFsVGVydGlhcnlBbHQsXG4gICAgICAgIH0sXG4gICAgICAgIHNwbGl0QnV0dG9uTWVudUJ1dHRvbkNoZWNrZWQ6IHtcbiAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogcC5uZXV0cmFsUXVhdGVybmFyeUFsdCxcbiAgICAgICAgICAgIHNlbGVjdG9yczoge1xuICAgICAgICAgICAgICAgICc6aG92ZXInOiB7XG4gICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogcC5uZXV0cmFsUXVhdGVybmFyeUFsdCxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgICAgc3BsaXRCdXR0b25NZW51QnV0dG9uRXhwYW5kZWQ6IHtcbiAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogcC5uZXV0cmFsUXVhdGVybmFyeUFsdCxcbiAgICAgICAgICAgIHNlbGVjdG9yczoge1xuICAgICAgICAgICAgICAgICc6aG92ZXInOiB7XG4gICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogcC5uZXV0cmFsUXVhdGVybmFyeUFsdCxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgICAgc3BsaXRCdXR0b25NZW51SWNvbjoge1xuICAgICAgICAgICAgY29sb3I6IHMuYnV0dG9uVGV4dCxcbiAgICAgICAgfSxcbiAgICAgICAgc3BsaXRCdXR0b25NZW51SWNvbkRpc2FibGVkOiB7XG4gICAgICAgICAgICBjb2xvcjogcy5idXR0b25UZXh0RGlzYWJsZWQsXG4gICAgICAgIH0sXG4gICAgfTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBwcmltYXJ5U3R5bGVzKHRoZW1lKSB7XG4gICAgdmFyIF9hLCBfYiwgX2MsIF9kLCBfZSwgX2YsIF9nLCBfaCwgX2o7XG4gICAgdmFyIHAgPSB0aGVtZS5wYWxldHRlLCBzID0gdGhlbWUuc2VtYW50aWNDb2xvcnM7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgcm9vdDoge1xuICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiBzLnByaW1hcnlCdXR0b25CYWNrZ3JvdW5kLFxuICAgICAgICAgICAgYm9yZGVyOiBcIjFweCBzb2xpZCBcIiArIHMucHJpbWFyeUJ1dHRvbkJhY2tncm91bmQsXG4gICAgICAgICAgICBjb2xvcjogcy5wcmltYXJ5QnV0dG9uVGV4dCxcbiAgICAgICAgICAgIHNlbGVjdG9yczogKF9hID0ge30sXG4gICAgICAgICAgICAgICAgX2FbSGlnaENvbnRyYXN0U2VsZWN0b3JdID0gX19hc3NpZ24oeyBjb2xvcjogJ1dpbmRvdycsIGJhY2tncm91bmRDb2xvcjogJ1dpbmRvd1RleHQnLCBib3JkZXJDb2xvcjogJ1dpbmRvd1RleHQnIH0sIGdldEhpZ2hDb250cmFzdE5vQWRqdXN0U3R5bGUoKSksXG4gICAgICAgICAgICAgICAgX2FbXCIuXCIgKyBJc0ZvY3VzVmlzaWJsZUNsYXNzTmFtZSArIFwiICY6Zm9jdXNcIl0gPSB7XG4gICAgICAgICAgICAgICAgICAgIHNlbGVjdG9yczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgJzphZnRlcic6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBib3JkZXI6IFwibm9uZVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG91dGxpbmVDb2xvcjogcC53aGl0ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBfYSksXG4gICAgICAgIH0sXG4gICAgICAgIHJvb3RIb3ZlcmVkOiB7XG4gICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IHMucHJpbWFyeUJ1dHRvbkJhY2tncm91bmRIb3ZlcmVkLFxuICAgICAgICAgICAgYm9yZGVyOiBcIjFweCBzb2xpZCBcIiArIHMucHJpbWFyeUJ1dHRvbkJhY2tncm91bmRIb3ZlcmVkLFxuICAgICAgICAgICAgY29sb3I6IHMucHJpbWFyeUJ1dHRvblRleHRIb3ZlcmVkLFxuICAgICAgICAgICAgc2VsZWN0b3JzOiAoX2IgPSB7fSxcbiAgICAgICAgICAgICAgICBfYltIaWdoQ29udHJhc3RTZWxlY3Rvcl0gPSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbG9yOiAnV2luZG93JyxcbiAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiAnSGlnaGxpZ2h0JyxcbiAgICAgICAgICAgICAgICAgICAgYm9yZGVyQ29sb3I6ICdIaWdobGlnaHQnLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgX2IpLFxuICAgICAgICB9LFxuICAgICAgICByb290UHJlc3NlZDoge1xuICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiBzLnByaW1hcnlCdXR0b25CYWNrZ3JvdW5kUHJlc3NlZCxcbiAgICAgICAgICAgIGJvcmRlcjogXCIxcHggc29saWQgXCIgKyBzLnByaW1hcnlCdXR0b25CYWNrZ3JvdW5kUHJlc3NlZCxcbiAgICAgICAgICAgIGNvbG9yOiBzLnByaW1hcnlCdXR0b25UZXh0UHJlc3NlZCxcbiAgICAgICAgICAgIHNlbGVjdG9yczogKF9jID0ge30sXG4gICAgICAgICAgICAgICAgX2NbSGlnaENvbnRyYXN0U2VsZWN0b3JdID0gX19hc3NpZ24oeyBjb2xvcjogJ1dpbmRvdycsIGJhY2tncm91bmRDb2xvcjogJ1dpbmRvd1RleHQnLCBib3JkZXJDb2xvcjogJ1dpbmRvd1RleHQnIH0sIGdldEhpZ2hDb250cmFzdE5vQWRqdXN0U3R5bGUoKSksXG4gICAgICAgICAgICAgICAgX2MpLFxuICAgICAgICB9LFxuICAgICAgICByb290RXhwYW5kZWQ6IHtcbiAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogcy5wcmltYXJ5QnV0dG9uQmFja2dyb3VuZFByZXNzZWQsXG4gICAgICAgICAgICBjb2xvcjogcy5wcmltYXJ5QnV0dG9uVGV4dFByZXNzZWQsXG4gICAgICAgIH0sXG4gICAgICAgIHJvb3RDaGVja2VkOiB7XG4gICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IHMucHJpbWFyeUJ1dHRvbkJhY2tncm91bmRQcmVzc2VkLFxuICAgICAgICAgICAgY29sb3I6IHMucHJpbWFyeUJ1dHRvblRleHRQcmVzc2VkLFxuICAgICAgICB9LFxuICAgICAgICByb290Q2hlY2tlZEhvdmVyZWQ6IHtcbiAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogcy5wcmltYXJ5QnV0dG9uQmFja2dyb3VuZFByZXNzZWQsXG4gICAgICAgICAgICBjb2xvcjogcy5wcmltYXJ5QnV0dG9uVGV4dFByZXNzZWQsXG4gICAgICAgIH0sXG4gICAgICAgIHJvb3REaXNhYmxlZDoge1xuICAgICAgICAgICAgY29sb3I6IHMucHJpbWFyeUJ1dHRvblRleHREaXNhYmxlZCxcbiAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogcy5wcmltYXJ5QnV0dG9uQmFja2dyb3VuZERpc2FibGVkLFxuICAgICAgICAgICAgc2VsZWN0b3JzOiAoX2QgPSB7fSxcbiAgICAgICAgICAgICAgICBfZFtIaWdoQ29udHJhc3RTZWxlY3Rvcl0gPSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbG9yOiAnR3JheVRleHQnLFxuICAgICAgICAgICAgICAgICAgICBib3JkZXJDb2xvcjogJ0dyYXlUZXh0JyxcbiAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiAnV2luZG93JyxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIF9kKSxcbiAgICAgICAgfSxcbiAgICAgICAgLy8gU3BsaXQgYnV0dG9uIHN0eWxlc1xuICAgICAgICBzcGxpdEJ1dHRvbkNvbnRhaW5lcjoge1xuICAgICAgICAgICAgc2VsZWN0b3JzOiAoX2UgPSB7fSxcbiAgICAgICAgICAgICAgICBfZVtIaWdoQ29udHJhc3RTZWxlY3Rvcl0gPSB7XG4gICAgICAgICAgICAgICAgICAgIGJvcmRlcjogJ25vbmUnLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgX2UpLFxuICAgICAgICB9LFxuICAgICAgICBzcGxpdEJ1dHRvbkRpdmlkZXI6IF9fYXNzaWduKF9fYXNzaWduKHt9LCBzcGxpdEJ1dHRvbkRpdmlkZXJCYXNlU3R5bGVzKCkpLCB7IGJhY2tncm91bmRDb2xvcjogcC53aGl0ZSwgc2VsZWN0b3JzOiAoX2YgPSB7fSxcbiAgICAgICAgICAgICAgICBfZltIaWdoQ29udHJhc3RTZWxlY3Rvcl0gPSB7XG4gICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogJ1dpbmRvdycsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBfZikgfSksXG4gICAgICAgIHNwbGl0QnV0dG9uTWVudUJ1dHRvbjoge1xuICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiBzLnByaW1hcnlCdXR0b25CYWNrZ3JvdW5kLFxuICAgICAgICAgICAgY29sb3I6IHMucHJpbWFyeUJ1dHRvblRleHQsXG4gICAgICAgICAgICBzZWxlY3RvcnM6IChfZyA9IHt9LFxuICAgICAgICAgICAgICAgIF9nW0hpZ2hDb250cmFzdFNlbGVjdG9yXSA9IHtcbiAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiAnV2luZG93VGV4dCcsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBfZ1snOmhvdmVyJ10gPSB7XG4gICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogcy5wcmltYXJ5QnV0dG9uQmFja2dyb3VuZEhvdmVyZWQsXG4gICAgICAgICAgICAgICAgICAgIHNlbGVjdG9yczogKF9oID0ge30sXG4gICAgICAgICAgICAgICAgICAgICAgICBfaFtIaWdoQ29udHJhc3RTZWxlY3Rvcl0gPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6ICdIaWdobGlnaHQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIF9oKSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIF9nKSxcbiAgICAgICAgfSxcbiAgICAgICAgc3BsaXRCdXR0b25NZW51QnV0dG9uRGlzYWJsZWQ6IHtcbiAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogcy5wcmltYXJ5QnV0dG9uQmFja2dyb3VuZERpc2FibGVkLFxuICAgICAgICAgICAgc2VsZWN0b3JzOiB7XG4gICAgICAgICAgICAgICAgJzpob3Zlcic6IHtcbiAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiBzLnByaW1hcnlCdXR0b25CYWNrZ3JvdW5kRGlzYWJsZWQsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICAgIHNwbGl0QnV0dG9uTWVudUJ1dHRvbkNoZWNrZWQ6IHtcbiAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogcy5wcmltYXJ5QnV0dG9uQmFja2dyb3VuZFByZXNzZWQsXG4gICAgICAgICAgICBzZWxlY3RvcnM6IHtcbiAgICAgICAgICAgICAgICAnOmhvdmVyJzoge1xuICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IHMucHJpbWFyeUJ1dHRvbkJhY2tncm91bmRQcmVzc2VkLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgICBzcGxpdEJ1dHRvbk1lbnVCdXR0b25FeHBhbmRlZDoge1xuICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiBzLnByaW1hcnlCdXR0b25CYWNrZ3JvdW5kUHJlc3NlZCxcbiAgICAgICAgICAgIHNlbGVjdG9yczoge1xuICAgICAgICAgICAgICAgICc6aG92ZXInOiB7XG4gICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogcy5wcmltYXJ5QnV0dG9uQmFja2dyb3VuZFByZXNzZWQsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICAgIHNwbGl0QnV0dG9uTWVudUljb246IHtcbiAgICAgICAgICAgIGNvbG9yOiBzLnByaW1hcnlCdXR0b25UZXh0LFxuICAgICAgICB9LFxuICAgICAgICBzcGxpdEJ1dHRvbk1lbnVJY29uRGlzYWJsZWQ6IHtcbiAgICAgICAgICAgIGNvbG9yOiBwLm5ldXRyYWxUZXJ0aWFyeSxcbiAgICAgICAgICAgIHNlbGVjdG9yczogKF9qID0ge30sXG4gICAgICAgICAgICAgICAgX2pbSGlnaENvbnRyYXN0U2VsZWN0b3JdID0ge1xuICAgICAgICAgICAgICAgICAgICBjb2xvcjogJ0dyYXlUZXh0JyxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIF9qKSxcbiAgICAgICAgfSxcbiAgICB9O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9QnV0dG9uVGhlbWVzLmpzLm1hcCIsImltcG9ydCB7IF9fYXNzaWduLCBfX2RlY29yYXRlLCBfX2V4dGVuZHMgfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IEJhc2VCdXR0b24gfSBmcm9tICcuLi9CYXNlQnV0dG9uJztcbmltcG9ydCB7IGN1c3RvbWl6YWJsZSwgbnVsbFJlbmRlciB9IGZyb20gJy4uLy4uLy4uL1V0aWxpdGllcyc7XG5pbXBvcnQgeyBnZXRTdHlsZXMgfSBmcm9tICcuL0RlZmF1bHRCdXR0b24uc3R5bGVzJztcbi8qKlxuICoge0Bkb2NDYXRlZ29yeSBCdXR0b259XG4gKi9cbnZhciBEZWZhdWx0QnV0dG9uID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhEZWZhdWx0QnV0dG9uLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIERlZmF1bHRCdXR0b24oKSB7XG4gICAgICAgIHJldHVybiBfc3VwZXIgIT09IG51bGwgJiYgX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgICB9XG4gICAgRGVmYXVsdEJ1dHRvbi5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX2EgPSB0aGlzLnByb3BzLCBfYiA9IF9hLnByaW1hcnksIHByaW1hcnkgPSBfYiA9PT0gdm9pZCAwID8gZmFsc2UgOiBfYiwgc3R5bGVzID0gX2Euc3R5bGVzLCB0aGVtZSA9IF9hLnRoZW1lO1xuICAgICAgICByZXR1cm4gKFJlYWN0LmNyZWF0ZUVsZW1lbnQoQmFzZUJ1dHRvbiwgX19hc3NpZ24oe30sIHRoaXMucHJvcHMsIHsgdmFyaWFudENsYXNzTmFtZTogcHJpbWFyeSA/ICdtcy1CdXR0b24tLXByaW1hcnknIDogJ21zLUJ1dHRvbi0tZGVmYXVsdCcsIHN0eWxlczogZ2V0U3R5bGVzKHRoZW1lLCBzdHlsZXMsIHByaW1hcnkpLCBvblJlbmRlckRlc2NyaXB0aW9uOiBudWxsUmVuZGVyIH0pKSk7XG4gICAgfTtcbiAgICBEZWZhdWx0QnV0dG9uID0gX19kZWNvcmF0ZShbXG4gICAgICAgIGN1c3RvbWl6YWJsZSgnRGVmYXVsdEJ1dHRvbicsIFsndGhlbWUnLCAnc3R5bGVzJ10sIHRydWUpXG4gICAgXSwgRGVmYXVsdEJ1dHRvbik7XG4gICAgcmV0dXJuIERlZmF1bHRCdXR0b247XG59KFJlYWN0LkNvbXBvbmVudCkpO1xuZXhwb3J0IHsgRGVmYXVsdEJ1dHRvbiB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9RGVmYXVsdEJ1dHRvbi5qcy5tYXAiLCJpbXBvcnQgeyBfX2Fzc2lnbiwgX19kZWNvcmF0ZSwgX19leHRlbmRzIH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBjdXN0b21pemFibGUsIG51bGxSZW5kZXIgfSBmcm9tICcuLi8uLi8uLi9VdGlsaXRpZXMnO1xuaW1wb3J0IHsgRGVmYXVsdEJ1dHRvbiB9IGZyb20gJy4uL0RlZmF1bHRCdXR0b24vRGVmYXVsdEJ1dHRvbic7XG4vKipcbiAqIHtAZG9jQ2F0ZWdvcnkgQnV0dG9ufVxuICovXG52YXIgUHJpbWFyeUJ1dHRvbiA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoUHJpbWFyeUJ1dHRvbiwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBQcmltYXJ5QnV0dG9uKCkge1xuICAgICAgICByZXR1cm4gX3N1cGVyICE9PSBudWxsICYmIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gICAgfVxuICAgIFByaW1hcnlCdXR0b24ucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRGVmYXVsdEJ1dHRvbiwgX19hc3NpZ24oe30sIHRoaXMucHJvcHMsIHsgcHJpbWFyeTogdHJ1ZSwgb25SZW5kZXJEZXNjcmlwdGlvbjogbnVsbFJlbmRlciB9KSk7XG4gICAgfTtcbiAgICBQcmltYXJ5QnV0dG9uID0gX19kZWNvcmF0ZShbXG4gICAgICAgIGN1c3RvbWl6YWJsZSgnUHJpbWFyeUJ1dHRvbicsIFsndGhlbWUnLCAnc3R5bGVzJ10sIHRydWUpXG4gICAgXSwgUHJpbWFyeUJ1dHRvbik7XG4gICAgcmV0dXJuIFByaW1hcnlCdXR0b247XG59KFJlYWN0LkNvbXBvbmVudCkpO1xuZXhwb3J0IHsgUHJpbWFyeUJ1dHRvbiB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9UHJpbWFyeUJ1dHRvbi5qcy5tYXAiLCJmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkge1xuICBtb2R1bGUuZXhwb3J0cyA9IF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkge1xuICAgIG8uX19wcm90b19fID0gcDtcbiAgICByZXR1cm4gbztcbiAgfSwgbW9kdWxlLmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWUsIG1vZHVsZS5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IG1vZHVsZS5leHBvcnRzO1xuICByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9zZXRQcm90b3R5cGVPZiwgbW9kdWxlLmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWUsIG1vZHVsZS5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IG1vZHVsZS5leHBvcnRzOyIsImZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7XG4gIFwiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2ZcIjtcblxuICByZXR1cm4gKG1vZHVsZS5leHBvcnRzID0gX3R5cGVvZiA9IFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIFwic3ltYm9sXCIgPT0gdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA/IGZ1bmN0aW9uIChvYmopIHtcbiAgICByZXR1cm4gdHlwZW9mIG9iajtcbiAgfSA6IGZ1bmN0aW9uIChvYmopIHtcbiAgICByZXR1cm4gb2JqICYmIFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqO1xuICB9LCBtb2R1bGUuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZSwgbW9kdWxlLmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gbW9kdWxlLmV4cG9ydHMpLCBfdHlwZW9mKG9iaik7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX3R5cGVvZiwgbW9kdWxlLmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWUsIG1vZHVsZS5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IG1vZHVsZS5leHBvcnRzOyIsImZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikge1xuICBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7XG4gICAgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpO1xuICB9XG5cbiAgcmV0dXJuIHNlbGY7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2Fzc2VydFRoaXNJbml0aWFsaXplZCwgbW9kdWxlLmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWUsIG1vZHVsZS5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IG1vZHVsZS5leHBvcnRzOyJdLCJzb3VyY2VSb290IjoiIn0=